<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>戴铭的博客 - 星光社</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ming1016.github.io/"/>
  <updated>2022-06-14T05:08:24.879Z</updated>
  <id>http://ming1016.github.io/</id>
  
  <author>
    <name>戴铭</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 LLVM</title>
    <link href="http://ming1016.github.io/2022/06/10/use-llvm/"/>
    <id>http://ming1016.github.io/2022/06/10/use-llvm/</id>
    <published>2022-06-10T09:04:31.000Z</published>
    <updated>2022-06-14T05:08:24.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇还会持续更新，增加更多用 llvm 干的事情，直到本句话被删掉为止。欢迎关注本篇。</p><p>目前在做一些编译相关调研。先前写过篇《<a href="https://ming1016.github.io/2017/03/01/deeply-analyse-llvm/">深入剖析 iOS 编译 Clang &#x2F; LLVM</a>》和《<a href="https://ming1016.github.io/2017/04/01/slides-of-deeply-analyse-llvm/">深入剖析 iOS 编译 Clang &#x2F; LLVM 直播的 Slides</a>》，内容偏理论。本篇着重对 LLVM 的使用，理论内容会很少，主要是说下如何使用 llvm 来做些事情，会有详细的操作步骤和工程示例。</p><h2 id="代码新陈代谢"><a href="#代码新陈代谢" class="headerlink" title="代码新陈代谢"></a>代码新陈代谢</h2><p>昨天看了昨天和今天 WWDC22 的 session，看到了苹果为包体积也做了很多工作，甚至不惜改 C ABI的 call convention 来达到此目的。</p><p>我很早前就做过一个方案，可以说是一个更好处理代码新陈代谢的方案，那就先说下这个。</p><h3 id="方案总体介绍"><a href="#方案总体介绍" class="headerlink" title="方案总体介绍"></a>方案总体介绍</h3><p>静态检查无法分析真实使用场景里代码是不是真的用了，或用的是否多。</p><p>动态检查来说，以前检查的方式有通过埋点查看相应代码是否有用到，还可以通过类的 isInitialized 方法来统计类是否被用到。第一个方案成本高，第二个方案范围太大，如果类都很大，那么检查结果的意义就没了。因此，需要一个能够动态检查函数和代码块级别是否使用的方法。</p><h4 id="一些现有方案和其不可用的地方"><a href="#一些现有方案和其不可用的地方" class="headerlink" title="一些现有方案和其不可用的地方"></a>一些现有方案和其不可用的地方</h4><p>下面列两个已有可检查比类更小粒度的方案。</p><h5 id="gcov"><a href="#gcov" class="headerlink" title="gcov"></a>gcov</h5><p>clang 使用 -fprofile-instr-generate -fcoverage-mapping ，swiftc 使用 -profile-generate -profile-coverage-mapping 生成 .profraw 文件。llvm-profdata merge 转成 .profdata。编译时每个文件会用 <a href="https://github.com/llvm/llvm-project/blob/main/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp">GCOVProfiling</a> 生成 .gcno 包含计数和源码的映射关系，运行时用的是 <a href="https://github.com/llvm/llvm-project/blob/main/compiler-rt/lib/profile/GCDAProfiling.c">GCDAProfiling</a> 处理回调记录运行时执行了哪些代码。最后 llvm-cov 转成报告，生成工具是 <a href="http://www.opensource.apple.com/source/gcc/gcc-5484/gcc/gcov.c">gcov</a>，生成的报告可以看到哪些代码有用到，哪些没有用。</p><p>gcov 对于线下测试够用，但无法放到线上使用。</p><h5 id="SanitizerCoverage-插桩回调函数"><a href="#SanitizerCoverage-插桩回调函数" class="headerlink" title="SanitizerCoverage 插桩回调函数"></a>SanitizerCoverage 插桩回调函数</h5><p>SanitizerCoverage 是 libfuzzer 使用的代码覆盖技术，使用 <code>-fsanitize-coverage=trace-pc-guard</code> 这个编译 flag 插入不同级别的桩，会在程序控制流图的每条边插入<code>__sanitizer_cov_trace_pc_guard</code>。</p><p>如果只对函数插桩，使用 <code>-fsanitize-coverage=func</code>,<code>trace-pc-guard</code>，只对基本块用 <code>-fsanite-coverage=bb</code>,<code>no-prune</code>,<code>trace-pc-guard</code>。swift 使用 <code>-sanitize-coverage=func</code> 和 <code>-sanitize=undefined</code> 编译 flags。</p><p>在回调函数 <code>__sanitizer_cov_trace_pc_guard_init</code> 和 <code>__sanitizer_cov_trace_pc_guard</code> 里实现自己要干的事情，比如对当前插桩地址符号化，运行后就可以得到运行时调用了哪些方法。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/use-llvm/01.png" class="lozad post-image"src="/uploads/use-llvm/01.png"></p><p>使用 SanitizerCoverage 插桩，一个是编译会很慢，另一个是插入范围难控制，上线后各方面影响不可控。SanitizerCoverage 本是用于 fuzzing 测试的一个 llvm pass，因此可以了解 SanitizerCoverage 使用的技术，自建一个专门用于代码新陈代谢的 pass 用来解决 SanitizerCoverage 和 gcov 不好用的问题。</p><h4 id="自制可插入指令的-Pass"><a href="#自制可插入指令的-Pass" class="headerlink" title="自制可插入指令的 Pass"></a>自制可插入指令的 Pass</h4><p>之所以在编译中间层插入指令而不在编译 frontend 插入代码的原因是，这样做的话能用类似 llvm-mctoll 二进制转中间层 IR 代码的方式，可对第三方这样没有 frontend 源码而只有生成的二进制产物的库进行分析。</p><p>在函数中插入执行指令执行自定功能的方法是，用 IRBuilder 使用 SetInsertPoint 设置位置，CreateCall 插入指令，插入在块的初始位置，用的是 <code>dyn_cast&lt;BinaryOperator&gt;(&amp;I)</code> 。CreateCall 调用 LLVMContextFunctionCallee 来自 <code>F.getParent()-&gt;getOrInsertFunction</code>，其第一个参数就是要执行我们自定义函数的函数名，第二个参数 FunctionType 是通过 <code>paramTypes</code> 和 <code>Type::getVoidTy</code> 根据 LLVMContext 而来。 使用编译属性可以指定要控制的函数，pass 可用 getGlobalVariable 取到 <code>llvm.global.annotations</code> ，也就是所有编译属性。 </p><p><code>F.getName().front()</code> 为 <code>\x01</code> 表示的是 OC 方法，去掉这个前缀可得到方法名，<code>.contains(&quot;_block&quot;)</code> 是闭包函数。<code>F.getName().startswith(&quot;_Z&quot;)</code> 是 C++ 函数（<code>_Z</code>、<code>__Z</code>、<code>___Z</code> 都是）。使用 <code>F.getName()</code> 判读读取一个映射表进行对比，也可以达到通过编译属性设置控制指定函数的效果。映射表里设置需要线上验证的函数集合。然后，处理函数和块计数与源码的映射关系，编译加入处理自制 pass 记录运行时代码执行情况的回调。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>pass 代码编译生成 dylib 后，在 Xcode 中使用需要替换 clang 为编译 pass 的 clang，编译 pass 的版本也要对应上。在 xconfig 中设置构建命令选项 OTHER_CFLAGS OTHER_CPLUSPLUSFLAGS 是 -Xclang -load -Xclang $pass，CC CXX 设置为替换的 clang。调试是用的 opt，可换成 opt scheme，在 Edit Scheme 里设置 opt 的启动参数。</p><p>llvm 14 后只能使用 new pm，legcy pm(pass manager) 通过 Xlang 给 clang 传参，而 new pm 不行，new pm 的 pass 让 clang 加载，一种方法是使用 -fpass-plugin，另一种是把 pass 加到 clang 的 pipeline 里，重新构建对应版本的 clang。具体来说就是 PassBuilder 的回调 registerPipelineStartEPCallback 允许 ModulePassManager 使用 addPass 添加我们的 pass。</p><p>方案是这样，接下来的内容是偏实际的一些操作，你也可以跟着实践下，毕竟本篇是说怎么使用 LLVM 嘛。</p><p>先看看 gcov 的用法。</p><h3 id="生成代码覆盖率报告"><a href="#生成代码覆盖率报告" class="headerlink" title="生成代码覆盖率报告"></a>生成代码覆盖率报告</h3><p>命令行中开启代码覆盖率的编译选项，参看官方指南：<a href="https://clang.llvm.org/docs/SourceBasedCodeCoverage.html">Source-based Code Coverage</a> 。</p><p>通过一个例子实践下。</p><p>建个 C 代码文件 main.m ：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hi there!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加上代码覆盖率的编译参数进行编译。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun clang -fprofile-instr-generate -fcoverage-mapping main.m -o mainCoverage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行生成的 mainCoverage 会生成 default.profraw 文件，自定义文件名使用 LLVM_PROFILE_FILE&#x3D;”my.profraw” .&#x2F;mainCoverage 命令。</p><p>对于 Swift 文件也没有问题，建一个 swift 文件 hi.swift </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function-definition function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function-definition function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function-definition function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 swiftc 来编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">swiftc -profile-generate -profile-coverage-mapping hi.swift<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从上面 clang 和 swiftc 的命令可以看出，clang 使用的是 -fprofile-instr-generate 和 -fcoverage-mapping 编译 flags，swiftc 使用的是 -profile-generate 和 -profile-coverage-mapping 编译 flags。</p><p>编译出的可执行文件 mainCoverage 和 hi 都会多出</p><p>生成代码覆盖率前建立索引，也就是生成 .profdata 文件。通过 xcrun 调用 llvm-prodata 命令。命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun llvm-profdata merge -sparse my.profraw -o my.profdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>合并多个 .profdata 文件使用下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">llvm-profdata merge one.profdata two.profdata -output all.profdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <a href="https://llvm.org/docs/CommandGuide/llvm-cov.html">llvm-cov</a> 命令生成行的报告</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun llvm-cov show ./mainCoverage -instr-profile<span class="token operator">=</span>my.profdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token number">1</span><span class="token operator">|</span>       <span class="token operator">|</span><span class="token comment">#include &lt;stdio.h></span> <span class="token number">2</span><span class="token operator">|</span>       <span class="token operator">|</span> <span class="token number">3</span><span class="token operator">|</span>       <span class="token operator">|</span>int main<span class="token punctuation">(</span>int argc, char *argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token number">4</span><span class="token operator">|</span>      <span class="token number">1</span><span class="token operator">|</span><span class="token punctuation">&#123;</span> <span class="token number">5</span><span class="token operator">|</span>      <span class="token number">1</span><span class="token operator">|</span>    printf<span class="token punctuation">(</span><span class="token string">"hi there!<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">6</span><span class="token operator">|</span>      <span class="token number">1</span><span class="token operator">|</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">7</span><span class="token operator">|</span>      <span class="token number">1</span><span class="token operator">|</span><span class="token punctuation">&#125;</span> <span class="token number">8</span><span class="token operator">|</span>       <span class="token operator">|</span> <span class="token number">9</span><span class="token operator">|</span>      <span class="token number">0</span><span class="token operator">|</span>void <span class="token function-name function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token operator">|</span>      <span class="token number">0</span><span class="token operator">|</span><span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token number">11</span><span class="token operator">|</span>      <span class="token number">0</span><span class="token operator">|</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的输出可以看到，9到11行是没有执行的。</p><p>从文件层面看覆盖率，可以通过下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun llvm-cov report ./mainCoverage -instr-profile<span class="token operator">=</span>my.profdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出的报告如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Filename                                  Regions    Missed Regions     Cover   Functions  Missed Functions  Executed       Lines      Missed Lines     Cover    Branches   Missed Branches     Cover-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/Users/mingdai/Downloads/PTest/main.m           <span class="token number">2</span>                 <span class="token number">1</span>    <span class="token number">50.00</span>%           <span class="token number">2</span>                 <span class="token number">1</span>    <span class="token number">50.00</span>%           <span class="token number">7</span>                 <span class="token number">3</span>    <span class="token number">57.14</span>%           <span class="token number">0</span>                 <span class="token number">0</span>         ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------TOTAL                                           <span class="token number">2</span>                 <span class="token number">1</span>    <span class="token number">50.00</span>%           <span class="token number">2</span>                 <span class="token number">1</span>    <span class="token number">50.00</span>%           <span class="token number">7</span>                 <span class="token number">3</span>    <span class="token number">57.14</span>%           <span class="token number">0</span>                 <span class="token number">0</span>         -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 JSON 的命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun llvm-cov <span class="token builtin class-name">export</span> -format<span class="token operator">=</span>text ./mainCoverage -instr-profile<span class="token operator">=</span>my.profdata <span class="token operator">></span> my.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从生成的 json 文件可以看到这个生成的报告有5个统计项，分别是函数、实例化、行、区域和分支。</p><p>更多报告生成选型参看 <a href="https://llvm.org/docs/CommandGuide/llvm-cov.html">llvm-cov 官方说明</a> 。</p><h3 id="Xcode-配置生成代码覆盖率报告"><a href="#Xcode-配置生成代码覆盖率报告" class="headerlink" title="Xcode 配置生成代码覆盖率报告"></a>Xcode 配置生成代码覆盖率报告</h3><p>在 Xcode 里开启代码覆盖率，先选择”Edit Scheme…”，再在 Test 中的 Options 里勾上 Gather coverage for all targets 或 some targets。如下图<br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/use-llvm/02.png" class="lozad post-image"src="/uploads/use-llvm/02.png"></p><p>在 Build Setting 中进行设置，添加 -profile-generate 和 -profile-coverage-mapping 编译 flags。<br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/use-llvm/03.png" class="lozad post-image"src="/uploads/use-llvm/03.png"></p><p>调用 llvm profile 的 c 函数生成 .profraw 文件。代码见：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - 代码覆盖率</span><span class="token keyword">func</span> <span class="token function-definition function">codeCoverageProfrawDump</span><span class="token punctuation">(</span>fileName<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"cc"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">fileName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.profraw"</span></span>    <span class="token keyword">let</span> fileManager <span class="token operator">=</span> <span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> documentDirectory <span class="token operator">=</span> <span class="token keyword">try</span> fileManager<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>documentDirectory<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>userDomainMask<span class="token punctuation">,</span> appropriateFor<span class="token punctuation">:</span><span class="token nil constant">nil</span><span class="token punctuation">,</span> create<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> filePath<span class="token punctuation">:</span> <span class="token class-name">NSString</span> <span class="token operator">=</span> documentDirectory<span class="token punctuation">.</span><span class="token function">appendingPathComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>path <span class="token keyword">as</span> <span class="token class-name">NSString</span>        <span class="token function">__llvm_profile_set_filename</span><span class="token punctuation">(</span>filePath<span class="token punctuation">.</span>utf8String<span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span>"<span class="token class-name">File</span> at<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>cString<span class="token punctuation">:</span> <span class="token function">__llvm_profile_get_filename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>"<span class="token punctuation">)</span>        <span class="token function">__llvm_profile_write_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>codeCoverageProfrawDump 函数放到 applicationWillTerminate 里执行，就可以生成在本次操作完后的代码覆盖率。</p><p>通过 llvm-cov report 命令将 .profraw 和生成的 Mach-O 文件关联输出代码覆盖率的报告，完整实现和调试看，参看 <a href="https://github.com/ming1016/DaiMingCreationToolbox/tree/main/Project/SwiftPamphletApp">DaiMingCreationToolbox</a> 里的 FundationFunction.swift 和 SwiftPamphletAppApp.swift 文件。</p><h3 id="Fuzzing-介绍"><a href="#Fuzzing-介绍" class="headerlink" title="Fuzzing 介绍"></a>Fuzzing 介绍</h3><p>另外，llvm 还提供另一种覆盖率输出，编译参数是 -fprofile-arcs -ftest-coverage 和链接参数 -lgcov，运行程序后会生成 .gcda 和 .gcno 文件，使用 lcov 或 gcovr 就可以生成一个 html 来查看覆盖率。</p><p>之所以能够输出代码覆盖率，主要是 llvm 在编译期间给函数、基本块（IDA 中以指令跳转当分界线的每块代码）和边界（较基本块多了执行边界信息）插了桩。插桩的函数也有回调，如果想使用插桩函数的回调，有源码可以使用 SanitizerCoverage， 官方说明见：<a href="https://clang.llvm.org/docs/SanitizerCoverage.html">SanitizerCoverage</a>。</p><p>SanitizerCoverage 用的是 ModulePass，是 llvm 提供的 ModulePass、CallGraphSCCPass、FunctionPass、LoopPass、RegionPass 这几个插桩 pass 中的一种。SanitizerCoverage 还应用在 llvm 的 Fuzz 生成器 <a href="https://llvm.org/docs/LibFuzzer.html">libfuzzer</a> 上，libfuzzer 可以从硬件和 IR 层面进行插桩获取程序的覆盖率。</p><p>Fuzzing 生成器的概念最早是威斯康星大学 Barton Miller 教授在<a href="https://pages.cs.wisc.edu/~bart/fuzz/CS736-Projects-f1988.pdf">他的课</a>上提出的，后应用于安全测试领域，比如 <a href="https://rd.springer.com/content/pdf/10.1007%2F978-0-387-35413-2_16.pdf">PROTOS 测试集项目</a>、网络协议安全测试 SPIKE、最普遍应用的文件 Fuzzing 技术 Peach、语法模板 <a href="https://github.com/MozillaSecurity/funfuzz">funfuzz</a> 和 Dom fuzz 的 <a href="https://github.com/googleprojectzero/domato">Domato</a>、分析 llvm IR 符号执行平台 <a href="http://klee.github.io/">Klee</a>、源码插桩和 QEMU 模式实现代码覆盖 fuzzing 的 AFL 和刚才我提到的 llvm 自带基于 SanitizerCoverage 的 libfuzzer、挖掘系统内核漏洞的系统函数调用模板 Fuzzing 库 syzkaller 和基于 libfuzzer 和 protobuf 做的 <a href="https://github.com/google/libprotobuf-mutator">libprotobuf-mutator</a>、组合了 libFuzzer，<a href="https://github.com/AFLplusplus/AFLplusplus">AFL++</a> 和 <a href="https://github.com/google/honggfuzz">Honggfuzz</a> 还有 ClusterFuzz 的平台 <a href="https://github.com/google/oss-fuzz">OSS-Fuzz</a>。</p><p>其中 Spike 是网络协议开源 Fuzzing 工具，由 Dave Aitel 编写的，Dave Aitel 是《the Hacker’s Handbook》（《黑客防范手册》）和《the Shellcoder’s Handbook》（《黑客攻防技术宝典：系统实战篇》）的作者。网络协议分析工具主要是 WireShark 和应用层的 SockMon（特定进程、协议、IP、函数抓包），和 IDA、OD 等工具结合找到软件执行的网络命令分析数据包的处理过程。Spike 可以对数据发包收包，还可以构造数据包自动化做覆盖更大的测试。</p><p>QEMU 是 2003 年 Fabrice Bellard 做的虚拟机，包含很多架构和硬件设备的模拟执行，原理是 qemu TCG 模块把机器代码转成 llvm IR，这个过程叫做反编译，关于反编译可以参考这篇论文《<a href="https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_andriesse.pdf">An In-Depth Analysis of Disassembly on Full-Scale x86&#x2F;x64 Binaries</a>》。之所以可以做到反编译是因为机器指令和汇编指令是一一对应的，可以先将机器指令翻译成机器对应的汇编，IR 实际上就是一个不遵循硬件设计的指令集，和硬件相关的汇编会按照 IR 的设计翻译成机器无关的 IR 指令。这样做的好处就是无论是哪个机器上的可执行二进制文件都能够统一成一份标准的指令表示。IR 也可以设计成 DSL，比如 <a href="https://github.com/NationalSecurityAgency/ghidra">Ghidra</a> 的 Sleigh 语言。</p><p>反编译后，再将得到的 IR 转成目标硬件设备可执行机器语言，IDA Pro 也是用的这个原理，IDA 的 IR 叫 microcode，IDA 的插件 <a href="https://github.com/patois/genmc">genmc</a> 专门用来显示 microcode，<a href="https://github.com/RolfRolles/HexRaysDeob">HexRaysDeob</a> 是利用 microcode 来做混淆的库。</p><p>qemu 做的是没有源码的二进制程序的分析，是一个完整的虚拟机工具，其中只有 tcg 模块的一部分功能就可以实现模拟 CPU 执行，执行过程中插入分析的代码就能够方便的访问寄存器，对地址或指令 hook，实现这些功能的库是 <a href="https://github.com/unicorn-engine/unicorn">Unicorn</a>，还有功能更多些的 <a href="https://github.com/qilingframework/qiling">Qiling</a>。Qiling 和 Unicorn 不同的是 Unicorn 只完成了 CPU 指令的仿真，而 Qiling 可以处理更高层次的动态库、系统调用、I&#x2F;O 处理或 Mach-O 加载等，Qiling 还可以通过 Python 开发自己动态分析工具，运行时进行 hotpatch，支持 macOS。基于 qemu 还有可以访问执行的所有代码和数据做回放程序执行过程的 <a href="https://github.com/panda-re/panda">PANDA</a>、虚拟地址消毒剂 <a href="https://github.com/andreafioraldi/qasan">QASan</a>、组合 Klee 和 qemu 的 <a href="https://s2e.systems/">S2E</a>。</p><p>能够使用 js 来开发免编译功能的 <a href="https://frida.re/">Frida</a> 也可以用于 Fuzzing，在 iOS 平台上的 Fuzzing 参看<a href="https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-1.html">1</a>、<a href="https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-2.html">2</a>、<a href="https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-3.html">3</a>，使用工具见 <a href="https://github.com/googleprojectzero/iOS-messaging-tools/tree/master/iMessage">iOS-messaging-tools</a>。</p><p>更多 Fuzzing 资料可以参看 GitHub 上一份整理好的 <a href="https://github.com/secfigo/Awesome-Fuzzing">Awesome-Fuzzing</a>。</p><p>可见 Fuzzing 生成器应用范围非常广，除了获取代码覆盖率，还能够进行网络安全分析和安全漏洞分析。本文主要是基于源码插桩，源码插桩库主要是 libfuzzer、AFL++、honggfuzz、riufuzz（honggfuzz 二次开发）。</p><p>AFL++ 在有源码情况下原理和 libfuzzer 差不多，只是底层不是用的 SanitizerCoverage，而是自实现的一个 pass，没有源码时 AFL++ 用的就是 qemu 中 TCG 模块的代码，在反编译为 IR 时进行插桩。更多 AFL++ 应用参见《<a href="https://github.com/google/fuzzing/blob/master/docs/afl-based-fuzzers-overview.md">What is AFL and What is it Good for?</a>》</p><p>Fuzzing 除了代码覆盖率，还需要又能够创建更多输出条件，记录执行路径，目标和方向是找出程序运行时在什么输入条件和路径下会有问题。但仅是检测哪些代码有用到，实际上只要用上 Fuzzing 的代码覆盖率就可以了。</p><h3 id="SanitizerCoverage-插桩回调函数-1"><a href="#SanitizerCoverage-插桩回调函数-1" class="headerlink" title="SanitizerCoverage 插桩回调函数"></a>SanitizerCoverage 插桩回调函数</h3><p>那接下来实践下 libfuzzer 中实现代码覆盖率的 SanitizerCoverage 技术。</p><p>命令行执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun clang -fembed-bitcode main.m -save-temps -v -fsanitize-coverage<span class="token operator">=</span>trace-pc-guard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 -fsanitize-coverage&#x3D;trace-pc-guard 这个编译 flag 插入不同级别的桩，会在程序控制流图的每条边插入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">__sanitizer_cov_trace_pc_guard<span class="token punctuation">(</span><span class="token operator">&amp;</span>guard_variable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只对函数插桩，使用 <code>-fsanitize-coverage=func</code>,<code>trace-pc-guard</code>，只对基本块用 <code>-fsanite-coverage=bb</code>,<code>no-prune</code>,<code>trace-pc-guard</code>。swift 使用 <code>-sanitize-coverage=func</code> 和 <code>-sanitize=undefined</code> 编译 flags。</p><p>使用插桩函数回调，先在 Xcode 的 Other C Flags 里添加 <code>-fsanitize-coverage=trace-pc-guard</code>。swift 就是在 Other Swift Flags 里添加 <code>-sanitize-coverage=func</code> 和 <code>-sanitize=undefined</code> 。</p><p>在回调函数里实现自己要干的事情，比如对当前插桩地址符号化，代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>dlfcn<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token keyword">void</span> <span class="token function">__sanitizer_cov_trace_pc_guard_init</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>start<span class="token punctuation">,</span>   <span class="token class-name">uint32_t</span> <span class="token operator">*</span>stop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">uint64_t</span> N<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> stop <span class="token operator">||</span> <span class="token operator">*</span>start<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"INIT: %p %p\n"</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>x <span class="token operator">=</span> start<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> stop<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token operator">*</span>x <span class="token operator">=</span> <span class="token operator">++</span>N<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">__sanitizer_cov_trace_pc_guard</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>guard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>guard<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>PC <span class="token operator">=</span> <span class="token function">__builtin_return_address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Dl_info info<span class="token punctuation">;</span>    <span class="token function">dladdr</span><span class="token punctuation">(</span>PC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"调用了方法: %s \n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>dli_sname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后就可以得到运行时调用了哪些方法。</p><p>有了这些数据就可以统计哪些方法调用了，调用了多少次。通过和全源码对比，取差集能够找到运行中没有执行的方法和代码块。其实利用 Fuzzing 的概念还可以做很多分析的工作，全面数据化观测代码执行情况。可以到我的 <a href="https://github.com/ming1016/GCDFetchFeed">GCDFetchFeed</a> 工程中，打开 AppDelegate.m 里的两个插桩回调方法的注释来试用。</p><p>停止试用插桩，可以用 <code>__attribute__((no_sanitize(&quot;coverage&quot;)))</code> 编译属性。或者通过黑名单或白名单，分别是 <code>-fsanitize-coverage-ignorelist=blocklist.txt</code> 和 <code>-fsanitize-coverage-allowlist=allowlist.txt</code>，范围可以试文件夹、单个文件或者单个方法。</p><p>allowlist.txt 示例：</p><pre class="line-numbers language-none"><code class="language-none"># 允许文件夹里所有文件src:bar&#x2F;*# 特定源文件src:foo&#x2F;a.cpp# 允许文件中所有函数fun:*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>blocklist.txt 示例：</p><pre class="line-numbers language-none"><code class="language-none"># 禁用特定源文件src:bar&#x2F;b.cpp# 禁用特定函数fun:*myFunc*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上线前检查出的没有用到的代码，并不表示上线后用户不会用到，比如 AB 实验、用户特殊设置、不常见 Case 等。这就可以利用 allowlist.txt 将部分不确定的代码放到线上去检测，或者通过自动插入埋点灰度检测，这些不确定的代码不是主链路的，因此检测影响范围会很低。</p><p>SanitizerCoverage 本身是一个 llvm pass，代码在 llvm 工程的 llvm-project&#x2F;llvm&#x2F;lib&#x2F;Transforms&#x2F;Instrumentation&#x2F;SanitizerCoverage.cpp 路径下，那么怎么实现一个自定义的 pass 呢？</p><p>先把 llvm 装到本地。</p><h3 id="安装-LLVM"><a href="#安装-LLVM" class="headerlink" title="安装 LLVM"></a>安装 LLVM</h3><p>使用 homebrew，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> llvm@13<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>@13</code> 表示 llvm 的版本。安装后使用路径在是 <code>/usr/local/opt/llvm/</code>，比如 cmake 构建编译环境可以使用下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$LLVM_DIR</span><span class="token operator">=</span>/usr/local/opt/llvm/lib/cmake/llvm cmake <span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以用 Visual Studio Code 开发 pass，安装微软的 C&#x2F;C++ 的 extension，在 C&#x2F;C++ Configurations 里把 <code>/usr/local/opt/llvm/include/</code> 加入到包含路径中。</p><p>llvm 的更新使用 <code>brew upgrade llvm</code></p><p>llvm 也可以通过源码来安装，执行如下命令即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/llvm/llvm-project.git<span class="token builtin class-name">cd</span> llvm-project<span class="token function">git</span> checkout release/14.x<span class="token function">mkdir</span> build<span class="token builtin class-name">cd</span> buildcmake -DCMAKE_BUILD_TYPE<span class="token operator">=</span>Release -DLLVM_TARGETS_TO_BUILD<span class="token operator">=</span>host -DLLVM_ENABLE_PROJECTS<span class="token operator">=</span>clang <span class="token punctuation">..</span>/llvmcmake --build <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 cmake 参数 <code>-DLLVM_ENABLE_PROJECTS=clang</code> 表示也会构建 clang 工具。如果还要加上 lld 以在构建时能够用自己的 pass，可以直接加成 <code>-DLLVM_ENABLE_PROJECTS=&quot;clang;lld&quot;</code> 。</p><p>自定义安装目录的话，增加 <code>-DCMAKE_INSTALL_PREFIX=/home/user/custom-llvm</code> 。然后在设置路径 <code>export PATH=$PATH:/home/user/custom-llvm/bin</code> 。</p><p>-G 编译选项选择 Ninja 编译速度快。</p><p>各种设置整到一起：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake -G <span class="token string">"Ninja"</span> -DCMAKE_BUILD_TYPE<span class="token operator">=</span>Release -DLLVM_TARGETS_TO_BUILD<span class="token operator">=</span>host -DLLVM_ENABLE_PROJECTS<span class="token operator">=</span><span class="token string">"clang;lld"</span> -DCMAKE_INSTALL_PREFIX<span class="token operator">=</span>/Users/mingdai/Downloads/PTest/my-llvm-bin <span class="token punctuation">..</span>/llvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自制-Pass"><a href="#自制-Pass" class="headerlink" title="自制 Pass"></a>自制 Pass</h3><h4 id="Pass-介绍"><a href="#Pass-介绍" class="headerlink" title="Pass 介绍"></a>Pass 介绍</h4><p>llvm 属于 <a href="https://en.wikipedia.org/wiki/Multi-pass_compiler">multi-pass</a> 编译器，LLVM Pass 管理器是处理 pass 执行的注册和时序安排。曾有两个 pass 管理器，一个是 New Pass 管理器也叫 Pass 管理器，另一个是 Legacy Pass 管理器。New Pass 目前是默认的管理器，Legacy Pass 在 LLVM 14 中被废弃。Legacy 和 New 两个 pass 管理器在使用上最大的区别就是，Legacy 会注册一个新的命令选项，而 New Pass 只用定义一个 pass。另外 Legacy 需要实现 print 成员方法来打印，需要在通过 opt 通过传递 -analyze 命令行选项来运行，而 New Pass 管理器是不用的，只需要实现 printing pass。</p><p>总的来说<br>Legacy</p><ul><li>基于继承性</li><li>分析和打印 pass 之间没有区别</li><li>注册时加载所有需要的 pass</li><li>不变的 pass 执行调度</li><li>Transformation passes 定义了它们在执行前保证保留的内容</li></ul><p>Legacy 的 pass 类</p><ul><li><code>llvm::Pass</code><ul><li><code>llvm::ModulePass</code></li><li><code>llvm::FunctionPass</code></li><li><code>llvm::PassRegistry</code></li></ul></li></ul><p>New</p><ul><li>基于 CRTP、mixin 和 concept-model 的 idiom-based</li><li>在执行过程中，根据需要有条件的加载依赖的 pass（更快、更有效）</li><li>Transformation passes 在执行后返回它们所保留的内容</li></ul><p>New 的 pass 类</p><ul><li><code>llvm::PassInfoMixin&lt;DerivedT&gt;</code></li><li><code>llvm::AnalysisInfoMixin&lt;DerivedT&gt;</code></li><li><code>llvm::FunctionAnalysisManager</code><ul><li>别名类型 <code>llvm::AnalysisManager&lt;llvm::Function&gt;</code></li></ul></li><li><code>llvm::ModuleAnalysisManager</code><ul><li>别名类型 <code>llvm::AnalysisManager&lt;llvm::Module&gt;</code></li></ul></li><li><code>llvm::PreservedAnalysis</code></li></ul><p>LLVM Pass 可以对 LLVM IR 进行优化。优化表现在 Pass 可以对 IR 进行分析和转换，因此 Pass 主要也是分为分析（analysis）和转换（transform）两类。</p><p>分析里有数据流分析技术，分为以下三种：</p><ul><li>Reaching-Definition Analysis 到达定值分析</li><li>Live-Variable Analysis 活跃变量分析</li><li>Available-Expression Analysis 可用表达式分析</li></ul><p>一些常用的优化方法，比如删除计算结果不会使用的语句、删除归纳变量、删除公共子表达式、进入循环前就对不管循环多少次都是同样结果的表达式进行求值、快的操作替换慢操作、用可推导出值是常量的表达式来替代表达式等。</p><p>编写优化的几个方法。完整代码参看<a href="https://github.com/Kiprey/Skr_Learning/tree/master/week7-8/Assignment1-Introduction_to_LLVM">这里</a>。</p><p>插入新指令：</p><ul><li>直接通过类或命名的构造函数。</li><li>使用 llvm::IRBuilder&lt;&gt; 模板类。</li></ul><p>删除指令：</p><ul><li>llvm::Instruction::eraseFromParent() 成员函数</li></ul><p>替换存在指令：</p><ul><li>llvm::ReplaceInstWithInst() 函数<ul><li><del>#include “llvm&#x2F;Transforms&#x2F;Utils&#x2F;BasicBlockUtils.h”</del></li></ul></li></ul><p>直接改指令</p><ul><li>llvm::User::setOperand() 成员函数</li></ul><p>Value ⇒ ConstantInt 类型转换：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Type _t;ConstantInt* val &#x3D; dyn_cast&lt;ConstantInt&gt;(_t);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取 ConstantInt 类的值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ConstantInt* const_int;uint64_t val &#x3D; const_int-&gt;getZExtValue();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>替换某个指令</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Instruction inst;&#x2F;&#x2F; 替换，只是替换了引用，并没删inst.replaceAllUsesWith(val);&#x2F;&#x2F; 删除if(inst-&gt;isSafeToRemove())    inst-&gt;eraseFromParent();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的 IR 代码</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; 执行前%12 &#x3D; load i32, i32* %2, align 4%13 &#x3D; add nsw i32 %12, 0store i32 %13, i32* %3, align 4; 只替换指令引用%12 &#x3D; load i32, i32* %2, align 4%13 &#x3D; add nsw i32 %12, 0          store i32 %12, i32* %3, align 4%12 &#x3D; load i32, i32* %2, align 4store i32 %12, i32* %3, align 4Instruction referencing instruction not embedded in a basic block!  %12 &#x3D; load i32, i32* %2, align 4  &lt;badref&gt; &#x3D; add nsw i32 %12, 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立新指令</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 取出第一个操作数Value* val &#x3D; inst.getOperand(0);&#x2F;&#x2F; 确定新指令的插入位置IRBuilder&lt;&gt; builder(&amp;inst);&#x2F;&#x2F; val &lt;&lt; 1Value* newInst &#x3D; builder.CreateShl(val, 1);&#x2F;&#x2F; 替换指令inst.replaceAllUsesWith(newInst);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Analysis pass 的 print pass 是基于一个 Transformation pass，会请求原始 pass 分析的结果，并打印这些结果。会注册一个命令行选项 <code>print&lt;analysis-pass-name&gt;</code>。</p><p>实现 pass 要选择是 Analysis 还是 Transformation，也就是要对进行输入 IR 的分析还是进行转换来决定采用哪种。选择 Transformation 通常继承 PassInfoMixin。Analysis 继承 AnalysisInfoMixin。</p><p>pass 生成的插件分为动态和静态的。静态插件不需要在运行时用 -load-pass-plugin 选项进行加载，但需要在 llvm 工程中设置 CMake 重新构建 opt。</p><p>做自己 pass 前可以先了解下 llvm 内部的 <a href="https://llvm.org/docs/Passes.html">pass</a> 示例，可以先从两个最基本的 <a href="https://github.com/llvm/llvm-project/blob/release/13.x/llvm/lib/Transforms/Hello">Hello</a> 和 <a href="https://github.com/llvm/llvm-project/tree/release/13.x/llvm/examples/Bye">Bye</a> 来。比较实用的是一些做优化的 pass，这些 pass 也是学习写 pass ，了解编译器如何工作的重要资源。许多 pass 都实现了编译器开发理论中著名的概念。比如优化 memcpy 调用（比如用 memset 替换）的 <a href="https://github.com/llvm/llvm-project/blob/release/14.x/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp">memcpyopt</a> 、简化 CFG <a href="https://github.com/llvm/llvm-project/tree/release/13.x/llvm/examples/IRTransforms">IRTransforms</a>、总是内联用 alwaysinline 修饰的函数的 <a href="https://github.com/llvm/llvm-project/blob/release/14.x/llvm/lib/Transforms/IPO/AlwaysInliner.cpp">always-inline</a> 、死代码消除的 <a href="https://github.com/llvm/llvm-project/blob/release/14.x/llvm/lib/Transforms/Scalar/DCE.cpp">dce</a> 和删除未使用的循环的 <a href="https://github.com/llvm/llvm-project/blob/release/14.x/llvm/lib/Transforms/Scalar/LoopDeletion.cpp">loop-deletion</a>。</p><h4 id="自制插入指令-pass"><a href="#自制插入指令-pass" class="headerlink" title="自制插入指令 pass"></a>自制插入指令 pass</h4><p>接下来，怎么在运行时插入指令来获取我们需要代码使用情况。完整代码可以在这里 <a href="https://github.com/ming1016/DaiMingCreationToolbox/tree/main/Project/UseCompiler/MingPass">MingPass</a> 拉下代码参考进行修改调试。</p><p>个 pass 功能是在运行时环境直接在特定位置执行指定的函数。先写个要执行的函数，新建个文件 loglib.m，代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">runtimeLog</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"计算结果: %i\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再到 MingPass.cpp 中包含模块头文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"llvm/IR/Module.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会用到 Module::getOrInsertFunction 函数来给 loglib.m 的 runtimeLog 做声明。</p><p>更改 runOnFunction 函数，代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">virtual bool runOnFunction(Function &amp;F) &#123;    &#x2F;&#x2F; 从运行时库中获取函数    LLVMContext &amp;Context &#x3D; F.getContext();    std::vector&lt;Type*&gt; paramTypes &#x3D; &#123;Type::getInt32Ty(Context)&#125;;    Type *retType &#x3D; Type::getVoidTy(Context);    FunctionType *funcType &#x3D; FunctionType::get(retType, paramTypes, false);    FunctionCallee logFunc &#x3D; F.getParent()-&gt;getOrInsertFunction(&quot;runtimeLog&quot;, funcType);      for (auto &amp;BB : F) &#123; for (auto &amp;I : BB) &#123;     if (auto *op &#x3D; dyn_cast&lt;BinaryOperator&gt;(&amp;I)) &#123;  IRBuilder&lt;&gt; builder(op);                &#x2F;&#x2F; 在 op 后面加入新指令  builder.SetInsertPoint(&amp;BB, ++builder.GetInsertPoint());  &#x2F;&#x2F; 在函数中插入新指令  Value* args[] &#x3D; &#123;op&#125;;  builder.CreateCall(logFunc, args);  return true;     &#125; &#x2F;&#x2F; end if &#125;    &#125;    return false;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 build 目录下 make 出 pass 的 so 后，链接 main.m 和 loglib.m 的产物成可执行文件，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang -c loglib.m/usr/local/opt/llvm/bin/clang -flegacy-pass-manager -Xclang -load -Xclang build/src/libMingPass.so -c main.mclang main.o loglib.o./a.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入数字4后，打印如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">4</span>计算结果: <span class="token number">6</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="更多自制-pass"><a href="#更多自制-pass" class="headerlink" title="更多自制 pass"></a>更多自制 pass</h4><p>可以在<a href="https://github.com/ming1016/DaiMingCreationToolbox/tree/main/Project/UseCompiler/LeanLLVMPass">这里</a>查看，代码里有详细注释。这里先留个白，后面再添加内容。</p><h4 id="IR"><a href="#IR" class="headerlink" title="IR"></a>IR</h4><p>你会发现开发 pass 需要更多的了解 IR，才可以更好的控制 LLVM 前端处理的高级语言。接下来我会说下那些高级语言的特性是怎么在 IR 里表现的。先介绍下 IR。</p><h5 id="IR-介绍"><a href="#IR-介绍" class="headerlink" title="IR 介绍"></a>IR 介绍</h5><p>LLVM IR(Intermediate Representation) 可以称为中间代码，是 LLVM 整个编译过程的中间表示。</p><p>llvm ir 的基础块里的指令是不可跳转到基础块的中间或尾部，只能从基础块的第一个指令进入基础块。</p><p>下面是 ir 的几个特点：</p><ul><li>llvm ir  不是机器代码而是生成机器代码之前的一种有些看起来像高级语言的，比如函数和强类型，有些看起来像低级程序集，比如分支和基本块。</li><li>llvm ir 是强类型。</li><li>llvm 没有 sign 和 unsign 整数区别。</li><li>全局符号用 @ 符号开头。</li><li>本地符号用 % 符号开头。</li><li>必须定义和声明所有符号。</li></ul><p>IR 指令</p><p><em>常用指令</em></p><ul><li>alloca：分配栈空间</li><li>load：从栈和全局内存读值</li><li>store：将值写到栈或全局内存</li><li>br：分支（条件或非条件）</li><li>call：调用函数</li><li>ret：从一个函数返回，可能会带上一个返回值</li><li>icmp&#x2F;fcmp：比较整型或浮点值</li><li>add&#x2F;sub&#x2F;mul：整数二进制算术运算</li><li>fadd&#x2F;fsub&#x2F;fmul：浮点二进制算术运算</li><li>sdiv&#x2F;udiv&#x2F;fdiv：有符号位整数&#x2F;无符号位整数&#x2F;浮点除法</li><li>shl&#x2F;shr：位向左&#x2F;向右</li><li>lshr&#x2F;ashr：逻辑&#x2F;算术右移</li><li>and&#x2F;or&#x2F;xor：位逻辑运算（没有 <code>not</code>！）</li></ul><p><em>常用特殊 ir 指令</em></p><ul><li>select：根据一个没有 IR 级别分支的条件选择一个值。</li><li>phi：根据当前基本块前身选择一个值。</li><li>getelementpointer：获取数组或结构体里子元素的地址（不是值）。官方说明[[<a href="https://llvm.org/docs/GetElementPtr.html][The">https://llvm.org/docs/GetElementPtr.html][The</a> Often Misunderstood GEP Instruction]]。</li><li>extractvalue：从一个数组或结构体中提取一个成员字段的值（不是地址）。</li><li>insertvalue：将一个值添加给数组或结构体的成员字段。</li></ul><p><em>ir 转换指令</em></p><ul><li>bitcast：将一个值转成给定类型而不改变它的位。</li><li>trunc&#x2F;fptrunc：将一个类型的整数&#x2F;浮点值截断为一个更小的整数&#x2F;浮点类型。</li><li>zext&#x2F;sext&#x2F;fpext：将一个值扩展到一个更大的整数&#x2F;浮点类型上。</li><li>fptoui&#x2F;fptosi：将一个浮点值转换为无符号&#x2F;有符号位的整数类型。</li><li>uitofp&#x2F;sitofp：将一个无符号&#x2F;有符号位整数值转换为浮点类型。</li><li>ptrtoint：将指针转成整数。</li><li>inttoptr：将整数值转成指针类型。</li></ul><p>ir 库的 header 地址在 <del>include&#x2F;llvm&#x2F;IR</del> ，源文件在 <del>lib&#x2F;IR</del> ，文档 <a href="https://llvm.org/doxygen/namespacellvm.html">llvm Namespace Reference</a>。所有类和函数都在 llvm 命名空间里。</p><p>主要基础类的说明如下：</p><ul><li>llvm::Module：ir 的容器类的最高级。</li><li>llvm::Value：所有可作为其他值或指令操作数的基类。<ul><li>llvm::Constant<ul><li>llvm::ConstantDataArray (Constants.h)</li><li>llvm::ConstantInt (Constants.h)</li><li>llvm::ConstantFP (Constants.h)</li><li>llvm::ConstantStruct (Constants.h)</li><li>llvm::ConstantPointerNull (Constants.h)</li><li>llvm::Function</li><li>llvm::GlobalVariable</li></ul></li><li>llvm::BasicBlock</li><li>llvm::Instruction<ul><li>Useful X-macro header: Instruction.def</li><li>llvm::BinaryOperator (InstrTypes.h)<ul><li>add, sub, mul, sdiv, udiv, srem, urem</li><li>fadd, fsub, fmul, fdiv, frem</li><li>shl, lshr, ashr, and, or, xor</li></ul></li><li>llvm::CmpInst (InstrTypes.h)<ul><li>llvm::ICmpInst (Instructions.h)</li><li>llvm::FCmpInst (Instructions.h)</li></ul></li><li>llvm::UnaryInstruction (InstrTypes.h)<ul><li>llvm::CastInst (Instrtypes.h)</li></ul></li><li>llvm::BitCastInst (Instructions.h)</li></ul></li></ul></li><li>llvm::Type：代表所有的 IR 数据类型，包括原始类型，结构类型和函数类型。</li></ul><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p>下面 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> variable <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    variable <span class="token operator">=</span> variable <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> variable<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的 ir 代码如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@variable &#x3D; global i32 21define i32 @main() &#123;    %1 &#x3D; load i32, i32* @variable  ; load the global variable    %2 &#x3D; mul i32 %1, 2    store i32 %2, i32* @variable   ; store instruction to write to global variable    ret i32 %2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码，你可以看到全局变量是 @ 字符前缀，main 函数也是 @ 符号作为前缀，因此 main 函数也是 llvm 中的全局变量。llvm 将全局变量看成指针，因此访问全局变量时，必须用 load 指令显示取消对全局变量的引用，同样的，你要用 store 指令显示存储全局变量的值。</p><h5 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h5><p>本地变量有两种，一种是临时变量，也可以说是寄存器，另一种是堆栈分配的局部变量。</p><p>临时变量或寄存器是通过为变量引入一个新的符号来创建的：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%reg &#x3D; add i32 4, 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>堆栈分配的局部变量是通过在堆上分配变量来创建的。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%stack &#x3D; alloca i32<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>几乎每条指令都会返回一个值，该值通常分配给一个临时变量。由于 llvm ir 的 SSA 形式，临时变量只能分配一次。因此下面的代码就会出错：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%tmp &#x3D; add i32 4, 2%tmp &#x3D; add i32 4, 1  ; Error here<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为符合 SSA，一般会是下面的代码：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%tmp.0 &#x3D; add i32 4, 2%tmp.1 &#x3D; add i32 4, 1  ; fine now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>简化为：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%0 &#x3D; add i32 4, 2%1 &#x3D; add i32 4, 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种局部变量的数量基本是无限的。因为真实机器的寄存器数量有限，因此编译器后端可能需要将其中一些临时寄存器放在堆栈上。</p><p>alloca 产生一个指向已分配类型的指针。必须要显示的使用 load 或 store 指令来分别读取和写入值。</p><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><p>有两种常量，一种是不占用分配内存的常量，另一种是占用分配内存的常量。</p><p>不占用分配内存的常量没有等效 llvm ir，他们是在编译前端将常量值插入到使用他们的位置。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%1 &#x3D; add i32 %0, 17     ; 17 就是内联的常量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>占用分配内存的常量使用 constant 关键字定义：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@hello &#x3D; internal constant [6 x i8] c&quot;hello\00&quot;%struct &#x3D; type &#123; i32, i8 &#125;@struct_constant &#x3D; internal constant %struct &#123; i32 16, i8 4 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看出常量实际也是个全局变量，可见性可以用 private 和 internal 来限制，这样它在当前模式之外是不可见的。</p><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>在 LLVM 中有两种实现字符串类型的方法：</p><ul><li>在 LLVM IR 中编写实现</li><li>用生成 IR 的高级语言编写实现</li></ul><p>LLVM IR 中有一个简单但有用的字符串类型。</p><p>我们将创建一个动态的、可变的字符串类型，它可以被添加，也可以插入，转换大小写等等，这取决于定义了哪些支持函数来操作字符串类型。</p><p>这一切都归结为为类制作合适的类型定义，然后定义一组丰富的函数来对类型定义进行操作</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">    store i8* %output, i8** %1    ;this-&gt;maxlen &#x3D; %value (value that was passed into @malloc is the new maxlen)    %4 &#x3D; getelementptr %String* this, i32 0, i32 2    store i32 %value, i32* %4    ret void&#125;define fastcc void @String_Add_Char(%String* %this, i8 %value) &#123;    ; Check if we need to grow the string.    %1 &#x3D; getelementptr %String* %this, i32 0, i32 1    %length &#x3D; load i32* %1    %2 &#x3D; getelementptr %String* %this, i32 0, i32 2    %maxlen &#x3D; load i32* %2    ; if length &#x3D;&#x3D; maxlen:    %3 &#x3D; icmp eq i32 %length, %maxlen    br i1 %3, label %grow_begin, label %grow_closegrow_begin:    %4 &#x3D; getelementptr %String* %this, i32 0, i32 3    %factor &#x3D; load i32* %4    %5 &#x3D; add i32 %maxlen, %factor    call void @String_Resize(%String* %this, i32 %5)    br label %grow_closegrow_close:    %6 &#x3D; getelementptr %String* %this, i32 0, i32 0    %buffer &#x3D; load i8** %6    %7 &#x3D; getelementptr i8* %buffer, i32 %length    store i8 %value, i8* %7    %8 &#x3D; add i32 %length, 1    store i32 %8, i32* %1    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h5><p>下面的 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Foo</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> x<span class="token punctuation">;</span>  <span class="token keyword">double</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的 ir 代码如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%Foo &#x3D; type &#123;    i64,       ; index 0 &#x3D; x    double     ; index 1 &#x3D; y&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 struct 的结构成员是从0开始的数字进行索引。</p><p>下面是嵌套结构的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">FooBar</span><span class="token punctuation">&#123;</span>    Foo x<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> c<span class="token punctuation">;</span>    Foo<span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的 ir 代码：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%FooBar &#x3D; type &#123;    %Foo,         ; index 0 &#x3D; x    i8*,          ; index 1 &#x3D; c    %Foo*         ; index 2 &#x3D; y&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不完整结构类型，对于隐藏结构细节非常有用。比如下面的 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的 ir 代码：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%Foo &#x3D; type opaquedeclare void @Bar(%Foo)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ir 的结构成员是通过索引而不是名称来记录的，getelementptr(GEP) 是专门用来计算指向任何结构成员的指针。比如下面 c++ 代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Foo&#123;    int a;    char *b;    double c;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应 ir 是：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%Foo &#x3D; type &#123;    i32,        ; 0: a    i8*,        ; 1: b    double      ; 2: c&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GEP 索引如 ir 代码中的注释所示。现在访问 b 成员，c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Foo foo<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>bptr <span class="token operator">=</span> <span class="token operator">&amp;</span>foo<span class="token punctuation">.</span>b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>先在堆栈上使用 alloca 指令分配对象，访问 b 成员，使用 GEP 指令计算指向内存位置的指针。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%foo &#x3D; alloca %Foo; char **bptr &#x3D; &amp;foo.b%1 &#x3D; getelementptr %Foo, %Foo* %foo, i32 0, i32 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果创建一个 Foo 对象数组，如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Foo bar[100];bar[17].c &#x3D; 0.0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会转成以下 ir 代码：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; Foo bar[100]%bar &#x3D; alloca %Foo, i32 100; bar[17].c &#x3D; 0.0%2 &#x3D; getelementptr %Foo, %Foo* %bar, i32 17, i32 2store double 0.0, double* %2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上面代码所示，它首先会分配一个指向 100 个 Foo 对象的指针。然后用 GEP 指令检索数组中第17个条目的第二个元素。</p><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><p>有九种不同类型的转换</p><ul><li>Bitwise casts (type casts)</li><li>Zero-extending casts (unsigned upcasts).</li><li>Sign-extending casts (signed upcasts).</li><li>Truncasting casts (signed and unsigned downcasts).</li><li>Floating-point extending casts (float upcasts).</li><li>Floating-point truncasting casts (float downcasts)</li><li>Pointer-to-integer casts.</li><li>Integer-to-pointer casts.</li><li>Address-space casts (pointer casts).</li></ul><p><em>Bitwise Casts</em><br>bitwise cast 是按位强制转换。比如可以将指向字节的指针位转换为指向某个结构的指针。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Foo<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Foo <span class="token operator">*</span>foo <span class="token operator">=</span> <span class="token punctuation">(</span>Foo <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换成对应的 ir：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%Foo &#x3D; type &#123; i32 &#125;declare i8* @malloc(i32)declare void @free(i8*)define void @allocate() nounwind &#123;    %1 &#x3D; call i8* @malloc(i32 4)    %foo &#x3D; bitcast i8* %1 to %Foo*    %2 &#x3D; getelementptr %Foo, %Foo* %foo, i32 0, i32 0    store i32 12, i32* %2    call void @free(i8* %1)    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Zero-Extending Casts(Unsigned Upcasts)</em><br>比如下面的 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint8 byte <span class="token operator">=</span> <span class="token number">117</span><span class="token punctuation">;</span>uint32 word<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* The compiler automatically upcasts the byte to a word. */</span>    word <span class="token operator">=</span> byte<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 zext 指令：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@byte &#x3D; global i8 117@word &#x3D; global i32 0define void @main() nounwind &#123;    %1 &#x3D; load i8, i8* @byte    %2 &#x3D; zext i8 %1 to i32    store i32 %2, i32* @word    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Sign-Extending Casts (Signed Upcasts)</em><br>将 zext 替换成 sext 指令即可。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@char &#x3D; global i8 -17@int  &#x3D; global i32 0define void @main() nounwind &#123;    %1 &#x3D; load i8, i8* @char    %2 &#x3D; sext i8 %1 to i32    store i32 %2, i32* @int    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Truncating Casts (Signed and Unsigned Downcasts)</em><br>signed 和 unsigned 整数都使用相同的指令 trunc 来减少相关数字的大小。这是因为 llvm ir 假设所有有符号整数值都是二进制补码格式，因此 turn 注意处理这两种情况：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@int &#x3D; global i32 -1@char &#x3D; global i8 0define void @main() nounwind &#123;    %1 &#x3D; load i32, i32* @int    %2 &#x3D; trunc i32 %1 to i8    store i8 %2, i8* @char    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Floating-Point Extending Casts (Float Upcasts)</em><br>浮点数可以使用 fpext 指令进行扩展，比如下面的 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span> small <span class="token operator">=</span> <span class="token number">1.25</span><span class="token punctuation">;</span><span class="token keyword">double</span> large<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* The compiler inserts an implicit float upcast. */</span>    large <span class="token operator">=</span> small<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会变成：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@small &#x3D; global float 1.25@large &#x3D; global double 0.0define void @main() nounwind &#123;    %1 &#x3D; load float, float* @small    %2 &#x3D; fpext float %1 to double    store double %2, double* @large    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Floating-Point Truncating Casts (Float Downcasts)</em><br>浮点数可以截断为更小的大小：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@large &#x3D; global double 1.25@small &#x3D; global float 0.0define void @main() nounwind &#123;    %1 &#x3D; load double, double* @large    %2 &#x3D; fptrunc double %1 to float    store float %2, float* @small    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Pointer-to-Integer Casts</em><br>使用 ptrtoint 指令将指针类型转换为整数类型。</p><p><em>Integer-to-Pointer Casts</em><br>使用 inttoptr 指令将整数转换成指针。</p><h5 id="函数和声明"><a href="#函数和声明" class="headerlink" title="函数和声明"></a>函数和声明</h5><p>函数定义取决于 calling convention、excption-aware 和模块是否对外公开。</p><p>下面是一个简单的 c 函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">17</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>会转换成</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @Bar() nounwind &#123;    ret i32 17&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>私有函数定义如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define private i32 @Foo() nounwind &#123;    ret i32 17&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ir 的私有函数只是 llvm 模块级的私有函数，并不是和高级语言 private 关键字定义的函数对应。</p><p>函数原型在 ir 里使用 declare 来声明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应使用 declare 声明为：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">declare i32 @Bar(i32 %value)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可变参数的函数，要用省略号定义或声明它，然后需要使用特殊的函数调用语法。示例如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">declare i32 @printf(i8*, ...) nounwind@.textstr &#x3D; internal constant [20 x i8] c&quot;Argument count: %d\0A\00&quot;define i32 @main(i32 %argc, i8** %argv) nounwind &#123;    ; printf(&quot;Argument count: %d\n&quot;, argc)    %1 &#x3D; call i32 (i8*, ...) @printf(i8* getelementptr([20 x i8], [20 x i8]* @.textstr, i32 0, i32 0), i32 %argc)    ret i32 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数重载不是在 ir 里处理的，是在源语言上处理的。重载的函数名称不同，示例如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">*</span>b <span class="token operator">+</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面 c 代码对应 ir 是：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @_Z8functionii(i32 %a, i32 %b) #0 &#123;; [...]  ret i32 %5&#125;define double @_Z8functionddd(double %a, double %b, double %x) #0 &#123;; [...]  ret double %8&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见在 ir 里，重载函数的名称和功能都是不同的。</p><p>类或结构体通常是按值传递，在传递对象时隐式克隆对象。比如下面的 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token keyword">double</span> y<span class="token punctuation">;</span>    <span class="token keyword">double</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Point <span class="token function">add_points</span><span class="token punctuation">(</span>Point a<span class="token punctuation">,</span> Point b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Point p<span class="token punctuation">;</span>  p<span class="token punctuation">.</span>x <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">+</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  p<span class="token punctuation">.</span>y <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">+</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>  p<span class="token punctuation">.</span>z <span class="token operator">=</span> a<span class="token punctuation">.</span>z <span class="token operator">+</span> b<span class="token punctuation">.</span>z<span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应 ir 是：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%struct.Point &#x3D; type &#123; double, double, double &#125;define void @add_points(%struct.Point* noalias sret %agg.result,                        %struct.Point* byval align 8 %a,                        %struct.Point* byval align 8 %b) #0 &#123;; there is no alloca here for Point p;; p.x &#x3D; a.x + b.x;  %1 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %a, i32 0, i32 0  %2 &#x3D; load double, double* %1, align 8  %3 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %b, i32 0, i32 0  %4 &#x3D; load double, double* %3, align 8  %5 &#x3D; fadd double %2, %4  %6 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %agg.result, i32 0, i32 0  store double %5, double* %6, align 8; p.y &#x3D; a.y + b.y;  %7 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %a, i32 0, i32 1  %8 &#x3D; load double, double* %7, align 8  %9 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %b, i32 0, i32 1  %10 &#x3D; load double, double* %9, align 8  %11 &#x3D; fadd double %8, %10  %12 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %agg.result, i32 0, i32 1  store double %11, double* %12, align 8; p.z &#x3D; a.z + b.z;  %13 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %a, i32 0, i32 2  %14 &#x3D; load double, double* %13, align 8  %15 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %b, i32 0, i32 2  %16 &#x3D; load double, double* %15, align 8  %17 &#x3D; fadd double %14, %16  %18 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %agg.result, i32 0, i32 2  store double %17, double* %18, align 8; there is no real returned value, because the previous stores directly wrote; to the caller allocated value via %agg.result  ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 add_points 函数返回的是 void，另外添加了一个参数，这个参数是指向返回结果的指针，有调用者来分配。这个指针是 noalias 属性，sret 属性表明这是返回值。参数是 byval 属性，表示他们是按值传递的结构。</p><p>下面代码是展示如何调用 add_points 函数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Point a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  Point b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  Point c <span class="token operator">=</span> <span class="token function">add_points</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编成 ir 代码如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @main() #1 &#123;; these are the a, b, c in the scope of main  %a &#x3D; alloca %struct.Point, align 8  %b &#x3D; alloca %struct.Point, align 8  %c &#x3D; alloca %struct.Point, align 8; these are copies, which are passed as arguments  %1 &#x3D; alloca %struct.Point, align 8  %2 &#x3D; alloca %struct.Point, align 8; copy the global initializer main::a to %a  %3 &#x3D; bitcast %struct.Point* %a to i8*  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast (%struct.Point* @main.a to i8*), i64 24, i32 8, i1 false); copy the global initializer main::b to %b  %4 &#x3D; bitcast %struct.Point* %b to i8*  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* bitcast (%struct.Point* @main.b to i8*), i64 24, i32 8, i1 false); clone a to %1  %5 &#x3D; bitcast %struct.Point* %1 to i8*  %6 &#x3D; bitcast %struct.Point* %a to i8*  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 24, i32 8, i1 false); clone b to %1  %7 &#x3D; bitcast %struct.Point* %2 to i8*  %8 &#x3D; bitcast %struct.Point* %b to i8*  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 24, i32 8, i1 false); call add_points with the cloned values  call void @add_points(%struct.Point* sret %c, %struct.Point* byval align 8 %1, %struct.Point* byval align 8 %2)  ; [...]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到调用者为返回值 %c 分配空间，并且确保在实际通过引用传递参数前克隆参数 a 和 b。</p><p>异常处理函数，可以返回一个指向异常实例的指针，创建一个 setjmp&#x2F;longjmp 帧，或者简单指定 uwtable 属性。</p><p>函数指针的表达方式和 c 差不多，比如下面 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Function<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应 ir 为：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@Function &#x3D; global i32(i8*)* null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Unions"><a href="#Unions" class="headerlink" title="Unions"></a>Unions</h5><p>llvm 不支持 unions，下面的 c++ 代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">union Foo&#123;    int a;    char *b;    double c;&#125;;Foo Union;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应 ir 为：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%union.Foo &#x3D; type &#123; double &#125;@Union &#x3D; %union.Foo &#123; 0.0 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其它成员没有了，ir 要访问他们要用 bitcast 指令将指向 union 的指针转换为你想要的指针。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%1 &#x3D; bitcast %union.Foo* @Union to i32*store i32 1, i32* %1%2 &#x3D; bitcast %union.Foo* @Union to i8**store i8* null, i8** %2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实际上 unions 只不过是一块使用不同隐式指针强制转换访问的内存。处理 unions 没有类型安全。前端语言需要对 unions 做支持，可以简单的分配 unions 的总大小，也就是最大成员的大小，然后根据需要生成代码来重新解释分配的内存。</p><h5 id="if-then-else-分支"><a href="#if-then-else-分支" class="headerlink" title="if-then-else 分支"></a>if-then-else 分支</h5><p>llvm ir 是按顺序执行的指令序列组成。这些指令组合在一起形成基本块，每个基本块都以改变程序控制流的指令结束。</p><p>下面是个简单的 if-then-else 分支：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 ir 中，控制流是通过在基本块之间跳转实现的。这些基本块包含不改变控制流的指令序列。每个基本块都以改变程序控制流的指令结束。最常见的分支指令是 br。br 可以带上条件，然后它实现了一个简单的 if-then-else 。如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">br i1 %cond, label %iftrue, label %iffalse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>br 也可以实现无条件跳转到某个目的地：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">br label %dest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前面的 c 函数对应的 ir 代码如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @max(i32 %a, i32 %b) &#123;entry:  %retval &#x3D; alloca i32, align 4  %0 &#x3D; icmp sgt i32 %a, %b  br i1 %0, label %btrue, label %bfalsebtrue:                                      ; preds &#x3D; %2  store i32 %a, i32* %retval, align 4  br label %endbfalse:                                     ; preds &#x3D; %2  store i32 %b, i32* %retval, align 4  br label %endend:                                     ; preds &#x3D; %btrue, %bfalse  %1 &#x3D; load i32, i32* %retval, align 4  ret i32 %1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码所示，共有4个基本块，第一个是函数入口，使用 alloca 在堆栈上分配空间，用作较大的临时存储，然后使用 icmp 指令比较两个参数 %a 和 %b。结果是一个布尔标志 i1，将其用于 br 指令的条件。然后根据所采用的分支，将 %a 或 %b 存储到临时 %retval 变量中。每个分支都以无条件分支到最后一个基本块 %end 结束。来自 %retval 的值被加载并返回。</p><p>通过 opt -dot-cfg input.ll 可以获得 CFG 流程图。</p><p>select 指令可以进行更高级别优化，不生成分支，缩短代码，比如上面的 ir 代码优化后为：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @max(i32 %a, i32 %b) &#123;  %1 &#x3D; icmp sgt i32 %a, %b  %2 &#x3D; select i1 %1, i32 %a, i32 %b  ret i32 %2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="静态单一赋值表（SSA-Form）和-PHI"><a href="#静态单一赋值表（SSA-Form）和-PHI" class="headerlink" title="静态单一赋值表（SSA Form）和 PHI"></a>静态单一赋值表（SSA Form）和 PHI</h5><p>下面是一个 c 函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的 llvm ir 代码如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @max(i32 %a, i32 %b) &#123;entry:  %retval &#x3D; alloca i32, align 4  %0 &#x3D; icmp sgt i32 %a, %b  br i1 %0, label %btrue, label %bfalsebtrue:                                      ; preds &#x3D; %2  store i32 %a, i32* %retval, align 4  br label %endbfalse:                                     ; preds &#x3D; %2  store i32 %b, i32* %retval, align 4  br label %endend:                                     ; preds &#x3D; %btrue, %bfalse  %1 &#x3D; load i32, i32* %retval, align 4  ret i32 %1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 max 函数使用 alloc 在堆栈上分配空间，其中存储了较大的值。在一个分支中，%a 被存储，而在另一个分支中，%b 被存储到堆栈分配的内存中。尽可能避免使用内存 load&#x2F;store 操作，而是更多的使用寄存器。所以按下面方式来写：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @max(i32 %a, i32 %b) &#123;entry:  %0 &#x3D; icmp sgt i32 %a, %b  br i1 %0, label %btrue, label %bfalsebtrue:  %retval &#x3D; %a  br label %endbfalse:  %retval &#x3D; %b  br label %endend:  ret i32 %retval&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这不是有效的 LLVM IR，因为 LLVM IR 是静态单已分配形式，也就是 SSA。SSA 形式要求每个变量只分配一次。SSA 形式支持并简化了大量的编译器优化，并且是命令式编程语言解释器中中间表示的实际上的标准。</p><p>那怎么用 SSA 形式 LLVM IR 实现上述代码？答案是神奇的 phi 指令。phi 指令以 SSA 理论中使用的 φ 函数命名。这个函数会根据控制流神奇的选择正确的值。在 LLVM 中，你必须手动指定值的名称和前一个基本块。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">end:  %retval &#x3D; phi i32 [%a, %btrue], [%b, %bfalse]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里我们指示 phi 指令在前一个基本块为 %btrue 时选择 %a。如果之前的基本块是 %bfalse，那么将使用 %b。然后将该值分配给一个新变量 %retval。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @max(i32 %a, i32 %b) &#123;entry:  %0 &#x3D; icmp sgt i32 %a, %b  br i1 %0, label %btrue, label %bfalsebtrue:                                      ; preds &#x3D; %2  br label %endbfalse:                                     ; preds &#x3D; %2  br label %endend:                                     ; preds &#x3D; %btrue, %bfalse  %retval &#x3D; phi i32 [%a, %btrue], [%b, %bfalse]  ret i32 %retval&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>后端的 PHI</em></p><p>让我们看看 @max 函数现在如何映射到实际的机器代码。查看的是 x86 64 位生成的代码，用不同优化级别进行编译。非优化后端命令 llc -O0 -filetype&#x3D;asm。得到的结果是：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">max:                                    # @max# %bb.0:                                # %entry    cmpl    %esi, %edi                  # %edi &#x3D; %a, %esi &#x3D; %b    jle     .LBB0_2# %bb.1:                                # %btrue    movl    %edi, -4(%rsp)              # mov src, dst    jmp     .LBB0_3.LBB0_2:                                # %bfalse    movl    %esi, -4(%rsp)              # mov src, dst    jmp     .LBB0_3.LBB0_3:                                # %end    movl    -4(%rsp), %eax              # return value in eax    retq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数 %a 和 %b 分别在 %edi 和 %esi 中传递。我们可以看到编译后端生成的代码使用堆栈来存储更大的值。因此，当我们编写 LLVM IR 时，编译器后端生成的代码并不是我们所想的。原因是编译器后端需要用真机指令来实现 phi 指令。通常这是通过分配给一个寄存器或存储到一个公共堆栈位置来完成的。通常编译器后端将使用堆栈来实现 phi 指令。但是，如果我们在后端使用更多优化，也就是 llc -O1，可以获得更优化的版本：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">max:                                    # @max# %bb.0:                                # %entry    cmpl    %esi, %edi    jg      .LBB0_2# %bb.1:                                # %bfalse    movl    %esi, %edi.LBB0_2:                                # %end    movl    %edi, %eax    retq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 phi 函数是通过使用 %edi 寄存器实现的。在一个分支中，%edi 已经包含所需的值，所以什么都没发生。在另一个分支中，%esi 被复制到 %edi。在 %end 基本块中，%edi 包含来自两个分支的所需值。这更像是我们的想法。我们可以看到优化是需要在整个编译管道中的应用的东西。</p><h5 id="Lambda-函数"><a href="#Lambda-函数" class="headerlink" title="Lambda 函数"></a>Lambda 函数</h5><p>lambda 函数是一个匿名函数，它可以自由引用包含函数中的局部变量，也包括参数变量。Lambda 的实现和 Pascal 的嵌套函数一样，只是编译器负责为 lambda 函数生成内部名称。有几种不同的方法可以实现 lambda 函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int foo(int a)&#123;  auto function &#x3D; [a](int x) &#123; return x + a; &#125;;  return function(10);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的问题是 lambda 函数引用了调用者的一个局部变量，即 a，即使 lambda 函数是它自己的函数。这可以通过将局部变量作为隐式参数传递给 lambda 函数来轻松解决：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define internal i32 @lambda(i32 %a, i32 %x) &#123; %1 &#x3D; add i32 %a, %x ret i32 %1&#125;define i32 @foo(i32 %a) &#123; %1 &#x3D; call i32 @lambda(i32 %a, i32 10) ret i32 %1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，如果 lambda 函数使用多个变量，你可以将他们包装在一个结构中，然后将指针传递给 lambda 函数：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">extern int integer_parse();int foo(int a, int b)&#123;  int c &#x3D; integer_parse();  auto function &#x3D; [a, b, c](int x) &#123; return (a + b - c) * x; &#125;;  return function(10);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应 IR 是：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; ModuleID &#x3D; &#39;lambda_func_1_cleaned.ll&#39;source_filename &#x3D; &quot;lambda_func_1_cleaned.ll&quot;target datalayout &#x3D; &quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;target triple &#x3D; &quot;x86_64-unknown-linux-gnu&quot;%lambda_args &#x3D; type &#123; i32, i32, i32 &#125;declare i32 @integer_parse()define i32 @lambda(%lambda_args* %args, i32 %x) &#123;  %1 &#x3D; getelementptr %lambda_args, %lambda_args* %args, i32 0, i32 0  %a &#x3D; load i32, i32* %1  %2 &#x3D; getelementptr %lambda_args, %lambda_args* %args, i32 0, i32 1  %b &#x3D; load i32, i32* %2  %3 &#x3D; getelementptr %lambda_args, %lambda_args* %args, i32 0, i32 2  %c &#x3D; load i32, i32* %3  %4 &#x3D; add i32 %a, %b  %5 &#x3D; sub i32 %4, %c  %6 &#x3D; mul i32 %5, %x  ret i32 %6&#125;define i32 @foo(i32 %a, i32 %b) &#123;  %args &#x3D; alloca %lambda_args  %1 &#x3D; getelementptr %lambda_args, %lambda_args* %args, i32 0, i32 0  store i32 %a, i32* %1  %2 &#x3D; getelementptr %lambda_args, %lambda_args* %args, i32 0, i32 1  store i32 %b, i32* %2  %c &#x3D; call i32 @integer_parse()  %3 &#x3D; getelementptr %lambda_args, %lambda_args* %args, i32 0, i32 2  store i32 %c, i32* %3  %4 &#x3D; call i32 @lambda(%lambda_args* %args, i32 10)  ret i32 %4&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然，这个主题有一些可能的变化：</p><ul><li>你可以将所有隐式作为参数参数当成参数来传递。</li><li>你可以将结构中所有隐式参数作为显示参数传递。</li><li>你可以传入一个指向调用者帧的指针，并让 lambda 函数从输入帧中提取参数和局部变量。</li></ul><h5 id="生成器-Generators"><a href="#生成器-Generators" class="headerlink" title="生成器 Generators"></a>生成器 Generators</h5><p>生成器是一个函数，它以这样的一种方式重复生成一个值，使函数的状态在函数的重复调用中保持不变，包括函数在生产值时的局部偏移量。</p><p>实现生成器最直接的方法就是将其所有状态变量，包括参数、局部变量和返回值都包装到一个 ad-hoc 结构中，然后将该结构的地址传递给生成器。</p><p>某种程度上说，你需要在每次调用时跟踪你正在执行的生成器是哪个块。这可以通过多种方式完成。我们在这展示的方式是使用 LLVM 的 blockaddress 指令来保存下一个应该执行的本地代码块的地址。其它实现使用简单的状态变量，然后根据状态变量的值进行类似开关的调度。在这两种情况下，最终结果是相同的，也就是为生成器中的每个本地块执行不同的代码块。</p><p>重要的是将迭代器视为一种微线程，每当再次调用迭代器时，它就会恢复。换句话说，我们需要保存迭代器每次通过多远的地址，以便它可以恢复，就好像发生了微观线程切换一样。所以我们在返回指令之后保存指令的地址，这样我们就可以继续运行，就好像我们一开始就没有返回一样。</p><p>下面是一段简化的伪代码。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;generator int foo()&#123;    yield 1;    yield 2;    yield 3;&#125;int main()&#123;    foreach (int i in foo()) printf(&quot;Value: %d\n&quot;, i);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的 IR 如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%foo_context &#x3D; type &#123;    i8*,      ; 0: block (state)    i32       ; 1: value (result)&#125;define void @foo_setup(%foo_context* %context) nounwind &#123;    ; set up &#39;block&#39;    %1 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.yield1), i8** %1    ret void&#125;; The boolean returned indicates if a result was available or not.; Once no more results are available, the caller is expected to not call; the iterator again.define i1 @foo_yield(%foo_context* %context) nounwind &#123;    ; dispatch to the active generator block    %1 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    %2 &#x3D; load i8** %1    indirectbr i8* %2, [ label %.yield1, label %.yield2, label %.yield3, label %.done ].yield1:    ; store the result value (1)    %3 &#x3D; getelementptr %foo_context* %context, i32 0, i32 1    store i32 1, i32* %3    ; make &#39;block&#39; point to next block to execute    %4 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.yield2), i8** %4    ret i1 1.yield2:    ; store the result value (2)    %5 &#x3D; getelementptr %foo_context* %context, i32 0, i32 1    store i32 2, i32* %5    ; make &#39;block&#39; point to next block to execute    %6 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.yield3), i8** %6    ret i1 1.yield3:    ; store the result value (3)    %7 &#x3D; getelementptr %foo_context* %context, i32 0, i32 1    store i32 3, i32* %7    ; make &#39;block&#39; point to next block to execute    %8 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.done), i8** %8    ret i1 1.done:    ret i1 0&#125;declare i32 @printf(i8*, ...) nounwind@.string &#x3D; internal constant [11 x i8] c&quot;Value: %d\0A\00&quot;define void @main() nounwind &#123;    ; allocate and initialize generator context structure    %context &#x3D; alloca %foo_context    call void @foo_setup(%foo_context* %context)    br label %.head.head:    ; foreach (int i in foo())    %1 &#x3D; call i1 @foo_yield(%foo_context* %context)    br i1 %1, label %.body, label %.tail.body:    %2 &#x3D; getelementptr %foo_context* %context, i32 0, i32 1    %3 &#x3D; load i32* %2    %4 &#x3D; call i32 (i8*, ...)* @printf(i8* getelementptr([11 x i8]* @.string, i32 0, i32 0), i32 %3)    br label %.head.tail:    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是一个涉及局部变量的稍微复杂的示例：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;generator int foo(int start, int after)&#123;    for (int index &#x3D; start; index &lt; after; index++)    &#123;        if (index % 2 &#x3D;&#x3D; 0)            yield index + 1;        else            yield index - 1;    &#125;&#125;int main(void)&#123;    foreach (int i in foo(0, 5))        printf(&quot;Value: %d\n&quot;, i);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 IR 代码为：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%foo_context &#x3D; type &#123;    i8*,      ; 0: block (state)    i32,      ; 1: start (argument)    i32,      ; 2: after (argument)    i32,      ; 3: index (local)    i32       ; 4: value (result)&#125;define void @foo_setup(%foo_context* %context, i32 %start, i32 %after) nounwind &#123;    ; set up &#39;block&#39;    %1 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.init), i8** %1    ; set up &#39;start&#39;    %2 &#x3D; getelementptr %foo_context* %context, i32 0, i32 1    store i32 %start, i32* %2    ; set up &#39;after&#39;    %3 &#x3D; getelementptr %foo_context* %context, i32 0, i32 2    store i32 %after, i32* %3    ret void&#125;define i1 @foo_yield(%foo_context* %context) nounwind &#123;    ; dispatch to the active generator block    %1 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    %2 &#x3D; load i8** %1   indirectbr i8* %2, [ label %.init, label %.loop_close, label %.end ].init:    ; copy argument &#39;start&#39; to the local variable &#39;index&#39;    %3 &#x3D; getelementptr %foo_context* %context, i32 0, i32 1    %start &#x3D; load i32* %3    %4 &#x3D; getelementptr %foo_context* %context, i32 0, i32 3    store i32 %start, i32* %4    br label %.head.head:    ; for (; index &lt; after; )    %5 &#x3D; getelementptr %foo_context* %context, i32 0, i32 3    %index &#x3D; load i32* %5    %6 &#x3D; getelementptr %foo_context* %context, i32 0, i32 2    %after &#x3D; load i32* %6    %again &#x3D; icmp slt i32 %index, %after    br i1 %again, label %.loop_begin, label %.exit.loop_begin:    %7 &#x3D; srem i32 %index, 2    %8 &#x3D; icmp eq i32 %7, 0    br i1 %8, label %.even, label %.odd.even:    ; store &#39;index + 1&#39; in &#39;value&#39;    %9 &#x3D; add i32 %index, 1    %10 &#x3D; getelementptr %foo_context* %context, i32 0, i32 4    store i32 %9, i32* %10    ; make &#39;block&#39; point to the end of the loop (after the yield)    %11 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.loop_close), i8** %11    ret i1 1.odd:    ; store &#39;index - 1&#39; in value    %12 &#x3D; sub i32 %index, 1    %13 &#x3D; getelementptr %foo_context* %context, i32 0, i32 4    store i32 %12, i32* %13    ; make &#39;block&#39; point to the end of the loop (after the yield)    %14 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.loop_close), i8** %14    ret i1 1.loop_close:    ; increment &#39;index&#39;    %15 &#x3D; getelementptr %foo_context* %context, i32 0, i32 3    %16 &#x3D; load i32* %15    %17 &#x3D; add i32 %16, 1    store i32 %17, i32* %15    br label %.head.exit:    ; make &#39;block&#39; point to the %.end label    %x &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.end), i8** %x    br label %.end.end:    ret i1 0&#125;declare i32 @printf(i8*, ...) nounwind@.string &#x3D; internal constant [11 x i8] c&quot;Value: %d\0A\00&quot;define i32 @main() nounwind &#123;    ; allocate and initialize generator context structure    %context &#x3D; alloca %foo_context    call void @foo_setup(%foo_context* %context, i32 0, i32 5)    br label %.head.head:    ; foreach (int i in foo(0, 5))    %1 &#x3D; call i1 @foo_yield(%foo_context* %context)    br i1 %1, label %.body, label %.tail.body:    %2 &#x3D; getelementptr %foo_context* %context, i32 0, i32 4    %3 &#x3D; load i32* %2    %4 &#x3D; call i32 (i8*, ...)* @printf(i8* getelementptr([11 x i8]* @.string, i32 0, i32 0), i32 %3)    br label %.head.tail:    ret i32 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上述操作的另一种可能方法是为每个状态生成一个 LLVM IR 函数，然后存储一个函数指针。</p><p>在上下文结构中，每当需要调用新的状态或函数时都会更新。</p><h5 id="面向对象结构"><a href="#面向对象结构" class="headerlink" title="面向对象结构"></a>面向对象结构</h5><p>接下来研究各种面向对象的结构，看怎么映射到 LLVM IR。</p><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><p>一个类只不过是一个结构，它具有一组相关函数，这些函数接受一个隐式的第一个参数，即指向该结构的指针。因此将一个类映射到 LLVM IR 很简单：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stddef.h&gt;class Foo&#123;public:    Foo()    &#123; _length &#x3D; 0;    &#125;    size_t GetLength() const    &#123; return _length;    &#125;    void SetLength(size_t value)    &#123; _length &#x3D; value;    &#125;private:    size_t _length;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先将这段代码转换成两个独立的部分：</p><ul><li>结构定义</li><li>方法列表，包括构造函数</li></ul><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; The structure definition for class Foo.%Foo &#x3D; type &#123; i32 &#125;; The default constructor for class Foo.define void @Foo_Create_Default(%Foo* %this) nounwind &#123;    %1 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 0    store i32 0, i32* %1    ret void&#125;; The Foo::GetLength() method.define i32 @Foo_GetLength(%Foo* %this) nounwind &#123;    %1 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 0    %2 &#x3D; load i32, i32* %1    ret i32 %2&#125;; The Foo::SetLength() method.define void @Foo_SetLength(%Foo* %this, i32 %value) nounwind &#123;    %1 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 0    store i32 %value, i32* %1    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们确保调用了构造函数 Foo_Create_Default。</p><p>每当创建结构的实例时：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Foo foo;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%foo &#x3D; alloca %Foocall void @Foo_Create_Default(%Foo* %foo)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="虚拟方法"><a href="#虚拟方法" class="headerlink" title="虚拟方法"></a>虚拟方法</h5><p>虚方法只不过是编译器控制的函数指针。每个虚方法都记录在 vtable 中，它是给定类所需的所有函数指针的结构：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Foo &#123;public:  virtal int GetLengthTimesTwo() const &#123;    return _length * 2;  &#125;  void SetLength(size_t value) &#123;    _length &#x3D; value;  &#125;private:  int _length;&#125;;int main() &#123;  Foo foo;  foo.setLength(4);  return foo.GetLengthTimesTwo();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这变成：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%Foo_vtable_type &#x3D; type &#123; i32(%Foo*)* &#125;%Foo &#x3D; type &#123; %Foo_vtable_type*, i32 &#125;define i32 @Foo_GetLengthTimesTwo(%Foo* %this) nounwind &#123;    %1 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 1    %2 &#x3D; load i32, i32* %1    %3 &#x3D; mul i32 %2, 2    ret i32 %3&#125;@Foo_vtable_data &#x3D; global %Foo_vtable_type &#123;    i32(%Foo*)* @Foo_GetLengthTimesTwo&#125;define void @Foo_Create_Default(%Foo* %this) nounwind &#123;    %1 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 0    store %Foo_vtable_type* @Foo_vtable_data, %Foo_vtable_type** %1    %2 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 1    store i32 0, i32* %2    ret void&#125;define void @Foo_SetLength(%Foo* %this, i32 %value) nounwind &#123;    %1 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 1    store i32 %value, i32* %1    ret void&#125;define i32 @main(i32 %argc, i8** %argv) nounwind &#123;    %foo &#x3D; alloca %Foo    call void @Foo_Create_Default(%Foo* %foo)    call void @Foo_SetLength(%Foo* %foo, i32 4)    %1 &#x3D; getelementptr %Foo, %Foo* %foo, i32 0, i32 0    %2 &#x3D; load %Foo_vtable_type*, %Foo_vtable_type** %1    %3 &#x3D; getelementptr %Foo_vtable_type, %Foo_vtable_type* %2, i32 0, i32 0    %4 &#x3D; load i32(%Foo*)*, i32(%Foo*)** %3    %5 &#x3D; call i32 %4(%Foo* %foo)    ret i32 %5&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，一些 C++ 编译器将 _vtable 存储在结构中的负偏移量处，这样 memeset(this, 0, sizeof(*this))之类的东西就可以工作，即使在 OOP 上下文中应始终避免使用此类命令。</p><p><em>Rust 特征和 VTable</em><br>与 C++ 相比，Rust 确实具有完全不同的对象模型。但是，当涉及到动态调度的低级细节时，他们非常相似。我们将探讨 rust 文档中的一个示例，以及 rustc 编译器发出什么样的 llvm IR。rust 和 C++ 都使用虚拟方法进行动态调度。但是，在 rust 中，高级语言中没有虚拟方法之类的东西。相反，我们可以为我们的数据类型实现 trait，然后实现一个接口，该接口接受所有实现 trait 的数据类型并动态分派到正确的 trait 实现，也就是下面示例中 dyn Trait 语法。</p><p>编译器必须在运行时动态决定使用哪个函数。编译器只知道存储在 components 向量中的对象确实满足特征 Draw。作为对不太熟悉 rust 的人的附注：将对象包装在 Box 中本质上是将对象放在堆上，有点类似于 C++ 中的 unique_ptr 并有效地允许我们放置 trait 对象，也就是本例中为 dyn Drawable 在向量中。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; test::Screen::run; Function Attrs: nonlazybind uwtabledefine void @&quot;Screen::run&quot;(%Screen* %self) &#123;start:;; (omitting the initial prologue and setup code);; this is the start of the for loop in Screen::run calling the next method;; on the iterator for the first time and checking whether it is None (or;; null in llvm here);; %5 contains the pointer to the first component in the vector here  %6 &#x3D; icmp eq i64* %5, null  br i1 %6, label %end, label %forloopend:                                              ; preds &#x3D; %forloop, %start  ret voidforloop:                                          ; preds &#x3D; %start, %forloop  %7 &#x3D; phi i64* [ %next_component, %forloop ], [ %5, %start ];; here the boxed pointer is retrieved and dereferenced to retrieve the;; vtable pointer  %8 &#x3D; bitcast i64* %7 to &#123;&#125;**  %self_ptr &#x3D; load &#123;&#125;*, &#123;&#125;** %8  %9 &#x3D; getelementptr inbounds i64, i64* %7, i64 1  %vtable_ptr &#x3D; bitcast i64* %9 to void (&#123;&#125;*)***  %vtable &#x3D; load void (&#123;&#125;*)**, void (&#123;&#125;*)*** %vtable_ptr;; 3 is the index into the vtable struct, which refers to the draw implementation for this particular struct  %trait_method_ptr &#x3D; getelementptr inbounds void (&#123;&#125;*)*, void (&#123;&#125;*)** %vtable, i64 3  %trait_method &#x3D; load void (&#123;&#125;*)*, void (&#123;&#125;*)** %vmethod;; indirect call to trait method  call void %trait_method(&#123;&#125;* %self_ptr);; retrieve the next object  %next_component &#x3D; call i64* @&quot;&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next&quot;(&#123; i64*, i64* &#125;* %iter)  %14 &#x3D; icmp eq i64* %next_component, null  br i1 %14, label %end, label %forloop&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 llvm 模块的全局变量中，我们可以看到如下所示的 vtable。Button 和 SelectBox 都有关联的 vtable。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@vtable.screen &#x3D; private unnamed_addr constant  ;; the Type of the constant vtable structure  &#123; void (%SelectBox*)*, i64, i64, void (%SelectBox*)* &#125;  &#123;    ;; first entry is the function to drop the object    void (%SelectBox*)* @&quot;core::ptr::drop_in_place&lt;test::SelectBox&gt;&quot;,  ;; destructor    i64 32, ;; size    i64 8,  ;; alignment    ;; last in the vtable is the pointer to the SelectBox::draw implementation    void (%SelectBox*)* @&quot;&lt;test::SelectBox as test::Draw&gt;::draw&quot;  &#125;;; the vtable for Button is structured basically the same@vtable.button &#x3D; private unnamed_addr constant    &#123; void (%Button*)*, i64, i64, void (%Button*)* &#125;    &#123; void (%Button*)* @&quot;core::ptr::drop_in_place&lt;test::Button&gt;&quot;, i64 32, i64 8, void (%Button*)* @&quot;&lt;test::Button as test::Draw&gt;::draw&quot;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这篇博文 <a href="https://alschwalm.com/blog/static/2017/03/07/exploring-dynamic-dispatch-in-rust/">Exploring Dynamic Dispatch in Rust</a> 更详细的解释 vtable 和动态调度以及他们在 rust 和 C++ 中的区别。</p><h5 id="单一继承"><a href="#单一继承" class="headerlink" title="单一继承"></a>单一继承</h5><p>单继承非常简单：每个结构体或类在内存中按声明顺序依次排列。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"> class Base &#123;   public:     void SetA(int value) &#123;_a &#x3D; value;     &#125;   private:     int _a; &#125;; class Derived: public Base &#123;   public:     void SetB(int value) &#123;SetA(value);_b &#x3D; value;     &#125;   protected:     int _b; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里 a 和 b 将在内存中彼此跟随，因此从一个类继承只是一个简单的问题。</p><p>将基类声明为继承类中的第一个成员。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%Base &#x3D; type &#123;    i32         ; &#39;_a&#39; in class Base&#125;define void @Base_SetA(%Base* %this, i32 %value) nounwind &#123;    %1 &#x3D; getelementptr %Base, %Base* %this, i32 0, i32 0    store i32 %value, i32* %1    ret void&#125;%Derived &#x3D; type &#123;    i32,        ; &#39;_a&#39; from class Base    i32         ; &#39;_b&#39; from class Derived&#125;define void @Derived_SetB(%Derived* %this, i32 %value) nounwind &#123;    %1 &#x3D; bitcast %Derived* %this to %Base*    call void @Base_SetA(%Base* %1, i32 %value)    %2 &#x3D; getelementptr %Derived, %Derived* %this, i32 0, i32 1    store i32 %value, i32* %2    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，基类简单的成为派生类的类型声明的普通成员。</p><p>然后编译器必须在派生类被引用为其基类时插入适当的类型转换，如上所示，使用 bitcast 运算符。</p><h5 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h5><p>多重继承也不是很难，只是在每个派生类内部按顺序排列多个继承的结构，同时考虑到多次继承的数据成员的重复性。</p><p>下面的 c++ 代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class BaseA&#123;public:    void SetA(int value)    &#123; _a &#x3D; value;    &#125;private:    int _a;&#125;;class BaseB: public BaseA&#123;public:    void SetB(int value)    &#123; SetA(value); _b &#x3D; value;    &#125;private:    int _b;&#125;;class Derived:    public BaseA,    public BaseB&#123;public:    void SetC(int value)    &#123; SetB(value); _c &#x3D; value;    &#125;private:    &#x2F;&#x2F; Derived now has two &#39;_a&#39; members and one &#39;_b&#39; member.    int _c;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等效 LLVM IR：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%BaseA &#x3D; type &#123;    i32         ; &#39;_a&#39; from BaseA&#125;define void @BaseA_SetA(%BaseA* %this, i32 %value) nounwind &#123;    %1 &#x3D; getelementptr %BaseA, %BaseA* %this, i32 0, i32 0    store i32 %value, i32* %1    ret void&#125;%BaseB &#x3D; type &#123;    i32,        ; &#39;_a&#39; from BaseA    i32         ; &#39;_b&#39; from BaseB&#125;define void @BaseB_SetB(%BaseB* %this, i32 %value) nounwind &#123;    %1 &#x3D; bitcast %BaseB* %this to %BaseA*    call void @BaseA_SetA(%BaseA* %1, i32 %value)    %2 &#x3D; getelementptr %BaseB, %BaseB* %this, i32 0, i32 1    store i32 %value, i32* %2    ret void&#125;%Derived &#x3D; type &#123;    i32,        ; &#39;_a&#39; from BaseA    i32,        ; &#39;_a&#39; from BaseB    i32,        ; &#39;_b&#39; from BaseB    i32         ; &#39;_c&#39; from Derived&#125;define void @Derived_SetC(%Derived* %this, i32 %value) nounwind &#123;    %1 &#x3D; bitcast %Derived* %this to %BaseB*    call void @BaseB_SetB(%BaseB* %1, i32 %value)    %2 &#x3D; getelementptr %Derived, %Derived* %this, i32 0, i32 2    store i32 %value, i32* %2    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，只要将 baseB 作为 BaseB 的实例引用，编译器就会提供所需的类型转换和指针算术。请注意，他所需要的只是从一个类到另一个类的位转换以及及时 getelementptr 的最后一个参数的调整。</p><h5 id="虚拟继承"><a href="#虚拟继承" class="headerlink" title="虚拟继承"></a>虚拟继承</h5><p>虚拟继承实际上非常简单，因为它要求将相同的基类合并到一个实例中。比如下面的 c++ 代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class BaseA&#123;public:    int a;&#125;;class BaseB: public BaseA&#123;public:    int b;&#125;;class BaseC: public BaseA&#123;public:    int c;&#125;;class Derived:    public virtual BaseB,    public virtual BaseC&#123;    int d;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dervied 将只包含一个 BaseA 实例，即使它的继承图规定它应该有两个继承。</p><p>结果如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Derived&#123;public:    int a;    int b;    int c;    int d;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 a 的第二个实例被默认的忽略，因为它会导致 BaseA 的多个实例存在于 Derived 中。</p><h5 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口 Interface"></a>接口 Interface</h5><p>接口只不过是没有数据成员的基类，其中所有方法都是纯虚拟的，也就是没有主体。因此转化 IR 的方式和将虚拟成员函数转换为 LLVM IR 的方式是一样的。</p><h5 id="Boxing-和-Unboxing"><a href="#Boxing-和-Unboxing" class="headerlink" title="Boxing 和 Unboxing"></a>Boxing 和 Unboxing</h5><p>Boxing 是将非对象原始值转换成对象的过程。创建一个包装类，你可以用非对象值实例化和初始化它。</p><p>Unboxing 是 boxing 的逆过程。你通过从 box 对象中检索 box 的值，将一个完整的对象降级为一个纯标量值。</p><p>下面是 Boxing 和 Unboxing 对应的 IR 代码：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@Boxee &#x3D; global i32 17%Integer &#x3D; type &#123; i32 &#125;define void @Integer_Create(%Integer* %this, i32 %value) nounwind &#123;    ; you might set up a vtable and associated virtual methods here    %1 &#x3D; getelementptr %Integer, %Integer* %this, i32 0, i32 0    store i32 %value, i32* %1    ret void&#125;define i32 @Integer_GetValue(%Integer* %this) nounwind &#123;    %1 &#x3D; getelementptr %Integer, %Integer* %this, i32 0, i32 0    %2 &#x3D; load i32, i32* %1    ret i32 %2&#125;define i32 @main() nounwind &#123;    ; box @Boxee in an instance of %Integer    %1 &#x3D; load i32, i32* @Boxee    %2 &#x3D; alloca %Integer    call void @Integer_Create(%Integer* %2, i32 %1)    ; unbox @Boxee from an instance of %Integer    %3 &#x3D; call i32 @Integer_GetValue(%Integer* %2)    ret i32 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="New-运算符"><a href="#New-运算符" class="headerlink" title="New 运算符"></a>New 运算符</h5><p>new 运算符通常只不过是 C malloc 函数的类型安全版本，在 C++ 的某些实现中，它们可以互换调用，而不会导致看不见或不需要的副作用。</p><p><em>实例的 new 操作符</em><br>new X 对应的 llvm ir 代码如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">declare i8* @malloc(i32) nounwind%X &#x3D; type &#123; i8 &#125;define void @X_Create_Default(%X* %this) nounwind &#123;    %1 &#x3D; getelementptr %X, %X* %this, i32 0, i32 0    store i8 0, i8* %1    ret void&#125;define void @main() nounwind &#123;    %1 &#x3D; call i8* @malloc(i32 1)    %2 &#x3D; bitcast i8* %1 to %X*    call void @X_Create_Default(%X* %2)    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>new X(Y,Z) 形式的调用是相同的，除了 X 和 Z 作为参数传递给构造函数。</p><p><em>数组的 new 运算符</em><br>代码 new X[100] 被映射到一个循环中，一次初始化每个数组元素：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">declare i8* @malloc(i32) nounwind%X &#x3D; type &#123; i32 &#125;define void @X_Create_Default(%X* %this) nounwind &#123;    %1 &#x3D; getelementptr %X, %X* %this, i32 0, i32 0    store i32 0, i32* %1    ret void&#125;define void @main() nounwind &#123;    %n &#x3D; alloca i32                  ; %n &#x3D; ptr to the number of elements in the array    store i32 100, i32* %n    %i &#x3D; alloca i32                  ; %i &#x3D; ptr to the loop index into the array    store i32 0, i32* %i    %1 &#x3D; load i32, i32* %n           ; %1 &#x3D; *%n    %2 &#x3D; mul i32 %1, 4               ; %2 &#x3D; %1 * sizeof(X)    %3 &#x3D; call i8* @malloc(i32 %2)    ; %3 &#x3D; malloc(100 * sizeof(X))    %4 &#x3D; bitcast i8* %3 to %X*       ; %4 &#x3D; (X*) %3    br label %.loop_head.loop_head:                         ; for (; %i &lt; %n; %i++)    %5 &#x3D; load i32, i32* %i    %6 &#x3D; load i32, i32* %n    %7 &#x3D; icmp slt i32 %5, %6    br i1 %7, label %.loop_body, label %.loop_tail.loop_body:    %8 &#x3D; getelementptr %X, %X* %4, i32 %5    call void @X_Create_Default(%X* %8)    %9 &#x3D; add i32 %5, 1    store i32 %9, i32* %i    br label %.loop_head.loop_tail:    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-调用-LLVM-接口"><a href="#C-调用-LLVM-接口" class="headerlink" title="C 调用 LLVM 接口"></a>C 调用 LLVM 接口</h3><p>项目在：<a href="https://github.com/ming1016/DaiMingCreationToolbox/tree/main/Project/UseCompiler/CLLVMCase">CLLVMCase</a></p><p>这是代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*int sum(int a, int b) &#123;    return a + b;&#125;,*/</span><span class="token keyword">void</span> <span class="token function">csum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    LLVMModuleRef module <span class="token operator">=</span> <span class="token function">LLVMModuleCreateWithName</span><span class="token punctuation">(</span><span class="token string">"sum_module"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LLVMTypeRef param_types<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function">LLVMInt32Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">LLVMInt32Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">// 函数参数依次是函数的类型，参数类型向量，函数数，表示函数是否可变的布尔值。</span>    LLVMTypeRef ftype <span class="token operator">=</span> <span class="token function">LLVMFunctionType</span><span class="token punctuation">(</span><span class="token function">LLVMInt32Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param_types<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LLVMValueRef sum <span class="token operator">=</span> <span class="token function">LLVMAddFunction</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token string">"sum"</span><span class="token punctuation">,</span> ftype<span class="token punctuation">)</span><span class="token punctuation">;</span>      LLVMBasicBlockRef entry <span class="token operator">=</span> <span class="token function">LLVMAppendBasicBlock</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token string">"entry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LLVMBuilderRef builder <span class="token operator">=</span> <span class="token function">LLVMCreateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LLVMPositionBuilderAtEnd</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// IR 的表现形式有三种，一种是内存中的对象集，一种是文本语言，比如汇编，一种是二进制编码字节 bitcode。</span>      LLVMValueRef tmp <span class="token operator">=</span> <span class="token function">LLVMBuildAdd</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> <span class="token function">LLVMGetParam</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">LLVMGetParam</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LLVMBuildRet</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">char</span> <span class="token operator">*</span>error <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">LLVMVerifyModule</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> LLVMAbortProcessAction<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LLVMDisposeMessage</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 可执行引擎，如果支持 JIT 就用它，否则用 Interpreter。</span>    LLVMExecutionEngineRef engine<span class="token punctuation">;</span>    error <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">LLVMLinkInMCJIT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LLVMInitializeNativeTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LLVMCreateExecutionEngineForModule</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>engine<span class="token punctuation">,</span> module<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Could not create execution engine: %s\n"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span> <span class="token function">LLVMDisposeMessage</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">long</span> <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> y <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>      <span class="token comment">// LLVM 提供了工厂函数来创建值，这些值可以被传递给函数。</span>    LLVMGenericValueRef args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function">LLVMCreateGenericValueOfInt</span><span class="token punctuation">(</span><span class="token function">LLVMInt32Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">LLVMCreateGenericValueOfInt</span><span class="token punctuation">(</span><span class="token function">LLVMInt32Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token function">LLVMInitializeNativeAsmPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LLVMInitializeNativeAsmParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 函数调用</span>    LLVMGenericValueRef result <span class="token operator">=</span> <span class="token function">LLVMRunFunction</span><span class="token punctuation">(</span>engine<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">LLVMGenericValueToInt</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 生成 bitcode 文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LLVMWriteBitcodeToFile</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token string">"sum.bc"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Could not write bitcode to file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token function">LLVMDisposeBuilder</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LLVMDisposeExecutionEngine</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Swift-调用-LLVM-接口"><a href="#Swift-调用-LLVM-接口" class="headerlink" title="Swift 调用 LLVM 接口"></a>Swift 调用 LLVM 接口</h3><p>llvm 的接口还可以通过 swift 来调用。</p><p>先创建一个 module.modulemap 文件，创建 LLVMC.h 和 LLVMC.c 文件，自动生成 SwiftLLVMCase-Bridging-Header.h。设置 header search paths 为 llvm 所在路径 <del>&#x2F;usr&#x2F;local&#x2F;opt&#x2F;llvm&#x2F;include</del> ，library search paths 设置为 <del>&#x2F;usr&#x2F;local&#x2F;opt&#x2F;llvm&#x2F;lib</del> 。将 <del>&#x2F;usr&#x2F;local&#x2F;opt&#x2F;llvm&#x2F;lib&#x2F;libLLVM.dylib</del> 加到 Linked Frameworks and Libraries 里。</p><p>module.modulemap 内容</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">module llvm <span class="token punctuation">[</span>extern_c<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    header <span class="token string">"LLVMC.h"</span>    export <span class="token operator">*</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>LLVMC.h 里设置要用到的 llvm 的头文件，比如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LLVMC_h</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LLVMC_h</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Analysis.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/BitReader.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/BitWriter.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Core.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Disassembler.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/ExecutionEngine.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/IRReader.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Initialization.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Linker.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Object.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Support.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Target.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/TargetMachine.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Transforms/IPO.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Transforms/PassManagerBuilder.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Transforms/Scalar.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Transforms/Vectorize.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/lto.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* LLVMC_h */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 swift 中写如下代码试试</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Foundation</span><span class="token keyword">import</span> llvm<span class="token keyword">func</span> <span class="token function-definition function">hiIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token class-name">LLVMModuleCreateWithName</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"HiModule"</span></span><span class="token punctuation">)</span>    <span class="token class-name">LLVMDumpModule</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span>    <span class="token class-name">LLVMDisposeModule</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">hiIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">;</span> ModuleID <span class="token operator">=</span> <span class="token string">'HiModule'</span>source_filename <span class="token operator">=</span> <span class="token string">"HiModule"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面一个简单的 c 函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 llvm 的接口写对应的 IR 代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">cSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"CSum"</span></span><span class="token punctuation">)</span>    <span class="token keyword">let</span> bd <span class="token operator">=</span> <span class="token class-name">IRBuilder</span><span class="token punctuation">(</span>module<span class="token punctuation">:</span> m<span class="token punctuation">)</span>    <span class="token keyword">let</span> f1 <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"sum"</span></span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token class-name">FunctionType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">IntType</span><span class="token punctuation">.</span>int32<span class="token punctuation">,</span> <span class="token class-name">IntType</span><span class="token punctuation">.</span>int32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">IntType</span><span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 添加基本块</span>    <span class="token keyword">let</span> entryBB <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">appendBasicBlock</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"entry"</span></span><span class="token punctuation">)</span>    bd<span class="token punctuation">.</span><span class="token function">positionAtEnd</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> entryBB<span class="token punctuation">)</span>      <span class="token keyword">let</span> a <span class="token operator">=</span> f1<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> f1<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token keyword">let</span> tmp <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">buildAdd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    bd<span class="token punctuation">.</span><span class="token function">buildRet</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>      m<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dump 出对应 IR 如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; ModuleID &#x3D; &#39;CSum&#39;source_filename &#x3D; &quot;CSum&quot;define i32 @sum(i32 %0, i32 %1) &#123;entry:%2 &#x3D; add i32 %0, %1ret i32 %2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于控制流函数，比如下面的 swift 函数：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">giveMeNumber</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> isBig <span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> re <span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">if</span> <span class="token operator">!</span>isBig <span class="token punctuation">&#123;</span> <span class="token comment">// the fibonacci series (sort of)</span> re <span class="token operator">=</span> <span class="token number">3</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// the fibonacci series (sort of) backwards</span> re <span class="token operator">=</span> <span class="token number">4</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> re<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 llvm 接口编写 IR，代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">controlFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"CF"</span></span><span class="token punctuation">)</span>    <span class="token keyword">let</span> bd <span class="token operator">=</span> <span class="token class-name">IRBuilder</span><span class="token punctuation">(</span>module<span class="token punctuation">:</span> m<span class="token punctuation">)</span>    <span class="token keyword">let</span> f1 <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"calculateFibs"</span></span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token class-name">FunctionType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">IntType</span><span class="token punctuation">.</span>int1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">FloatType</span><span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> entryBB <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">appendBasicBlock</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"entry"</span></span><span class="token punctuation">)</span>    bd<span class="token punctuation">.</span><span class="token function">positionAtEnd</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> entryBB<span class="token punctuation">)</span>      <span class="token comment">// 给本地变量分配空间 let retVal : Double</span>    <span class="token keyword">let</span> local <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">buildAlloca</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token class-name">FloatType</span><span class="token punctuation">.</span>double<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"local"</span></span><span class="token punctuation">)</span>      <span class="token comment">// 条件比较 if !backward</span>    <span class="token keyword">let</span> test <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">buildICmp</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">IntType</span><span class="token punctuation">.</span>int1<span class="token punctuation">.</span><span class="token function">zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>equal<span class="token punctuation">)</span>      <span class="token comment">// 创建 block</span>    <span class="token keyword">let</span> thenBB <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">appendBasicBlock</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"then"</span></span><span class="token punctuation">)</span>    <span class="token keyword">let</span> elseBB <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">appendBasicBlock</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"else"</span></span><span class="token punctuation">)</span>    <span class="token keyword">let</span> mergeBB <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">appendBasicBlock</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"merge"</span></span><span class="token punctuation">)</span>      bd<span class="token punctuation">.</span><span class="token function">buildCondBr</span><span class="token punctuation">(</span>condition<span class="token punctuation">:</span> test<span class="token punctuation">,</span> then<span class="token punctuation">:</span> thenBB<span class="token punctuation">,</span> <span class="token keyword">else</span><span class="token punctuation">:</span> elseBB<span class="token punctuation">)</span>      <span class="token comment">// 指到 then block</span>    bd<span class="token punctuation">.</span><span class="token function">positionAtEnd</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> thenBB<span class="token punctuation">)</span>    <span class="token keyword">let</span> thenVal <span class="token operator">=</span> <span class="token class-name">FloatType</span><span class="token punctuation">.</span>double<span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">89</span><span class="token punctuation">)</span>    bd<span class="token punctuation">.</span><span class="token function">buildBr</span><span class="token punctuation">(</span>mergeBB<span class="token punctuation">)</span> <span class="token comment">// 到 merge block</span>      <span class="token comment">// 指到 else block</span>    bd<span class="token punctuation">.</span><span class="token function">positionAtEnd</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> elseBB<span class="token punctuation">)</span>    <span class="token keyword">let</span> elseVal <span class="token operator">=</span> <span class="token class-name">FloatType</span><span class="token punctuation">.</span>double<span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">109</span><span class="token punctuation">)</span>    bd<span class="token punctuation">.</span><span class="token function">buildBr</span><span class="token punctuation">(</span>mergeBB<span class="token punctuation">)</span> <span class="token comment">// 到 merge block</span>      <span class="token comment">// 指到 merge block</span>    bd<span class="token punctuation">.</span><span class="token function">positionAtEnd</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> mergeBB<span class="token punctuation">)</span>    <span class="token keyword">let</span> phi <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">buildPhi</span><span class="token punctuation">(</span><span class="token class-name">FloatType</span><span class="token punctuation">.</span>double<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"phi_example"</span></span><span class="token punctuation">)</span>    phi<span class="token punctuation">.</span><span class="token function">addIncoming</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">(</span>thenVal<span class="token punctuation">,</span> thenBB<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>elseVal<span class="token punctuation">,</span> elseBB<span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 赋值给本地变量</span>    bd<span class="token punctuation">.</span><span class="token function">buildStore</span><span class="token punctuation">(</span>phi<span class="token punctuation">,</span> to<span class="token punctuation">:</span> local<span class="token punctuation">)</span>    <span class="token keyword">let</span> ret <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">buildLoad</span><span class="token punctuation">(</span>local<span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token class-name">FloatType</span><span class="token punctuation">.</span>double<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"ret"</span></span><span class="token punctuation">)</span>    bd<span class="token punctuation">.</span><span class="token function">buildRet</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>      m<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出对应 IR 代码：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; ModuleID &#x3D; &#39;CF&#39;source_filename &#x3D; &quot;CF&quot;define double @giveMeNumber(i1 %0) &#123;entry:  %local &#x3D; alloca i32, align 4  %1 &#x3D; icmp eq i1 %0, false  br i1 %1, label %then, label %elsethen:                                             ; preds &#x3D; %entry  br label %mergeelse:                                             ; preds &#x3D; %entry  br label %mergemerge:                                            ; preds &#x3D; %else, %then  %phi_example &#x3D; phi i32 [ 3, %then ], [ 4, %else ]  store i32 %phi_example, i32* %local, align 4  %ret &#x3D; load i32, i32* %local, align 4  ret i32 %ret&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有完整代码 <a href="https://github.com/ming1016/DaiMingCreationToolbox/tree/main/Project/UseCompiler/SwiftLLVMCase">SwiftLLVMCase</a>。</p><h2 id="解释执行-bitcode（IR）"><a href="#解释执行-bitcode（IR）" class="headerlink" title="解释执行 bitcode（IR）"></a>解释执行 bitcode（IR）</h2><p>IR 的表现形式有三种，一种是内存中的对象集，一种是文本语言，一种是二进制编码字节 bitcode。</p><p>对于 Intel 芯片可以通过 <a href="https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html">Pin</a>，arm 架构可以用 <a href="https://github.com/DynamoRIO/dynamorio">DynamoRIO</a>，目前 DynamoRIO 只支持 Window、Linux 和 Android 系统，对 macOS 的支持还在进行中。另一种方式是通过基于 llvm 的 interpreter 开发来实现解释执行 bitcode，llvm 用很多 C++ 的接口在内存中操作，将可读的文本文件解析到内存中，编译过程文本的 IR 不会生成，只会生成一种紧凑的二进制表示，也就是 bitcode。下面具体说下怎么做。</p><p>先构建一个支持 libffi 的 llvm。编译 llvm 源码时加上 libffi 的选项来打开 DLLVM_ENABLE_FFI 的选项打开 libffi，编译命令如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">cmake -G Ninja -DLLVM_ENABLE_FFI:BOOL&#x3D;ON ..&#x2F;llvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个项目。cmake 文件里注意设置自己的编译生成的 llvm 路径，还有 llvm 源码路径，设置这个路径主要是为了用安装 llvm 时没有包含的 ExecutionEngine&#x2F;Interpreter&#x2F;Interpreter.h 头文件。</p><p>实现方式是通过访问 llvm 的 ExcutionEngine 进行 IR 指令解释执行。声明一个可访问 ExcutionEngine 内部的类 PInterpreter，代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 使用 public 访问内部class PInterpreter : public llvm::ExecutionEngine,       public llvm::InstVisitor&lt;llvm::Interpreter&gt; &#123;    public:    llvm::GenericValue ExitValue;    llvm::DataLayout TD;    llvm::IntrinsicLowering *IL;    std::vector&lt;llvm::ExecutionContext&gt; ECStack;    std::vector&lt;llvm::Function*&gt; AtExitHandlers;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后声明要用的方法。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class MInterpreter : public llvm::ExecutionEngine &#123;    public:    llvm::Interpreter *interp;    PInterpreter *pItp;    llvm::Module *module;      explicit MInterpreter(llvm::Module *M);    virtual ~MInterpreter();      virtual void run();    virtual void execute(llvm::Instruction &amp;I);      &#x2F;&#x2F; 入口    virtual int runMain(std::vector&lt;std::string&gt; args,  char * const *envp &#x3D; 0);      &#x2F;&#x2F; 遵循 ExecutionEngine 接口    llvm::GenericValue runFunction( llvm::Function *F, const std::vector&lt;llvm::GenericValue&gt; &amp;ArgValues    );    void *getPointerToNamedFunction(const std::string &amp;Name,      bool AbortOnFailure &#x3D; true);    void *recompileAndRelinkFunction(llvm::Function *F);    void freeMachineCodeForFunction(llvm::Function *F);    void *getPointerToFunction(llvm::Function *F);    void *getPointerToBasicBlock(llvm::BasicBlock *BB);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上面代码所示，因为要执行 IR，所以用到获取 IR 的函数和基本块地址的方法，getPointerToFunction 和 getPointerToBasicBlock。最后再执行指令时，先打印出指令，然后进行执行，代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class MingInterpreter : public MInterpreter &#123;    public:    MingInterpreter(Module *M) : MInterpreter(M) &#123;&#125;;    virtual void execute(Instruction &amp;I) &#123; I.print(errs()); MInterpreter::execute(I);    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码参看 <a href="https://github.com/ming1016/DaiMingCreationToolbox/tree/main/Project/UseCompiler/MingInterpreter">MingInterpreter</a>。</p><p>项目是基于 c 语言，可以使用 llvm include 里的 llvm-c&#x2F;ExecutionEngine.h 接口头文件，使用 c 来编写。OC 和 Swift 项目还需要根据各自语言特性进行开发完善解释功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇还会持续更新，增加更多用 llvm 干的事情，直到本句话被删掉为止。欢迎关注本篇。&lt;/p&gt;
&lt;p&gt;目前在做一些编译相关调研。先前写过篇《
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="LLVM" scheme="http://ming1016.github.io/tags/LLVM/"/>
    
  </entry>
  
  <entry>
    <title>WWDC22 笔记</title>
    <link href="http://ming1016.github.io/2022/06/10/wwdc22-notes/"/>
    <id>http://ming1016.github.io/2022/06/10/wwdc22-notes/</id>
    <published>2022-06-10T04:13:57.000Z</published>
    <updated>2022-06-14T05:09:19.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>今年是 WWDC 的第39个年头了。今年的 WWDC.playground 活动()是 SwiftGG、T 沙龙和老司机技术一起会和社区开发者们一起聊聊这次 WWDC。WWDC.playground 活动在节日期间每天都会有直播，我会和 61、13 他们参加 6月11日晚上8点那场直播。</p><p>下面我整理了一份今年 WWDC 的指南，也算提供个方便的入口吧。</p><ol><li><a href="https://www.apple.com/apple-events/">WWDC22 直播地址</a>、<a href="https://m.weibo.cn/p/2318180003_4873_423">微博直播</a>、<a href="https://www.youtube.com/watch?v=q5D55G7Ejs8">WWDC22 YouTube 地址</a></li><li><a href="https://developer.apple.com/wwdc22">Apple WWDC22 页面</a></li><li><a href="https://developer.apple.com/news/?id=v5kliro5">Apple WWDC22 指南</a></li><li><a href="https://apps.apple.com/us/app/apple-developer/id640199958">Apple Developer app</a> 观看 Session 的 Apple 出的 App。</li><li><a href="https://developer.apple.com/wwdc22/sessions/">Session 网页版</a></li><li><a href="https://developer.apple.com/wwdc22/digital-lounges/">Digital Lounge</a> 注册感兴趣的主题，到时候就可以和 Apple 工程师在 Slack 上一起看 Session，交流。</li><li><a href="https://developer.apple.com/wwdc22/labs/">Labs</a> 可以获得和 Apple 专家一对一指导。6号 keynote 完后就可以开始预约。</li><li><a href="https://developer.apple.com/wwdc22/beyond-wwdc/">Beyond WWDC22</a> 和去年一样，这里是 Apple 制作的世界各地的社区活动。</li><li><a href="https://discord.com/invite/YseNtkGS">weak self Discord WWDC22 Keynote Watch Party</a> 全球最多听众的 iOS 中文 Podcast 之一 weak self 的活动。</li><li><a href="https://www.swiftlyrush.com/category/wwdc22/">Swiftly Rush WWDC22</a></li><li><a href="https://iosfeeds.com/wwdc22">iOS Feeds 的 WWDC 2022 新闻聚合</a></li><li><a href="https://wwdc.io/">WWWDC.io App</a> 社区的看 Session 的 App。</li><li>Keynote 后的 Platforms State of the Union 这个主题是对后面一周 Session 的总结，开发者可以重点关注下。</li><li><a href="https://www.wwdcnotes.com/">WWDC Notes</a> 汇聚了大家的 Session 笔记，可以快速看到各个 Session 的重点。</li><li><a href="https://developer.apple.com/documentation/technologies">Technologies</a> 这里是 Apple 框架 API 分类地址，看完 Session 可以直接在这里找对应 API 的更新。还有个网站 <a href="http://codeworkshop.net/objc-diff/sdkdiffs/">Apple Platform SDK API Differences</a> 会列出新 SDK 里有哪些框架更新了。</li><li><a href="https://developer.apple.com/design/awards/">Apple Design Awards 提名作品</a></li></ol><p>Apple Design Awards 提名作品，我先列几个我喜欢的：</p><ol><li>procreate</li><li>Wylde Flowers</li><li>笼中窥梦</li><li>Gibbon: Beyond the Trees</li><li>Vectornator: Design Software</li><li>Wylde Flowers</li><li>Behind the Frame</li><li>MD Clock - Live in the present</li><li>专注面条</li><li>Townscaper</li></ol><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/wwdc22-notes/01.png" class="lozad post-image"src="/uploads/wwdc22-notes/01.png"></p><p>今天最让我印象深刻是 M2、Lock screen widgets、Stage manager、Swift Charts、WeatherKit、SwiftUI Navigation API、只要一个 1024x1024 App Icon、Sticky headers on Xcode scrolling、Xcode View Debugger 可以用于 SwiftUI 了，还有 iOS 16 原生的支持 Nintendo Switch Pro 手柄了。</p><p>后面我将更多内容使用点对点的分发，可以用 <a href="https://www.planetable.xyz/">Planet</a> 关注，我的 IPNS 是：k51qzi5uqu5dlorvgrleqaphsd1suegn8w40xwhxl0bgsyxw3zerivt59xbk74</p><p>Keynote 要点：</p><ul><li>iOS 16<ul><li>new lock screen</li><li>live activities</li><li>extend focus to lock screen</li><li>forcus filter for apps</li><li>dictation improvements</li><li>live text in video</li><li>visual lookup</li><li>maps<ul><li>multistop routing</li><li>transit(add card to wallet)</li><li>new details</li><li>lookaround api</li></ul></li><li>iCloud shared photo library</li><li>persanalized spatial audio</li><li>quick notes on iPhone</li><li>fitness app without watch</li><li>messages<ul><li>edit messages</li><li>delete messages</li><li>mark as unread</li><li>share play</li></ul></li><li>pay<ul><li>tap to pay on iPhone</li><li>order tracking</li></ul></li><li>carplay<ul><li>widgets</li><li>more personalization</li><li>multi-screen</li></ul></li><li>safety check<ul><li>quickly remove access for others</li></ul></li><li>home<ul><li>introduce matter as new standard</li><li>redesign of app</li></ul></li></ul></li><li>M2<ul><li>15.8 trillion operations per seconds</li><li>10-core GPU</li><li>macbook air and macbook pro 13”</li><li>better and faster</li><li>silent design</li><li>fast charge</li><li>new colors</li><li>magsafe</li><li>audio jack</li></ul></li><li>macOS Ventura<ul><li>improved spotlight</li><li>undo send and more</li><li>shared tab groups</li><li>passkeys</li><li>desk view</li><li>stage manager</li><li>continuity for facetime</li><li>use iPhone as camera on macbook</li></ul></li><li>iPadOS 16<ul><li>weather app</li><li>WeatherKit</li><li>collaborations api</li><li>freeform board</li><li>stage manager</li></ul></li><li>WatchOS 9<ul><li>four new watch faces</li><li>new ShareKit api</li><li>improved metrics for running</li><li>heart rate zones</li><li>create custom workouts</li></ul></li></ul><p>重要的几个信息：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2022/102/">Platforms State of the Union</a> 汇总 WWDC22 技术的 Session，必看。</li><li><a href="https://developer.apple.com/ios/">iOS 16 新 API 和功能</a> Apple 的整理。</li><li><a href="https://developer.apple.com/documentation/New-Technologies-WWDC22">New Technologies WWDC22</a> Apple 整理的 WWDC22 上的新技术。</li><li><a href="https://developer.apple.com/sample-code/wwdc/2022/">WWDC22 Sample Code</a>  </li><li><a href="https://developer.apple.com/documentation/ios-ipados-release-notes/ios-ipados-16-release-notes">iOS and iPadOS 16 release notes</a> 系统接口更新说明，包括 SwiftUI 更新了啥。</li><li><a href="https://developer.apple.com/download/applications/">下载 Xcode 14 beta</a> 直接在开发者官方下载地方下。7个G，这次做了裁剪，手表和电视都做成了可选。</li><li><a href="https://webkit.org/blog/12824/news-from-wwdc-webkit-features-in-safari-16-beta/">Webkit 大量更新</a></li></ul><p>大赞的库：</p><ul><li><a href="https://developer.apple.com/xcode/swiftui/">SwiftUI 更新介绍</a></li><li><a href="https://developer.apple.com/documentation/Charts">Swift Charts</a> 今年 WWDC 的惊喜。Swifty Rush 的文章介绍 <a href="https://www.swiftlyrush.com/swift-charts-with-swiftui/">Swift Charts with SwiftUI</a>。</li><li>Navigation API 又一个惊喜。从以前的 Navigation 迁移到新 API 的文档说明 <a href="https://developer.apple.com/documentation/swiftui/migrating-to-new-navigation-types?changes=latest_minor">Migrating to New Navigation Types</a>。可以看 <a href="https://developer.apple.com/documentation/swiftui/navigationstack?changes=latest_minor">NavigationStack</a> 、<a href="https://developer.apple.com/documentation/swiftui/navigationsplitview">NavigationSplitView</a>。相关 Session 是 <a href="https://developer.apple.com/videos/play/wwdc2022/10054/">The SwiftUI cookbook for navigation</a>。Natalia Panferova 的文章的介绍 <a href="https://nilcoalescing.com/blog/SwiftUINavigation2022/">Overview of the New SwiftUI Navigation APIs</a></li><li>macOS Window 支持，等到了。参看这个示例 <a href="https://developer.apple.com/documentation/swiftui/bringing_multiple_windows_to_your_swiftui_app">Bringing multiple windows to your SwiftUI app</a>。</li><li><a href="https://developer.apple.com/documentation/RegexBuilder">RegexBuilder</a>  构建正则表达式的 DSL</li><li>Live Text API</li><li><a href="https://developer.apple.com/weatherkit/get-started/">Weatherkit 指南</a> 每月在 500k 次调用内是免费。</li><li><a href="https://developer.apple.com/documentation/RoomPlan">RoomPlan 接口文档</a> 用摄像头扫描物理环境，创建房间的 3D 模型。<a href="https://developer.apple.com/augmented-reality/roomplan/">Introducing RoomPlan</a> 介绍 RoomPlan。</li><li><a href="https://developer.apple.com/documentation/spatial">Spatial</a> 轻量 3D 数学库。</li><li>Passkey (FIDO) 原理和 Web3 钱包核心逻辑差不多。</li><li>DriverKit 安全的 USB 和 PCI 硬件设备连接到 iPad 的库。</li></ul><p>好用的功能和组件：</p><ul><li><a href="https://developer.apple.com/documentation/uikit/uicalendarview">UICalendarView</a> 日历视图</li><li><a href="https://developer.apple.com/documentation/backgroundassets/badownloadmanager">BADownloadManager</a> 下载队列管理器。</li><li><a href="https://developer.apple.com/documentation/swiftui/scene/backgroundtask(_:action:)?changes=latest_minor">backgroundTask(_:action:)</a> </li><li>ImageRenderer 将 View 生成图片。</li><li>presentationDetents 优秀。示例 <a href="https://www.swiftlyrush.com/using-presentation-detents-in-swiftui/">Using Presentation Detents in SwiftUI</a></li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0180-string-index-overhaul.md">String Index 升级</a></li></ul><p>一些方便上手的例子：</p><ul><li><a href="https://developer.apple.com/documentation/Xcode/configuring-a-multiplatform-app-target">Configuring a multiplatform app</a> 单代码，多平台 in Xcode 14。</li><li><a href="https://developer.apple.com/documentation/swiftui/food_truck_building_a_swiftui_multiplatform_app/">Food Truck: Building a SwiftUI multiplatform app</a> 示例了 NavigationSplitView、Layout、Chart 和 WeatherKit 的运用。</li></ul><p>一些感兴趣的 Session：</p><ul><li><a href="https://developer.apple.com/wwdc22/topics/">Session 按主题分类</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/110354/">What’s new in Swift</a></li><li><a href="https://developer.apple.com/wwdc22/topics/swift/">Swift Session、Lab 和 Digital Lounges 合集</a> Apple 专门为 Swift 制作的 WWDC22 页面。</li><li><a href="https://developer.apple.com/videos/play/wwdc2022/110350/">Visualize and optimize Swift concurrency</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/110362/">Link fast: Improve build and launch times</a> 构建和启动加快</li><li><a href="https://developer.apple.com/videos/play/wwdc2022/110364/">Demystify parallelization in Xcode builds</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/10002/">Create macOS or Linux virtual machines</a></li></ul><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/wwdc22-notes/02.jpg" class="lozad post-image"src="/uploads/wwdc22-notes/02.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/wwdc22-notes/03.jpg" class="lozad post-image"src="/uploads/wwdc22-notes/03.jpg"></p><p>WWDC.playground 很精彩，怎么感觉昨天的 WWDC.playground 像是听了一期枫言枫语呢。预感 11 号可能会变成为一期 weak self 呢。</p><p>昨天老司机还整理了份 WWDC22 Session 观看介绍的<a href="https://wwdc-reference.feishu.cn/wiki/wikcnXl4ioToZuW4yvfAqUoNQFS?sheet=Lqblfd&table=tblGVOzKgFhVpBWg&view=vewysxfUqf">列表</a></p><p>Apple 出的内容看不够的话，可使用 <a href="https://iosfeeds.com/wwdc22">Follow WWDC 2022 News!</a> 来看最新的 WWDC 相关的社区文章。</p><p>下面是我今天的一些记录。</p><h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h3><p>代码补全的更新。以前多个可选参数的体验很差，这次输入参数比如 frame 里的 maxWidth，会只显示当前要补全的参数。而且速度快了很多。</p><p>以前是编完源码再生成 module，然后 link编好的文件，最后再 link。现在整个过程改成并行执行，同时 link 还快了两倍。结果是比以前快了25%，核越多效果越明显。还有可可视化整个过程。</p><p>多平台以前是多个 tagets，现在是在一个 target 里管理。</p><p>Hangs 是官方线上主线程被卡了的检查工具，在 Organizer 里查看对应问题堆栈也很方便。</p><p>当然最爱的还是 sticky headers，秒杀其它编辑器 （虽然我还是觉得 Emacs 最好，由于会暴露年龄，一般我都不说）。</p><p>还有内存也好了很多，总体来说，这次 Xcode 更新很棒。</p><p>完整 <a href="https://developer.apple.com/documentation/xcode-release-notes/xcode-14-release-notes">Xcode release notes</a> </p><h3 id="WidgetKit"><a href="#WidgetKit" class="headerlink" title="WidgetKit"></a>WidgetKit</h3><p>WidgetKit 将 WatchOS 上的 Circular、Rectangle 还有 Inline 带到了 iOS 和其他平台。</p><h3 id="WeatherKit"><a href="#WeatherKit" class="headerlink" title="WeatherKit"></a>WeatherKit</h3><p>安全方便获得用户位置信息，只用于天气。</p><h3 id="VisionKit"><a href="#VisionKit" class="headerlink" title="VisionKit"></a>VisionKit</h3><p>Live Text API，感觉这类库都是为了以后出眼镜做铺垫的。</p><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>macOS 支持window，menuBar也支持了。</p><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><p>distrubuted actor 更安全，还可以在设备间（<code>本地设备&lt;-&gt;本地设备</code>，<code>本地设备&lt;-&gt;服务器</code>）进行通信保护。</p><p>泛型新语法 some 和 any 关键字写起来真的简化了很多。</p><p>Swift 的更新了什么，除了 Session 外，还可以参看 Paul Hudson 这篇文章 <a href="https://www.hackingwithswift.com/articles/249/whats-new-in-swift-5-7">What’s new in Swift 5.7</a> ，还有 Donny Wals 的这篇 <a href="https://www.donnywals.com/whats-the-difference-between-any-and-some-in-swift-5-7/">What’s the difference between any and some in Swift 5.7?</a> 。</p><h3 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h3><p>SwiftUI里没有用属性包装的属性也能够和视图变化绑定了。</p><p>关于 SwiftUI 的更新，Paul Hudson 写了很多例子 <a href="https://www.hackingwithswift.com/articles/250/whats-new-in-swiftui-for-ios-16">What’s new in SwiftUI for iOS 16</a> 。</p><p>Reda Lemeden 整理了 WWDC22 SwiftUI 的所有相关内容 <a href="https://redalemeden.com/collections/swiftui-2022/">SwiftUI @ WWDC 2022</a> 。可见社区对 SwiftUI 热情依然是最高的。</p><h3 id="SPM"><a href="#SPM" class="headerlink" title="SPM"></a>SPM</h3><p>Swift Package Plugin，本来用其他语言，比如 ruby 、python 或 shell 做的事情，现在可以通过 Swift 语言来完成了，写的 plugin 还可以方便的在 Xcode 中使用。</p><h3 id="虚机"><a href="#虚机" class="headerlink" title="虚机"></a>虚机</h3><p>使用 Virtualization 框架，享受 Rosetta 2 的优势，运行 x86-64 Linux 系统。</p><p>Apple 出虚机可运行 Linux 系统这点可以看得出 Apple 对开源的拥抱，原因还有一点是 Swift 也可以用在 Linux 服务器上了，Apple 用心良苦，也是想让开发者用本打算买其它硬件的钱来买 Apple 的硬件吧，更好的榨干 Apple 硬件过于优秀的性能，如同新出 Stage Manager 通过投到大屏来榨干 M1 的 iPad 性能。 不光是这样，还有文件，也就是存储设备也只需要一份了，更方便，还有苹果特有的 Trackpad 和 Magic mouse 也能够用于 Linux 系统中。</p><p>虚机运行 Linux 和 macOS 的区别是，启动 Linux 使用的是 EFI Boot Loader 来加载 Linux 文件，VirtioGraphicDevice 进行 Linux 系统图形界面的设置和渲染。使用Rosetta 运行 Linux 系统，运行 Linux 就是比其它虚机要快。</p><p>介绍的 session <a href="https://developer.apple.com/wwdc22/10002">Create macOS or Linux virtual machines</a> ，代码说明 <a href="https://developer.apple.com/documentation/virtualization/running_gui_linux_in_a_virtual_machine_on_a_mac">Running GUI Linux in a virtual machine on a Mac</a>，相关主题 <a href="https://developer.apple.com/documentation/virtualization">Virtualization</a></p><h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/wwdc22-notes/04.png" class="lozad post-image"src="/uploads/wwdc22-notes/04.png"></p><p>今晚五神会现身 WWDC.playground 。内容涉及 SwiftUI 和 AR，不要错过。</p><h3 id="今日零散记录"><a href="#今日零散记录" class="headerlink" title="今日零散记录"></a>今日零散记录</h3><p>从 Apple 推出 WeatherKit 可以看出，Apple 喜欢把关键和有想象空间盈利价值的技术掌握在自己手上，WeatherKit 提供大量数据，包括分钟、小时、每日预报，还有提前警报，这些信息的商业价值本就很大。</p><p>今天看了 WeatherKit、Swift Chart 还有 SwiftUI 的 Layout，感觉 Apple 的接口设计能力很值得学习，可能具备了这些能力才能更好地沟通。</p><p>swift-algorithms 可以使用 .indexed() 来替代 zip。</p><p>Federico Zanetello 对 Platforms State of the Union 这个 Session 做的<a href="https://www.wwdcnotes.com/notes/wwdc22/102/">笔记</a> 。</p><p>应用层面，今天还有好多 Swift Chart 的介绍。</p><h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><p>Grid、Layout、ViewThatFits、AnyLayout，特别是 Grid 还统一了 HStack 和 VStack。这些布局方式，让先前复杂的要借助 GeometryReader，且容易出错的布局有了更易的写法。Layout 协议可以为 layout 创建自定义属性，另外布局计算也会被缓存。</p><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p><a href="https://developer.apple.com/videos/play/wwdc2022/110362/">Link fast: Improve build and launch time</a> 详细讲了 Apple 今年怎么改进了 link，思路很棒，很值得学习。</p><p>Static linking 和 Dynamic linking ，也就是静态链接和动态链接。</p><p>静态链接就是链接各个编译好的源文件以及链接源文件和编译好的库文件，通过将函数名放到符号表，链接新文件时确定先前是否有包含的 undefined 符号，给函数的数据指令分配地址，最后生成一个有 TEXT、DATA、LINKEDIT 段的可执行文件。</p><p>今年 Apple  通过利用多核优势让静态链接快了两倍。</p><p>具体做法是，并行的拷贝文件内容。并行构建 LINKEDIT 段的各个不同部分。并行改变 UUID 计算和 codesigning 哈希。然后是提高 exports-trie 构建器的算法。使用最新的 Crypto 库利用硬件加速的优势加速 UUID 计算。提高其它静态库处理算法库，debug-notes 生成也更快了。</p><p>Apple 推荐静态库最佳实践是：</p><p>使用 <code>-all_load</code> 或 <code>-force_load</code> 可以让 .a 文件像 .o 文件那样并行处理，不过开启这个选项需要先处理重复的符号。另外一个副作用是会将一些被判断无用的代码也被链接进来，使包体变大，因此开启之前可以先使用静态分析工具分析处理，这个过程定期做就行，不用放到每次编译过程中。演讲者推荐使用 <code>-dead_strip</code> 选项，但是这样做并没有真实去掉费代码，以后这些代码还是会被编译分析，如果只是暂时不用，可以先注释掉。</p><p>使用 <code>-no_exported_symbols</code> 选项。链接器生成的 LINKEDIT 段的一部分是 exports trie，这是一个前缀树，对所有导出的符号名称、地址和标志进行编码。动态库 是会导出符号的，但运行的二进制文件其实是不用这些符号的，因此可以用 <code>-no_exported_symbols</code> 选项来跳过 LINKEDIT 中 trie 数据结构的创建，这样链接起来就快多了。如果程序导出符号是一百万个，这个选项就可以减少 2 到 3 秒的时间。但需要注意的是，如果要加载插件链接回主程序就需要所有的导出的 trie 数据，无法用这个选项。</p><p>另外一个是 <code>-no_deduplicate</code> 选项。先前 Apple 给链接器加了个 pass 用来合并函数的指令相同，函数名不相同，这个 pass 会对每个函数的指令进行递归散列，用这种方式来找重复指令，这样做比较费 CPU，由于调试时其实是不需要关注包大小，因此可以加上 <code>-no_deduplicate</code> 选项来跳过这个 pass。</p><p>这些选项在 Xcode 的 Other Linker Flags 里进行设置即可。</p><p>动态库也就是 dylib，其它平台就是 DSO 或 DLL。 动态链接器不是将代码从库里考到主二进制里，而是记录某种承诺，记录从动态库中使用符号名称，还有库路径。这样做好处就是好复用动态库，不用拷贝多份。虚拟内存看到多进程使用相同动态库，就会重新给这个动态库用相同的物理内存页。</p><p>动态库好处是构建快了，启动加载慢了，多个动态库不光要加载，还要在启动时链接。也就是把链接成本从本地构建换到了用户启动时。动态库还有个缺点是基于动态库的程序会有更多的 dirty 页，因为静态链接时会把全局数据放到主程序同一个 DATA 页中，动态库的话，每个都在自己的 DATA 页中。</p><p>动态库工作的原理是，可执行的二进制会有不同权限的段，至少会有 TEXT、DATA 和 LINKEDIT。分段总是操作系统页大小的倍数。TEXT 段有执行的权限，CPU 可以将页上的字节当做机器代码指令。运行时，dyld 会根据每个段权限将可执行文件 mmap() 到内存，这些段是页大小和页对齐的，虚拟内存系统可以直接将程序或动态库文件设置为 VM 范围的备份存储。在这些页的内存访问前是不会被加载到 RAM 里，就会触发一个页 fault，导致 VM 去读取文件的子范围，将内存填充到需要 RAM 页中。光映射不够，还要用某种方式“wired up”或绑到动态库上。比如要调用动态库上的某个函数，会转换成调用 site，调用 site 成为一个在相同 TEXT 段合成的 sub 的调用，相对地址在构建时就知道了，就意味着可以正确的形成 BL 指令。这样做的好处是，stub 从 DATA 加载一个指针并跳到对应的位置，不用在运行时修改 TEXT 段，dyld 只在运行时改 DATA 段。dyld 所进行的修改很简单，就是在 DATA 段里设置了一个指针而已。</p><p>当 dyld 或应用程序的指针指向自己时要 rebase，ASLR 使 dyld 以随机地址加载动态库，内部指针不能在构建时设置，dyld 在启动时 rebase 这些指针，磁盘上，如果动态库在地址零出被加载，这些指针包含它们的目标地址。LINKEDIT 需要记录的就是每个重定位的位置。然后，dyld 只需将动态库的实际加载地址添加到每个 rebase 位置。还有种修改方式是绑定，绑定就是符号引用，符号存储在 LINKEDIT 中，dyld 在动态库的 exports tire 中找实际地址，然后 dyld 将该值存储在绑定指定的位置。</p><p>今年 Apple 发布了一个新的修改方式 chained fixups。较前面两种的优势就是可以使 LINKEDIT 更小。新格式只存储每个 DATA 页中第一个 fixup 位置和一个导入的符号列表。其它信息编码到 DATA 段。iOS 13.4 就开始支持了。</p><p>下面先说下 dyld 原理介绍。</p><p>dyld 从主可执行文件开始，解析 mach-o 找依赖动态库，对动态库进行 mmap()。然后对每个动态库进行遍历并解析 mach-o 结构，根据需要加载其它动态库。加载完毕，dyld 会查找所有需要绑定符号，并在修改时使用这些地址。最后修改完，dyld 自下而上运行初始化程序。先前做的优化是只要程序和动态库，dyld 很多步骤都可以在首次启动时被缓存。</p><p>今年 Apple 做了更多的优化，这个优化叫 page-in linking，就是 dyld 在启动时做的 DATA 页面修改放到 page-in 时，也可以理解为懒修改。以前，在 mmap() 区域的某些页面中第一次使用某些地址会触发内核读入该页面。现在如果它是一个数据页，内核会应用改页需要的修改。这种机制减少了 dirty 内存和启动时间。意味着 DATA_CONST 也是干净的，可以像 TEXT 页一样被 evicted 和重新创建，以减少内存压力。需要注意的是 page-in linking 只用于启动，dlopen() 不支持。你看，Apple 优化启动的思路也是按需加载。</p><p>Apple 还提供了追踪 dyld 运行情况的 dyld_usage 工具。检查磁盘和 dyld 缓存中的二进制文件的 dyld_info 工具。</p><h3 id="今日推荐-Session"><a href="#今日推荐-Session" class="headerlink" title="今日推荐 Session"></a>今日推荐 Session</h3><p>除了 link 外，还有 <a href="https://developer.apple.com/videos/play/wwdc2022/110356/">Meet distributed actors in Swift</a> 也是比看的，Mike Ash 和 Doug Gregor 一年的心血就在这了。</p><h2 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/wwdc22-notes/05.png" class="lozad post-image"src="/uploads/wwdc22-notes/05.png"></p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>性能的 <a href="https://developer.apple.com/videos/play/wwdc2022/110363">Improve app size and runtime performance</a> Session 值得一看。</p><p>今年苹果通过更有效的检查 Swift 协议，使 OC 消息发送调用更小，使 autorelease elision 更快更小这几个个方面来让 App 体积更小，性能更高。</p><p>Swift 协议检查。</p><p>一个协议通过 as 操作符检查传递值是否符合协议，这种检查会在编译器的构建时间被优化掉，所以往往需要在运行时借助之前计算协议检查元数据来看对象是否真的符合了协议。一些元数据是在编译时建的，但还有很多元数据只能在启动时建立，特别是使用泛型时。协议多了，会增加耗时，差不多会多一半启动时间。</p><p>今年 Apple 推出新的 Swift 运行时，可以提前计算 Swift 协议元数据，作为 App 可执行文件和它在启动时使用的任何动态库的 dyld 闭包的一部分。这个是在系统上的，因此，只要是使用了今年最新系统的 App 都会享受这个优化，可以理解为，新系统上启动老 App 也会快些。</p><p>消息发送。</p><p>Xcode 14 中新的编译器和链接器已经将 ARM64 的消息发送调用从 12 字节减少到 8 字节。因此如果你的 App 都是 OC 代码的话，使用 Xcode 14 编出来的二进制文件可以少 2%。老系统也有效。</p><p>使用 objc_stubs_small 选项可以只优化大小，获得最大的大小优化。objc_msgSend 调动有 8 个字节指令，也就是2个指令是专门用来准备 selector 的，对于任何特定的 selector，总是相同的代码，由于始终是相同的代码，那么就可以对其共享，每个 selector 只 emit 一次，而不是每次发送消息时都 emit。共享这段代码地方是一个叫 selector stub 的函数。</p><p>ARC 会在编译器插入大量的 c 的 retain&#x2F;release 函数调用。这些调用遵守平台应用二进制接口（ABI）所定义的 c 语言 call convention。也就意味着我们要更多代码来完成这些调用，用来传递正确寄存器的指针。Apple 今年推出了自定义的 call convention 根据指针位置，适时使用正确变量而不用移动它，从而摆脱了调用里的多余代码。Apple 果然是坚持用户体验优先，为了更好体验不惜修改 c 的 ABI。</p><p>autorelease elision 。</p><p>App 今年对 objc 运行时进行了修改，使 autorelease elision 更小更快。deployment target 为 iOS 16 今年新系统时才可享用哦。</p><p>Apple 怎么做的呢？</p><p>ARC 在调用方插入一个 retain，在被调用的函数中插入一个 release。当我们返回我们的临时对象时，我们需要在函数中先释放它，因为它要离开 scope。在它还没有任何其它引用时还不能这么做，不然返回前他就会被销毁。Apple 现在使用一个新的 convention ，让其可以返回临时对象。做法是当返回一个自动释放值，编译器会发出一个特殊标记，这个标记会告诉运行时这是符合自动释放条件的。它的后面是 retain，我们会在后面执行。获取返回地址，也就是一个指针，将它先保存起来，然后离开运行时的自动释放调用。在运行时，可以将保留时得到的指正和先前做自动释放时保存的指针进行比较，这样标记指令不再是数据之间的比较，比较指针内存访问少。比较成功就可以省去 autorelease&#x2F;retain。</p><p>autorelease elision 的优化同样也可以减少 2% 大小。感谢 Apple 为了用户和开发者 OKR 的付出。</p><h3 id="SwiftUI-1"><a href="#SwiftUI-1" class="headerlink" title="SwiftUI"></a>SwiftUI</h3><p>new navigation api，看完感觉我做的小册子还有幻灯应用要花些时间好好改改了。</p><p>接下来，有活干了。</p><h3 id="WWDC-playground"><a href="#WWDC-playground" class="headerlink" title="WWDC.playground"></a>WWDC.playground</h3><p>明天的 WWDC.playground 嘉宾有谜底科技和 weak self，欢迎来捧场。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一天&quot;&gt;&lt;a href=&quot;#第一天&quot; class=&quot;headerlink&quot; title=&quot;第一天&quot;&gt;&lt;/a&gt;第一天&lt;/h2&gt;&lt;p&gt;今年是 WWDC 的第39个年头了。今年的 WWDC.playground 活动()是 SwiftGG、T 沙龙和老司机技术一起会和
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>在苹果加速器活动做的 SwiftUI 开发分享</title>
    <link href="http://ming1016.github.io/2022/03/25/develop-with-swiftui/"/>
    <id>http://ming1016.github.io/2022/03/25/develop-with-swiftui/</id>
    <published>2022-03-25T05:04:49.000Z</published>
    <updated>2022-06-14T07:24:33.932Z</updated>
    
    <content type="html"><![CDATA[<p>受 Apple 加速器 SwiftUI 活动邀请，做了个分享，还和喵神、61、浙剑、思琪等社区大神参与了圆桌讨论。这次完善了 SwiftUI 做的幻灯片，比去年要好一点，增加了解释执行代码交互功能。</p><p>为这次幻灯画了几张图，在新西兰认识的画家，指导我了些画法，用其完成了幻灯里的图。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/20.PNG" class="lozad post-image"src="/uploads/develop-with-swiftui/20.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/21.PNG" class="lozad post-image"src="/uploads/develop-with-swiftui/21.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/22.png" class="lozad post-image"src="/uploads/develop-with-swiftui/22.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/24.PNG" class="lozad post-image"src="/uploads/develop-with-swiftui/24.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/25.PNG" class="lozad post-image"src="/uploads/develop-with-swiftui/25.PNG"></p><h2 id="macOS-多栏"><a href="#macOS-多栏" class="headerlink" title="macOS 多栏"></a>macOS 多栏</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/06.png" class="lozad post-image"src="/uploads/develop-with-swiftui/06.png"></p><p>内容有 macOS 多栏、Toolbar、文件夹嵌套、文本和代码编辑器、网格视图和斜45度视觉。</p><p>macOS 的多栏只需要使用 NavigationView 就可以了，闭包里的第一个视图就是 Sidebar，后面的视图可以作为占位视图，显示一些初始信息，通过 Sidebar 的 NavigationLink 来设置第二栏的视图就好了，第三栏通过第二栏来指定。</p><p>如果想要隐藏收起 Sidebar 需要先获取 SplitViewController，然后调用 toggleSidebar 方法就可以了。如果想要收起最右侧视图或任意一栏视图，可以在 SplitViewController 的 splitViewItems 里找到对应的 Item，比如最右一栏就是 splitViewItems.last。调用找到视图的 animator().isCollapsed.toggle() 就可以了。</p><p>如果只想让其中一栏全屏显示，先在 splitViewItems 找到那一栏，然后调用对应 ViewController 里 View 的 enterFullScreenMode 方法，要注意的是，设置的 Options 需要包含 .autoHideDock 和 .autoHideMenuBar，否则就没法退出全屏了。由于全屏后会将视图放到另一个 Window 中，因此退出全屏可以直接调用当前 key window 的 contentView 的 exitFullScreenMode() 方法。</p><h2 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/18.png" class="lozad post-image"src="/uploads/develop-with-swiftui/18.png"></p><p>一般的 macOS 程序多栏顶部会有一些功能按钮，以方便用户了解到程序的主要高频功能，比如 Xcode 的调试和 Target 选择按钮，Keynote 的播放、添加幻灯片、缩放文本、形状、表格、图表等按钮。这些按钮都可以通过 Toolbar 来实现。Toolbar 根据摆放位置和语义设置了一组 Options，通过 Options 统一了多平台的表现形式，比如默认位置的 option 就是 .automatic，中间位置就是 .principal，macOS Touch Bar iOS 的虚拟键盘上的按钮用的就是 .keyboard。另外还有很多语义表示，用于放置到不同平台特定的位置，比如用于导航的按钮在 macOS 上会出现在最左侧，用的就是 .navigation 这种语义的 Options。</p><h2 id="文件夹嵌套结构"><a href="#文件夹嵌套结构" class="headerlink" title="文件夹嵌套结构"></a>文件夹嵌套结构</h2><p>得益于 keypaths 在 SwiftUI 中的应用，文件夹嵌套结构实现起来简单了太多。给 List 的 children 参数指定嵌套模型的嵌套键值路径即可，比如模型结构如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - 目录结构数据模型</span><span class="token keyword">struct</span> <span class="token constant">POM</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token comment">// 文字</span>  <span class="token keyword">var</span> i<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token comment">// 图标</span>  <span class="token keyword">var</span> sub<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token constant">POM</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中嵌套键值是 sub，那么 children 参数只需要添上 <code>\.sub</code> ，List 内部会处理嵌套逻辑并展示出来。如果 List 表现出来的效果并不能够满足你，你也可以自己定制视图和交互。比如点击文件夹名字也能够展开子内容，List 默认只有点击左侧箭头才能够展开。</p><p>自定义嵌套视图底层可以使用 DisclosureGroup，DisclosureGroup 能够展示自定义视图内容，还有一个 isExpanded 值绑定参数用来显示和隐藏内容。在遍历已展示视图时，通过 keypaths 发现嵌套值不为空时就读取子内容，同时默认 isExpanded 值为 false 就会显示不展开的箭头符号，将文件夹名字做成按钮，点击按钮触发 isExpanded.toggle()，如 isExpanded 为 false 就置为 true，即展开文件夹，反之就会收起文件夹。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/07.png" class="lozad post-image"src="/uploads/develop-with-swiftui/07.png"></p><h2 id="文本和代码编辑器"><a href="#文本和代码编辑器" class="headerlink" title="文本和代码编辑器"></a>文本和代码编辑器</h2><p>文本和代码编辑器也是 macOS 上很常见的效率工具的核心功能，包含的技术点较多，比如调试和代码分析会用到编译器这里就不展开说了。感兴趣可以参看<a href="https://ming1016.github.io/2017/03/01/deeply-analyse-llvm/">深入剖析 iOS 编译 Clang &#x2F; LLVM</a>、<a href="https://ming1016.github.io/2017/04/01/slides-of-deeply-analyse-llvm/">深入剖析 iOS 编译 Clang &#x2F; LLVM 直播的 Slides</a>、<a href="https://ming1016.github.io/2017/05/27/slides-of-learn-what-interesting-things-you-can-do-with-iOS-compilation/">atSwift大会上分享《学习iOS编译原理能做哪些有意思的事情》的 Slides</a>、<a href="https://ming1016.github.io/2018/09/17/produce-slides-of-third-at-swift-conference/">这次swift大会分享准备的幻灯片和 demo</a>，这几篇。</p><p>文本或代码分析完后可以通过 Attribute 来进行富文本展示的设置，富文本属性都在 AttributeContainer 中设置，设置好的富文本直接通过 append 进行组合。编辑器其它的比如编辑、重做、存储或自定义的能力可以通过 NSViewRepresentable 来包装 Appkit 直接使用 Appkit 里的 NSTextView 的能力。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/12.png" class="lozad post-image"src="/uploads/develop-with-swiftui/12.png"></p><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/14.png" class="lozad post-image"src="/uploads/develop-with-swiftui/14.png"></p><h2 id="Vision"><a href="#Vision" class="headerlink" title="Vision"></a>Vision</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/17.png" class="lozad post-image"src="/uploads/develop-with-swiftui/17.png"></p><p>接下来详细的说下 SwiftUI 的视图组件的使用，这次的幻灯片程序用到的技术，除了解释执行代码的功能，其它基本都来自下面的内容。</p><h2 id="SwiftUI-组件"><a href="#SwiftUI-组件" class="headerlink" title="SwiftUI 组件"></a>SwiftUI 组件</h2><h3 id="视图组件使用"><a href="#视图组件使用" class="headerlink" title="视图组件使用"></a>视图组件使用</h3><h4 id="SwiftUI-对标的-UIKit-视图"><a href="#SwiftUI-对标的-UIKit-视图" class="headerlink" title="SwiftUI 对标的 UIKit 视图"></a>SwiftUI 对标的 UIKit 视图</h4><p>如下：</p><table><thead><tr><th>SwiftUI</th><th>UIKit</th></tr></thead><tbody><tr><td>Text 和 Label</td><td>UILabel</td></tr><tr><td>TextField</td><td>UITextField</td></tr><tr><td>TextEditor</td><td>UITextView</td></tr><tr><td>Button 和 Link</td><td>UIButton</td></tr><tr><td>Image</td><td>UIImageView</td></tr><tr><td>NavigationView</td><td>UINavigationController 和 UISplitViewController</td></tr><tr><td>ToolbarItem</td><td>UINavigationItem</td></tr><tr><td>ScrollView</td><td>UIScrollView</td></tr><tr><td>List</td><td>UITableView</td></tr><tr><td>LazyVGrid 和 LazyHGrid</td><td>UICollectionView</td></tr><tr><td>HStack 和 LazyHStack</td><td>UIStack</td></tr><tr><td>VStack 和 LazyVStack</td><td>UIStack</td></tr><tr><td>TabView</td><td>UITabBarController 和 UIPageViewController</td></tr><tr><td>Toggle</td><td>UISwitch</td></tr><tr><td>Slider</td><td>UISlider</td></tr><tr><td>Stepper</td><td>UIStepper</td></tr><tr><td>ProgressView</td><td>UIProgressView 和 UIActivityIndicatorView</td></tr><tr><td>Picker</td><td>UISegmentedControl</td></tr><tr><td>DatePicker</td><td>UIDatePicker</td></tr><tr><td>Alert</td><td>UIAlertController</td></tr><tr><td>ActionSheet</td><td>UIAlertController</td></tr><tr><td>Map</td><td>MapKit</td></tr></tbody></table><h4 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h4><p>基本用法</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g01.png" class="lozad post-image"src="/uploads/develop-with-swiftui/g01.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - Text</span><span class="token keyword">struct</span> <span class="token class-name">PlayTextView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> manyString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"这是一段长文。总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么吧。"</span></span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"大标题"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"说点啥呢？"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tracking</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// 字间距</span>                    <span class="token punctuation">.</span><span class="token function">kerning</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// 尾部留白</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"划重点"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">underline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>heavy<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"可旋转的文字"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fixedSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"自定义系统字体大小"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"使用指定的字体"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Georgia"</span></span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"有阴影"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">italic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Gradient Background"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>gradient<span class="token punctuation">:</span> <span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>white<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token punctuation">.</span>red<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Gradient Background"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>gradient<span class="token punctuation">:</span> <span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>white<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token punctuation">.</span>purple<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>trailing<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"渐变透明材质风格"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                            <span class="token punctuation">.</span>regularMaterial<span class="token punctuation">,</span>                            <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span>                        <span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                    <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Angular Gradient Background"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">AngularGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token punctuation">.</span>green<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>red<span class="token punctuation">]</span><span class="token punctuation">,</span> center<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"带背景图片的"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>background <span class="token punctuation">&#123;</span>                        <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 设置 lineLimit 表示最多支持行数，依据情况依然有会被减少显示行数</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>manyString<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">lineLimit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 对行的限制，如果多余设定行数，尾部会显示...</span>                    <span class="token punctuation">.</span><span class="token function">lineSpacing</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 行间距</span>                    <span class="token punctuation">.</span><span class="token function">multilineTextAlignment</span><span class="token punctuation">(</span><span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token comment">// 对齐</span>                                <span class="token comment">// 使用 fixedSize 就可以在任何时候完整显示</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>manyString<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fixedSize</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> vertical<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 使用 AttributeString</span>            <span class="token class-name">PTextViewAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 使用 Markdown</span>            <span class="token class-name">PTextViewMarkdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 时间</span>            <span class="token class-name">PTextViewDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 插值</span>            <span class="token class-name">PTextViewInterpolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>font 字体设置的样式对应 weight 和 size 可以在官方交互文档中查看 <a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/typography/#dynamic-type-sizes">Typography</a></p><p>markdown 使用</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - Markdown</span><span class="token keyword">struct</span> <span class="token class-name">PTextViewMarkdown</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> mdaStr<span class="token punctuation">:</span> <span class="token class-name">AttributedString</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> mda <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span>localized<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"这是一个 **Attribute** ~string~"</span></span><span class="token punctuation">)</span>                <span class="token comment">/// 自定义的属性语法是^[string](key：value)</span>        mda <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span>localized<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"^[这是](p2:'one')^[一](p3:&#123;k1:1,k2:2&#125;)个 **Attribute** ~string~"</span></span><span class="token punctuation">,</span> including<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>newScope<span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span>mda<span class="token punctuation">)</span>        <span class="token comment">/// 这是 &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">///     p2 = one</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// 一 &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">///     p3 = P3(k1: 1, k2: 2)</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// 个  &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// Attribute &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">///     NSInlinePresentationIntent = NSInlinePresentationIntent(rawValue: 2)</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">///   &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// string &#123;</span>        <span class="token comment">///     NSInlinePresentationIntent = NSInlinePresentationIntent(rawValue: 32)</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">/// &#125;</span>                <span class="token comment">// 从文件中读取 Markdown 内容</span>        <span class="token keyword">let</span> mdUrl <span class="token operator">=</span> <span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>forResource<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">,</span> withExtension<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"md"</span></span><span class="token punctuation">)</span><span class="token operator">!</span>        mda <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> mdUrl<span class="token punctuation">,</span>options<span class="token punctuation">:</span> <span class="token class-name">AttributedString</span><span class="token punctuation">.</span><span class="token class-name">MarkdownParsingOptions</span><span class="token punctuation">(</span>interpretedSyntax<span class="token punctuation">:</span> <span class="token punctuation">.</span>inlineOnlyPreservingWhitespace<span class="token punctuation">)</span><span class="token punctuation">,</span> baseURL<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token comment">// .inlineOnlyPreservingWhitespace 支持 markdown 文件的换行</span>                        <span class="token comment">// Markdown 已转换成 AtrributedString 结构。</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> mda<span class="token punctuation">.</span>runs <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> ipi <span class="token operator">=</span> r<span class="token punctuation">.</span>inlinePresentationIntent <span class="token punctuation">&#123;</span>                <span class="token keyword">switch</span> ipi <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token punctuation">.</span>lineBreak<span class="token punctuation">:</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"paragrahp"</span></span><span class="token punctuation">)</span>                <span class="token keyword">case</span> <span class="token punctuation">.</span>code<span class="token punctuation">:</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is code"</span></span><span class="token punctuation">)</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> pi <span class="token operator">=</span> r<span class="token punctuation">.</span>presentationIntent <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> c <span class="token keyword">in</span> pi<span class="token punctuation">.</span>components <span class="token punctuation">&#123;</span>                    <span class="token keyword">switch</span> c<span class="token punctuation">.</span>kind <span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token punctuation">.</span>paragraph<span class="token punctuation">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is paragraph"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">codeBlock</span><span class="token punctuation">(</span><span class="token keyword">let</span> lang<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">lang <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> code"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token keyword">let</span> level<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">level</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> level"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span>                        <span class="token keyword">break</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> mda    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>mdaStr<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AttributedString 的使用</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - AttributedString</span><span class="token keyword">struct</span> <span class="token class-name">PTextViewAttribute</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> aStr<span class="token punctuation">:</span> <span class="token class-name">AttributedString</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这是一个 "</span></span><span class="token punctuation">)</span>        <span class="token keyword">var</span> c1 <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c1<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span>footnote        c1<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>secondary        a1<span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span>                <span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Attribute "</span></span><span class="token punctuation">)</span>        <span class="token keyword">var</span> c2 <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c2<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span>title        a2<span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span>                <span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"String "</span></span><span class="token punctuation">)</span>        <span class="token keyword">var</span> c3 <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c3<span class="token punctuation">.</span>baselineOffset <span class="token operator">=</span> <span class="token number">10</span>        c3<span class="token punctuation">.</span>appKit<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>yellow <span class="token comment">// 仅在 macOS 里显示的颜色</span>        c3<span class="token punctuation">.</span>swiftUI<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>secondary        c3<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span>footnote        a3<span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span>        <span class="token comment">// a3 使用自定义属性</span>        a3<span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"This is a custom property."</span></span>                <span class="token comment">// formatter 的支持</span>        <span class="token keyword">var</span> a4 <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>dateTime                                        <span class="token punctuation">.</span><span class="token function">hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">minute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">weekday</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span>attributed        <span class="token punctuation">)</span>                <span class="token keyword">let</span> c4AMPM <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dateField</span><span class="token punctuation">(</span><span class="token punctuation">.</span>amPM<span class="token punctuation">)</span>        <span class="token keyword">let</span> c4AMPMColor <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span>                a4<span class="token punctuation">.</span><span class="token function">replaceAttributes</span><span class="token punctuation">(</span>c4AMPM<span class="token punctuation">,</span> with<span class="token punctuation">:</span> c4AMPMColor<span class="token punctuation">)</span>        <span class="token keyword">let</span> c4Week <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dateField</span><span class="token punctuation">(</span><span class="token punctuation">.</span>weekday<span class="token punctuation">)</span>        <span class="token keyword">let</span> c4WeekColor <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>purple<span class="token punctuation">)</span>        a4<span class="token punctuation">.</span><span class="token function">replaceAttributes</span><span class="token punctuation">(</span>c4Week<span class="token punctuation">,</span> with<span class="token punctuation">:</span> c4WeekColor<span class="token punctuation">)</span>                a1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span>        a1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span>        a1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span>                                <span class="token comment">// Runs 视图</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> a1<span class="token punctuation">.</span>runs <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/// 这是一个  &#123;</span>        <span class="token comment">///     SwiftUI.Font = Font(provider: SwiftUI.(unknown context at $7ff91d4a5e90).FontBox&lt;SwiftUI.Font.(unknown context at $7ff91d4ad5d8).TextStyleProvider>)</span>        <span class="token comment">///     SwiftUI.ForegroundColor = secondary</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// Attribute  &#123;</span>        <span class="token comment">///     SwiftUI.Font = Font(provider: SwiftUI.(unknown context at $7ff91d4a5e90).FontBox&lt;SwiftUI.Font.(unknown context at $7ff91d4ad5d8).TextStyleProvider>)</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// String  &#123;</span>        <span class="token comment">///     SwiftUI.ForegroundColor = secondary</span>        <span class="token comment">///     SwiftUI.BaselineOffset = 10.0</span>        <span class="token comment">///     NSColor = sRGB IEC61966-2.1 colorspace 1 1 0 1</span>        <span class="token comment">///     SwiftUI.Font = Font(provider: SwiftUI.(unknown context at $7ff91d4a5e90).FontBox&lt;SwiftUI.Font.(unknown context at $7ff91d4ad5d8).TextStyleProvider>)</span>        <span class="token comment">///     p1 = This is a custom property.</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// Tue &#123;</span>        <span class="token comment">///     SwiftUI.ForegroundColor = purple</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">///   &#123;</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// 5 &#123;</span>        <span class="token comment">///     Foundation.DateFormatField = hour</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// : &#123;</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// 16 &#123;</span>        <span class="token comment">///     Foundation.DateFormatField = minute</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">///   &#123;</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// PM &#123;</span>        <span class="token comment">///     SwiftUI.ForegroundColor = green</span>        <span class="token comment">/// &#125;</span>                <span class="token keyword">return</span> a1    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>aStr<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定 AttributedString 属性</span><span class="token keyword">struct</span> PAKP1<span class="token punctuation">:</span> <span class="token class-name">AttributedStringKey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">typealias</span> <span class="token class-name">Value</span> <span class="token operator">=</span> <span class="token class-name">String</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p1"</span></span>        <span class="token punctuation">&#125;</span><span class="token keyword">struct</span> PAKP2<span class="token punctuation">:</span> <span class="token class-name">CodableAttributedStringKey</span><span class="token punctuation">,</span> <span class="token class-name">MarkdownDecodableAttributedStringKey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> P2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Codable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p2"</span></span>    <span class="token keyword">typealias</span> <span class="token class-name">Value</span> <span class="token operator">=</span> P2<span class="token punctuation">&#125;</span><span class="token keyword">struct</span> PAKP3<span class="token punctuation">:</span> <span class="token class-name">CodableAttributedStringKey</span><span class="token punctuation">,</span> <span class="token class-name">MarkdownDecodableAttributedStringKey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">struct</span> P3<span class="token punctuation">:</span> <span class="token class-name">Codable</span><span class="token punctuation">,</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> k1<span class="token punctuation">:</span> <span class="token class-name">Int</span>        <span class="token keyword">let</span> k2<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">typealias</span> <span class="token class-name">Value</span> <span class="token operator">=</span> P3    <span class="token keyword">static</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">AttributeScopes</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">NewScope</span><span class="token punctuation">:</span> <span class="token class-name">AttributeScope</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> p1<span class="token punctuation">:</span> PAKP1        <span class="token keyword">let</span> p2<span class="token punctuation">:</span> PAKP2        <span class="token keyword">let</span> p3<span class="token punctuation">:</span> PAKP3    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> newScope<span class="token punctuation">:</span> <span class="token class-name">NewScope</span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NewScope</span><span class="token punctuation">.</span><span class="token keyword">self</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">AttributeDynamicLookup</span><span class="token punctuation">&#123;</span>    <span class="token keyword">subscript</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">(</span>dynamicMember keyPath<span class="token punctuation">:</span><span class="token class-name">KeyPath</span><span class="token operator">&lt;</span><span class="token class-name">AttributeScopes</span><span class="token punctuation">.</span><span class="token class-name">NewScope</span><span class="token punctuation">,</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">T</span> <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span><span class="token class-name">AttributedStringKey</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间的显示</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - 时间</span><span class="token keyword">struct</span> <span class="token class-name">PDateTextView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> date<span class="token punctuation">:</span> <span class="token class-name">Date</span> <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> df<span class="token punctuation">:</span> <span class="token class-name">DateFormatter</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> df <span class="token operator">=</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        df<span class="token punctuation">.</span>dateStyle <span class="token operator">=</span> <span class="token punctuation">.</span>long        df<span class="token punctuation">.</span>timeStyle <span class="token operator">=</span> <span class="token punctuation">.</span>short        <span class="token keyword">return</span> df    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> dv<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> df<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> date<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>dv<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>locale<span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"zh_cn"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插值使用</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - 插值</span><span class="token keyword">struct</span> <span class="token class-name">PTextViewInterpolation</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> nf<span class="token punctuation">:</span> <span class="token class-name">NumberFormatter</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">NumberFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>numberStyle <span class="token operator">=</span> <span class="token punctuation">.</span>currencyPlural        <span class="token keyword">return</span> f    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"图文 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"sun.min"</span></span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"💰 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token number">999</span> <span class="token keyword">as</span> <span class="token class-name">NSNumber</span><span class="token punctuation">,</span> formatter<span class="token punctuation">:</span> nf</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>locale<span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"zh_cn"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"数组： </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"红字：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">red<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"变红了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">，带图标的字：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">sun<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"天晴"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 扩展 LocalizedStringKey.StringInterpolation 自定义插值</span><span class="token keyword">extension</span> <span class="token class-name">LocalizedStringKey</span><span class="token punctuation">.</span><span class="token class-name">StringInterpolation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 特定类型处理</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> value <span class="token punctuation">&#123;</span>            <span class="token function">appendLiteral</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span>            <span class="token function">appendInterpolation</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string-literal"><span class="token string">" "</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 实现不同情况处理，可以简化设置修改器设置</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span>red value<span class="token punctuation">:</span> <span class="token class-name">LocalizedStringKey</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">appendInterpolation</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span>sun value<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">appendInterpolation</span><span class="token punctuation">(</span><span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"sun.max.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">appendLiteral</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h4><p>使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayLinkView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openURL<span class="token punctuation">)</span> <span class="token keyword">var</span> openURL    <span class="token keyword">var</span> aStr<span class="token punctuation">:</span> <span class="token class-name">AttributedString</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的博客"</span></span><span class="token punctuation">)</span>        a<span class="token punctuation">.</span>link <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://ming1016.github.io/"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> a    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 普通</span>            <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"前往 www.starming.com"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"http://www.starming.com"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderedProminent<span class="token punctuation">)</span>            <span class="token class-name">Link</span><span class="token punctuation">(</span>destination<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://twitter.com/daiming_cn"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"My Twitter"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"message.circle.fill"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// AttributedString 链接</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>aStr<span class="token punctuation">)</span>                        <span class="token comment">// markdown 链接</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"[Go Ming's GitHub](https://github.com/ming1016)"</span></span><span class="token punctuation">)</span>                        <span class="token comment">// 控件使用 OpenURL</span>            <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"小册子源码"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://github.com/KwaiAppTeam/SwiftPamphletApp"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openURL<span class="token punctuation">,</span> <span class="token class-name">OpenURLAction</span> <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>                    <span class="token keyword">return</span> <span class="token punctuation">.</span>systemAction                    <span class="token comment">/// return .handled 不会返回系统打开浏览器动作，只会处理 return 前的事件。</span>                    <span class="token comment">/// .discard 和 .handled 类似。</span>                    <span class="token comment">/// .systemAction(URL(string: "https://www.anotherurl.com")) 可以返回另外一个 url 来替代指定的url</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                        <span class="token comment">// 扩展 View 后更简洁的使用 OpenURL</span>            <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的微博"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://weibo.com/allstarming"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>goOpenURL <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>                    <span class="token function">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>absoluteString<span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token punctuation">.</span>systemAction                <span class="token punctuation">&#125;</span>                        <span class="token comment">// 根据内容返回不同链接</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭博客有好几个，存在[GitHub Page](github)、[自建服务器](starming)和[知乎](zhihu)上"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openURL<span class="token punctuation">,</span> <span class="token class-name">OpenURLAction</span> <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>                    <span class="token keyword">switch</span> url<span class="token punctuation">.</span>absoluteString <span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">"github"</span></span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">systemAction</span><span class="token punctuation">(</span><span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://ming1016.github.io/"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">"starming"</span></span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">systemAction</span><span class="token punctuation">(</span><span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"http://www.starming.com"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">"zhihu"</span></span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">systemAction</span><span class="token punctuation">(</span><span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://www.zhihu.com/people/starming/posts"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token punctuation">.</span>handled                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">// View 支持 openURL 的能力</span>    <span class="token keyword">func</span> <span class="token function-definition function">goUrl</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token omit keyword">_</span> accepted<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">openURL</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> completion<span class="token punctuation">:</span> done<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 为 View 扩展一个 OpenURL 方法</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">goOpenURL</span><span class="token punctuation">(</span>done<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">OpenURLAction</span><span class="token punctuation">.</span><span class="token class-name">Result</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openURL<span class="token punctuation">,</span> <span class="token class-name">OpenURLAction</span><span class="token punctuation">(</span>handler<span class="token punctuation">:</span> done<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>View 的 onOpenURL 方法可以处理 Universal Links。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">V</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>onOpenURL <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>absoluteString<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g02.png" class="lozad post-image"src="/uploads/develop-with-swiftui/g02.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayLabelView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一个 Label"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"bolt.circle"</span></span><span class="token punctuation">)</span>                        <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"只显示 icon"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"heart.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>iconOnly<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span>                        <span class="token comment">// 自建 Label</span>            <span class="token class-name">Label</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"自建 Label"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> icon<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 自定义 LabelStyle</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"有边框的 Label"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"b.square.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>border<span class="token punctuation">)</span>                        <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"仅标题有边框"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"text.bubble"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderOnlyTitle<span class="token punctuation">)</span>                        <span class="token comment">// 扩展的 Label</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"扩展的 Label"</span></span><span class="token punctuation">,</span> originalSystemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.sun.bolt.fill"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// 对 Label 做扩展</span><span class="token keyword">extension</span> <span class="token class-name">Label</span> <span class="token keyword">where</span> <span class="token class-name">Title</span> <span class="token operator">==</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Icon</span> <span class="token operator">==</span> <span class="token class-name">Image</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> title<span class="token punctuation">:</span> <span class="token class-name">LocalizedStringKey</span><span class="token punctuation">,</span> originalSystemImage systemImageString<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> icon<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> systemImageString<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span> <span class="token comment">// 让 SFSymbol 显示本身的颜色</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 添加自定义 LabelStyle，用来加上边框</span><span class="token keyword">struct</span> <span class="token class-name">BorderLabelStyle</span><span class="token punctuation">:</span> <span class="token class-name">LabelStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Label</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token comment">// 样式擦除器，防止样式被 .iconOnly、.titleOnly 这样的 LabelStyle 擦除了样式。</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">LabelStyle</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">BorderLabelStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">var</span> border<span class="token punctuation">:</span> <span class="token class-name">BorderLabelStyle</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BorderLabelStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 只给标题加边框</span><span class="token keyword">struct</span> <span class="token class-name">BorderOnlyTitleLabelStyle</span><span class="token punctuation">:</span> <span class="token class-name">LabelStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>icon            configuration<span class="token punctuation">.</span>title                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">LabelStyle</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">BorderOnlyTitleLabelStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">var</span> borderOnlyTitle<span class="token punctuation">:</span> <span class="token class-name">BorderOnlyTitleLabelStyle</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BorderOnlyTitleLabelStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TextEditor"><a href="#TextEditor" class="headerlink" title="TextEditor"></a>TextEditor</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g03.png" class="lozad post-image"src="/uploads/develop-with-swiftui/g03.png"></p><p>对应的代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> <span class="token class-name">CodeEditorView</span><span class="token keyword">struct</span> <span class="token class-name">PlayTextEditorView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// for TextEditor</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> txt<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"一段可编辑文字...\n"</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment">// for CodeEditorView</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">var</span> colorScheme<span class="token punctuation">:</span> <span class="token class-name">ColorScheme</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> codeMessages<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Located</span><span class="token operator">&lt;</span><span class="token class-name">Message</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token class-name">Set</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@SceneStorage</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"editLocation"</span></span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">var</span> editLocation<span class="token punctuation">:</span> <span class="token class-name">CodeEditor</span><span class="token punctuation">.</span><span class="token class-name">Location</span> <span class="token operator">=</span> <span class="token class-name">CodeEditor</span><span class="token punctuation">.</span><span class="token class-name">Location</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 使用 SwiftUI 自带 TextEditor</span>        <span class="token class-name">TextEditor</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $txt<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">lineSpacing</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">disableAutocorrection</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> txt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                count <span class="token operator">=</span> txt<span class="token punctuation">.</span>count            <span class="token punctuation">&#125;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"字数：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>footnote<span class="token punctuation">)</span>                <span class="token comment">// 使用的 CodeEditorView 显示和编辑代码高亮的代码，还有 minimap</span>        <span class="token class-name">CodeEditor</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"""static func number() &#123;    // Int    let i1 = 100    let i2 = 22    print(i1 / i2) // 向下取整得 4    // Float    let f1: Float = 100.0    let f2: Float = 22.0    print(f1 / f2) // 4.5454545        let f4: Float32 = 5.0    let f5: Float64 = 5.0    print(f4, f5) // 5.0 5.0 5.0    // Double    let d1: Double = 100.0    let d2: Double = 22.0    print(d1 / d2) // 4.545454545454546    // 字面量    print(Int(0b10101)) // 0b 开头是二进制    print(Int(0x00afff)) // 0x 开头是十六进制    print(2.5e4) // 2.5x10^4 十进制用 e    print(0xAp2) // 10*2^2  十六进制用 p    print(2_000_000) // 2000000        // isMultiple(of:) 方法检查一个数字是否是另一个数字的倍数    let i3 = 36    print(i3.isMultiple(of: 9)) // true&#125;"""</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   messages<span class="token punctuation">:</span> $codeMessages<span class="token punctuation">,</span>                   language<span class="token punctuation">:</span> <span class="token punctuation">.</span>swift<span class="token punctuation">,</span>                   layout<span class="token punctuation">:</span> <span class="token class-name">CodeEditor</span><span class="token punctuation">.</span><span class="token class-name">LayoutConfiguration</span><span class="token punctuation">(</span>showMinimap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>codeEditorTheme<span class="token punctuation">,</span> colorScheme <span class="token operator">==</span> <span class="token punctuation">.</span>dark <span class="token operator">?</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span>defaultDark <span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span>defaultLight<span class="token punctuation">)</span>                <span class="token comment">// 包装的 NSTextView</span>        <span class="token class-name">HSplitView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PNSTextView</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"左边写...\n"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> onDidChange<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">in</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Typing </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> times."</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">PNSTextView</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"右边写...\n"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end HSplitView</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自己包装 NSTextView</span><span class="token keyword">struct</span> <span class="token class-name">PNSTextView</span><span class="token punctuation">:</span> <span class="token class-name">NSViewRepresentable</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> onBeginEditing<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> onCommit<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> onDidChange<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span><span class="token punctuation">,</span><span class="token omit keyword">_</span>  <span class="token keyword">in</span> <span class="token punctuation">&#125;</span>        <span class="token comment">// 返回要包装的 NSView</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeNSView</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">PNSTextConfiguredView</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">PNSTextConfiguredView</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> text<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>delegate <span class="token operator">=</span> context<span class="token punctuation">.</span>coordinator        <span class="token keyword">return</span> t    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">updateNSView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> view<span class="token punctuation">:</span> <span class="token class-name">PNSTextConfiguredView</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        view<span class="token punctuation">.</span>text <span class="token operator">=</span> text        view<span class="token punctuation">.</span>selectedRanges <span class="token operator">=</span> context<span class="token punctuation">.</span>coordinator<span class="token punctuation">.</span>sRanges    <span class="token punctuation">&#125;</span>        <span class="token comment">// 回调</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeCoordinator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">TextViewDelegate</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TextViewDelegate</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理 delegate 回调</span><span class="token keyword">extension</span> <span class="token class-name">PNSTextView</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">TextViewDelegate</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span><span class="token punctuation">,</span> <span class="token class-name">NSTextViewDelegate</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> tView<span class="token punctuation">:</span> <span class="token class-name">PNSTextView</span>        <span class="token keyword">var</span> sRanges<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">NSValue</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">var</span> typeCount<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> v<span class="token punctuation">:</span> <span class="token class-name">PNSTextView</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>tView <span class="token operator">=</span> v        <span class="token punctuation">&#125;</span>        <span class="token comment">// 开始编辑</span>        <span class="token keyword">func</span> <span class="token function-definition function">textDidBeginEditing</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> notification<span class="token punctuation">:</span> <span class="token class-name">Notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> textView <span class="token operator">=</span> notification<span class="token punctuation">.</span>object <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">NSTextView</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span>text <span class="token operator">=</span> textView<span class="token punctuation">.</span>string            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span><span class="token function">onBeginEditing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 每次敲字</span>        <span class="token keyword">func</span> <span class="token function-definition function">textDidChange</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> notification<span class="token punctuation">:</span> <span class="token class-name">Notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> textView <span class="token operator">=</span> notification<span class="token punctuation">.</span>object <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">NSTextView</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            typeCount <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span>text <span class="token operator">=</span> textView<span class="token punctuation">.</span>string            <span class="token keyword">self</span><span class="token punctuation">.</span>sRanges <span class="token operator">=</span> textView<span class="token punctuation">.</span>selectedRanges            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span><span class="token function">onDidChange</span><span class="token punctuation">(</span>textView<span class="token punctuation">.</span>string<span class="token punctuation">,</span> typeCount<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 提交</span>        <span class="token keyword">func</span> <span class="token function-definition function">textDidEndEditing</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> notification<span class="token punctuation">:</span> <span class="token class-name">Notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> textView <span class="token operator">=</span> notification<span class="token punctuation">.</span>object <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">NSTextView</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span>text <span class="token operator">=</span> textView<span class="token punctuation">.</span>string            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span><span class="token function">onCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 配置 NSTextView</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PNSTextConfiguredView</span><span class="token punctuation">:</span> <span class="token class-name">NSView</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">weak</span> <span class="token keyword">var</span> delegate<span class="token punctuation">:</span> <span class="token class-name">NSTextViewDelegate</span><span class="token operator">?</span>        <span class="token keyword">private</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> tv<span class="token punctuation">:</span> <span class="token class-name">NSTextView</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> contentSize <span class="token operator">=</span> sv<span class="token punctuation">.</span>contentSize        <span class="token keyword">let</span> textStorage <span class="token operator">=</span> <span class="token class-name">NSTextStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">let</span> layoutManager <span class="token operator">=</span> <span class="token class-name">NSLayoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        textStorage<span class="token punctuation">.</span><span class="token function">addLayoutManager</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span>                <span class="token keyword">let</span> textContainer <span class="token operator">=</span> <span class="token class-name">NSTextContainer</span><span class="token punctuation">(</span>containerSize<span class="token punctuation">:</span> sv<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">)</span>        textContainer<span class="token punctuation">.</span>widthTracksTextView <span class="token operator">=</span> <span class="token boolean">true</span>        textContainer<span class="token punctuation">.</span>containerSize <span class="token operator">=</span> <span class="token class-name">NSSize</span><span class="token punctuation">(</span>            width<span class="token punctuation">:</span> contentSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span>greatestFiniteMagnitude        <span class="token punctuation">)</span>                layoutManager<span class="token punctuation">.</span><span class="token function">addTextContainer</span><span class="token punctuation">(</span>textContainer<span class="token punctuation">)</span>                <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">NSTextView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">,</span> textContainer<span class="token punctuation">:</span> textContainer<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>delegate        t<span class="token punctuation">.</span>isEditable <span class="token operator">=</span> <span class="token boolean">true</span>        t<span class="token punctuation">.</span>allowsUndo <span class="token operator">=</span> <span class="token boolean">true</span>                t<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">systemFont</span><span class="token punctuation">(</span>ofSize<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>textColor <span class="token operator">=</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>labelColor        t<span class="token punctuation">.</span>drawsBackground <span class="token operator">=</span> <span class="token boolean">true</span>        t<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>textBackgroundColor                t<span class="token punctuation">.</span>maxSize <span class="token operator">=</span> <span class="token class-name">NSSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span>greatestFiniteMagnitude<span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span>greatestFiniteMagnitude<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>minSize <span class="token operator">=</span> <span class="token class-name">NSSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> contentSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>autoresizingMask <span class="token operator">=</span> <span class="token punctuation">.</span>width        t<span class="token punctuation">.</span>isHorizontallyResizable <span class="token operator">=</span> <span class="token boolean">false</span>        t<span class="token punctuation">.</span>isVerticallyResizable   <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token keyword">return</span> t    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> sv<span class="token punctuation">:</span> <span class="token class-name">NSScrollView</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">NSScrollView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>drawsBackground <span class="token operator">=</span> <span class="token boolean">true</span>        s<span class="token punctuation">.</span>borderType <span class="token operator">=</span> <span class="token punctuation">.</span>noBorder        s<span class="token punctuation">.</span>hasVerticalScroller <span class="token operator">=</span> <span class="token boolean">true</span>        s<span class="token punctuation">.</span>hasHorizontalRuler <span class="token operator">=</span> <span class="token boolean">false</span>        s<span class="token punctuation">.</span>translatesAutoresizingMaskIntoConstraints <span class="token operator">=</span> <span class="token boolean">false</span>        s<span class="token punctuation">.</span>autoresizingMask <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token punctuation">.</span>height<span class="token punctuation">]</span>        <span class="token keyword">return</span> s    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">didSet</span> <span class="token punctuation">&#123;</span>            tv<span class="token punctuation">.</span>string <span class="token operator">=</span> text        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> selectedRanges<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">NSValue</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">didSet</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">guard</span> selectedRanges<span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            tv<span class="token punctuation">.</span>selectedRanges <span class="token operator">=</span> selectedRanges        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>coder<span class="token punctuation">:</span> <span class="token class-name">NSCoder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Error coder"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">init</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewWillDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewWillDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        sv<span class="token punctuation">.</span>translatesAutoresizingMaskIntoConstraints <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token function">addSubview</span><span class="token punctuation">(</span>sv<span class="token punctuation">)</span>        <span class="token class-name">NSLayoutConstraint</span><span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            sv<span class="token punctuation">.</span>topAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> topAnchor<span class="token punctuation">)</span><span class="token punctuation">,</span>            sv<span class="token punctuation">.</span>trailingAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> trailingAnchor<span class="token punctuation">)</span><span class="token punctuation">,</span>            sv<span class="token punctuation">.</span>bottomAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> bottomAnchor<span class="token punctuation">)</span><span class="token punctuation">,</span>            sv<span class="token punctuation">.</span>leadingAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> leadingAnchor<span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>        sv<span class="token punctuation">.</span>documentView <span class="token operator">=</span> tv    <span class="token punctuation">&#125;</span> <span class="token comment">// end viewWillDraw</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SwiftUI 中用 NSView，可以通过 NSViewRepresentable 来包装视图，这个协议主要是实现 makeNSView、updateNSView 和 makeCoordinator 三个方法。makeNSView 要求返回需要包装的 NSView。每当 SwiftUI 的状态变化时触发 updateNSView 方法的调用。为了实现 NSView 里的 delegate 和 SwiftUI 通信，就要用 makeCoordinator 返回一个用于处理 delegate 的实例。</p><h4 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g04.png" class="lozad post-image"src="/uploads/develop-with-swiftui/g04.png"></p><p>使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayTextFieldView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Starming"</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> showT <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isEditing <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> placeholder <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"输入些文字..."</span></span>        <span class="token attribute atrule">@FocusState</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isFocus<span class="token punctuation">:</span> <span class="token class-name">Bool</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TextField</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $t<span class="token punctuation">)</span>                        <span class="token comment">// 样式设置</span>            <span class="token class-name">TextField</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $t<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>roundedBorder<span class="token punctuation">)</span> <span class="token comment">// textFieldStyle 有三个预置值 automatic、plain 和 roundedBorder。</span>                <span class="token punctuation">.</span><span class="token function">multilineTextAlignment</span><span class="token punctuation">(</span><span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token comment">// 对齐方式</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span> weight<span class="token punctuation">:</span> <span class="token punctuation">.</span>heavy<span class="token punctuation">,</span> design<span class="token punctuation">:</span> <span class="token punctuation">.</span>rounded<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token punctuation">.</span>teal<span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>brown<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textCase</span><span class="token punctuation">(</span><span class="token punctuation">.</span>uppercase<span class="token punctuation">)</span>            <span class="token comment">// 多视图组合</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"lock.circle"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                <span class="token class-name">TextField</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $t<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">submitLabel</span><span class="token punctuation">(</span><span class="token punctuation">.</span>done<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onSubmit <span class="token punctuation">&#123;</span>                        showT <span class="token operator">=</span> t                        isFocus <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                        t <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>newValue<span class="token punctuation">.</span><span class="token keyword">prefix</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 限制字数</span>                    <span class="token punctuation">&#125;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"eye.slash"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>showT<span class="token punctuation">)</span>            <span class="token comment">// 自定义 textFieldStyle 样式</span>            <span class="token class-name">TextField</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $t<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token class-name">PClearTextStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">focused</span><span class="token punctuation">(</span>$isFocus<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PClearTextStyle</span><span class="token punctuation">:</span> <span class="token class-name">TextFieldStyle</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@ViewBuilder</span>    <span class="token keyword">func</span> <span class="token function-definition function">_body</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token operator">&lt;</span>_Label<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> mirror <span class="token operator">=</span> <span class="token class-name">Mirror</span><span class="token punctuation">(</span>reflecting<span class="token punctuation">:</span> configuration<span class="token punctuation">)</span>        <span class="token keyword">let</span> bindingText<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> mirror<span class="token punctuation">.</span><span class="token function">descendant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"_text"</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span>        configuration            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>trailing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    bindingText<span class="token punctuation">.</span>wrappedValue <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"clear"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                <span class="token keyword">let</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> mirror<span class="token punctuation">.</span><span class="token function">descendant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"_text"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"_value"</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> <span class="token class-name">String</span>        configuration            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">strokeBorder</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token punctuation">.</span>pink <span class="token punctuation">:</span> <span class="token punctuation">.</span>gray<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end func</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前iOS 和 iPadOS上支持的键盘有：</p><ul><li>asciiCapable：能显示标准 ASCII 字符的键盘</li><li>asciiCapableNumberPad：只输出 ASCII 数字的数字键盘</li><li>numberPad：用于输入 PIN 码的数字键盘</li><li>numbersAndPunctuation：数字和标点符号的键盘</li><li>decimalPad：带有数字和小数点的键盘</li><li>phonePad：电话中使用的键盘</li><li>namePhonePad：用于输入人名或电话号码的小键盘</li><li>URL：用于输入URL的键盘</li><li>emailAddress：用于输入电子邮件地址的键盘</li><li>twitter：用于Twitter文本输入的键盘，支持@和#字符简便输入</li><li>webSearch：用于网络搜索词和URL输入的键盘</li></ul><p>可以通过 keyboardType 修改器来指定。</p><h4 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g05.png" class="lozad post-image"src="/uploads/develop-with-swiftui/g05.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayButtonView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> asyncAction<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>nanoseconds<span class="token punctuation">:</span> <span class="token number">300_000_000</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isFollowed<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 常用方式</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Clicked"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"ladybug.fill"</span></span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Report Bug"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 图标</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>systemIconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"ladybug.fill"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bug"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span> <span class="token comment">// 无背景</span>            <span class="token punctuation">.</span><span class="token function">simultaneousGesture</span><span class="token punctuation">(</span><span class="token class-name">LongPressGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEnded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"长按"</span></span><span class="token punctuation">)</span> <span class="token comment">// macOS 暂不支持</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">simultaneousGesture</span><span class="token punctuation">(</span><span class="token class-name">TapGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEnded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"短按"</span></span><span class="token punctuation">)</span> <span class="token comment">// macOS 暂不支持</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token comment">// iOS 15 修改器的使用。role 在 macOS 上暂不支持</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"要删除了"</span></span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token punctuation">.</span>destructive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"删除"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>purple<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">controlSize</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span> <span class="token comment">// .regular 是默认大小</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderedProminent<span class="token punctuation">)</span> <span class="token comment">// borderedProminent 可显示 tint 的设置。还有 bordered、plain 和 borderless 可选。</span>            <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">accentColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buttonBorderShape</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token comment">// 会依据 controlSize 调整边框样式</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>ultraThinMaterial<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 添加材质就像在视图和背景间加了个透明层达到模糊的效果。效果由高到底分别是.ultraThinMaterial、.thinMaterial、.regularMaterial、.thickMaterial、.ultraThickMaterial。</span>                        <span class="token comment">// 风格化</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"风格化"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token class-name">PStarmingButtonStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token comment">// 自定义 Button</span>            <span class="token class-name">PCustomButton</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点一下触发"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Clicked!"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 自定义 ButtonStyle</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Double Clicked!"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点两下触发"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token class-name">PCustomPrimitiveButtonStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 将 Text 视图加上另一个 Text 视图中，类型仍还是 Text。</span>            <span class="token class-name">PCustomButton</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点我 "</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">underline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"别犹豫"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"🤫悄悄说声，有惊喜"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>footnote<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"多 Text 组合标题按钮点击！"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 异步按钮</span>            <span class="token class-name">ButtonAsync</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">await</span> <span class="token function">asyncAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                isFollowed <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> isFollowed <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"已关注"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"关注"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">disabled</span><span class="token punctuation">(</span>isFollowed<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token class-name">PCustomButtonStyle</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">:</span> isFollowed <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token punctuation">.</span>gray <span class="token punctuation">:</span> <span class="token punctuation">.</span>pink<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>skeumorphismBG<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 异步操作的按钮</span><span class="token keyword">struct</span> <span class="token class-name">ButtonAsync</span><span class="token operator">&lt;</span><span class="token class-name">Label</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> doAsync<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">var</span> label<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Label</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isRunning <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 避免连续点击造成重复执行事件</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>            isRunning <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">await</span> <span class="token function">doAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                isRunning <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span>isRunning <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> isRunning <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ProgressView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">disabled</span><span class="token punctuation">(</span>isRunning<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 扩展 Button</span><span class="token comment">// 使用 SFSymbol 做图标</span><span class="token keyword">extension</span> <span class="token class-name">Button</span> <span class="token keyword">where</span> <span class="token class-name">Label</span> <span class="token operator">==</span> <span class="token class-name">Image</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>systemIconName<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> systemIconName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 Button</span><span class="token keyword">struct</span> <span class="token class-name">PCustomButton</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> desTextView<span class="token punctuation">:</span> <span class="token class-name">Text</span>    <span class="token keyword">let</span> act<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> des<span class="token punctuation">:</span> <span class="token class-name">LocalizedStringKey</span><span class="token punctuation">,</span> act<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>desTextView <span class="token operator">=</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>act <span class="token operator">=</span> act    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>            <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            desTextView<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>starming<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">PCustomButton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> desTextView<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> act<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>desTextView <span class="token operator">=</span> desTextView        <span class="token keyword">self</span><span class="token punctuation">.</span>act <span class="token operator">=</span> act    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 点语法使用自定义样式</span><span class="token keyword">extension</span> <span class="token class-name">ButtonStyle</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">PCustomButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> starming<span class="token punctuation">:</span> <span class="token class-name">PCustomButtonStyle</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PCustomButtonStyle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - ButtonStyle</span><span class="token keyword">struct</span> <span class="token class-name">PCustomButtonStyle</span><span class="token punctuation">:</span> <span class="token class-name">ButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> cornerRadius<span class="token punctuation">:</span><span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token punctuation">.</span>pink    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            configuration<span class="token punctuation">.</span>label            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> cornerRadius<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token punctuation">.</span>white <span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">0.5</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">0.99</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - PrimitiveButtonStyle</span><span class="token keyword">struct</span> <span class="token class-name">PCustomPrimitiveButtonStyle</span><span class="token punctuation">:</span> <span class="token class-name">PrimitiveButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 双击触发</span>        configuration<span class="token punctuation">.</span>label            <span class="token punctuation">.</span><span class="token function">onTapGesture</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                configuration<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">// 手势识别</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">gesture</span><span class="token punctuation">(</span>                <span class="token class-name">LongPressGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">onEnded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                        configuration<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 风格化</span><span class="token keyword">struct</span> <span class="token class-name">PStarmingButtonStyle</span><span class="token punctuation">:</span> <span class="token class-name">ButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> backgroundColor <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>skeumorphismBG    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            configuration<span class="token punctuation">.</span>label            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>white<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">7</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">7</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">blendMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>overlay<span class="token punctuation">)</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">0.98</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> skeumorphismBG <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>hex<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"f0f0f3"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>hex<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> rgbValue<span class="token punctuation">:</span> <span class="token class-name">UInt64</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token class-name">Scanner</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> hex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scanHexInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rgbValue<span class="token punctuation">)</span>        <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token punctuation">(</span>rgbValue <span class="token operator">&amp;</span> <span class="token number">0xff0000</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span>        <span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token punctuation">(</span>rgbValue <span class="token operator">&amp;</span> <span class="token number">0xff00</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">8</span>        <span class="token keyword">let</span> b <span class="token operator">=</span> rgbValue <span class="token operator">&amp;</span> <span class="token number">0xff</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0xff</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0xff</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0xff</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ProgressView"><a href="#ProgressView" class="headerlink" title="ProgressView"></a>ProgressView</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g06.jpeg" class="lozad post-image"src="/uploads/develop-with-swiftui/g06.jpeg"></p><p>用 ProgressViewStyle 协议，可以创建自定义的进度条视图。在 WatchOS 上会多一个 Guage 视图。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayProgressView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> v<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 默认旋转</span>            <span class="token class-name">ProgressView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 有进度条</span>            <span class="token class-name">ProgressView</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> v <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>                        <span class="token class-name">ProgressView</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> v <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"music.note.tv"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">progressViewStyle</span><span class="token punctuation">(</span><span class="token class-name">CircularProgressViewStyle</span><span class="token punctuation">(</span>tint<span class="token punctuation">:</span> <span class="token punctuation">.</span>pink<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment">// 自定义样式</span>            <span class="token class-name">ProgressView</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> v <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">progressViewStyle</span><span class="token punctuation">(</span><span class="token class-name">PCProgressStyle1</span><span class="token punctuation">(</span>borderWidth<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token class-name">ProgressView</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> v <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">progressViewStyle</span><span class="token punctuation">(</span><span class="token class-name">PCProgressStyle2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">)</span>                        <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $v<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">,</span> step<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 自定义 Progress 样式</span><span class="token keyword">struct</span> <span class="token class-name">PCProgressStyle1</span><span class="token punctuation">:</span> <span class="token class-name">ProgressViewStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> lg <span class="token operator">=</span> <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>    <span class="token keyword">var</span> borderWidth<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> fc <span class="token operator">=</span> configuration<span class="token punctuation">.</span>fractionCompleted <span class="token operator">??</span> <span class="token number">0</span>                <span class="token keyword">return</span> <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>                    <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>lg<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token class-name">CGFloat</span><span class="token punctuation">(</span>fc<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>lg<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> borderWidth<span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token comment">// end ZStack</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCProgressStyle2</span><span class="token punctuation">:</span> <span class="token class-name">ProgressViewStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> lg <span class="token operator">=</span> <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>orange<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token punctuation">.</span>green<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>purple<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>        <span class="token keyword">var</span> borderWidth<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">20</span>        <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> fc <span class="token operator">=</span> configuration<span class="token punctuation">.</span>fractionCompleted <span class="token operator">??</span> <span class="token number">0</span>                <span class="token keyword">func</span> <span class="token function-definition function">strokeStyle</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> g<span class="token punctuation">:</span> <span class="token class-name">GeometryProxy</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">StrokeStyle</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StrokeStyle</span><span class="token punctuation">(</span>lineWidth<span class="token punctuation">:</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span> lineCap<span class="token punctuation">:</span> <span class="token punctuation">.</span>round<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>                <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>lg<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">strokeStyle</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>borderWidth<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>                        <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> fc<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>lg<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">strokeStyle</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>borderWidth<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token number">90</span> <span class="token operator">+</span> <span class="token number">360</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"读取 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">(</span>fc <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> %"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// end ZStack</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g07.png" class="lozad post-image"src="/uploads/develop-with-swiftui/g07.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayImageView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cyan<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                <span class="token comment">// SF Symbols</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"scissors"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">imageScale</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>                <span class="token comment">// SF Symbols 多色时使用原色</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"thermometer.sun.fill"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">imageScale</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ControlGroup"><a href="#ControlGroup" class="headerlink" title="ControlGroup"></a>ControlGroup</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayControlGroupView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ControlGroup</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"plus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"plus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"minus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"minus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">controlGroupStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token comment">// .automatic 是默认样式，还有 .navigation</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GroupBox"><a href="#GroupBox" class="headerlink" title="GroupBox"></a>GroupBox</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g08.png" class="lozad post-image"src="/uploads/develop-with-swiftui/g08.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayGroupBoxView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GroupBox</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这是 GroupBox 的内容"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"标题一"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"t.square.fill"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token class-name">GroupBox</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"还是 GroupBox 的内容"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"标题二"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"t.square.fill"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">groupBoxStyle</span><span class="token punctuation">(</span><span class="token class-name">PCGroupBoxStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCGroupBoxStyle</span><span class="token punctuation">:</span> <span class="token class-name">GroupBoxStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>label                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            configuration<span class="token punctuation">.</span>content        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><p>Stack View 有 VStack、HStack 和 ZStack</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g09.jpeg" class="lozad post-image"src="/uploads/develop-with-swiftui/g09.jpeg"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayStackView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 默认是 VStack 竖排</span>                <span class="token comment">// 横排</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"左"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"右"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// Z 轴排</span>        <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的开发小册子"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">Color</span><span class="token punctuation">.</span>cyan            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一段文字"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g10.jpeg" class="lozad post-image"src="/uploads/develop-with-swiftui/g10.jpeg"></p><p>对应代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayNavigationView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> lData <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span> <span class="token punctuation">.</span>orange<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token class-name">List</span><span class="token punctuation">(</span>lData<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">NavigationLink</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">PNavDetailView</span><span class="token punctuation">(</span>contentStr<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>mint<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一个 NavigationView 的示例"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>white<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">safeAreaInset</span><span class="token punctuation">(</span>edge<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bottom1"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bottom2"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bottom3"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"数字列表"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>            <span class="token comment">// placement 共有 keyboard、destructiveAction、cancellationAction、confirmationAction、status、primaryAction、navigation、principal、automatic 这些</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>primaryAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"primaryAction"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>ultraThinMaterial<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 通过 ToolbarItemGroup 可以简化相同位置 ToolbarItem 的编写。</span>            <span class="token class-name">ToolbarItemGroup</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>navigation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"返回"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"前进"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">PCToolbar</span><span class="token punctuation">(</span>doDestruct<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"删除了"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> doCancel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"取消了"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> doConfirm<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确认了"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"status"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>principal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"principal"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>keyboard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Touch Bar Button"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end toolbar</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - NavigationView 的目的页面</span><span class="token keyword">struct</span> <span class="token class-name">PNavDetailView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>presentationMode<span class="token punctuation">)</span> <span class="token keyword">var</span> pMode<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">PresentationMode</span><span class="token operator">></span>    <span class="token keyword">var</span> contentStr<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>contentStr<span class="token punctuation">)</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"返回"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    pMode<span class="token punctuation">.</span>wrappedValue<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end ZStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 toolbar</span><span class="token comment">// 通过 ToolbarContent 创建可重复使用的 toolbar 组</span><span class="token keyword">struct</span> <span class="token class-name">PCToolbar</span><span class="token punctuation">:</span> <span class="token class-name">ToolbarContent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> doDestruct<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token keyword">let</span> doCancel<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token keyword">let</span> doConfirm<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">ToolbarContent</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>destructiveAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"删除"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> doDestruct<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancellationAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"取消"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> doCancel<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>confirmationAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确定"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> doConfirm<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>toolbar 的位置设置可选项如下：</p><ul><li>primaryAction：放置到最主要位置，macOS 就是放在 toolbar 的最左边</li><li>automatic：根据平台不同放到默认位置</li><li>confirmationAction：一些确定的动作</li><li>cancellationAction：取消动作</li><li>destructiveAction：删除的动作</li><li>status：状态变化，比如检查更新等动作</li><li>navigation：导航动作，比如浏览器的前进后退</li><li>principal：突出的位置，iOS 和 macOS 会出现在中间的位置</li><li>keyboard：macOS 会出现在 Touch Bar 里。iOS 会出现在弹出的虚拟键盘上。</li></ul><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g11.jpeg" class="lozad post-image"src="/uploads/develop-with-swiftui/g11.jpeg"></p><p>List 除了能够展示数据外，还有下拉刷新、过滤搜索和侧滑 Swipe 动作提供更多 Cell 操作的能力。</p><p>通过 List 的可选子项参数提供数据模型的关键路径来制定子项路劲，还可以实现大纲视图，使用 DisclosureGroup 和 OutlineGroup  可以进一步定制大纲视图。</p><p>下面是 List 使用，包括了 DisclosureGroup 和 OutlineGroup 的演示代码：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayListView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> l<span class="token punctuation">:</span> <span class="token constant">PLVM</span> <span class="token operator">=</span> <span class="token function">PLVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>        <span class="token keyword">var</span> outlineModel <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"文件夹一"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"folder.fill"</span></span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"个人"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"person.crop.circle.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"群组"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"person.2.circle.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"加好友"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"person.badge.plus"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"文件夹二"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"folder.fill"</span></span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"晴天"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"sun.max.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"夜间"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"moon.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"雨天"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.rain.fill"</span></span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"雷加雨"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.bolt.rain.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"太阳雨"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.sun.rain.fill"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"文件夹三"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"folder.fill"</span></span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"电话"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"phone"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"拍照"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"camera.circle.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"提醒"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"bell"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// List 通过$语法可以将集合的元素转换成可绑定的值</span>            <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>$l<span class="token punctuation">.</span>ls<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> $d <span class="token keyword">in</span>                    <span class="token class-name">PRowView</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> d<span class="token punctuation">.</span>s<span class="token punctuation">,</span> i<span class="token punctuation">:</span> d<span class="token punctuation">.</span>i<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">listRowInsets</span><span class="token punctuation">(</span><span class="token class-name">EdgeInsets</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> leading<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> bottom<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> trailing<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">listRowBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span>refreshable <span class="token punctuation">&#123;</span>                <span class="token comment">// 下拉刷新</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $s<span class="token punctuation">)</span> <span class="token comment">// 搜索</span>            <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"搜索关键字：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 自定义 List</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">PCustomListView</span><span class="token punctuation">(</span>$l<span class="token punctuation">.</span>ls<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> $d <span class="token keyword">in</span>                    <span class="token class-name">PRowView</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> d<span class="token punctuation">.</span>s<span class="token punctuation">,</span> i<span class="token punctuation">:</span> d<span class="token punctuation">.</span>i<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 添加数据</span>                <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                    l<span class="token punctuation">.</span>ls<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">PLModel</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"More"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"添加"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 使用大纲</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>outlineModel<span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> i<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 自定义大纲视图</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"可点击标题展开"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                <span class="token class-name">PCOutlineListView</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> outlineModel<span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> i<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 使用 OutlineGroup 实现大纲视图</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"OutlineGroup 实现大纲"</span></span><span class="token punctuation">)</span>                                <span class="token class-name">OutlineGroup</span><span class="token punctuation">(</span>outlineModel<span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> i<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                                <span class="token comment">// OutlineGroup 和 List 结合</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"OutlineGroup 和 List 结合"</span></span><span class="token punctuation">)</span>                <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>outlineModel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                        <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">OutlineGroup</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>children <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                                <span class="token class-name">Label</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> i<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Label</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> s<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>                <span class="token punctuation">&#125;</span> <span class="token comment">// end List</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end HStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义大纲视图</span><span class="token keyword">struct</span> <span class="token class-name">PCOutlineListView</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">D</span><span class="token punctuation">:</span> <span class="token class-name">RandomAccessCollection</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> v<span class="token punctuation">:</span> <span class="token class-name">PCOutlineView</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">></span>        <span class="token keyword">init</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> <span class="token class-name">D</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token class-name">KeyPath</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token operator">?></span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token class-name">PCOutlineView</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> d<span class="token punctuation">,</span> c<span class="token punctuation">:</span> c<span class="token punctuation">,</span> content<span class="token punctuation">:</span> content<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>            v        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCOutlineView</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">D</span><span class="token punctuation">:</span> <span class="token class-name">RandomAccessCollection</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> d<span class="token punctuation">:</span> <span class="token class-name">D</span>    <span class="token keyword">let</span> c<span class="token punctuation">:</span> <span class="token class-name">KeyPath</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token operator">?></span>    <span class="token keyword">let</span> content<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> isExpanded <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 控制初始是否展开的状态</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> sub <span class="token operator">=</span> i<span class="token punctuation">[</span>keyPath<span class="token punctuation">:</span> c<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">PCDisclosureGroup</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">PCOutlineView</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> sub<span class="token punctuation">,</span> c<span class="token punctuation">:</span> c<span class="token punctuation">,</span> content<span class="token punctuation">:</span> content<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token function">content</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">content</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end if</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCDisclosureGroup</span><span class="token operator">&lt;</span><span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">C</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> isExpanded <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> content<span class="token punctuation">:</span> <span class="token class-name">C</span>    <span class="token keyword">var</span> label<span class="token punctuation">:</span> <span class="token class-name">L</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DisclosureGroup</span><span class="token punctuation">(</span>isExpanded<span class="token punctuation">:</span> $isExpanded<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            content        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                isExpanded<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                label            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 大纲模式数据模型</span><span class="token keyword">struct</span> <span class="token class-name">POutlineModel</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> iconName<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">POutlineModel</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - List 的抽象，数据兼容任何集合类型</span><span class="token keyword">struct</span> <span class="token class-name">PCustomListView</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">:</span> <span class="token class-name">RandomAccessCollection</span> <span class="token operator">&amp;</span> <span class="token class-name">MutableCollection</span> <span class="token operator">&amp;</span> <span class="token class-name">RangeReplaceableCollection</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> data<span class="token punctuation">:</span> <span class="token class-name">D</span>    <span class="token keyword">var</span> content<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> data<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token operator">></span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>_data <span class="token operator">=</span> data        <span class="token keyword">self</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>$data<span class="token punctuation">,</span> content<span class="token punctuation">:</span> content<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onMove <span class="token punctuation">&#123;</span> indexSet<span class="token punctuation">,</span> offset <span class="token keyword">in</span>                        data<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>fromOffsets<span class="token punctuation">:</span> indexSet<span class="token punctuation">,</span> toOffset<span class="token punctuation">:</span> offset<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span>onDelete <span class="token punctuation">&#123;</span> indexSet <span class="token keyword">in</span>                        data<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>atOffsets<span class="token punctuation">:</span> indexSet<span class="token punctuation">)</span> <span class="token comment">// macOS 暂不支持</span>                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第一栏，共 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">data<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 项"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> footer<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"The End"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">listStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span> <span class="token comment">// 有.automatic、.inset、.plain、sidebar，macOS 暂不支持的有.grouped 和 .insetGrouped</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - Cell 视图</span><span class="token keyword">struct</span> <span class="token class-name">PRowView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">："</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 数据模型设计</span><span class="token keyword">struct</span> <span class="token class-name">PLModel</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token constant">PLVM</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> ls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">PLModel</span><span class="token punctuation">]</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">PLModel</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">20</span> <span class="token punctuation">&#123;</span>            ls<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">PLModel</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="LazyVStack-和-LazyHStack"><a href="#LazyVStack-和-LazyHStack" class="headerlink" title="LazyVStack 和 LazyHStack"></a>LazyVStack 和 LazyHStack</h4><p>LazyVStack 和 LazyHStack 里的视图只有在滚到时才会被创建。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayLazyVStackAndLazyHStackView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LazyVStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">300</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">PLHSRowView</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> i<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PLHSRowView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 个"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 个初始化了"</span></span><span class="token punctuation">)</span> <span class="token comment">// 用来查看什么时候创建的。</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="LazyVGrid-和-LazyHGrid"><a href="#LazyVGrid-和-LazyHGrid" class="headerlink" title="LazyVGrid 和 LazyHGrid"></a>LazyVGrid 和 LazyHGrid</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g12.jpeg" class="lozad post-image"src="/uploads/develop-with-swiftui/g12.jpeg"></p><p>列的设置有三种，这三种也可以组合用。</p><ul><li>GridItem(.fixed(10)) 会固定设置有多少列。</li><li>GridItem(.flexible()) 会充满没有使用的空间。</li><li>GridItem(.adaptive(minimum: 10)) 表示会根据设置大小自动设置有多少列展示。</li></ul><p>示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayLazyVGridAndLazyHGridView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span><span class="token class-name">Color</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string-literal"><span class="token string">"red"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>red<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"orange"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>orange<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"yellow"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"green"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>green<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"mint"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>mint<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"teal"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>teal<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"cyan"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>cyan<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"blue"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"indigo"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>indigo<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"purple"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"pink"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>pink<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"brown"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>brown<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"gray"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>gray<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"black"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>black    <span class="token punctuation">]</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span> pinnedViews<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>sectionHeaders<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Section</span><span class="token punctuation">(</span>header<span class="token punctuation">:</span>                            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"🎨调色板"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> maxHeight<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                                                <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> k <span class="token keyword">in</span>                        colors<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token operator">...</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>                            <span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Section</span><span class="token punctuation">(</span>header<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"图标集"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h4><p>ScrollView 使用 scrollTo 可以直接滚动到指定的位置。ScrollView 还可以透出偏移量，利用偏移量可以定义自己的动态视图，比如向下向上滚动视图时有不同效果，到顶部显示标题视图等。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayScrollView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scrollOffset<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token punctuation">.</span>zero        <span class="token keyword">var</span> infoView<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>"移动了 <span class="token punctuation">\</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">(</span>scrollOffset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">precision</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">fractionLength</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rounded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>"<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 标准用法</span>        <span class="token class-name">ScrollViewReader</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>            <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"跳到150"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                withAnimation <span class="token punctuation">&#123;</span>                    s<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end Button</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end ScrollViewReader</span>                <span class="token comment">// 自定义的 ScrollView 透出 offset 供使用</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PCScrollView</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> whenMoved<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> d <span class="token keyword">in</span>                scrollOffset <span class="token operator">=</span> d            <span class="token punctuation">&#125;</span>            infoView                    <span class="token punctuation">&#125;</span> <span class="token comment">// end ZStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 ScrollView</span><span class="token keyword">struct</span> <span class="token class-name">PCScrollView</span><span class="token operator">&lt;</span><span class="token class-name">C</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> c<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">C</span>    <span class="token keyword">let</span> whenMoved<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token attribute atrule">@ViewBuilder</span> c<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">C</span><span class="token punctuation">,</span> whenMoved<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c        <span class="token keyword">self</span><span class="token punctuation">.</span>whenMoved <span class="token operator">=</span> whenMoved    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> offsetReader<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>            <span class="token class-name">Color</span><span class="token punctuation">.</span>clear                <span class="token punctuation">.</span><span class="token function">preference</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token class-name">OffsetPreferenceKey</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> g<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"frameLayer"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minY<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            offsetReader            <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">coordinateSpace</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"frameLayer"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">onPreferenceChange</span><span class="token punctuation">(</span><span class="token class-name">OffsetPreferenceKey</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> perform<span class="token punctuation">:</span> whenMoved<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">OffsetPreferenceKey</span><span class="token punctuation">:</span> <span class="token class-name">PreferenceKey</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">var</span> defaultValue<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token punctuation">.</span>zero  <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">reduce</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">CGFloat</span><span class="token punctuation">,</span> nextValue<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGFloat</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浮层"><a href="#浮层" class="headerlink" title="浮层"></a>浮层</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g13.png" class="lozad post-image"src="/uploads/develop-with-swiftui/g13.png"></p><p>浮层有 HUD、ContextMenu、Sheet、Alert、ConfirmationDialog、Popover、ActionSheet 等几种方式。这些方式实现代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlaySuperposedLayerView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> hudVM <span class="token operator">=</span> <span class="token function">PHUDVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShow <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShowAlert <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShowConfirmationDialog <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShowPopover <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                                    <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span>contextMenu <span class="token punctuation">&#123;</span>                            <span class="token comment">// 在 macOS 上右键会出现的菜单</span>                            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is clicked"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Click </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"列表"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>                <span class="token class-name">ToolbarItemGroup</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 Sheet"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShow <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                                        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 Alert"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShowAlert <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                                        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 confirmationDialog"</span></span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token punctuation">.</span>destructive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShowConfirmationDialog <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                                        <span class="token comment">// Popover 样式默认是弹出窗口置于按钮上方，指向底部。</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 Popover"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShowPopover <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">popover</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isShowPopover<span class="token punctuation">,</span> attachmentAnchor<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token punctuation">.</span>trailing<span class="token punctuation">)</span><span class="token punctuation">,</span> arrowEdge<span class="token punctuation">:</span> <span class="token punctuation">.</span>trailing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Popover 的内容"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                                    <span class="token punctuation">&#125;</span> <span class="token comment">// end ToolbarItemGroup</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end toolbar</span>            <span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isShowAlert<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Alert</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"弹框标题"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"弹框内容"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isShow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"dismiss"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Sheet"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"brain.head.profile"</span></span><span class="token punctuation">)</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"关闭"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShow <span class="token operator">=</span> <span class="token boolean">false</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">confirmationDialog</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确定删除？"</span></span><span class="token punctuation">,</span> isPresented<span class="token punctuation">:</span> $isShowConfirmationDialog<span class="token punctuation">,</span> titleVisibility<span class="token punctuation">:</span> <span class="token punctuation">.</span>hidden<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确定"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// do good thing</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>defaultAction<span class="token punctuation">)</span> <span class="token comment">// 使用 keyboardShortcut 可以设置成为默认选项样式</span>                                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"不不"</span></span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// good choice</span>                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span> message<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这个东西还有点重要哦"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                hudVM<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"您有一条新的短消息"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"ellipsis.bubble"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 HUD"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"switch.2"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">environmentObject</span><span class="token punctuation">(</span>hudVM<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">hud</span><span class="token punctuation">(</span>isShow<span class="token punctuation">:</span> $hudVM<span class="token punctuation">.</span>isShow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span>hudVM<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> hudVM<span class="token punctuation">.</span>systemImage<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 供全局使用的 HUD</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token constant">PHUDVM</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> isShow<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> systemImage<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>        <span class="token keyword">func</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title        <span class="token keyword">self</span><span class="token punctuation">.</span>systemImage <span class="token operator">=</span> systemImage        withAnimation <span class="token punctuation">&#123;</span>            isShow <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 扩展 View 使其能够有 HUD 的能力</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">hud</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">(</span>        isShow<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">Bool</span><span class="token operator">></span><span class="token punctuation">,</span>        <span class="token attribute atrule">@ViewBuilder</span> v<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">V</span>    <span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">self</span>                        <span class="token keyword">if</span> isShow<span class="token punctuation">.</span>wrappedValue <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>                <span class="token function">PHUD</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> v<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token class-name">AnyTransition</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>edge<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">combined</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token punctuation">.</span>opacity<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>                        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            withAnimation <span class="token punctuation">&#123;</span>                                isShow<span class="token punctuation">.</span>wrappedValue <span class="token operator">=</span> <span class="token boolean">false</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">zIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 HUD</span><span class="token keyword">struct</span> <span class="token constant">PHUD</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">let</span> v<span class="token punctuation">:</span> <span class="token class-name">V</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        v            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                <span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TabView"><a href="#TabView" class="headerlink" title="TabView"></a>TabView</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayTabView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selection <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TabView</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"首页"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">hidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"二栏"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"三栏"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"four"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"five"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"six"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"seven"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"eight"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"nine"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"ten"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end TabView</span>                                    <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"上一页"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> selection <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                        selection <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cancelAction<span class="token punctuation">)</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"下一页"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> selection <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token punctuation">&#123;</span>                        selection <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>defaultAction<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end HStack</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.tabViewStyle(PageTabViewStyle(indexDisplayMode: .never)) 可以实现 UIPageViewController 的效果，如果要给小白点加上背景，可以多添加一个 .indexViewStyle(PageIndexViewStyle(backgroundDisplayMode: .always)) 修改器。</p><h4 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g14.png" class="lozad post-image"src="/uploads/develop-with-swiftui/g14.png"></p><p>Toggle 可以设置 toggleStyle，可以自定义样式。使用示例如下</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayToggleView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isEnable <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 普通样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"开了"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"关了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 按钮样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"打开了"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"关闭了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.moon"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">controlSize</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>button<span class="token punctuation">)</span>                <span class="token comment">// Switch 样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"开了"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"关了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token class-name">SwitchToggleStyle</span><span class="token punctuation">(</span>tint<span class="token punctuation">:</span> <span class="token punctuation">.</span>orange<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 自定义样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"录音中"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"已静音"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token class-name">PCToggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义样式</span><span class="token keyword">struct</span> <span class="token class-name">PCToggleStyle</span><span class="token punctuation">:</span> <span class="token class-name">ToggleStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>label            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isOn <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"mic.square.fill"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"mic.slash.circle.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                    configuration<span class="token punctuation">.</span>isOn<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g15.jpeg" class="lozad post-image"src="/uploads/develop-with-swiftui/g15.jpeg"></p><p>有 Picker 视图，还有颜色和时间选择的 ColorPicker 和 DatePicker。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayPickerView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> select <span class="token operator">=</span> <span class="token number">1</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> dateFt<span class="token punctuation">:</span> <span class="token class-name">DateFormatter</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> ft <span class="token operator">=</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ft<span class="token punctuation">.</span>dateStyle <span class="token operator">=</span> <span class="token punctuation">.</span>long        <span class="token keyword">return</span> ft    <span class="token punctuation">&#125;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 默认是下拉的风格</span>        <span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选区"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $select<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"2"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// Segment 风格，</span>        <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $select<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token class-name">SegmentedPickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 颜色选择器</span>        <span class="token class-name">ColorPicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个颜色"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $color<span class="token punctuation">,</span> supportsOpacity<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token comment">// 时间选择器</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DatePicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $date<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">...</span><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> displayedComponents<span class="token punctuation">:</span> <span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选时间"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">DatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选时间"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $date<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">datePickerStyle</span><span class="token punctuation">(</span><span class="token class-name">GraphicalDatePickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxHeight<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">)</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"时间：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">,</span> formatter<span class="token punctuation">:</span> dateFt</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Slider"><a href="#Slider" class="headerlink" title="Slider"></a>Slider</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlaySliderView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $count<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Stepper"><a href="#Stepper" class="headerlink" title="Stepper"></a>Stepper</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayStepperView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stepper</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $count<span class="token punctuation">,</span> step<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"共</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> onEditingChanged<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> b <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end Stepper</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h4><p>键盘快捷键的使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayKeyboard</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span>systemIconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"camera.shutter.button"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"按了回车键"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>defaultAction<span class="token punctuation">)</span> <span class="token comment">// 回车</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"ESC"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"按了 ESC"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cancelAction<span class="token punctuation">)</span> <span class="token comment">// ESC 键</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"CMD + p"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"按了 CMD + p"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p"</span></span><span class="token punctuation">)</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"SHIFT + p"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"按了 SHIFT + p"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p"</span></span><span class="token punctuation">,</span> modifiers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>shift<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视觉"><a href="#视觉" class="headerlink" title="视觉"></a>视觉</h3><h4 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayColor</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">edgesIgnoringSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">)</span> <span class="token comment">// Color 也是一个 View</span>                        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这是一个适配了暗黑的文字颜色"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>light<span class="token punctuation">:</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span> dark<span class="token punctuation">:</span> <span class="token punctuation">.</span>pink<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token punctuation">.</span>quaternaryLabelColor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 使用以前 NSColor</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"自定义颜色"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 暗黑适配颜色</span><span class="token keyword">struct</span> <span class="token class-name">PCColorModifier</span><span class="token punctuation">:</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">var</span> colorScheme    <span class="token keyword">var</span> light<span class="token punctuation">:</span> <span class="token class-name">Color</span>    <span class="token keyword">var</span> dark<span class="token punctuation">:</span> <span class="token class-name">Color</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> adaptColor<span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> colorScheme <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>light<span class="token punctuation">:</span>            <span class="token keyword">return</span> light        <span class="token keyword">case</span> <span class="token punctuation">.</span>dark<span class="token punctuation">:</span>            <span class="token keyword">return</span> dark        <span class="token attribute atrule">@unknown</span> <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> light        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        content<span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>adaptColor<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">foregroundColor</span><span class="token punctuation">(</span>light<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">,</span> dark<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">PCColorModifier</span><span class="token punctuation">(</span>light<span class="token punctuation">:</span> light<span class="token punctuation">,</span> dark<span class="token punctuation">:</span> dark<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g16.jpeg" class="lozad post-image"src="/uploads/develop-with-swiftui/g16.jpeg"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayEffect</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isHover <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token comment">// 材质</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"材质效果"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>isHover <span class="token operator">?</span> <span class="token number">40</span> <span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>regularMaterial<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onHover <span class="token punctuation">&#123;</span> b <span class="token keyword">in</span>                        withAnimation <span class="token punctuation">&#123;</span>                            isHover <span class="token operator">=</span> b                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                                <span class="token comment">// 模糊</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"模糊效果"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>background <span class="token punctuation">&#123;</span>                        <span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> opaque<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                                <span class="token comment">// 选择</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"3D 旋转"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">rotation3DEffect</span><span class="token punctuation">(</span><span class="token class-name">Angle</span><span class="token punctuation">(</span>degrees<span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">blendMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>hardLight<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>材质厚度从低到高有：</p><ul><li>.regularMaterial</li><li>.thinMaterial</li><li>.ultraThinMaterial</li><li>.thickMaterial</li><li>.ultraThickMaterial</li></ul><h4 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/g17.jpeg" class="lozad post-image"src="/uploads/develop-with-swiftui/g17.jpeg"></p><p>SwiftUI 里实现动画的方式包括有 .animation 隐式动画、withAnimation 和 withTransaction 显示动画、matchedGeometryEffect Hero 动画和 TimelineView 等。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayAnimation</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isChange <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> anis<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Animation</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p2"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">interpolatingSpring</span><span class="token punctuation">(</span>stiffness<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> damping<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p4"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p5"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeIn</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p6"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p7"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">interactiveSpring</span><span class="token punctuation">(</span>response<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> dampingFraction<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> blendDuration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p8"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p9"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">repeatCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selection <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// animation 隐式动画和 withAnimation 显示动画</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>isChange <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"另一种状态"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"一种状态"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span>easeInOut<span class="token punctuation">,</span> value<span class="token punctuation">:</span> isChange<span class="token punctuation">)</span> <span class="token comment">// 受限的隐式动画，只绑定某个值。</span>            <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                <span class="token comment">// 使用 withAnimation 就是显式动画，效果等同 withTransaction(Transaction(animation: .default))</span>                withAnimation <span class="token punctuation">&#123;</span>                    isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 设置 Transaction。和隐式动画共存时，优先执行 withAnimation 或 Transaction。</span>                <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>animation<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                t<span class="token punctuation">.</span>disablesAnimations <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 用来禁用隐式动画</span>                <span class="token function">withTransaction</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end onHover</span>                <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token number">60</span> <span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span>anis<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span>anis<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> isChange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>            isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"pause.fill"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"play.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// matchedGeometryEffect 的使用</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"后台"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            placeStayView            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"前台"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            placeShowView        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>                <span class="token comment">// 通过使用相同 matchedGeometryEffect 的 id，绑定两个元素变化。</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> isChange <span class="token punctuation">&#123;</span>                <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g1"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"转换"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">!</span>isChange <span class="token punctuation">&#123;</span>                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g1"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">!</span>isChange <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p19"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g1"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 使用 isSource，作为移动到相同 matchedGeometryEffect id 的方法。</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p19"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"g2"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">,</span> isSource<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p19"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g2"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                                <span class="token comment">// 点击跟随的效果</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> i <span class="token operator">==</span> selection <span class="token operator">?</span> <span class="token number">200</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"h</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                        withAnimation <span class="token punctuation">&#123;</span>                            selection <span class="token operator">=</span> i                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"h</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">selection</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">,</span> isSource<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>                <span class="token comment">// matchedGeometryEffect 还可以应用到 List 中，通过 Array enumerated 获得 index 作为 matchedGeometryEffect 的 id。右侧固定按钮可以直接让对应 id 的视图滚动到固定按钮的位置</span>                        <span class="token comment">// TimelineView</span>        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">periodic</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token punctuation">.</span>now<span class="token punctuation">,</span> by<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">t<span class="token punctuation">.</span>date</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token class-name">HStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">repeatCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> e<span class="token punctuation">)</span>                                <span class="token class-name">TimelineSubView</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> t<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token comment">// 需要传入 timeline 的时间给子视图才能够起作用。</span>                                <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// matchedGeometryEffect</span>        <span class="token comment">/// TimelineScheduler 的使用，TimelineScheduler 有以下类型</span>        <span class="token comment">/// .animation：制定更新的频率，可以控制暂停</span>        <span class="token comment">/// .everyMinute：每分钟更新一次</span>        <span class="token comment">/// .explicit：所有要更新的放到一个数组里</span>        <span class="token comment">/// .periodic：设置开始时间和更新频率</span>        <span class="token comment">/// 也可以自定义 TimelineScheduler</span>        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span>everySecond<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>            <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 自定义的 TimelineScheduler</span>        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">everyLoop</span><span class="token punctuation">(</span>timeOffsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>            <span class="token class-name">TimelineSubView</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> t<span class="token punctuation">.</span>date<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// MARK: - TimelineSubView</span>    <span class="token keyword">struct</span> <span class="token class-name">TimelineSubView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> date <span class="token punctuation">:</span> <span class="token class-name">Date</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"let's go"</span></span>        <span class="token comment">// 顺序从数组中取值，取完再重头开始</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> idx<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">func</span> <span class="token function-definition function">advanceIndex</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            idx <span class="token operator">=</span> <span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> count            <span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> idx <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">HStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">idx</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeIn</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> date<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                        <span class="token function">advanceIndex</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                        s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">.</span>hour</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">.</span>minute</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">.</span>second</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>                        <span class="token function">advanceIndex</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                                    <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// MARK: - 用 matchedGeometryEffect 做动画</span>    <span class="token comment">/// matchedGeometryEffect 可以无缝的将一个图像变成另外一个图像。</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> placeStayItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"p2"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"p4"</span></span><span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> placeShowItems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token attribute atrule">@Namespace</span> <span class="token keyword">private</span> <span class="token keyword">var</span> mgeStore        <span class="token keyword">private</span> <span class="token keyword">var</span> placeStayView<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>placeStayItems<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                        withAnimation <span class="token punctuation">&#123;</span>                            placeStayItems<span class="token punctuation">.</span>removeAll <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">==</span> s <span class="token punctuation">&#125;</span>                            placeShowItems<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end LazyVGrid</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// private var placeStayView</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> placeShowView<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>placeShowItems<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                        withAnimation <span class="token punctuation">&#123;</span>                            placeShowItems<span class="token punctuation">.</span>removeAll <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">==</span> s <span class="token punctuation">&#125;</span>                            placeStayItems<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>white<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end LazyVGrid</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end private var placeShowView</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end struct PlayAnimation</span><span class="token comment">// MARK: - 扩展 TimelineSchedule</span><span class="token keyword">extension</span> <span class="token class-name">TimelineSchedule</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">PeriodicTimelineSchedule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> everySecond<span class="token punctuation">:</span> <span class="token class-name">PeriodicTimelineSchedule</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token punctuation">.</span>now<span class="token punctuation">,</span> by<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义一个 TimelineSchedule</span><span class="token comment">// timeOffsets 用完，就会再重头重新再来一遍</span><span class="token keyword">struct</span> <span class="token class-name">PCLoopTimelineSchedule</span><span class="token punctuation">:</span> <span class="token class-name">TimelineSchedule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timeOffsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TimeInterval</span><span class="token punctuation">]</span>        <span class="token keyword">func</span> <span class="token function-definition function">entries</span><span class="token punctuation">(</span>from startDate<span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token punctuation">,</span> mode<span class="token punctuation">:</span> <span class="token class-name">TimelineScheduleMode</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Entries</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Entries</span><span class="token punctuation">(</span>last<span class="token punctuation">:</span> startDate<span class="token punctuation">,</span> offsets<span class="token punctuation">:</span> timeOffsets<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">struct</span> <span class="token class-name">Entries</span><span class="token punctuation">:</span> <span class="token class-name">Sequence</span><span class="token punctuation">,</span> <span class="token class-name">IteratorProtocol</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> last<span class="token punctuation">:</span> <span class="token class-name">Date</span>        <span class="token keyword">let</span> offsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TimeInterval</span><span class="token punctuation">]</span>        <span class="token keyword">var</span> idx<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Date</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>            idx <span class="token operator">=</span> <span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> offsets<span class="token punctuation">.</span>count            last <span class="token operator">=</span> last<span class="token punctuation">.</span><span class="token function">addingTimeInterval</span><span class="token punctuation">(</span>offsets<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> last        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end Struct Entries</span><span class="token punctuation">&#125;</span><span class="token comment">// 为自定义的 PCLoopTimelineSchedule 做一个 TimelineSchedule 的扩展函数，方便使用</span><span class="token keyword">extension</span> <span class="token class-name">TimelineSchedule</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">PCLoopTimelineSchedule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">everyLoop</span><span class="token punctuation">(</span>timeOffsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TimeInterval</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">PCLoopTimelineSchedule</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>timeOffsets<span class="token punctuation">:</span> timeOffsets<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h4><p>Canvas 可以画路径、图片和文字、Symbols、可变的图形上下文、使用 CoreGraphics 代码和做动画。</p><p>图形上下文可以被 addFilter、clip、clipToLayer、concatenate、rotate、scaleBy、translateBy 这些方法来进行改变。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayCanvas</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Color</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 画路径</span>        <span class="token class-name">PCCanvasPathView</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token punctuation">.</span>rounded<span class="token punctuation">)</span>        <span class="token class-name">PCCanvasPathView</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token punctuation">.</span>ellipse<span class="token punctuation">)</span>        <span class="token class-name">PCCanvasPathView</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token punctuation">.</span>circle<span class="token punctuation">)</span>        <span class="token comment">// 图片和文字</span>        <span class="token class-name">PCCanvasImageAndText</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Starming"</span></span><span class="token punctuation">,</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">// Symbol，在 Canvas 里引用 SwiftUI 视图</span>        <span class="token class-name">Canvas</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">,</span> s <span class="token keyword">in</span>            <span class="token keyword">let</span> c0 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">!</span>            <span class="token keyword">let</span> c1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span>            <span class="token keyword">let</span> c2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!</span>            <span class="token keyword">let</span> c3 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">!</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c0<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c3<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> symbols<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i<span class="token punctuation">,</span> c <span class="token keyword">in</span>                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Symbol 动画和 SwiftUI 视图一样，不会受影响</span>        <span class="token class-name">Canvas</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">,</span> s <span class="token keyword">in</span>            <span class="token keyword">let</span> sb <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">!</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> s<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> s<span class="token punctuation">.</span>height <span class="token operator">/</span>  <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> symbols<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PCForSymbolView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end var body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 给 Symbol 用的视图</span><span class="token keyword">struct</span> <span class="token class-name">PCForSymbolView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> change <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"star.fill"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span>change <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>                <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span>autoreverses<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    change<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 图片和文字</span><span class="token keyword">struct</span> <span class="token class-name">PCCanvasImageAndText</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Color</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> fontSize<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">42</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Canvas</span> <span class="token punctuation">&#123;</span> context<span class="token punctuation">,</span> size <span class="token keyword">in</span>            <span class="token keyword">let</span> midPoint <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> font <span class="token operator">=</span> <span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> fontSize<span class="token punctuation">)</span>            <span class="token keyword">var</span> resolved <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token punctuation">(</span>size<span class="token punctuation">.</span>width <span class="token operator">-</span> resolved<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width <span class="token operator">-</span> start<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                        resolved<span class="token punctuation">.</span>shading <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">linearGradient</span><span class="token punctuation">(</span><span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> colors<span class="token punctuation">)</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> start<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> end<span class="token punctuation">)</span>            context<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>resolved<span class="token punctuation">,</span> at<span class="token punctuation">:</span> midPoint<span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - Path</span><span class="token keyword">struct</span> <span class="token class-name">PCCanvasPathView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">enum</span> <span class="token class-name">PathType</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> rounded<span class="token punctuation">,</span> ellipse<span class="token punctuation">,</span> casual<span class="token punctuation">,</span> circle    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> t<span class="token punctuation">:</span> <span class="token class-name">PathType</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Canvas</span> <span class="token punctuation">&#123;</span> context<span class="token punctuation">,</span> size <span class="token keyword">in</span>                        <span class="token function">conf</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token operator">&amp;</span>context<span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">,</span> type<span class="token punctuation">:</span> t<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end Canvas</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">conf</span><span class="token punctuation">(</span> context<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">GraphicsContext</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token class-name">PathType</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>origin<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insetBy</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">switch</span> type <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>rounded<span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>roundedRect<span class="token punctuation">:</span> rect<span class="token punctuation">,</span> cornerRadius<span class="token punctuation">:</span> <span class="token number">35.0</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>ellipse<span class="token punctuation">:</span>            <span class="token keyword">let</span> cgPath <span class="token operator">=</span> <span class="token class-name">CGPath</span><span class="token punctuation">(</span>ellipseIn<span class="token punctuation">:</span> rect<span class="token punctuation">,</span> transform<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>            path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>cgPath<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>casual<span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token class-name">Path</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> points<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">CGPoint</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>                    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>                <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span>                <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">addLines</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>circle<span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> rect<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                        <span class="token keyword">let</span> gradient <span class="token operator">=</span> <span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> from <span class="token operator">=</span> rect<span class="token punctuation">.</span>origin        <span class="token keyword">let</span> to <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> rect<span class="token punctuation">.</span>width<span class="token punctuation">,</span> y<span class="token punctuation">:</span> rect<span class="token punctuation">.</span>height <span class="token operator">+</span> from<span class="token punctuation">.</span>y<span class="token punctuation">)</span>                <span class="token comment">// Stroke path</span>        context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">)</span>        context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">linearGradient</span><span class="token punctuation">(</span>gradient<span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> from<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> to<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;受 Apple 加速器 SwiftUI 活动邀请，做了个分享，还和喵神、61、浙剑、思琪等社区大神参与了圆桌讨论。这次完善了 SwiftUI 做的幻灯片，比去年要好一点，增加了解释执行代码交互功能。&lt;/p&gt;
&lt;p&gt;为这次幻灯画了几张图，在新西兰认识的画家，指导我了些画法，用
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="SwiftUI" scheme="http://ming1016.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>2021年画的</title>
    <link href="http://ming1016.github.io/2022/02/26/draw-in-2021/"/>
    <id>http://ming1016.github.io/2022/02/26/draw-in-2021/</id>
    <published>2022-02-26T03:31:16.000Z</published>
    <updated>2022-06-14T11:57:30.421Z</updated>
    
    <content type="html"><![CDATA[<p>2021年画的画，选了50张，有在纸上画的，白板上画的，还有给文章配的图。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/01.jpeg" class="lozad post-image"src="/uploads/draw-in-2021/01.jpeg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/02.jpg" class="lozad post-image"src="/uploads/draw-in-2021/02.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/03.jpg" class="lozad post-image"src="/uploads/draw-in-2021/03.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/04.jpg" class="lozad post-image"src="/uploads/draw-in-2021/04.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/54.png" class="lozad post-image"src="/uploads/draw-in-2021/54.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/05.png" class="lozad post-image"src="/uploads/draw-in-2021/05.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/06.png" class="lozad post-image"src="/uploads/draw-in-2021/06.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/07.jpg" class="lozad post-image"src="/uploads/draw-in-2021/07.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/08.jpg" class="lozad post-image"src="/uploads/draw-in-2021/08.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/09.png" class="lozad post-image"src="/uploads/draw-in-2021/09.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/10.png" class="lozad post-image"src="/uploads/draw-in-2021/10.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/11.png" class="lozad post-image"src="/uploads/draw-in-2021/11.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/12.png" class="lozad post-image"src="/uploads/draw-in-2021/12.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/13.png" class="lozad post-image"src="/uploads/draw-in-2021/13.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/14.png" class="lozad post-image"src="/uploads/draw-in-2021/14.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/15.png" class="lozad post-image"src="/uploads/draw-in-2021/15.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/16.png" class="lozad post-image"src="/uploads/draw-in-2021/16.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/17.png" class="lozad post-image"src="/uploads/draw-in-2021/17.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/18.png" class="lozad post-image"src="/uploads/draw-in-2021/18.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/19.png" class="lozad post-image"src="/uploads/draw-in-2021/19.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/20.png" class="lozad post-image"src="/uploads/draw-in-2021/20.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/21.png" class="lozad post-image"src="/uploads/draw-in-2021/21.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/22.png" class="lozad post-image"src="/uploads/draw-in-2021/22.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/23.png" class="lozad post-image"src="/uploads/draw-in-2021/23.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/24.png" class="lozad post-image"src="/uploads/draw-in-2021/24.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/25.png" class="lozad post-image"src="/uploads/draw-in-2021/25.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/26.png" class="lozad post-image"src="/uploads/draw-in-2021/26.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/27.png" class="lozad post-image"src="/uploads/draw-in-2021/27.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/28.png" class="lozad post-image"src="/uploads/draw-in-2021/28.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/29.png" class="lozad post-image"src="/uploads/draw-in-2021/29.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/30.png" class="lozad post-image"src="/uploads/draw-in-2021/30.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/31.png" class="lozad post-image"src="/uploads/draw-in-2021/31.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/32.jpg" class="lozad post-image"src="/uploads/draw-in-2021/32.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/33.png" class="lozad post-image"src="/uploads/draw-in-2021/33.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/34.png" class="lozad post-image"src="/uploads/draw-in-2021/34.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/35.png" class="lozad post-image"src="/uploads/draw-in-2021/35.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/36.png" class="lozad post-image"src="/uploads/draw-in-2021/36.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/37.png" class="lozad post-image"src="/uploads/draw-in-2021/37.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/38.png" class="lozad post-image"src="/uploads/draw-in-2021/38.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/39.png" class="lozad post-image"src="/uploads/draw-in-2021/39.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/40.png" class="lozad post-image"src="/uploads/draw-in-2021/40.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/41.png" class="lozad post-image"src="/uploads/draw-in-2021/41.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/42.png" class="lozad post-image"src="/uploads/draw-in-2021/42.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/55.png" class="lozad post-image"src="/uploads/draw-in-2021/55.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/51.jpeg" class="lozad post-image"src="/uploads/draw-in-2021/51.jpeg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/52.jpeg" class="lozad post-image"src="/uploads/draw-in-2021/52.jpeg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/53.jpeg" class="lozad post-image"src="/uploads/draw-in-2021/53.jpeg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/43.jpg" class="lozad post-image"src="/uploads/draw-in-2021/43.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/44.jpeg" class="lozad post-image"src="/uploads/draw-in-2021/44.jpeg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/45.jpg" class="lozad post-image"src="/uploads/draw-in-2021/45.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/46.jpeg" class="lozad post-image"src="/uploads/draw-in-2021/46.jpeg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/47.jpg" class="lozad post-image"src="/uploads/draw-in-2021/47.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/48.png" class="lozad post-image"src="/uploads/draw-in-2021/48.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/49.jpg" class="lozad post-image"src="/uploads/draw-in-2021/49.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/50.jpg" class="lozad post-image"src="/uploads/draw-in-2021/50.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2021年画的画，选了50张，有在纸上画的，白板上画的，还有给文章配的图。&lt;/p&gt;
&lt;p&gt;&lt;img  srcset=&quot;data:image/svg+xml,%3Csvg%20xmlns=&#39;http://www.w3.org/2000/svg&#39;%20viewBox=&#39;0%20
      
    
    </summary>
    
      <category term="My-painting" scheme="http://ming1016.github.io/categories/My-painting/"/>
    
    
      <category term="Painting" scheme="http://ming1016.github.io/tags/Painting/"/>
    
      <category term="iPad" scheme="http://ming1016.github.io/tags/iPad/"/>
    
      <category term="Procreate" scheme="http://ming1016.github.io/tags/Procreate/"/>
    
  </entry>
  
  <entry>
    <title>Swift 演进之路</title>
    <link href="http://ming1016.github.io/2022/02/10/swift-evolutionary-path/"/>
    <id>http://ming1016.github.io/2022/02/10/swift-evolutionary-path/</id>
    <published>2022-02-10T10:28:39.000Z</published>
    <updated>2022-06-14T06:33:07.946Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要是对<a href="https://ming1016.github.io/2021/05/22/acfun-swift-practice/">《A站 的 Swift 实践》</a>文章中的一幅配图做了详细的扩展，能够更加全面和详细了解 Swift 语言的发展，文章中提到的 Swift 各版本的语法示例代码，及本文内容都可以在 <a href="https://github.com/KwaiAppTeam/SwiftPamphletApp">Swift 小册子</a>里对应栏目里找到，这个假期我也对 Swift 小册子里栏目内容进行了些更新和补充。《A站 的 Swift 实践》文章的那个演进配图如下：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swift-evolutionary-path/01.png" class="lozad post-image"src="/uploads/swift-evolutionary-path/01.png"></p><p>文章内容如下：</p><p><em>Swift 1.1</em></p><ul><li>countElements() 改成了 count()。</li><li>@NSApplicationMain 可以在 macOS 上使用。</li></ul><p><em>Swift 1.2</em></p><ul><li>引入 Set 类型。</li><li>if let 可以放到一起，使用逗号分隔。</li><li>新增 zip() 和 flatMap()。</li><li>类增加静态方法和静态属性，使用 static 关键字描述。</li><li>as! 用于类型强转，失败会崩溃。</li><li>@noescape 用于描述作为参数闭包，用来告诉 Swift 闭包将在函数返回前使用。</li><li>常量可以延后初始化。</li></ul><p><em>Swift 2.0</em></p><ul><li>增加 guard 关键字，用于解可选项值。</li><li>defer 关键字用来延迟执行，即使抛出错误了都会在最后执行。</li><li>ErrorType 协议，以及 throws、do、try 和 catch 的引入用来处理错误。</li><li>characters 加上 count，用来替代 count()。</li><li>#available 用来检查系统版本。</li></ul><p><em>Swift 2.1</em></p><ul><li>字符串插值可以包含字符串字面符号。</li></ul><p><em>Swift 2.2</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-2.2-released/">Swift 2.2 Released!</a>、<a href="https://swift.org/blog/swift-2.2-new-features/">New Features in Swift 2.2</a>、<a href="https://swift.org/blog/swift-2.2-release-process/">Swift 2.2 Release Process</a></p><ul><li><strong>FILE</strong>, <strong>LINE</strong> 和 <strong>FUNCTION</strong> 换成 #file，#line 和 #function。</li><li>废弃 ++ 和 – 操作符。</li><li>C 语言风格 for 循环废弃。</li><li>废弃变量参数，因为变量参数容易和 inout 搞混。</li><li>废弃字符串化的选择器，选择器不再能写成字符串了。</li><li>元组可直接比较是否相等。</li></ul><p><em>Swift 3.0</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-3.0-released/">Swift 3.0 Released!</a>、<a href="https://swift.org/blog/swift-3.0-preview-1-released/">Swift 3.0 Preview 1 Released!</a>、<a href="https://swift.org/blog/swift-3.0-release-process/">Swift 3.0 Release Process</a></p><ul><li>规范动词和名词来命名。</li><li>去掉 NS 前缀。</li><li>方法名描述参数部分变为参数名。</li><li>省略没必要的单词，命名做了简化呢。比如 stringByTrimmingCharactersInSet 就换成了 trimmingCharacters。</li><li>枚举的属性使用小写开头。</li><li>引入 C 函数的属性。</li></ul><p><em>Swift 3.1</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-3.1-released/">Swift 3.1 Released!</a>、<a href="https://swift.org/blog/swift-3.1-release-process/">Swift 3.1 Release Process</a></p><ul><li>序列新增 prefix(while:) 和 drop(while:) 方法，顺序遍历执行闭包里的逻辑判断，满足条件就返回，遇到不匹配就会停止遍历。prefix 返回满足条件的元素集合，drop 返回停止遍历之后那些元素集合。</li><li>泛型适用于嵌套类型。</li><li>类型的扩展可以使用约束条件，比如扩展数组时，加上元素为整数的约束，这样的扩展就只会对元素为整数的数组有效。</li></ul><p><em>Swift 4.0</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-4.0-released/">Swift 4.0 Released!</a>、<a href="https://swift.org/blog/swift-4.0-release-process/">Swift 4 Release Process</a></p><ul><li>加入 Codable 协议，更 Swifty 的编码和解码。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0167-swift-encoders.md">SE-0167 Swift Encoders</a></li><li>字符串加入三个双引号的支持，让多行字符串编写更加直观。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0168-multi-line-string-literals.md">SE-0168 Multi-Line String Literals</a></li><li>字符串变成集合，表示可以对字符串进行逐字遍历、map 和反转等操作。</li><li>keypaths 语法提升。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0161-key-paths.md">SE-0161 Smart KeyPaths: Better Key-Value Coding for Swift</a></li><li>集合加入 ..&lt;10 这样语法的单边切片。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0172-one-sided-ranges.md">SE-0172 One-sided Ranges</a></li><li>字典新增 mapValues，可 map 字典的值。通过 grouping 可对字典进行分组生成新字典，键和值都可以。从字典中取值，如果键对应无值，则使用通过 default 指定的默认值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md">SE-0165 Dictionary &amp; Set Enhancements</a></li></ul><p><em>Swift 4.1</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-4.1-released/">Swift 4.1 Released!</a>、<a href="https://swift.org/blog/swift-4.1-release-process/">Swift 4.1 Release Process</a></p><ul><li>Hashable 也不需要返回一个唯一的 hashValue 哈希值属性。</li><li>Equatable 和 Hashable 自动合成的提案参见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md">SE-0185 Synthesizing Equatable and Hashable conformance</a>。</li><li>两个自定类型比较是否相等时，不再需要比较每个属性，Swift 会自动生成 &#x3D;&#x3D; 方法，你只需要声明 Equatable 协议。</li><li>引入 KeyDecodingStrategy属性，其中 .convertFromSnakeCase 可以将下划线的命名转化成驼峰的命名。</li><li>引入条件符合性，只有满足一定条件才符合协议。比如扩展数组要求当里面元素满足某协议数组才符合这个协议。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md">SE-0143 Conditional conformances</a>。</li><li>引入 canImport 宏条件关键字，判断是否可以使用某库，以前只能通过判断操作系统平台来判断。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md">SE-0075 Adding a Build Configuration Import Test</a>。</li><li>新增能够去除为零项目的 compactMap()。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0187-introduce-filtermap.md">SE-0187 Introduce Sequence.compactMap(_:)</a></li><li>关联类型可以创建递归约束，提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0157-recursive-protocol-constraints.md">SE-0157 Support recursive constraints on associated types</a></li><li>targetEnvironment 环境的判断，比如模拟器。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0190-target-environment-platform-condition.md">SE-0190 Target environment platform condition</a> 。</li></ul><p><em>Swift 4.2</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-4.2-released/">Swift 4.2 Released!</a>、<a href="https://swift.org/blog/4.2-release-process/">Swift 4.2 Release Process</a></p><ul><li>新增动态成员查询，@dynamicMemberLookup 新属性，指示访问属性时调用一个已实现的处理动态查找的下标方法 subscript(dynamicMemeber:)，通过指定属性字符串名返回值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md">SE-0195 Introduce User-defined “Dynamic Member Lookup” Types</a></li><li>集合新加 removeAll(where:) 方法，过滤满足条件所有元素。比 filter 更高效。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0197-remove-where.md">SE-0197 Adding in-place removeAll(where:) to the Standard Library</a></li><li>布尔值增加 toggle() 方法，用来切换布尔值。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0199-bool-toggle.md">SE-0199 Adding toggle to Bool</a></li><li>引入 CaseIterable 协议，可以将枚举中所有 case 生成 allCases 数组。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0194-derived-collection-of-enum-cases.md">SE-0194 Derived Collection of Enum Cases</a></li><li>引入 #warning 和 #error 两个新的编译器指令。#warning 会产生一个警告，#error 会直接让编译出错。比如必须要填写 token 才能编译的话可以在设置 token 的代码前加上 #error 和说明。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0196-diagnostic-directives.md">SE-0196 Compiler Diagnostic Directives</a></li><li>新增加密安全的随机 API。直接在数字类型上调用 random() 方法生成随机数。shuffle() 方法可以对数组进行乱序重排。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md">SE-0202 Random Unification</a></li><li>更简单更安全的哈希协议，引入新的 Hasher 结构，通过 combine() 方法为哈希值添加更多属性，调用 finalize() 方法生成最终哈希值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0206-hashable-enhancements.md">SE-0206 Hashable Enhancements</a></li><li>集合增加 allSatisfy() 用来判断集合中的元素是否都满足了一个条件。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0207-containsOnly.md">SE-0207 Add an allSatisfy algorithm to Sequence</a></li></ul><p><em>Swift 5.0</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-5-released/">Swift 5 Released!</a>、<a href="https://swift.org/blog/5.0-release-process/">Swift 5.0 Release Process</a></p><ul><li>@dynamicCallable 动态可调用类型。通过实现 dynamicallyCall 方法来定义变参的处理。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md">SE-0216 Introduce user-defined dynamically “callable” types</a></li><li>新加 Result 类型用来处理错误。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md">SE-0235 Add Result to the Standard Library</a></li><li>新增原始字符串能力，在字符串前加上一个或多个#符号。里面的双引号和转义符号将不再起作用了，如果想让转义符起作用，需要在转义符后面加上#符号。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md">SE-0200 Enhancing String Literals Delimiters to Support Raw Text</a></li><li>自定义字符串插值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md">SE-0228 Fix ExpressibleByStringInterpolation</a></li><li>枚举新增 @unknown 用来区分固定的枚举和可能改变的枚举的能力。用于防止未来新增枚举属性会进行提醒提示完善每个 case 的处理。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md">SE-0192 Handling Future Enum Cases</a></li><li>compactMapValues() 对字典值进行转换和解包。可以解可选类型，并去掉 nil 值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0218-introduce-compact-map-values.md">SE-0218 Introduce compactMapValues to Dictionary</a></li><li>扁平化 try?。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0230-flatten-optional-try.md">SE-0230 Flatten nested optionals resulting from ‘try?’</a></li><li>isMultiple(of:) 方法检查一个数字是否是另一个数字的倍数。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0225-binaryinteger-iseven-isodd-ismultiple.md">SE-0225 Adding isMultiple to BinaryInteger</a></li></ul><p><em>Swift 5.1</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.1-released/">Swift 5.1 Released!</a>、<a href="https://swift.org/blog/5.1-release-process/">Swift 5.1 Release Process</a></p><ul><li>有序集合的 diff，通过 difference(from:) 方法，可以返回要删除哪些和添加哪些项目能够让两个集合相等。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0240-ordered-collection-diffing.md">SE-0240 Ordered Collection Diffing</a></li><li>属性包装。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0258-property-wrappers.md">SE-0258 Property Wrappers</a></li><li>不透明返回类型。函数调用者决定返回什么类型是泛型，函数自身决定返回什么类型使用不透明返回类型。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md">SE-0244 Opaque Result Types</a></li><li>初始化有默认值的属性可不设置。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0242-default-values-memberwise.md">SE-0242 Synthesize default values for the memberwise initializer</a></li><li>单行表达式函数隐式返回，返回一个单行表达式的函数可以不用 return 关键字。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0255-omit-return.md">SE-0255 Implicit returns from single-expression functions</a></li><li>在类、结构体和枚举里使用 Self，Self 可以指代包含的类型。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md">SE-0068 Expanding Swift Self to class members and value types</a></li><li>静态下标。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0254-static-subscripts.md">SE-0254 Static and class subscripts</a></li><li>枚举里有 none 的 case 编译器会提示换成 Optional.none。</li><li>引入未初始化数组。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0245-array-uninitialized-initializer.md">SE-0245 Add an Array Initializer with Access to Uninitialized Storage</a></li></ul><p><em>Swift 5.2</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.2-released/">Swift 5.2 Released!</a>、<a href="https://swift.org/blog/5.2-release-process/">Swift 5.2 Release Process</a></p><ul><li>自定义类型中实现了 callAsFunction() 的话，该类型的值就可以直接调用。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0253-callable.md">SE-0253 Callable values of user-defined nominal types</a></li><li>键路径表达式作为函数。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0249-key-path-literal-function-expressions.md">SE-0249 Key Path Expressions as Functions</a></li></ul><p><em>Swift 5.3</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.3-released/">Swift 5.3 released!</a>、<a href="https://swift.org/blog/5.3-release-process/">Swift 5.3 Release Process</a></p><ul><li>SPM 包管理资源，SPM 可以包含资源文件，比如多媒体或文本等。通过 Bundle.module 访问这些资源。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0271-package-manager-resources.md">SE-0271 Package Manager Resources</a></li><li>SPM 包里资源本地化。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0278-package-manager-localized-resources.md">SE-0278 Package Manager Localized Resources</a></li><li>SPM 可以整合二进制包依赖。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0272-swiftpm-binary-dependencies.md">SE-0272 Package Manager Binary Dependencies</a></li><li>SPM 可以设置特定平台的依赖。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0273-swiftpm-conditional-target-dependencies.md">SE-0273 Package Manager Conditional Target Dependencies</a></li><li>单个 catch 块中捕获多个 Error 的 case。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0276-multi-pattern-catch-clauses.md">SE-0276 Multi-Pattern Catch Clauses</a></li><li>支持多个尾部闭包。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0279-multiple-trailing-closures.md">SE-0279 Multiple Trailing Closures</a></li><li>符合 Comparable 协议的枚举可以进行比较。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0266-synthesized-comparable-for-enumerations.md">SE-0266 Synthesized Comparable conformance for enum types</a></li><li>很多地方可以不用加 self 来指代实例自己了。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0269-implicit-self-explicit-capture.md">SE-0269 Increase availability of implicit self in @escaping closures when reference cycles are unlikely to occur</a></li><li>@main 可以方便指定程序入口点。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0281-main-attribute.md">SE-0281 @main: Type-Based Program Entry Points</a></li><li>where 子句可以用到泛型和扩展函数中。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0267-where-on-contextually-generic.md">SE-0267 where clauses on contextually generic declarations</a></li><li>枚举的 case 也可以符合协议。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0280-enum-cases-as-protocol-witnesses.md">SE-0280 Enum cases as protocol witnesses</a></li><li>完善 didSet，性能提升。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0268-didset-semantics.md">SE-0268 Refine didSet Semantics</a></li><li>新增 Float16 类型，即半精度浮点类型。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0277-float16.md">SE-0277 Float16</a></li></ul><p><em>Swift 5.4</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.4-released/">Swift 5.4 Released!</a></p><ul><li>SPM 支持 @main。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0294-package-executable-targets.md">SE-0294 Declaring executable targets in Package Manifests</a></li><li>结果生成器（Result builders），通过传递序列创建新值，SwiftUI就是使用的结果生成器将多个视图生成一个视图。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md">SE-0289 Result builders</a></li><li>增强隐式成员语法，即使用了隐式的成员可以进行链式处理。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0287-implicit-member-chains.md">SE-0287 Extend implicit member syntax to cover chains of member references</a></li><li>函数开始有了使用多个变量参数的能力。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0284-multiple-variadic-parameters.md">SE-0284 Allow Multiple Variadic Parameters in Functions, Subscripts, and Initializers</a></li><li>嵌套函数可以重载，嵌套函数可以在声明函数之前调用他。</li><li>属性包装支持局部变量。</li></ul><p><em>Swift 5.5</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.5-released/">Swift 5.5 Released!</a></p><ul><li>Async await，用同步写法来处理异步。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296 Async&#x2F;await</a></li><li>Async sequences，异步序列上的循环能力。符合 AsyncSequence 协议的序列可以通过 for await 来进行异步循环。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298 Async&#x2F;Await: Sequences</a> </li><li>结构化的并发，使用 Task 和 TaskGroup 执行、取消和监听当前操作的方法。复杂的并发处理可以使用 withTaskGroup() 来创建一组 Task，addTask() 用来添加任务，cancelAll() 可以取消任务，addTask() 在取消任务后可以继续添加任务，如果使用了 addTaskUnlessCancelled() 方法就可以避免取消后会继续添加任务这种情况。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304 Structured concurrency</a></li><li>只读属性支持 async 和 throws 关键字。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0310-effectful-readonly-properties.md">SE-0310 Effectful Read-only Properties</a></li><li>async let，可以创建 await 子任务。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0317-async-let.md">SE-0317 async let bindings</a></li><li>以前异步代码的适配。比如 DispatchQueue.main.async，外部库可以通过 withCheckedContinuation() 函数来对以前异步代码进行封装。 提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">SE-0300 Continuations for interfacing async tasks with synchronous code</a></li><li>Actor，可以确保内部只能被一个线程访问，避免存储属性和方法出现竞争条件。提案在这 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306 Actors</a></li><li>全局 actors，通过 actor 将全局状态隔离出来，避免数据竞争。比如主线程 @MainActor 这个属性包装可以将属性和方法标记为只能在主线程上访问。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0316-global-actors.md">SE-0316 Global actors</a></li><li>Sendable 协议和 @Sendable 属性包装，目的是支持安全的将数据从一个线程传给另一个线程。Swift 的核心数据类型比如字符、集合等已符合 Sendable 协议。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0302-concurrent-value-and-concurrent-closures.md">SE-0302 Sendable and @Sendable closures</a></li><li>局部变量可以使用 lazy。</li><li>属性包装可以用到函数和闭包参数上。提案<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0293-extend-property-wrappers-to-function-and-closure-parameters.md">SE-0293 Extend Property Wrappers to Function and Closure Parameters</a></li><li>泛型支持静态成员查找。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0299-extend-generic-static-member-lookup.md">SE-0299 Extending Static Member Lookup in Generic Contexts</a></li><li>#if 用于后缀成员表达式。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0308-postfix-if-config-expressions.md">SE-0308 #if for postfix member expressions</a></li><li>CGFloat 和 Double 之间可以隐式转换。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0307-allow-interchangeable-use-of-double-cgfloat-types.md">SE-0307 Allow interchangeable use of CGFloat and Double types</a></li><li>Codable 支持关联值枚举。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0295-codable-synthesis-for-enums-with-associated-values.md">SE-0295 Codable synthesis for enums with associated values</a></li></ul><p>上面各个版本的语法更新的内容和更多代码的示例都可以在 Swift 小册子里查看，内容力求更全，描述力求更简洁，more big, more small。不想下载 app 也可以查看<a href="https://ming1016.github.io/2021/11/23/daiming-swift-pamphlet/">《戴铭的 Swift 小册子4.0》</a>这篇，内容也同步做了更新和补充（内容达十五万字，值得你收藏和分享）。我对小册子内容查看样式视觉做了更新，排版用了赫蹏（hètí），字体是霞鹜文楷，更新了代码高亮风格，内容看起来更舒服。还有 icon 也进行替换，不用再对着枯燥的 SFSymbol 和我先前临时从以前图里随便挑的那条小狗 App icon 看了。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swift-evolutionary-path/02.png" class="lozad post-image"src="/uploads/swift-evolutionary-path/02.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swift-evolutionary-path/03.png" class="lozad post-image"src="/uploads/swift-evolutionary-path/03.png"></p><p>另</p><p>小册子现在可以直接下载 dmg 使用了，4.3下载地址：<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp/files/8055673/4.3.dmg.zip">戴铭的开发小册子4.3.dmg.zip</a></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swift-evolutionary-path/04.png" class="lozad post-image"src="/uploads/swift-evolutionary-path/04.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇主要是对&lt;a href=&quot;https://ming1016.github.io/2021/05/22/acfun-swift-practice/&quot;&gt;《A站 的 Swift 实践》&lt;/a&gt;文章中的一幅配图做了详细的扩展，能够更加全面和详细了解 Swift 语言的发展，文章
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>如何用 SwiftUI + Combine + Swift Concurrency Aysnc/Await Actor 欢畅开发</title>
    <link href="http://ming1016.github.io/2022/01/03/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/"/>
    <id>http://ming1016.github.io/2022/01/03/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/</id>
    <published>2022-01-03T03:53:21.000Z</published>
    <updated>2022-06-14T06:27:42.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先说两句废话（Don’t-blame-me-about-my-calculation）"><a href="#先说两句废话（Don’t-blame-me-about-my-calculation）" class="headerlink" title="先说两句废话（Don’t blame me about my calculation）"></a>先说两句废话（Don’t blame me about my calculation）</h2><p>为啥写这篇文章，简单说，这些日子以来，总觉着做事还是专注些好，于是也逐步减少了很多信息消费，缩减了些欲望吧。目前更加关注怎么能够让开发更快乐些，相信有了这个方向，其他事情就更容易见招拆招了，面对的挑战也不再是挑战，而是激发自己斗志的辅助工具，其实不用在乎那些看似权威的做法和打法，只要是没让你开心的，肯定是有改进空间的。思路和方向才是最重要的，比如<a href="https://search.douban.com/movie/subject_search?search_text=%E5%A4%A7%E4%BE%A6%E6%8E%A2%E6%B3%A2%E7%BD%97&cat=1002">《大侦探波洛》</a>，每次破案之前波洛就已经通过利害关系找好了方向，他的推理都是基于认定的方向去寻找素材。 </p><p>开心不是因为没有挑战，没有困难，没有煎熬，而是因为找到了方向，这个方向就是，快乐的 Coding，开心的工作，为了达成这个目标那些艰难挑战也就不算什么了。对于 Coding，经过实操，我觉得声明式 UI 响应式编程范式就是很好的提升工作愉悦程度的方式。代码在 GitHub 上，链接：<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp">https://github.com/KwaiAppTeam/SwiftPamphletApp</a> 。后面我会详细跟你说说这个应用如何开发的及相关知识点，希望你也能够感受下这种 Happy 的开发模式。 </p><p>这之前，我想先说下为什么我觉得快乐是很件重要的事情。这段时间，我接受了好几次采访，有关于工程师文化方面的，还有《时尚COSMOPOLITAN》杂志的采访，记者会问到一些以前的事情，在聊过往事情时我发现原来快乐才是每天自己存在着的最根本的原动力。为了能够让自己能够一直活着，就不要偏离快乐。摄影师是任欣羽，参与过《一代宗师》的拍摄，还是《时尚芭莎》的模特。以下是时尚 COSMOPOLITAN 的采访内容： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/00.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/00.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/01.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/01.jpg"></p><p>完整内容见：<a href="https://mp.weixin.qq.com/s/b5fj2b65xRv4mhFpftwNcg">https://mp.weixin.qq.com/s/b5fj2b65xRv4mhFpftwNcg</a> </p><p>视频可见这条微博地址：<a href="https://weibo.com/1351051897/KEdu5Fi1x?pagetype=profilefeed">https://weibo.com/1351051897/KEdu5Fi1x?pagetype=profilefeed</a> </p><p>视频有六十多万播放量，两百多评论和一千多转发。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/02.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/02.png"></p><p>话题还上了微博热搜，有六百多万阅读和三千多讨论。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/03.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/03.png"></p><p>你肯定会觉得很奇怪，我怎么会接受时尚杂志采访，其实我早在2006年就跟时尚娱乐圈有染了，那年张纪中版《神雕侠侣》刚热播完，刘亦菲演的小龙女，我特别的喜欢。有幸在一次活动中我成为她的御用摄影师，由于过于激动手抖，拍糊了好多张，蛮可惜的。私存这批里还是有些清晰的，这些照片最近在找资料时不小心被我翻了出来。挑几张看看十六年前的刘亦菲和我是什么样的吧。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/04.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/04.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/05.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/05.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/06.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/06.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/07.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/07.jpg"></p><p>我还很用心的置办了新家。也是希望能够让自己能够开心些。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/08.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/08.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/09.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/09.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/10.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/10.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/11.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/11.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/12.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/12.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/30.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/30.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/13.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/13.jpg"></p><p>那么，怎样高效开发，带来愉悦的呢？ </p><h2 id="看看做出来的样子"><a href="#看看做出来的样子" class="headerlink" title="看看做出来的样子"></a>看看做出来的样子</h2><p>这是个 macOS 应用（<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp%EF%BC%89%E3%80%8A%E6%88%B4%E9%93%AD%E7%9A%84">https://github.com/KwaiAppTeam/SwiftPamphletApp）《戴铭的</a> Swift 小册子》，能够方便的查看 Swift 语法，还有一些主要库的使用指南，内容还在完善中，选择的库主要就是开发小册子应用使用到的 SwitUI、Combine、Swift Concurrency。小册子应用目前在 GitHub 上已有<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp">一千多 Star</a>（感谢有爱😄❤️），成为我第三个过千的仓库，现已移至<a href="https://github.com/KwaiAppTeam">快手 App 团队账号</a>下继续迭代完善。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/14.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/14.png"></p><p>除了这些速查和库的使用内容外，这个应用还有一些开发者的动态，当他们有新的动作，比如提交了代码、star 了什么项目，提交和留言了议题都会直接在程序坞中提醒你。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/15.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/15.png"></p><p>我对一些库做了分类，方便按需查找，库有新的提交也会在程序坞中提醒。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/16.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/16.png"></p><p>还能方便的查看库的议题。比如在阮一峰的《科技爱好者周刊》的议题中可以看到有很多人推荐和自荐了一些信息。保留议题有一千六百多个。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/17.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/17.png"></p><p>这个元旦假期，我又添加了博客动态的功能，可以跟进一些博客内容的更新。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/18.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/18.png"></p><p>由于 Swift 语言的简洁，这些库的先进，最近有同学做实验，5.5版本还有瘦体积的效果。这样的一个小册子应用程序累积开发的时间不多，就是很高效的嘛。特别是最后博客动态这个功能，七年前我用 Objective-C 做的一个RSS阅读器耗费了我两三周的时间。同样的功能用 Swift 这套来做元旦假期两天就完成了。声明式 UI 响应式范式配合上 Swift 简洁的语法真是蛮 Cool 的。 </p><h2 id="基础网络能力"><a href="#基础网络能力" class="headerlink" title="基础网络能力"></a>基础网络能力</h2><p>小册子应用会大量使用网络，先看看怎么用 Swift Concurrency 来做吧。 </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">RSSReq</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> urlStr<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-></span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">guard</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> urlStr<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"wrong url"</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> req <span class="token operator">=</span> <span class="token class-name">URLRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> url<span class="token punctuation">)</span>  <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> req<span class="token punctuation">)</span>  <span class="token keyword">guard</span> <span class="token punctuation">(</span>res <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">HTTPURLResponse</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"wrong data"</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> dataStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> data<span class="token punctuation">,</span> encoding<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span>  <span class="token keyword">return</span> dataStr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，通过 url 可以获取到 data 和 response，和其他网络请求的方式不同的是，使用 await 后就不用繁琐的代理或闭包来进行后续的处理，代码变得更好理解，即字面意思上的 await 后执行后面的行。举个例子，获取博客 RSS 时，如果希望处理完一个 RSS 后再处理后面一个 RSS，使用 await 语法看起来就非常简洁清爽易于理解了。 </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> rssFeed <span class="token operator">=</span> <span class="token constant">SPC</span><span class="token punctuation">.</span><span class="token function">rssFeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取所有 rss 源的模型</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> rssFeed <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">RSSReq</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>feedLink<span class="token punctuation">)</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> str <span class="token operator">=</span> str <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span>            <span class="token punctuation">&#125;</span>            <span class="token constant">RSSVM</span><span class="token punctuation">.</span><span class="token function">handleFetchFeed</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span> str<span class="token punctuation">,</span> rssModel<span class="token punctuation">:</span> r<span class="token punctuation">)</span>            <span class="token comment">// 在 Main Actor 更新通知数</span>            <span class="token keyword">await</span> <span class="token function">rssUpdateNotis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，当出现数据获取错误就跳过后面逻辑直接去请求下个 RSS，获取成功会更新 Main Actor 处理通知逻辑，不同队列之间切换就是这么自然，短短几行代码就都讲清楚了。 </p><p>Combine 来处理网络的优势就是能够将网络请求到数据处理，最后到数据绑定都负责了。也就是发布者、操作符和订阅者的组合。下面我通过开发指南功能的过程说明下 Combine 的用法。 </p><h2 id="怎么开发指南功能"><a href="#怎么开发指南功能" class="headerlink" title="怎么开发指南功能"></a>怎么开发指南功能</h2><p>指南的列表结构使用的是 JSON，我把列表的数据保存在仓库的议题中，通过 GitHub 的 REST API 获取议题进行展示，这样对于指南列表的内容修改丰富可以通过直接在议题中进行编辑即可，无需升级应用。 </p><p>Combine 网络请求我写在 APIRequest.swift 文件里，主要代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">APISev</span><span class="token punctuation">:</span> <span class="token class-name">APISevType</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> rootUrl<span class="token punctuation">:</span> <span class="token constant">URL</span>        <span class="token keyword">init</span><span class="token punctuation">(</span>rootUrl<span class="token punctuation">:</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://api.github.com"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>rootUrl <span class="token operator">=</span> rootUrl    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">response</span><span class="token operator">&lt;</span><span class="token class-name">Request</span><span class="token operator">></span><span class="token punctuation">(</span>from req<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">AnyPublisher</span><span class="token operator">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">.</span><span class="token class-name">Res</span><span class="token punctuation">,</span> <span class="token class-name">APISevError</span><span class="token operator">></span> <span class="token keyword">where</span> <span class="token class-name">Request</span> <span class="token punctuation">:</span> <span class="token class-name">APIReqType</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> req<span class="token punctuation">.</span>path<span class="token punctuation">,</span> relativeTo<span class="token punctuation">:</span> rootUrl<span class="token punctuation">)</span><span class="token operator">!</span>        <span class="token keyword">var</span> comp <span class="token operator">=</span> <span class="token class-name">URLComponents</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> path<span class="token punctuation">,</span> resolvingAgainstBaseURL<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">!</span>        comp<span class="token punctuation">.</span>queryItems <span class="token operator">=</span> req<span class="token punctuation">.</span>qItems        <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token class-name">URLRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> comp<span class="token punctuation">.</span>url<span class="token operator">!</span><span class="token punctuation">)</span>        req<span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"token </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token constant">SPC</span><span class="token punctuation">.</span>gitHubAccessToken</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> forHTTPHeaderField<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Authorization"</span></span><span class="token punctuation">)</span>        req<span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"SwiftPamphletApp"</span></span><span class="token punctuation">,</span> forHTTPHeaderField<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"User-Agent"</span></span><span class="token punctuation">)</span>        <span class="token keyword">let</span> de <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        de<span class="token punctuation">.</span>keyDecodingStrategy <span class="token operator">=</span> <span class="token punctuation">.</span>convertFromSnakeCase        <span class="token keyword">let</span> sch <span class="token operator">=</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"GitHub API Queue"</span></span><span class="token punctuation">,</span> qos<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> attributes<span class="token punctuation">:</span> <span class="token punctuation">.</span>concurrent<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">dataTaskPublisher</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> req<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> sch<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> sch<span class="token punctuation">)</span>            <span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> res <span class="token keyword">in</span>                <span class="token keyword">return</span> data            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span>mapError <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                <span class="token class-name">APISevError</span><span class="token punctuation">.</span>resError            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token punctuation">.</span><span class="token class-name">Res</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> decoder<span class="token punctuation">:</span> de<span class="token punctuation">)</span>            <span class="token punctuation">.</span>mapError <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                <span class="token class-name">APISevError</span><span class="token punctuation">.</span>parseError            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token class-name">RunLoop</span><span class="token punctuation">.</span>main<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eraseToAnyPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，Combine 有 decode 的操作符，能够直接指定 JSON 模型数据类型和 JSONDecoder 对象。还有重试、队列指定以及抛错误的操作符。 </p><p>一个应用的生命周期内，相同的请求会发布很多次，需要定义一个发起请求的 Subject，还有请求完成响应的 Subject。定义如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">let</span> apCustomIssuesSj <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">let</span> resCustomIssuesSj <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">IssueModel</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>apCustomIssuesSj 会发起网络请求，代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> resCustomIssuesSm <span class="token operator">=</span> apCustomIssuesSj    <span class="token punctuation">.</span>flatMap <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>apiSev<span class="token punctuation">]</span> <span class="token keyword">in</span>        apiSev<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> reqCustomIssues<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> error <span class="token operator">-></span> <span class="token class-name">Empty</span><span class="token operator">&lt;</span><span class="token class-name">IssueModel</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span> <span class="token keyword">in</span>                <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>errSj<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token function">share</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>resCustomIssuesSj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面 .catch 里errSj 发布者就是嵌套发布者，.flatMap 会让每次返回都是新发布者。apiSev.response 返回的是被类型擦除到 AnyPublisher 上，这样不同类型的发布者能够被 .flatMap 处理。闭包内的 .catch 处理能区分发布者，仅对当前发布者有效，不会影响后面发布者，导致整个管道被取消。发布者失败类型是 Never，失败本身会被连贯的处理。 </p><p>.flatMap 除了从它 map 函数里生产发布者，还有个可选参数 maxPublishers，通过这个参数可以限制一次生产的最大发布者数量，也就是你可以通过 .flatMap 对管道上游的发布者进行反压（Backpressure），maxPublishers 能有效的节流管道，按照管道内部实际上的发布速度进行反压，这个也是 Combine 相较于 RxSwift 来说的一个优势。比如当网络请求多时，你可以通过设置 .max(1) 来减轻请求对服务的压力，同时还能够保证结果到达的顺序和请求顺序的一致。 </p><p>resCustomIssuesSj 会去处理网络请求成功的数据，最后通过 .assign 将处理的数据分配给遵循 ObservableObject 协议类的 @Published 属性包装的属性 customIssues，用于响应式的更新 SwiftUI 布局数据。实现代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> repCustomIssuesSm <span class="token operator">=</span> resCustomIssuesSj    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> issueModel <span class="token keyword">in</span>        <span class="token keyword">let</span> str <span class="token operator">=</span> issueModel<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">base64Decoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span>        <span class="token keyword">let</span> data<span class="token punctuation">:</span> <span class="token class-name">Data</span>        data <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token class-name">Encoding</span><span class="token punctuation">.</span>utf8<span class="token punctuation">)</span><span class="token operator">!</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">try</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">CustomIssuesModel</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token class-name">CustomIssuesModel</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>customIssues<span class="token punctuation">,</span> on<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，你会发现在 .map 中还会对数据进行 base64 decode，这是因为我在仓库议题中保存的是 base64 encode 的数据，decode 成 JSON 数据再用 JSONDecoder 转为 [CustomIssuesModel] 模型 数据分配给 customIssues。 </p><p>使用 SwiftUI 写的指南列表视图，代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">IssuesListFromCustomView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> vm<span class="token punctuation">:</span> <span class="token class-name">IssueVM</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>customIssues<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ci <span class="token keyword">in</span>                <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>ci<span class="token punctuation">.</span>issues<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                        <span class="token class-name">NavigationLink</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">IssueView</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name">IssueVM</span><span class="token punctuation">(</span>repoName<span class="token punctuation">:</span> <span class="token constant">SPC</span><span class="token punctuation">.</span>pamphletIssueRepoName<span class="token punctuation">,</span> issueNumber<span class="token punctuation">:</span> i<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Text</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span>ci<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>errMsg<span class="token punctuation">,</span> isPresented<span class="token punctuation">:</span> $vm<span class="token punctuation">.</span>errHint<span class="token punctuation">,</span> actions<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>            vm<span class="token punctuation">.</span><span class="token function">doing</span><span class="token punctuation">(</span><span class="token punctuation">.</span>customIssues<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中的属性包装 @StateObject 会在当前视图生命周期中保持 vm 这个属性的数据，vm 需要遵循 ObservableObject 协议，其 @Published 发布属性的值会被 SwiftUI 自动进行管理，属性 vm 的发布属性数据变化时会自动触发布局依据新数据的更新。 </p><p>上面代码中的 SwiftUI 写的布局界面效果如下： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/19.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/19.png"></p><p>界面主体是 List 视图，根据 List 的定义，要求的输入是一个数组，数组内元素需要遵循 Identifiable，每行的返回是被 @ViewBuilder 标记的 View。ForEach 根据数组中的元素会创建能够重复使用的视图，性能接近大家熟悉的 UITableView，但是写法上简洁的不要太多，真实完美解痛点案例，😄❤️。 </p><p>指南的内容也会以 markdown 格式存在议题中，通过调用 GitHub API 的接口进行指南内容的读取。一个接口是议题接口，请求结构体定义如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">IssueRequest</span><span class="token punctuation">:</span> <span class="token class-name">APIReqType</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">typealias</span> <span class="token class-name">Res</span> <span class="token operator">=</span> <span class="token class-name">IssueModel</span>    <span class="token keyword">var</span> repoName<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> issueNumber<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">var</span> path<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"/repos/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">repoName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">/issues/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">issueNumber</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> qItems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">URLQueryItem</span><span class="token punctuation">]</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token nil constant">nil</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一个是议题留言的接口，定义如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">IssueRequest</span><span class="token punctuation">:</span> <span class="token class-name">APIReqType</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">typealias</span> <span class="token class-name">Res</span> <span class="token operator">=</span> <span class="token class-name">IssueModel</span>    <span class="token keyword">var</span> repoName<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> issueNumber<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">var</span> path<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"/repos/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">repoName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">/issues/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">issueNumber</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> qItems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">URLQueryItem</span><span class="token punctuation">]</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token nil constant">nil</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现效果如下图： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/20.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/20.png"></p><p>指南内容放在议题中，也是希望能够通过议题留言功能，让反馈和大家经验的补充被更多人看到。 </p><p>除了语法速查的内容，关于 Swift 的一些特性，专题，还有 Combine、Concurrency、SwiftUI 这些库的使用指南内容都是采用的 GitHub API 接口读取议题方式获取的。 </p><p>读取议题接口获取指南列表的模式，也用在了开发者和仓库动态列表中。接下来我跟你说下开发者和仓库动态怎么开发的吧。 </p><h2 id="开发者和仓库动态"><a href="#开发者和仓库动态" class="headerlink" title="开发者和仓库动态"></a>开发者和仓库动态</h2><p>显示开发者信息的页面代码在 UserView.swift 里，开发者介绍信息页面如下： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/21.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/21.png"></p><p>界面中的数据都来自 &#x2F;users&#x2F;(userName) 接口，获取数据逻辑在 UserVM.swift 里。数据多，但情况不复杂，布局上只要注意进行数据是否有的区分即可，布局代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">AsyncImageWithPlaceholder</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token punctuation">.</span>normalSize<span class="token punctuation">,</span> url<span class="token punctuation">:</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">)</span>            <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name <span class="token operator">??</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>login<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"(</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>login</span><span class="token interpolation-punctuation punctuation">)</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"订阅者 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>followers</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 人，仓库 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>publicRepos</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 个"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ButtonGoGitHubWeb</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>htmlUrl<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"在 GitHub 上访问"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>location <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"居住：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>location <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">.</span>subheadline<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end HStack</span>                <span class="token keyword">if</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>bio <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"简介：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>bio <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>blog <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>blog<span class="token operator">!</span><span class="token punctuation">.</span>isEmpty <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"博客：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>blog <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token class-name">ButtonGoGitHubWeb</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>blog <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"访问"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>twitterUsername <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Twitter："</span></span><span class="token punctuation">)</span>                <span class="token class-name">ButtonGoGitHubWeb</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://twitter.com/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>twitterUsername <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"@</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>twitterUsername <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end HStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>    <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码可以看到，对于数据是否存在，SwiftUI 是可以使用 if 来进行判断是否展示视图的，这个条件判断也会存在于整个视图结构类型中被编译生成，因此更好的方式是将数据判断放到 ViewModifier 中，因为 ViewModifier 处理时机是在运行时，可以减少布局初始创建逻辑运算。 </p><p>开发者的事件和接受事件部分的数据就比介绍部分复杂些，使得界面变化也多些，事件接口是 &#x2F;users&#x2F;(userName)&#x2F;events，接受事件接口是 &#x2F;users&#x2F;(userName)&#x2F;received_events 。数据的复杂体现在类型上，类型种类较多，我采用的是直接处理 payload 里的字段，如果其 issue.number 字段不为空，那么就表示这个开发者事件是和议题相关，会显示 issue.title 标题，有内容的话，也就是 issue.body 不为空，继续显示议题的内容。如果字段是 comment，就表示事件是议题的留言。如果字段是 commits，表示需要列出这个事件中所有的 commit 提交及标题和描述。pullRequest 字段不为空就显示这个 PR 的标题和内容描述。字段处理逻辑代码实现如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>issue<span class="token operator">?</span><span class="token punctuation">.</span>number <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>issue<span class="token operator">?</span><span class="token punctuation">.</span>title <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>issue<span class="token operator">?</span><span class="token punctuation">.</span>title <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>issue<span class="token operator">?</span><span class="token punctuation">.</span>body <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>type <span class="token operator">!=</span> <span class="token string-literal"><span class="token string">"IssueCommentEvent"</span></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Markdown</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>issue<span class="token operator">?</span><span class="token punctuation">.</span>body <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"IssueCommentEvent"</span></span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>comment<span class="token operator">?</span><span class="token punctuation">.</span>body <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Markdown</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>comment<span class="token operator">?</span><span class="token punctuation">.</span>body <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>commits <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListCommits</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> event<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>pullRequest <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>pullRequest<span class="token operator">?</span><span class="token punctuation">.</span>title <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>pullRequest<span class="token operator">?</span><span class="token punctuation">.</span>title <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>pullRequest<span class="token operator">?</span><span class="token punctuation">.</span>body <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Markdown</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>pullRequest<span class="token operator">?</span><span class="token punctuation">.</span>body <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>description <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Markdown</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>description <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，对于不定数量的 commit 视图写在了一个单独的 ListCommits 视图中。只要是遵循了 View 协议，就可以作为自定义视图在其他视图中直接使用。ListCommits 代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ListCommits</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> event<span class="token punctuation">:</span> <span class="token class-name">EventModel</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>commits <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token class-name">PayloadCommitModel</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c <span class="token keyword">in</span>            <span class="token class-name">ButtonGoGitHubWeb</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://github.com/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">event<span class="token punctuation">.</span>repo<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">/commit/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">c<span class="token punctuation">.</span>sha <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"提交"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>message <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码你会发现一个 ButtonGoGitHubWeb的视图，进入看会发现用到了一个自定义的 ButtonStyle： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token class-name">FixAwfulPerformanceStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>FixAwfulPerformanceStyle() 的实现如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">/// 列表加按钮性能问题，需观察官方后面是否解决</span><span class="token comment">/// https://twitter.com/fcbunn/status/1259078251340800000</span><span class="token keyword">struct</span> <span class="token class-name">FixAwfulPerformanceStyle</span><span class="token punctuation">:</span> <span class="token class-name">ButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        configuration<span class="token punctuation">.</span>label            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>body<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> leading<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> bottom<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> trailing<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>selectedControlTextColor<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>controlTextColor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>selectedControlColor<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>controlBackgroundColor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>lightGray<span class="token punctuation">)</span><span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>gray<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是社区 <a href="https://github.com/Kam-To">@Kam-To</a> 提的一个 <a href="https://github.com/KwaiAppTeam/SwiftPamphletApp/pull/104">PR</a>，是解的 macOS 上的一个性能问题，也就是在 List 中直接使用 Button，在列表快速滚动时，流畅度会有损伤，加上上面的 ButtonStyle 代码就好了。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/22.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/22.png"></p><p>原推见 <a href="https://twitter.com/fcbunn/status/1259078251340800000">https://twitter.com/fcbunn/status/1259078251340800000</a>。 </p><p>开发者接受事件和事件类似，只是会多显示事件的 actor 字段内容，表明开发者接受的是谁发出的事件。事件界面如下所示： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/23.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/23.png"></p><p>仓库整体处理和开发者类似，只是多了议题和 README 内容，数据复杂度比开发者要低。接下来我要跟你说的是如果开发者或仓库有新的提交，怎么能够获取到，并提示有更新。 </p><h2 id="动态有更新，怎么提醒的"><a href="#动态有更新，怎么提醒的" class="headerlink" title="动态有更新，怎么提醒的"></a>动态有更新，怎么提醒的</h2><p>我的思路是通过本地定时器，定期获取数据，本地记录上次浏览的位置，通过对比，看有多少新的动态没有查看，并通过 .badge 这个 ViewModifier 和 NSApp.dockTile.badgeLabel 来进行端内端外的提醒。 </p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>在 SwiftUI 中，可以使用 Combine 的 Timer.publish 发布器来设置一个定时属性，Timer.publish 指定好时间周期和队列模式等参数。比如设置一个开发者动态定时器属性，代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> timerForRepos <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>every<span class="token punctuation">:</span> <span class="token constant">SPC</span><span class="token punctuation">.</span>timerForReposSec<span class="token punctuation">,</span> on<span class="token punctuation">:</span> <span class="token punctuation">.</span>main<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>common<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">autoconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再在 .onReceive 中执行网络数据获取操作，就可以定时获取数据了。 </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span>timerForRepos<span class="token punctuation">,</span> perform<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> time <span class="token keyword">in</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> repoName <span class="token operator">=</span> appVM<span class="token punctuation">.</span><span class="token function">timeForReposEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token class-name">RepoVM</span><span class="token punctuation">(</span>repoName<span class="token punctuation">:</span> repoName<span class="token punctuation">)</span>        vm<span class="token punctuation">.</span><span class="token function">doing</span><span class="token punctuation">(</span><span class="token punctuation">.</span>notiRepo<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取到的数据会跟本地已经存储的数据进行对比。 </p><h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>本地数据存储，我用的是 SQLite.swift，这个库是使用 Swift 对 SQLite 做了一层封装，使用很简便，在 DBHandler.swift 里有数据库初始化和表的创建相关代码，DBDevNoti.swift 中的 DevsNotiDataHelper 有对数据操作的代码，DBDevNoti 定义了数据表的结构。如何使用可以参考 SQLite.swift 官方的<a href="https://github.com/stephencelis/SQLite.swift/blob/master/Documentation/Index.md">指南</a>，里面讲得非常详细清楚。 </p><p>用 DB Browser for SQLite 应用可以查看本地的数据库。下面是用它查看记录的 RSS 的数据，如图：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/29.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/29.png"></p><p>更新未读数的判断逻辑，我封到了一个函数里，代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">updateDBDevsInfo</span><span class="token punctuation">(</span>ems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">EventModel</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">DevsNotiDataHelper</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>sLogin<span class="token punctuation">:</span> userName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">var</span> lrid <span class="token operator">=</span> f<span class="token punctuation">.</span>lastReadId            <span class="token keyword">for</span> em <span class="token keyword">in</span> ems <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                    lrid <span class="token operator">=</span> em<span class="token punctuation">.</span>id                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> em<span class="token punctuation">.</span>id <span class="token operator">==</span> f<span class="token punctuation">.</span>lastReadId <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span>                <span class="token punctuation">&#125;</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span>            i <span class="token operator">=</span> f<span class="token punctuation">.</span>unRead <span class="token operator">+</span> i            <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> <span class="token omit keyword">_</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">DevsNotiDataHelper</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">DBDevNoti</span><span class="token punctuation">(</span>login<span class="token punctuation">:</span> userName<span class="token punctuation">,</span> lastReadId<span class="token punctuation">:</span> lrid<span class="token punctuation">,</span> unRead<span class="token punctuation">:</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end if let f</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// end func updateDBDevsInfo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上面代码所示，入参 ems 是获取到的最新数据，先从本地数据库中取到上次最新的阅读编号 lastReadId，迭代 ems，如果第一个 ems 的编号就和本地数据库 lastReadId 一样，那表示无新动态，如果没有就开始计数，直到找到相等的 lastReadId 位置，记了多少数就表示有多少新动态。 </p><h3 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h3><p>列表、Sidebar 还有 macOS 系统的 Dock 上都可以显示新状态数的提醒。列表和 Sidebar 直接使用 .badge ViewModifier 就可以展示未读数了，效果如下： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/24.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/24.png"></p><p>Dock 栏提示设置需要用到系统的 NSApp，代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">NSApp</span><span class="token punctuation">.</span>dockTile<span class="token punctuation">.</span>showsApplicationBadge <span class="token operator">=</span> <span class="token boolean">true</span><span class="token class-name">NSApp</span><span class="token punctuation">.</span>dockTile<span class="token punctuation">.</span>badgeLabel <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/28.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/28.png"></p><p>小册子里还可以查看 Swift 社区里博主们博客更新动态。我接着跟你说说我怎么做的。 </p><h2 id="博客-RSS-更新动态"><a href="#博客-RSS-更新动态" class="headerlink" title="博客 RSS 更新动态"></a>博客 RSS 更新动态</h2><p>博客 RSS 的数据获取我在前面基础网络能力中已经说了。所有解析逻辑我都写在了工程 RSSReader&#x2F;Parser&#x2F; 目录下的 ParseStandXMLTagTokens.swift、ParseStandXMLTags.swift、ParseStandXML.swift 三个文件中，实现思路我在先前<a href="https://ming1016.github.io/2019/12/07/how-to-analyze-startup-time-cost-in-ios/">《如何对 iOS 启动阶段耗时进行分析》</a>文章的“优化后如何保持？”章节有详细说明。 </p><p>根据 RSS 的 XML 结构，定义 Model 结构如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">RSSModel</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> feedLink <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> siteLink <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> language <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> lastBuildDate <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> pubDate <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">RSSItemModel</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> unReadCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">RSSItemModel</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> guid <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> link <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> pubDate <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> isRead <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据这个结构，也会在本地数据库设计对应的两个表，两个表的增删改代码分别在 DBRSSFeed.swift 和 DBRSSItems.swift 里。表的结构和 Model 的结构基本一致，方便内存和磁盘进行切换。更新提醒逻辑和前面说的开发者动态更新逻辑区别在于，RSS 使用 isRead 标记有没有阅读过，直接在本地数据里 count 出 isRead 字段值为 false 的数量就是需要提醒的数。 </p><p>新 RSS 的添加会先在本地数据库中查找是否有存在，依据的是文章的 url，如果不存在就会添加到数据库中设置为未读作为提醒。 </p><p>RSS 里文章的内容是 HTML，显示内容使用的是 WebKit 库，要在 SwiftUI 中使用，需要封装下，代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> <span class="token class-name">WebKit</span><span class="token keyword">struct</span> <span class="token class-name">WebUIView</span> <span class="token punctuation">:</span> <span class="token class-name">NSViewRepresentable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> html<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeNSView</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">WKWebView</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">WKWebView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">updateNSView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> nsView<span class="token punctuation">:</span> <span class="token class-name">NSViewType</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nsView<span class="token punctuation">.</span><span class="token function">loadHTMLString</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> baseURL<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下图： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/25.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/25.png"></p><h2 id="云打包"><a href="#云打包" class="headerlink" title="云打包"></a>云打包</h2><p>工程如果是本地编译，在 SwiftPamphletAppConfig.swift 的 gitHubAccessToken 中添上 token 就可以了，如果想快速打包使用小册子，使用 Github Action Workflow 编译，无需在本地操作、也无需开启 Xcode 设置个人开发帐号，只需设置 personal access token(PAT) 在 repository 设定中 action secrets，并命名为 PAT。Frok 此 repository，设置 PAT，手动启用 action，等候约3分钟即可下载档案，往后专案更新时，只需 fetch and merge，action 会自动进行。非常感谢社区 <a href="https://github.com/powenn">@powenn</a> 开发的这个 Github Action。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/26.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/26.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/27.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/27.png"></p><h2 id="推荐可以学习的开源仓库"><a href="#推荐可以学习的开源仓库" class="headerlink" title="推荐可以学习的开源仓库"></a>推荐可以学习的开源仓库</h2><p>为了避免闭门造车，可以多关注些开源项目，以下这些仓库是我放在小册子里可以关注到更新动态的项目，这里作为附录列下，也可以直接在小册子里查看。除了 Swift 也有些非常有趣的项目，希望可以丰富到你的开发生活。 </p><h3 id="好库"><a href="#好库" class="headerlink" title="好库"></a>好库</h3><h4 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h4><ul><li><a href="https://github.com/apple/swift">swift</a></li><li><a href="https://github.com/apple/swift-evolution">swift-evolution</a> 提案 </li><li><a href="https://github.com/llvm/llvm-project">llvm-project</a> 编译器</li></ul><h4 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h4><ul><li><a href="https://github.com/SwiftOldDriver/iOS-Weekly">iOS-Weekly</a> 老司机 iOS 周报 </li><li><a href="https://github.com/matteocrippa/awesome-swift">awesome-swift</a></li><li><a href="https://github.com/KwaiAppTeam/SwiftPamphletApp">SwiftPamphletApp</a> 戴铭的 Swift 小册子</li></ul><h4 id="封装易用功能"><a href="#封装易用功能" class="headerlink" title="封装易用功能"></a>封装易用功能</h4><ul><li><a href="https://github.com/SwifterSwift/SwifterSwift">SwifterSwift</a> Handy Swift extensions</li></ul><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ul><li><a href="https://github.com/Alamofire/Alamofire">Alamofire</a></li><li><a href="https://github.com/socketio/socket.io-client-swift">socket.io-client-swift</a></li></ul><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><ul><li><a href="https://github.com/onevcat/Kingfisher">Kingfisher</a></li><li><a href="https://github.com/kean/Nuke">Nuke</a></li></ul><h4 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h4><ul><li><a href="https://github.com/gonzalezreal/MarkdownUI">MarkdownUI</a></li></ul><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><ul><li><a href="https://github.com/recherst/kavsoft-swiftui-animations">kavsoft-swiftui-animations</a></li></ul><h4 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h4><ul><li><a href="https://github.com/stephencelis/SQLite.swift">SQLite.swift</a></li><li><a href="https://github.com/groue/GRDB.swift">GRDB.swift</a></li><li><a href="https://github.com/realm/realm-cocoa">realm-cocoa</a></li></ul><h4 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h4><ul><li><a href="https://github.com/ReactiveX/RxSwift">RxSwift</a> 函数响应式编程 </li><li><a href="https://github.com/pointfreeco/swift-composable-architecture">swift-composable-architecture</a></li><li><a href="https://github.com/onmyway133/awesome-ios-architecture">awesome-ios-architecture</a></li></ul><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><ul><li><a href="https://github.com/pointfreeco/swiftui-navigation">swiftui-navigation</a></li></ul><h4 id="静态检查"><a href="#静态检查" class="headerlink" title="静态检查"></a>静态检查</h4><ul><li><a href="https://github.com/realm/SwiftLint">SwiftLint</a></li></ul><h4 id="系统能力"><a href="#系统能力" class="headerlink" title="系统能力"></a>系统能力</h4><ul><li><a href="https://github.com/kishikawakatsumi/KeychainAccess">KeychainAccess</a></li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><ul><li><a href="https://github.com/OAuthSwift/OAuthSwift">OAuthSwift</a></li><li><a href="https://github.com/p2/OAuth2">OAuth2</a></li></ul><h4 id="macOS程序"><a href="#macOS程序" class="headerlink" title="macOS程序"></a>macOS程序</h4><ul><li><a href="https://github.com/serhii-londar/open-source-mac-os-apps">open-source-mac-os-apps</a> 开源 macOS 程序合集 </li><li><a href="https://github.com/Ranchero-Software/NetNewsWire">NetNewsWire</a></li><li><a href="https://github.com/overtake/TelegramSwift">TelegramSwift</a></li></ul><h4 id="性能和工程构建"><a href="#性能和工程构建" class="headerlink" title="性能和工程构建"></a>性能和工程构建</h4><ul><li><a href="https://github.com/tuist/tuist">tuist</a> 创建和维护 Xcode projects 文件 </li><li><a href="https://github.com/swift-server/vscode-swift">vscode-swift</a> VSCode 的 Swift 扩展</li></ul><h4 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h4><ul><li><a href="https://github.com/iina/iina">iina</a></li><li><a href="https://github.com/shogo4405/HaishinKit.swift">HaishinKit.swift</a> RTMP, HLS </li><li><a href="https://github.com/AudioKit/AudioKit">AudioKit</a></li></ul><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><ul><li><a href="https://github.com/vapor/vapor">vapor</a></li></ul><h3 id="探索库"><a href="#探索库" class="headerlink" title="探索库"></a>探索库</h3><h4 id="SwiftUI扩展"><a href="#SwiftUI扩展" class="headerlink" title="SwiftUI扩展"></a>SwiftUI扩展</h4><ul><li><a href="https://github.com/SwiftUIX/SwiftUIX">SwiftUIX</a> 扩展 SwiftUI </li><li><a href="https://github.com/SDWebImage/SDWebImageSwiftUI">SDWebImageSwiftUI</a></li><li><a href="https://github.com/apptekstudios/ASCollectionView">ASCollectionView</a> SwiftUI collection </li><li><a href="https://github.com/siteline/SwiftUI-Introspect">SwiftUI-Introspect</a> SwiftUI 引入 UIKit </li><li><a href="https://github.com/AvdLee/SwiftUIKitView">SwiftUIKitView</a> 在 SwiftUI 中 使用 UIKit</li></ul><h4 id="接口应用"><a href="#接口应用" class="headerlink" title="接口应用"></a>接口应用</h4><ul><li><a href="https://github.com/bpisano/Weather">Weather</a> 天气应用 </li><li><a href="https://github.com/Dimillian/MovieSwiftUI">MovieSwiftUI</a> 电影 MovieDB 应用 </li><li><a href="https://github.com/chojnac/NotionSwift">NotionSwift</a></li><li><a href="https://github.com/Dimillian/RedditOS">RedditOS</a> SwiftUI 写的 Reddit客户端 </li><li><a href="https://github.com/carson-katri/reddit-swiftui">reddit-swiftui</a> SwiftUI 写的 Reddit客户端 </li><li><a href="https://github.com/Dimillian/SwiftHN">SwiftHN</a> Hacker News 阅读 </li><li><a href="https://github.com/tatsuz0u/EhPanda">EhPanda</a></li><li><a href="https://github.com/Dimillian/MortyUI">MortyUI</a> GraphQL + SwiftUI 开发的瑞克和莫蒂应用 </li><li><a href="https://github.com/Finb/V2ex-Swift">V2ex-Swift</a> V2EX 客户端 </li><li><a href="https://github.com/v2er-app/iOS">iOS</a> V2EX 客户端 </li><li><a href="https://github.com/sinaweibosdk/weibo_ios_sdk">weibo_ios_sdk</a></li><li><a href="https://github.com/miniLV/MNWeibo">MNWeibo</a> Swift5 + MVVM 微博客户端 </li><li><a href="https://github.com/nerdishbynature/octokit.swift">octokit.swift</a> Swift API Client for GitHub </li><li><a href="https://github.com/GitHawkApp/GitHawk">GitHawk</a> iOS app for GitHub </li><li><a href="https://github.com/fangzesheng/free-api">free-api</a></li><li><a href="https://github.com/nerdsupremacist/Graphaello">Graphaello</a> SwiftUI 中使用 GraphQL 的工具 </li><li><a href="https://github.com/nerdsupremacist/tmdb">tmdb</a> GraphQL 包装电影数据接口</li></ul><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><ul><li><a href="https://github.com/eonist/FileWatcher">FileWatcher</a> macOS 上监听文件变化 </li><li><a href="https://github.com/waylybaye/XcodeCleaner-SwiftUI">XcodeCleaner-SwiftUI</a> 清理 Xcode </li><li><a href="https://github.com/gao-sun/eul">eul</a> SwiftUI 写的 macOS 状态监控工具 </li><li><a href="https://github.com/Dimillian/ACHNBrowserUI">ACHNBrowserUI</a> SwiftUI 写的动物之森小助手程序 </li><li><a href="https://github.com/lexrus/RegExPlus">RegExPlus</a> 正则表达式</li></ul><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li><a href="https://github.com/vinhnx/Clendar">Clendar</a> SwiftUI 写的日历应用</li></ul><h4 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h4><ul><li><a href="https://github.com/pointfreeco/isowords">isowords</a> 单词搜索游戏 </li><li><a href="https://github.com/michelpereira/awesome-games-of-coding">awesome-games-of-coding</a> 教你学编程的游戏收集 </li><li><a href="https://github.com/OpenEmu/OpenEmu">OpenEmu</a> 视频游戏模拟器 </li><li><a href="https://github.com/jVirus/swiftui-2048">swiftui-2048</a></li><li><a href="https://github.com/chrismaltby/gb-studio">gb-studio</a> 拖放式复古游戏创建器</li></ul><h4 id="新技术展示"><a href="#新技术展示" class="headerlink" title="新技术展示"></a>新技术展示</h4><ul><li><a href="https://github.com/JakeLin/Moments-SwiftUI">Moments-SwiftUI</a> SwiftUI、Async、Actor</li></ul><h4 id="新鲜事-1"><a href="#新鲜事-1" class="headerlink" title="新鲜事"></a>新鲜事</h4><ul><li><a href="https://github.com/ruanyf/weekly">weekly</a> 科技爱好者周刊</li></ul><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><ul><li><a href="https://github.com/timqian/chinese-independent-blogs">chinese-independent-blogs</a></li><li><a href="https://github.com/vlondon/awesome-swiftui">awesome-swiftui</a></li><li><a href="https://github.com/ivanvorobei/SwiftUI">SwiftUI</a></li><li><a href="https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts">GitHub-Chinese-Top-Charts</a> GitHub中文排行榜 </li><li><a href="https://github.com/onmyway133/awesome-swiftui">awesome-swiftui</a></li><li><a href="https://github.com/Juanpe/About-SwiftUI">About-SwiftUI</a> 汇总 SwiftUI 的资料</li></ul><h4 id="知识管理"><a href="#知识管理" class="headerlink" title="知识管理"></a>知识管理</h4><ul><li><a href="https://github.com/logseq/logseq">logseq</a> 更好的知识管理工具</li></ul><h4 id="性能和工程构建-1"><a href="#性能和工程构建-1" class="headerlink" title="性能和工程构建"></a>性能和工程构建</h4><ul><li><a href="https://github.com/peripheryapp/periphery">periphery</a> 检测 Swift 无用代码 </li><li><a href="https://github.com/nalexn/ViewInspector">ViewInspector</a> SwiftUI Runtime introspection 和 单元测试</li></ul><h4 id="网络-1"><a href="#网络-1" class="headerlink" title="网络"></a>网络</h4><ul><li><a href="https://github.com/Lojii/Knot">Knot</a> 使用 SwiftNIO 实现 HTTPS 抓包 </li><li><a href="https://github.com/swift-server/async-http-client">async-http-client</a> 使用 SwiftNIO 开发的 HTTP 客户端 </li><li><a href="https://github.com/kean/Get">Get</a></li><li><a href="https://github.com/awesome-selfhosted/awesome-selfhosted">awesome-selfhosted</a> 网络服务及上面的应用 </li><li><a href="https://github.com/daltoniam/Starscream">Starscream</a> WebSocket </li><li><a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG</a></li><li><a href="https://github.com/carson-katri/swift-request">swift-request</a> 声明式的网络请求</li></ul><h4 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h4><ul><li><a href="https://github.com/lludo/SwiftSunburstDiagram">SwiftSunburstDiagram</a> SwiftUI 图表</li></ul><h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><ul><li><a href="https://github.com/spevans/swift-project1">swift-project1</a> Swift编写内核，可在 Mac 和 PC 启动</li></ul><h4 id="Apple"><a href="#Apple" class="headerlink" title="Apple"></a>Apple</h4><ul><li><a href="https://github.com/apple/swift-corelibs-foundation">swift-corelibs-foundation</a></li><li><a href="https://github.com/apple/swift-package-manager">swift-package-manager</a></li><li><a href="https://github.com/apple/swift-markdown">swift-markdown</a></li><li><a href="https://github.com/apple/sourcekit-lsp">sourcekit-lsp</a></li><li><a href="https://github.com/apple/swift-nio">swift-nio</a></li><li><a href="https://github.com/apple/swift-syntax">swift-syntax</a> 解析、生成、转换 Swift 代码 </li><li><a href="https://github.com/apple/swift-crypto">swift-crypto</a> CryptoKit 的开源实现</li></ul><h4 id="待分类"><a href="#待分类" class="headerlink" title="待分类"></a>待分类</h4><ul><li><a href="https://github.com/public-apis/public-apis">public-apis</a></li><li><a href="https://github.com/insidegui/WWDC">WWDC</a></li><li><a href="https://github.com/sindresorhus/Actions">Actions</a></li><li><a href="https://github.com/trimstray/the-book-of-secret-knowledge">the-book-of-secret-knowledge</a></li><li><a href="https://github.com/rossant/awesome-math">awesome-math</a></li><li><a href="https://github.com/rakutentech/AltSwiftUI">AltSwiftUI</a> 类 SwiftUI </li><li><a href="https://github.com/gymshark/ios-stack-kit">ios-stack-kit</a> 类 SwiftUI </li><li><a href="https://github.com/OpenCombine/OpenCombine">OpenCombine</a> Combine 的开源实现 </li><li><a href="https://github.com/CombineCommunity/CombineExt">CombineExt</a> 对 Combine 的补充 </li><li><a href="https://github.com/ReSwift/ReSwift">ReSwift</a> 单页面状态和数据管理 </li><li><a href="https://github.com/devicekit/DeviceKit">DeviceKit</a> UIDevice 易用封装 </li><li><a href="https://github.com/ivanschuetz/SwiftCharts">SwiftCharts</a></li><li><a href="https://github.com/nvzqz/FileKit">FileKit</a> 文件操作 </li><li><a href="https://github.com/JohnSundell/Files">Files</a> 文件操作 </li><li><a href="https://github.com/kylef/PathKit">PathKit</a> 文件操作 </li><li><a href="https://github.com/JohnSundell/Publish">Publish</a> 静态站点生成器 </li><li><a href="https://github.com/caiyue1993/IceCream">IceCream</a> CloudKit 同步 Realm 数据库 </li><li><a href="https://github.com/tophat/RichTextView">RichTextView</a></li><li><a href="https://github.com/tnantoka/edhita">edhita</a></li><li><a href="https://github.com/keitaoouchi/MarkdownView">MarkdownView</a></li><li><a href="https://github.com/johnxnguyen/Down">Down</a> fast Markdown </li><li><a href="https://github.com/qeude/SwiftDown">SwiftDown</a> Swift 写的可换主题的 Markdown 编辑器组件 </li><li><a href="https://github.com/shibapm/Komondor">Komondor</a> Git Hooks for Swift projects </li><li><a href="https://github.com/SwiftGen/SwiftGen">SwiftGen</a> 代码生成 </li><li><a href="https://github.com/kasketis/netfox">netfox</a> 获取所有网络请求 </li><li><a href="https://github.com/BohdanOrlov/iOS-Developer-Roadmap">iOS-Developer-Roadmap</a></li><li><a href="https://github.com/kickstarter/ios-oss">ios-oss</a></li><li><a href="https://github.com/wordpress-mobile/WordPress-iOS">WordPress-iOS</a></li><li><a href="https://github.com/josejuanqm/VersaPlayer">VersaPlayer</a></li><li><a href="https://github.com/mozilla-mobile/firefox-ios">firefox-ios</a></li><li><a href="https://github.com/PostgresApp/PostgresApp">PostgresApp</a></li><li><a href="https://github.com/Moya/Moya">Moya</a></li><li><a href="https://github.com/Kitura/BlueSocket">BlueSocket</a></li><li><a href="https://github.com/rhummelmose/BluetoothKit">BluetoothKit</a></li><li><a href="https://github.com/rushisangani/BiometricAuthentication">BiometricAuthentication</a> FaceID or TouchID authentication </li><li><a href="https://github.com/krzyzanowskim/CryptoSwift">CryptoSwift</a></li><li><a href="https://github.com/timdonnelly/Advance">Advance</a> Physics-based animations </li><li><a href="https://github.com/MengTo/Spring">Spring</a> 动画 </li><li><a href="https://github.com/jathu/UIImageColors">UIImageColors</a> 获取图片主次颜色 </li><li><a href="https://github.com/BradLarson/GPUImage3">GPUImage3</a> Metal 实现 </li><li><a href="https://github.com/exyte/Macaw">Macaw</a> SVG </li><li><a href="https://github.com/efremidze/Magnetic">Magnetic</a> SpriteKit气泡支持SwiftUI </li><li><a href="https://github.com/analogcode/Swift-Radio-Pro">Swift-Radio-Pro</a> 电台应用 </li><li><a href="https://github.com/suzuki-0000/SKPhotoBrowser">SKPhotoBrowser</a> 图片浏览 </li><li><a href="https://github.com/raywenderlich/swift-algorithm-club">swift-algorithm-club</a></li><li><a href="https://github.com/hyperoslo/Cache">Cache</a></li><li><a href="https://github.com/sunshinejr/SwiftyUserDefaults">SwiftyUserDefaults</a></li><li><a href="https://github.com/MonitorControl/MonitorControl">MonitorControl</a> 亮度和声音控制 </li><li><a href="https://github.com/kylef/Commander">Commander</a> 命令行 </li><li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a></li><li><a href="https://github.com/Carthage/Carthage">Carthage</a></li><li><a href="https://github.com/danielgindi/Charts">Charts</a></li><li><a href="https://github.com/Quick/Quick">Quick</a> 测试框架 </li><li><a href="https://github.com/bilibili/ijkplayer">ijkplayer</a> 播放器 </li><li><a href="https://github.com/schellingb/dosbox-pure">dosbox-pure</a> DOS 游戏模拟器 </li><li><a href="https://github.com/twostraws/HackingWithSwift">HackingWithSwift</a> 示例代码 </li><li><a href="https://github.com/glushchenko/fsnotes">fsnotes</a></li><li><a href="https://github.com/coteditor/CotEditor">CotEditor</a></li><li><a href="https://github.com/JoanKing/JKSwiftExtension">JKSwiftExtension</a> Swift常用扩展、组件、协议 </li><li><a href="https://github.com/infinum/iOS-Nuts-And-Bolts">iOS-Nuts-And-Bolts</a></li><li><a href="https://github.com/gtokman/ExtensionKit">ExtensionKit</a></li><li><a href="https://github.com/johnsundell/publish">publish</a> 用 swift 来写网站 </li><li><a href="https://github.com/mehdihadeli/awesome-software-architecture">awesome-software-architecture</a> 软件架构 </li><li><a href="https://github.com/NARKOZ/hacker-scripts">hacker-scripts</a> 程序员的活都让机器干的脚本（真实故事） </li><li><a href="https://github.com/nalexn/clean-architecture-swiftui">clean-architecture-swiftui</a> 干净完整的SwiftUI+Combine例子，包含网络和单元测试等 </li><li><a href="https://github.com/carekit-apple/CareKit">CareKit</a> 使用 SwiftUI 开发健康相关的库 </li><li><a href="https://github.com/carson-katri/awesome-result-builders">awesome-result-builders</a> Result Builders </li><li><a href="https://github.com/Cay-Zhang/SwiftSpeech">SwiftSpeech</a> 苹果语言识别封装库，已适配 SwiftUI </li><li><a href="https://github.com/NextLevel/NextLevel">NextLevel</a> 相机 </li><li><a href="https://github.com/Harley-xk/MaLiang">MaLiang</a> 基于 Metal 的涂鸦绘图库 </li><li><a href="https://github.com/chaozh/awesome-blockchain-cn">awesome-blockchain-cn</a> 区块链 awesome </li><li><a href="https://github.com/RobotsAndPencils/XcodesApp">XcodesApp</a> Xcode 多版本安装 </li><li><a href="https://github.com/WeTransfer/Mocker">Mocker</a> Mock Alamofire and URLSession </li><li><a href="https://github.com/gre4ixin/ReduxUI">ReduxUI</a> SwiftUI Redux 架构 </li><li><a href="https://github.com/ZeeZide/5GUIs">5GUIs</a> 可以分析程序用了哪些库，用了LLVM objdump </li><li><a href="https://github.com/pointfreeco/episode-code-samples">episode-code-samples</a></li><li><a href="https://github.com/SwiftPackageIndex/PackageList">PackageList</a></li><li><a href="https://github.com/sindresorhus/awesome">awesome</a> 内容广 </li><li><a href="https://github.com/dkhamsing/open-source-ios-apps">open-source-ios-apps</a> 开源的完整 App 例子 </li><li><a href="https://github.com/frzi/Model3DView">Model3DView</a> 毫不费力的使用 SwiftUI 渲染 3d models </li><li><a href="https://github.com/faisalmemon/ios-crash-dump-analysis-book">ios-crash-dump-analysis-book</a> iOS Crash Dump Analysis Book </li><li><a href="https://github.com/exyte/SVGView">SVGView</a> 支持 SwiftUI 的 SVG 解析渲染视图 </li><li><a href="https://github.com/krzysztofzablocki/Sourcery">Sourcery</a> Swift 元编程 </li><li><a href="https://github.com/jessesquires/TIL">TIL</a> 学习笔记 </li><li><a href="https://github.com/majd/ipatool">ipatool</a> 下载 ipa </li><li><a href="https://github.com/JohnSundell/Ink">Ink</a> Markdown 解析器</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;先说两句废话（Don’t-blame-me-about-my-calculation）&quot;&gt;&lt;a href=&quot;#先说两句废话（Don’t-blame-me-about-my-calculation）&quot; class=&quot;headerlink&quot; title=&quot;先说两句废话
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
      <category term="macOS" scheme="http://ming1016.github.io/tags/macOS/"/>
    
      <category term="Combine" scheme="http://ming1016.github.io/tags/Combine/"/>
    
      <category term="SwiftUI" scheme="http://ming1016.github.io/tags/SwiftUI/"/>
    
      <category term="Concurrency" scheme="http://ming1016.github.io/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>戴铭的 Swift 小册子 4.0</title>
    <link href="http://ming1016.github.io/2021/11/23/daiming-swift-pamphlet/"/>
    <id>http://ming1016.github.io/2021/11/23/daiming-swift-pamphlet/</id>
    <published>2021-11-23T08:28:18.000Z</published>
    <updated>2022-06-14T06:22:47.090Z</updated>
    
    <content type="html"><![CDATA[<p>update：内容已更新到 4.0 版本。</p><blockquote><p>新dyld源码透出近期苹果出新系统必然，依苹果 taste，势必要用好技术抛落后技术。漫漫长假我完善了Swift手册内容，字数达到十五万字，内容已压缩压缩再压缩，求全存简，more big, so small 。满满诚意，望有用、值得收藏、求转发。</p><p>come on and learn (੭*ˊᵕˋ)੭</p><p>– 戴·代码之使徒·画终结者·被光选中的人·铭</p></blockquote><h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>越来越多同学打算开始用 Swift 来开发了，可很多人以前都没接触过 Swift。这篇和我以前文章不同的是，本篇只是面向 Swift 零基础的同学，内容主要是一些直接可用的小例子，例子可以直接在工程中用或自己调试着看。</p><p>记得以前 PHP 有个 chm 的手册，写的很简单，但很全，每个知识点都有例子，社区版每个知识点下面还有留言互动。因此，我弄了个 Swift 的手册，是个 macOS 程序。建议使用我开发的这个 macOS 程序来浏览。源码地址：<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp">KwaiAppTeam&#x2F;SwiftPamphletApp</a>，直接下载 dmg 地址：<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp/files/8150518/4.4.dmg.zip">戴铭的开发小册子4.4.dmg.zip</a></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/152918704-9522eb27-9304-4788-b4ed-72ffb170e1bc.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/152918704-9522eb27-9304-4788-b4ed-72ffb170e1bc.png"></p><p>这个程序是Swift写的，按照声明式UI，响应式编程范式开发的，源码也可以看看。与其讲一堆，不如调着试。</p><p>下面是文本内容。注：代码中简化变量名是为了能更快速关注到语言用法。</p><h2 id="语法速查"><a href="#语法速查" class="headerlink" title="语法速查"></a>语法速查</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="变量-let-var"><a href="#变量-let-var" class="headerlink" title="变量 let, var"></a>变量 let, var</h4><p>变量是可变的，使用 var 修饰，常量是不可变的，使用 let 修饰。类、结构体和枚举里的变量是属性。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> v1<span class="token punctuation">:</span><span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"hi"</span></span> <span class="token comment">// 标注类型</span><span class="token keyword">var</span> v2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"类型推导"</span></span><span class="token keyword">let</span> l1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"标题"</span></span> <span class="token comment">// 常量</span><span class="token keyword">class</span> a <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">var</span> p2<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>        p1 <span class="token operator">*</span> <span class="token number">3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>属性没有 set 可以省略 get，如果有 set 需加 get。变量设置前通过 willSet 访问到，变量设置后通过 didSet 访问。</p><h4 id="打印-print-“”"><a href="#打印-print-“”" class="headerlink" title="打印 print(“”)"></a>打印 print(“”)</h4><p>控制台打印值</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">14</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"9月</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">是小柠檬的生日"</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">3</span><span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// output:</span><span class="token comment">// 1</span><span class="token comment">// 2</span><span class="token comment">// 3</span><span class="token comment">// 使用terminator使循环打印更整洁</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">3</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> "</span></span><span class="token punctuation">,</span> terminator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// output:</span><span class="token comment">// 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注释-x2F-x2F"><a href="#注释-x2F-x2F" class="headerlink" title="注释 &#x2F;&#x2F;"></a>注释 &#x2F;&#x2F;</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 单行注释</span><span class="token comment">/*多行注释第一行。多行注释第二行。*/</span> <span class="token comment">// MARK: 会在 minimap 上展示</span><span class="token comment">// TODO: 待做</span><span class="token comment">// FIXME: 待修复</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="可选"><a href="#可选" class="headerlink" title="可选 ?, !"></a>可选 ?, !</h4><p>可能会是 nil 的变量就是可选变量。当变量为 nil 通过??操作符可以提供一个默认值。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> o<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span><span class="token keyword">let</span> i <span class="token operator">=</span> o <span class="token operator">??</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>闭包也可以叫做 lambda，是匿名函数，对应 OC 的 block。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>l<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Bool</span> <span class="token keyword">in</span>    <span class="token keyword">return</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 如果闭包是唯一的参数并在表达式最后可以使用结尾闭包语法，写法简化为</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sorted <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>l<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Bool</span> <span class="token keyword">in</span>    <span class="token keyword">return</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">&#125;</span><span class="token comment">// 已知类型可以省略</span><span class="token keyword">let</span> a3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sorted <span class="token punctuation">&#123;</span> l<span class="token punctuation">,</span> r <span class="token keyword">in</span>    <span class="token keyword">return</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">&#125;</span><span class="token comment">// 通过位置来使用闭包的参数，最后简化如下：</span><span class="token keyword">let</span> a4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sorted <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">&lt;</span> <span class="token short-argument">$1</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数也是闭包的一种，函数的参数也可以是闭包。@escaping 表示逃逸闭包，逃逸闭包是可以在函数返回之后继续调用的。@autoclosure 表示自动闭包，可以用来省略花括号。</p><h4 id="函数-func"><a href="#函数-func" class="headerlink" title="函数 func"></a>函数 func</h4><p>函数可以作为另一个函数的参数，也可以作为另一个函数的返回。函数是特殊的闭包，在类、结构体和枚举中是方法。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 为参数设置默认值</span><span class="token keyword">func</span> <span class="token function-definition function">f1</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p"</span></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token string-literal"><span class="token string">"p is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">p</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">&#125;</span><span class="token comment">// 函数作为参数</span><span class="token keyword">func</span> <span class="token function-definition function">f2</span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">,</span> p<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span>f1<span class="token punctuation">,</span> p<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"d"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// p is d</span><span class="token comment">// 函数作为返回值</span><span class="token keyword">func</span> <span class="token function-definition function">f3</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> f1<span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">f3</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"yes"</span></span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"no"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// p is no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数可以返回多个值，函数是可以嵌套的，也就是函数里内可以定义函数，函数内定义的函数可以访问自己作用域外函数内的变量。inout 表示的是输入输出参数，函数可以在函数内改变输入输出参数。defer 标识的代码块会在函数返回之前执行。</p><p>函数在 Swift 5.4 时开始有了使用多个变量参数的能力，使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">f4</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">...</span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">f4</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">/// ["one", "two", "three"]</span><span class="token comment">/// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嵌套函数可以重载，嵌套函数可以在声明函数之前调用他。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">f5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">nf5</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function-definition function">nf5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is nested function"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">f5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// this is nested function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><p>在 Xcode 里的 target 就是模块，使用 import 可导入模块。模块内包含源文件，每个源文件里可以有多个类、结构体、枚举和函数等多种类型。访问级别可以通过一些关键字描述，分为如下几种：</p><ul><li>open：在模块外可以调用和继承。</li><li>public：在模块外可调用不可继承，open 只适用类和类成员。</li><li>internal：默认级别，模块内可跨源文件调用，模块外不可调用。</li><li>fileprivate：只能在源文件内访问。</li><li>private：只能在所在的作用域内访问。</li></ul><p>重写继承类的成员，可以设置成员比父类的这个成员更高的访问级别。Setter 的级别可以低于对应的 Getter 的级别，比如设置 Setter 访问级别为 private，可以在属性使用 private(set) 来修饰。</p><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><h4 id="数字-Int-Float"><a href="#数字-Int-Float" class="headerlink" title="数字 Int, Float"></a>数字 Int, Float</h4><p>数字的类型有 Int、Float 和 Double</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// Int</span><span class="token keyword">let</span> i1 <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">let</span> i2 <span class="token operator">=</span> <span class="token number">22</span><span class="token function">print</span><span class="token punctuation">(</span>i1 <span class="token operator">/</span> i2<span class="token punctuation">)</span> <span class="token comment">// 向下取整得 4</span><span class="token comment">// Float</span><span class="token keyword">let</span> f1<span class="token punctuation">:</span> <span class="token class-name">Float</span> <span class="token operator">=</span> <span class="token number">100.0</span><span class="token keyword">let</span> f2<span class="token punctuation">:</span> <span class="token class-name">Float</span> <span class="token operator">=</span> <span class="token number">22.0</span><span class="token function">print</span><span class="token punctuation">(</span>f1 <span class="token operator">/</span> f2<span class="token punctuation">)</span> <span class="token comment">// 4.5454545</span><span class="token keyword">let</span> f3<span class="token punctuation">:</span> <span class="token class-name">Float16</span> <span class="token operator">=</span> <span class="token number">5.0</span> <span class="token comment">// macOS 还不能用</span><span class="token keyword">let</span> f4<span class="token punctuation">:</span> <span class="token class-name">Float32</span> <span class="token operator">=</span> <span class="token number">5.0</span><span class="token keyword">let</span> f5<span class="token punctuation">:</span> <span class="token class-name">Float64</span> <span class="token operator">=</span> <span class="token number">5.0</span><span class="token keyword">let</span> f6<span class="token punctuation">:</span> <span class="token class-name">Float80</span> <span class="token operator">=</span> <span class="token number">5.0</span><span class="token function">print</span><span class="token punctuation">(</span>f4<span class="token punctuation">,</span> f5<span class="token punctuation">,</span> f6<span class="token punctuation">)</span> <span class="token comment">// 5.0 5.0 5.0</span><span class="token comment">// Double</span><span class="token keyword">let</span> d1<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">100.0</span><span class="token keyword">let</span> d2<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">22.0</span><span class="token function">print</span><span class="token punctuation">(</span>d1 <span class="token operator">/</span> d2<span class="token punctuation">)</span> <span class="token comment">// 4.545454545454546</span><span class="token comment">// 字面量</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token number">0b10101</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0b 开头是二进制 </span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token number">0x00afff</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0x 开头是十六进制</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2.5e4</span><span class="token punctuation">)</span> <span class="token comment">// 2.5x10^4 十进制用 e</span><span class="token function">print</span><span class="token punctuation">(</span>0xAp2<span class="token punctuation">)</span> <span class="token comment">// 10*2^2  十六进制用 p</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2_000_000</span><span class="token punctuation">)</span> <span class="token comment">// 2000000</span><span class="token comment">// isMultiple(of:) 方法检查一个数字是否是另一个数字的倍数</span><span class="token keyword">let</span> i3 <span class="token operator">=</span> <span class="token number">36</span><span class="token function">print</span><span class="token punctuation">(</span>i3<span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理数字有 floor、ceil、round。floor 是向下取整，只取整数部分；cell 是向上取整，只要有不为零的小数，整数就加1;round 是四舍五入。       </p><h4 id="布尔数-Bool"><a href="#布尔数-Bool" class="headerlink" title="布尔数 Bool"></a>布尔数 Bool</h4><p>布尔数有 true 和 false 两种值，还有一个能够切换这两个值的 toggle 方法。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">false</span>b<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// true</span>b<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="元组-a-b-c"><a href="#元组-a-b-c" class="headerlink" title="元组 (a, b, c)"></a>元组 (a, b, c)</h4><p>元组里的值类型可以是不同的。元组可以看成是匿名的结构体。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> t1 <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> p3<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>p3<span class="token punctuation">)</span><span class="token comment">// 类型推导</span><span class="token keyword">let</span> t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 通过下标访问</span><span class="token function">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// two</span><span class="token comment">// 分解元组</span><span class="token keyword">let</span> <span class="token punctuation">(</span>dp1<span class="token punctuation">,</span> dp2<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> t2<span class="token function">print</span><span class="token punctuation">(</span>dp1<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>dp2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Hi! This is a string. Cool?"</span></span><span class="token comment">/// 转义符 \n 表示换行。</span><span class="token comment">/// 其它转义字符有 \0 空字符)、\t 水平制表符 、\n 换行符、\r 回车符</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Hi!\nThis is a string. Cool?"</span></span><span class="token comment">// 多行</span><span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"""Hi!This is a string.Cool?"""</span></span><span class="token comment">// 长度</span><span class="token function">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token comment">// 拼接</span><span class="token function">print</span><span class="token punctuation">(</span>s3 <span class="token operator">+</span> <span class="token string-literal"><span class="token string">"\nSure!"</span></span><span class="token punctuation">)</span><span class="token comment">// 字符串中插入变量</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Today is good day, double </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!"</span></span><span class="token punctuation">)</span><span class="token comment">/// 遍历字符串</span><span class="token comment">/// 输出：</span><span class="token comment">/// o</span><span class="token comment">/// n</span><span class="token comment">/// e</span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string-literal"><span class="token string">"one"</span></span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 查找</span><span class="token function">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span><span class="token function">lowercased</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"cool"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token comment">// 替换</span><span class="token keyword">let</span> s4 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"one is two"</span></span><span class="token keyword">let</span> newS4 <span class="token operator">=</span> s4<span class="token punctuation">.</span><span class="token function">replacingOccurrences</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>newS4<span class="token punctuation">)</span><span class="token comment">// 删除空格和换行</span><span class="token keyword">let</span> s5 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">" Simple line. \n\n  "</span></span><span class="token function">print</span><span class="token punctuation">(</span>s5<span class="token punctuation">.</span><span class="token function">trimmingCharacters</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>whitespacesAndNewlines<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 切割成数组</span><span class="token keyword">let</span> s6 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"one/two/three"</span></span><span class="token keyword">let</span> a1 <span class="token operator">=</span> s6<span class="token punctuation">.</span><span class="token function">components</span><span class="token punctuation">(</span>separatedBy<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"/"</span></span><span class="token punctuation">)</span> <span class="token comment">// 继承自 NSString 的接口</span><span class="token function">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token comment">// ["one", "two", "three"]</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> s6<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"/"</span></span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token comment">// ["one", "two", "three"] 属于切片，性能较 components 更好</span><span class="token comment">// 判断是否是某种类型</span><span class="token keyword">let</span> c1<span class="token punctuation">:</span> <span class="token class-name">Character</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"🤔"</span></span><span class="token function">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>isASCII<span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>isSymbol<span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token function">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>isLetter<span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>isNumber<span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>isUppercase<span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token comment">// 字符串和 Data 互转</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">.</span>utf8<span class="token punctuation">)</span><span class="token keyword">let</span> s7 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> data<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s7<span class="token punctuation">)</span> <span class="token comment">// hi</span><span class="token comment">// 字符串可以当作集合来用。</span><span class="token keyword">let</span> revered <span class="token operator">=</span> s7<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>revered<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Unicode、Character 和 SubString 等内容参见官方字符串文档：<a href="https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html">Strings and Characters — The Swift Programming Language (Swift 5.1)</a></p><p>字符串字面符号可以参看《<a href="https://www.swiftbysundell.com/articles/string-literals-in-swift/">String literals in Swift</a>》。</p><p>原始字符串</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 原始字符串在字符串前加上一个或多个#符号。里面的双引号和转义符号将不再起作用了，如果想让转义符起作用，需要在转义符后面加上#符号。</span><span class="token keyword">let</span> s8 <span class="token operator">=</span> #"<span class="token punctuation">\</span><span class="token punctuation">(</span>s7<span class="token punctuation">)</span><span class="token punctuation">\</span>#<span class="token punctuation">(</span>s7<span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">"one"</span></span> and <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">\</span>n<span class="token punctuation">.</span> <span class="token punctuation">\</span><span class="token other-directive property">#nThe</span> second line<span class="token punctuation">.</span>"#<span class="token function">print</span><span class="token punctuation">(</span>s8<span class="token punctuation">)</span><span class="token comment">/// \(s7)hi "one" and "two"\n.</span><span class="token comment">/// The second line.</span><span class="token comment">// 原始字符串在正则使用效果更佳，反斜杠更少了。</span><span class="token keyword">let</span> s9 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"\\\\[A-Z]+[A-Za-z]+\\.[a-z]+"</span></span><span class="token keyword">let</span> s10 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">#"\\[A-Z]+[A-Za-z]+\.[a-z]+"#</span></span><span class="token function">print</span><span class="token punctuation">(</span>s9<span class="token punctuation">)</span> <span class="token comment">// \\[A-Z]+[A-Za-z]+\.[a-z]+</span><span class="token function">print</span><span class="token punctuation">(</span>s10<span class="token punctuation">)</span> <span class="token comment">// \\[A-Z]+[A-Za-z]+\.[a-z]+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>Swift的枚举有类的一些特性，比如计算属性、实例方法、扩展、遵循协议等等。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">enum</span> E1<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">CaseIterable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> e1<span class="token punctuation">,</span> e2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"12"</span></span><span class="token punctuation">&#125;</span><span class="token comment">// 关联值</span><span class="token keyword">enum</span> E2 <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token function">e1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">e2</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> e1 <span class="token operator">=</span> E2<span class="token punctuation">.</span><span class="token function">e1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> e2 <span class="token operator">=</span> E2<span class="token punctuation">.</span><span class="token function">e2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">switch</span> e1 <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">e1</span><span class="token punctuation">(</span><span class="token keyword">let</span> array<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">e2</span><span class="token punctuation">(</span><span class="token keyword">let</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token comment">// 原始值</span><span class="token function">print</span><span class="token punctuation">(</span>E1<span class="token punctuation">.</span>e1<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span><span class="token comment">// 遵循 CaseIterable 协议可迭代</span><span class="token keyword">for</span> ie <span class="token keyword">in</span> E1<span class="token punctuation">.</span>allCases <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"show </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">ie</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 递归枚举</span><span class="token keyword">enum</span> <span class="token constant">RE</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>    <span class="token keyword">indirect</span> <span class="token keyword">case</span> <span class="token function">node</span><span class="token punctuation">(</span>l<span class="token punctuation">:</span><span class="token constant">RE</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span><span class="token constant">RE</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> lNode <span class="token operator">=</span> <span class="token constant">RE</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"left"</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> rNode <span class="token operator">=</span> <span class="token constant">RE</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"right"</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> pNode <span class="token operator">=</span> <span class="token constant">RE</span><span class="token punctuation">.</span><span class="token function">node</span><span class="token punctuation">(</span>l<span class="token punctuation">:</span> lNode<span class="token punctuation">,</span> r<span class="token punctuation">:</span> rNode<span class="token punctuation">)</span><span class="token keyword">switch</span> pNode <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token keyword">let</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">let</span> l<span class="token punctuation">,</span> <span class="token keyword">let</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token function">print</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span>    <span class="token keyword">switch</span> l <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token keyword">let</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">let</span> l<span class="token punctuation">,</span> <span class="token keyword">let</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">switch</span> r <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token keyword">let</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">let</span> l<span class="token punctuation">,</span> <span class="token keyword">let</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@unknown 用来区分固定的枚举和可能改变的枚举的能力。@unknown 用于防止未来新增枚举属性会进行提醒提示完善每个 case 的处理。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// @unknown</span><span class="token keyword">enum</span> E3 <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> e1<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> e3<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function-definition function">fe1</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> E3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> e <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span>e1<span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"e1 ok"</span></span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span>e2<span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"e2 ok"</span></span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span>e3<span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"e3 ok"</span></span><span class="token punctuation">)</span>    <span class="token attribute atrule">@unknown</span> <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"not ok"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>符合 Comparable 协议的枚举可以进行比较。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// Comparable 枚举比较</span><span class="token keyword">enum</span> E4<span class="token punctuation">:</span> <span class="token class-name">Comparable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> e1<span class="token punctuation">,</span> e2    <span class="token keyword">case</span> <span class="token function">e3</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> e4<span class="token punctuation">&#125;</span><span class="token keyword">let</span> e3 <span class="token operator">=</span> E4<span class="token punctuation">.</span>e4<span class="token keyword">let</span> e4 <span class="token operator">=</span> E4<span class="token punctuation">.</span><span class="token function">e3</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">let</span> e5 <span class="token operator">=</span> E4<span class="token punctuation">.</span><span class="token function">e3</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> e6 <span class="token operator">=</span> E4<span class="token punctuation">.</span>e1<span class="token function">print</span><span class="token punctuation">(</span>e3 <span class="token operator">></span> e4<span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span>e3<span class="token punctuation">,</span> e4<span class="token punctuation">,</span> e5<span class="token punctuation">,</span> e6<span class="token punctuation">]</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a2 <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/// e1</span><span class="token comment">/// e3(i: 2)</span><span class="token comment">/// e3(i: 3)</span><span class="token comment">/// e4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p>泛型可以减少重复代码，是一种抽象的表达方式。where 关键字可以对泛型做约束。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">fn</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 结构体</span><span class="token keyword">struct</span> S1<span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> p<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token function">S1</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"zero"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token comment">// ["zero", "one", "two"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关联类型</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">protocol</span> pc <span class="token punctuation">&#123;</span>    <span class="token keyword">associatedtype</span> <span class="token class-name">T</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> p<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> S2<span class="token punctuation">:</span> pc <span class="token punctuation">&#123;</span>    <span class="token keyword">typealias</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token class-name">String</span> <span class="token comment">// 类型推导，可省略</span>    <span class="token keyword">var</span> strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> p<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        strs<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型适用于嵌套类型</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> S3<span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> S4 <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> p<span class="token punctuation">:</span> <span class="token class-name">T</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> p1<span class="token punctuation">:</span> <span class="token class-name">T</span>    <span class="token keyword">var</span> p2<span class="token punctuation">:</span> S4<span class="token punctuation">&#125;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">S3</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> S3<span class="token punctuation">.</span><span class="token function">S4</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token function">S3</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> S3<span class="token punctuation">.</span><span class="token function">S4</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span>s3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不透明类型"><a href="#不透明类型" class="headerlink" title="不透明类型"></a>不透明类型</h4><p>不透明类型会隐藏类型，让使用者更关注功能。不透明类型和协议很类似，不同的是不透明比协议限定的要多，协议能够对应更多类型。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">protocol</span> <span class="token class-name">P</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> S1<span class="token punctuation">:</span> <span class="token class-name">P</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"one\n"</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> S2<span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">P</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">P</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p<span class="token punctuation">:</span> <span class="token class-name">T</span>    <span class="token keyword">func</span> <span class="token function-definition function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">"two\n"</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> S3<span class="token operator">&lt;</span>T1<span class="token punctuation">:</span> <span class="token class-name">P</span><span class="token punctuation">,</span> T2<span class="token punctuation">:</span> <span class="token class-name">P</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">P</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p1<span class="token punctuation">:</span> T1    <span class="token keyword">var</span> p2<span class="token punctuation">:</span> T2    <span class="token keyword">func</span> <span class="token function-definition function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> p1<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">"three\n"</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function-definition function">someP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">P</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">S3</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token function">S1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token function">S2</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token function">S1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">someP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数调用者决定返回什么类型是泛型，函数自身决定返回什么类型使用不透明返回类型。</p><h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><p>Result 类型用来处理错误，特别适用异步接口的错误处理。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token class-name">URLSession</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">dataTaskWithResult</span><span class="token punctuation">(</span>        with url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span>        handler<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">URLSessionDataTask</span> <span class="token punctuation">&#123;</span>        <span class="token function">dataTask</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">,</span> err <span class="token keyword">in</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> err <span class="token operator">=</span> err <span class="token punctuation">&#123;</span>                <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>data <span class="token operator">??</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://ming1016.github.io/"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token comment">// 以前网络请求</span><span class="token keyword">let</span> t1 <span class="token operator">=</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">dataTask</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">,</span> error <span class="token keyword">in</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> err <span class="token operator">=</span> error <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> data <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> data<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>t1<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 使用 Result 网络请求</span><span class="token keyword">let</span> t2 <span class="token operator">=</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">dataTaskWithResult</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> result <span class="token keyword">in</span>    <span class="token keyword">switch</span> result <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">let</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> data<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token keyword">let</span> err<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>t2<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>使用 is 关键字进行类型判断， 使用as 关键字来转换成子类。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">class</span> S0 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> S1<span class="token punctuation">:</span> S0 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> S2<span class="token punctuation">:</span> S0 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span>S0<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">S1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">S2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> e <span class="token keyword">in</span> a <span class="token punctuation">&#123;</span>    <span class="token comment">// 类型判断</span>    <span class="token keyword">if</span> e <span class="token keyword">is</span> S1 <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Type is S1"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> e <span class="token keyword">is</span> S2 <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Type is S2"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用 as 关键字转换成子类</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> s1 <span class="token operator">=</span> e <span class="token keyword">as</span><span class="token operator">?</span> S1 <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"As S1 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s1</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">let</span> s2 <span class="token operator">=</span> e <span class="token keyword">as</span><span class="token operator">?</span> S2 <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"As S2 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s2</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类和结构体"><a href="#类和结构体" class="headerlink" title="类和结构体"></a>类和结构体</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>类可以定义属性、方法、构造器、下标操作。类使用扩展来扩展功能，遵循协议。类还以继承，运行时检查实例类型。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> p<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>p <span class="token operator">=</span> p    <span class="token punctuation">&#125;</span>        <span class="token comment">// 下标操作</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> p <span class="token operator">+</span> s        <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> s <span class="token operator">+</span> newValue        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">" ming"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"k"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"v"</span></span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><p>结构体是值类型，可以定义属性、方法、构造器、下标操作。结构体使用扩展来扩展功能，遵循协议。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">S</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p1<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> p2<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">S</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> p1 <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">(</span>p2<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"1"</span></span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>类、结构体或枚举里的变量常量就是他们的属性。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">S</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> sp <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"类型属性"</span></span> <span class="token comment">// 类型属性通过类型本身访问，非实例访问</span>    <span class="token keyword">var</span> p1<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> p2<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment">// cp 是计算属性</span>    <span class="token keyword">var</span> cp<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> p2 <span class="token operator">*</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>            p2 <span class="token operator">=</span> newValue <span class="token operator">+</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 只有 getter 的是只读计算属性</span>    <span class="token keyword">var</span> rcp<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>        p2 <span class="token operator">*</span> <span class="token number">4</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">.</span>sp<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cp<span class="token punctuation">)</span> <span class="token comment">// 2</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>cp <span class="token operator">=</span> <span class="token number">3</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>p2<span class="token punctuation">)</span> <span class="token comment">// 5</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rcp<span class="token punctuation">)</span> <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>willSet 和 didSet 是属性观察器，可以在属性值设置前后插入自己的逻辑处理。</p><p>键路径表达式作为函数</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> S2 <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> p1<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> p2<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">S2</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token function">S2</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span>s2<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token comment">// ["one", "two"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token class-name">E</span><span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three    <span class="token keyword">func</span> <span class="token function-definition function">showRawValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token class-name">E</span><span class="token punctuation">.</span>threee<span class="token punctuation">.</span><span class="token function">showRawValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// three</span><span class="token comment">// 可变的实例方法，使用 mutating 标记</span><span class="token keyword">struct</span> <span class="token class-name">S</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">addFullStopForP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">"."</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">addFullStopForP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token comment">// 类方法</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token keyword">func</span> <span class="token function-definition function">cf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"类方法"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>static和class关键字修饰的方法类似 OC 的类方法。static 可以修饰存储属性，而 class 不能；class 修饰的方法可以继承，而 static 不能。在协议中需用 static 来修饰。</p><p>静态下标方法</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 静态下标</span><span class="token keyword">struct</span> S2 <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> sp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">static</span> <span class="token keyword">subscript</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> sp<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">??</span> d        <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>            sp<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> newValue        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>S2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"key1"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>S2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"key2"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token function">print</span><span class="token punctuation">(</span>S2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"key2"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 2</span><span class="token function">print</span><span class="token punctuation">(</span>S2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"key3"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义类型中实现了 callAsFunction() 的话，该类型的值就可以直接调用。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// callAsFunction()</span><span class="token keyword">struct</span> S3 <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p1<span class="token punctuation">:</span> <span class="token class-name">String</span>        <span class="token keyword">func</span> <span class="token function-definition function">callAsFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"show </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">p1</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">S3</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">s2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// show hi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>类能继承另一个类，继承它的方法、属性等。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 类继承</span><span class="token keyword">class</span> C1 <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p1<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> cp1<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> p1 <span class="token operator">+</span> <span class="token string-literal"><span class="token string">" like ATM"</span></span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>            p1 <span class="token operator">=</span> p1 <span class="token operator">+</span> newValue        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>p1 <span class="token operator">=</span> p1    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Hi! </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">p1</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> C2<span class="token punctuation">:</span> C1 <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p2<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>p2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>p2 <span class="token operator">=</span> p2        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> p2 <span class="token operator">+</span> <span class="token string-literal"><span class="token string">"'s father"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">C2</span><span class="token punctuation">(</span>p2<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Lemon"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Hi! Lemon's father</span><span class="token comment">// 重写父类方法</span><span class="token keyword">class</span> C3<span class="token punctuation">:</span> C2 <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Hi! </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">p2</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">C3</span><span class="token punctuation">(</span>p2<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Lemon"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Hi! Lemon</span><span class="token comment">// 重写计算属性</span><span class="token keyword">class</span> C4<span class="token punctuation">:</span> C1 <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">var</span> cp1<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> p1 <span class="token operator">+</span> <span class="token string-literal"><span class="token string">" like Out of the blade"</span></span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span>            p1 <span class="token operator">=</span> p1 <span class="token operator">+</span> newValue        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">C1</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Lemon"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>cp1<span class="token punctuation">)</span> <span class="token comment">// Lemon like ATM</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">C4</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Lemon"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>cp1<span class="token punctuation">)</span> <span class="token comment">// Lemon like Out of the blade</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 final 关键字可以防止类被继承，final 还可以用于属性和方法。使用 super 关键字指代父类。</p><h3 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>map 可以依次处理数组中元素，并返回一个处理后的新数组。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"c"</span></span><span class="token punctuation">]</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> a1<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span>    <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">2"</span></span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token comment">// ["a2", "b2", "c2"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 compactMap 可以过滤 nil 的元素。flatMap 会将多个数组合成一个数组返回。</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>根据指定条件返回</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"c"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"call my name"</span></span><span class="token punctuation">]</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> a1<span class="token punctuation">.</span>filter <span class="token punctuation">&#123;</span>    <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token keyword">prefix</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"c"</span></span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token comment">// ["c", "call my name"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>reduce 可以将迭代中返回的结果用于下个迭代中，并，还能让你设个初始值。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"c"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"call my name."</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"get it?"</span></span><span class="token punctuation">]</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Hey u,"</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> partialResult<span class="token punctuation">,</span> s <span class="token keyword">in</span>    <span class="token comment">// partialResult 是前面返回的值，s 是遍历到当前的值</span>    partialResult <span class="token operator">+</span> <span class="token string-literal"><span class="token string">" </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token comment">// Hey u, a b c call my name. get it?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><p>排序</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 类型遵循 Comparable</span><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"c"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"call my name."</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"get it?"</span></span><span class="token punctuation">]</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> a3 <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">let</span> a4 <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token comment">// Hey u, a b c call my name. get it?</span><span class="token function">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span> <span class="token comment">// ["get it?", "call my name.", "c", "b", "a"]</span><span class="token function">print</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span> <span class="token comment">// ["a", "b", "c", "call my name.", "get it?"]</span><span class="token comment">// 类型不遵循 Comparable</span><span class="token keyword">struct</span> <span class="token class-name">S</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"c"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">let</span> a6 <span class="token operator">=</span> a5    <span class="token punctuation">.</span>sorted <span class="token punctuation">&#123;</span> l<span class="token punctuation">,</span> r <span class="token keyword">in</span>        l<span class="token punctuation">.</span>i <span class="token operator">></span> r<span class="token punctuation">.</span>i    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span>        <span class="token short-argument">$0</span><span class="token punctuation">.</span>i    <span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>a6<span class="token punctuation">)</span> <span class="token comment">// [2, 1, 0]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="If-•-If-let-•-If-case-let"><a href="#If-•-If-let-•-If-case-let" class="headerlink" title="If • If let • If case let"></a>If • If let • If case let</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// if</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"hi"</span></span><span class="token keyword">if</span> s<span class="token punctuation">.</span>isEmpty <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"String is Empty"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"String is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 三元条件</span>s<span class="token punctuation">.</span>isEmpty <span class="token operator">?</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"String is Empty again"</span></span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"String is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> again"</span></span><span class="token punctuation">)</span><span class="token comment">// if let-else</span><span class="token keyword">func</span> <span class="token function-definition function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> s1 <span class="token operator">=</span> s <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"s1 is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s1</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"s1 is nothing"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// nil-coalescing</span>    <span class="token keyword">let</span> s2 <span class="token operator">=</span> s <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"nothing"</span></span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"s2 is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s2</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"something"</span></span><span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span><span class="token comment">// if case let</span><span class="token keyword">enum</span> <span class="token class-name">E</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token function">c1</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">func</span> <span class="token function-definition function">des</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token keyword">self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token keyword">let</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">c2</span><span class="token punctuation">(</span><span class="token keyword">let</span> array<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">E</span><span class="token punctuation">.</span><span class="token function">c1</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"enum c1"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">des</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">E</span><span class="token punctuation">.</span><span class="token function">c2</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">des</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Guard-guard-guard-let"><a href="#Guard-guard-guard-let" class="headerlink" title="Guard guard, guard let"></a>Guard guard, guard let</h4><p>更好地处理异常情况</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// guard</span><span class="token keyword">func</span> <span class="token function-definition function">f1</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">guard</span> p<span class="token punctuation">.</span>isEmpty <span class="token operator">!=</span> <span class="token boolean">true</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"Empty string."</span></span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"String </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">p</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is not empty."</span></span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Empty string.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"lemon"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// String lemon is not empty.</span><span class="token comment">// guard let</span><span class="token keyword">func</span> <span class="token function-definition function">f2</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">guard</span> <span class="token keyword">let</span> p2 <span class="token operator">=</span> p1 <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"Nil."</span></span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"String </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">p2</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is not nil."</span></span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Nil.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"lemon"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// String lemon is not nil.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历-For-in"><a href="#遍历-For-in" class="headerlink" title="遍历 For-in"></a>遍历 For-in</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">]</span><span class="token keyword">for</span> str <span class="token keyword">in</span> a <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用下标范围</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">10</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用 enumerated</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token keyword">in</span> a<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i <span class="token operator">+</span> <span class="token number">1</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">个是:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">str</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// for in where</span><span class="token keyword">for</span> str <span class="token keyword">in</span> a <span class="token keyword">where</span> str<span class="token punctuation">.</span><span class="token keyword">prefix</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"t"</span></span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 字典 for in，遍历是无序的</span><span class="token keyword">let</span> dic <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> dic <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"key is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">k</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, value is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">v</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// stride</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">stride</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> through<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> by<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/* 10 8 6 4 2 0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="While-while-repeat-while"><a href="#While-while-repeat-while" class="headerlink" title="While while, repeat-while"></a>While while, repeat-while</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// while</span><span class="token keyword">var</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">while</span> i1 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"positive even number </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i1</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    i1 <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token comment">// repeat while</span><span class="token keyword">var</span> i2 <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">repeat</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"positive even number </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i2</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    i2 <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> i2 <span class="token operator">></span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 break 结束遍历，使用 continue 跳过当前作用域，继续下个循环</p><h4 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">f1</span><span class="token punctuation">(</span>pa<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">switch</span> pa <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">:</span>        p1 <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">:</span>        p1 <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">fallthrough</span> <span class="token comment">// 继续到下个 case 中</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        p2 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p1 is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">p1</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p2 is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">p2</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token comment">// 元组</span>    <span class="token keyword">switch</span> t <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"0"</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"zero"</span></span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"no"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">f1</span><span class="token punctuation">(</span>pa<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> t<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">/* p1 is 2 p2 is 0 one */</span><span class="token comment">// 枚举</span><span class="token keyword">enum</span> <span class="token class-name">E</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">,</span> <span class="token function">unknown</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function-definition function">f2</span><span class="token punctuation">(</span>pa<span class="token punctuation">:</span> <span class="token class-name">E</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">switch</span> pa <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span>one<span class="token punctuation">:</span>        p <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"1"</span></span>    <span class="token keyword">case</span> <span class="token punctuation">.</span>two<span class="token punctuation">:</span>        p <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"2"</span></span>    <span class="token keyword">case</span> <span class="token punctuation">.</span>three<span class="token punctuation">:</span>        p <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"3"</span></span>    <span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">unknown</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">Int</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token comment">// 枚举关联值，使用 where 增加条件</span>        p <span class="token operator">=</span> u    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">unknown</span><span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"negative number"</span></span>    <span class="token punctuation">&#125;</span>    <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">f2</span><span class="token punctuation">(</span>pa<span class="token punctuation">:</span> <span class="token class-name">E</span><span class="token punctuation">.</span>one<span class="token punctuation">)</span> <span class="token comment">// 1</span><span class="token function">f2</span><span class="token punctuation">(</span>pa<span class="token punctuation">:</span> <span class="token class-name">E</span><span class="token punctuation">.</span><span class="token function">unknown</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"10"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 10</span><span class="token function">f2</span><span class="token punctuation">(</span>pa<span class="token punctuation">:</span> <span class="token class-name">E</span><span class="token punctuation">.</span><span class="token function">unknown</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"-10"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// negative number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="数组-1-2-3"><a href="#数组-1-2-3" class="headerlink" title="数组 [1, 2, 3]"></a>数组 [1, 2, 3]</h4><p>数组是有序集合</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> a0<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>a0<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>a0<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>a0<span class="token punctuation">)</span> <span class="token comment">// [10, 2]</span><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">]</span><span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"four"</span></span><span class="token punctuation">]</span><span class="token comment">// 找两个集合的不同</span><span class="token keyword">let</span> dif <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> a2<span class="token punctuation">)</span> <span class="token comment">// swift的 diffing 算法在这 http://www.xmailserver.org/diff2.pdf swift实现在  swift/stdlib/public/core/Diffing.swift</span><span class="token keyword">for</span> c <span class="token keyword">in</span> dif <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> c <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">let</span> o<span class="token punctuation">,</span> <span class="token keyword">let</span> e<span class="token punctuation">,</span> <span class="token keyword">let</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"offset:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">o</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, element:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">e</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, associatedWith:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">String</span><span class="token punctuation">(</span>describing<span class="token punctuation">:</span> a<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">let</span> o<span class="token punctuation">,</span> <span class="token keyword">let</span> e<span class="token punctuation">,</span> <span class="token keyword">let</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"offset:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">o</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, element:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">e</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, associatedWith:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">String</span><span class="token punctuation">(</span>describing<span class="token punctuation">:</span> a<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* remove offset:1, element:four, associatedWith:nil insert offset:0, element:one, associatedWith:nil insert offset:1, element:two, associatedWith:nil */</span><span class="token keyword">let</span> a3 <span class="token operator">=</span> a2<span class="token punctuation">.</span><span class="token function">applying</span><span class="token punctuation">(</span>dif<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 可以用于添加删除动画</span><span class="token function">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span> <span class="token comment">// ["one", "two", "three"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dif 有第三个 case 值 .insert(let offset, let element, let associatedWith) 可以跟踪成对的变化，用于高级动画。</p><p>从数组中随机取一个元素</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token function">print</span><span class="token punctuation">(</span>a0<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组排序</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 排序</span><span class="token keyword">struct</span> S1 <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a4 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token function">S1</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">S1</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">S1</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">S1</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">let</span> a5 <span class="token operator">=</span> a4<span class="token punctuation">.</span>sorted <span class="token punctuation">&#123;</span> i1<span class="token punctuation">,</span> i2 <span class="token keyword">in</span>    i1<span class="token punctuation">.</span>n <span class="token operator">&lt;</span> i2<span class="token punctuation">.</span>n<span class="token punctuation">&#125;</span><span class="token keyword">for</span> n <span class="token keyword">in</span> a5 <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/// S1(n: 1)</span><span class="token comment">/// S1(n: 2)</span><span class="token comment">/// S1(n: 3)</span><span class="token comment">/// S1(n: 10)</span><span class="token keyword">let</span> a6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token function">print</span><span class="token punctuation">(</span>a6<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [10, 7, 4, 2, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以加到数组扩展中，通过扩展约束能够指定特定元素类型的排序，代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token class-name">Array</span> <span class="token keyword">where</span> <span class="token class-name">Element</span> <span class="token operator">==</span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 升序</span>    <span class="token keyword">func</span> <span class="token function-definition function">intSortedASC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 降序</span>    <span class="token keyword">func</span> <span class="token function-definition function">intSortedDESC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>a6<span class="token punctuation">.</span><span class="token function">intSortedASC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 使用扩展增加自定义排序能力</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在数组中检索满足条件的元素，代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 第一个满足条件了就返回</span><span class="token keyword">let</span> a7 <span class="token operator">=</span> a4<span class="token punctuation">.</span>first <span class="token punctuation">&#123;</span>    <span class="token short-argument">$0</span><span class="token punctuation">.</span>n <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>a7<span class="token operator">?</span><span class="token punctuation">.</span>n <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 是否都满足了条件</span><span class="token function">print</span><span class="token punctuation">(</span>a4<span class="token punctuation">.</span>allSatisfy <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">print</span><span class="token punctuation">(</span>a4<span class="token punctuation">.</span><span class="token function">allSatisfy</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token comment">// 找出最大的那个</span><span class="token function">print</span><span class="token punctuation">(</span>a4<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> e1<span class="token punctuation">,</span> e2 <span class="token keyword">in</span>    e1<span class="token punctuation">.</span>n <span class="token operator">&lt;</span> e2<span class="token punctuation">.</span>n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token function">S1</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// S1(n: 10, b: true)</span><span class="token comment">// 看看是否包含某个元素</span><span class="token function">print</span><span class="token punctuation">(</span>a4<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">where</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    <span class="token short-argument">$0</span><span class="token punctuation">.</span>n <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些切割数组的方法。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 切片</span><span class="token comment">// 取前3个，并不是直接复制，对于大的数组有性能优势。</span><span class="token function">print</span><span class="token punctuation">(</span>a6<span class="token punctuation">[</span><span class="token operator">..&lt;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [1, 10, 4] 需要做越界检查</span><span class="token function">print</span><span class="token punctuation">(</span>a6<span class="token punctuation">.</span><span class="token keyword">prefix</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, 10, 4, 7, 2] 不需要做越界检查，也是切片，性能一样</span><span class="token comment">// 去掉前3个</span><span class="token function">print</span><span class="token punctuation">(</span>a6<span class="token punctuation">.</span><span class="token function">dropFirst</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [7, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>prefix(while:) 和 drop(while:) 方法，顺序遍历执行闭包里的逻辑判断，满足条件就返回，遇到不匹配就会停止遍历。prefix 返回满足条件的元素集合，drop 返回停止遍历之后那些元素集合。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> a8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> a9 <span class="token operator">=</span> a8<span class="token punctuation">.</span><span class="token keyword">prefix</span> <span class="token punctuation">&#123;</span>    <span class="token short-argument">$0</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>a9<span class="token punctuation">)</span> <span class="token comment">// [8, 9, 20, 1]</span><span class="token keyword">let</span> a10 <span class="token operator">=</span> a8<span class="token punctuation">.</span>drop <span class="token punctuation">&#123;</span>    <span class="token short-argument">$0</span> <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>a10<span class="token punctuation">)</span> <span class="token comment">// [35, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比 filter 更高效的删除元素的方法 removeAll</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 删除所有不满足条件的元素</span><span class="token keyword">var</span> a11 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span>a11<span class="token punctuation">.</span>removeAll <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>a11<span class="token punctuation">)</span> <span class="token comment">// [4, 3, 1, 3, 3] 随机</span><span class="token comment">// 创建未初始化的数组</span><span class="token keyword">let</span> a12 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">...</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>    <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>a12<span class="token punctuation">)</span> <span class="token comment">// [0, 3, 3, 2, 5] 随机</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#if 用于后缀表达式</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// #if 用于后缀表达式</span><span class="token keyword">let</span> a13 <span class="token operator">=</span> a11<span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>iOS<span class="token punctuation">)</span></span>    <span class="token punctuation">.</span>count<span class="token directive property"><span class="token directive-name">#else</span></span>    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">)</span><span class="token directive property"><span class="token directive-name">#endif</span></span><span class="token function">print</span><span class="token punctuation">(</span>a13<span class="token punctuation">)</span> <span class="token comment">//37</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Sets-Set"><a href="#Sets-Set" class="headerlink" title="Sets Set"></a>Sets Set<Int></h4><p>Set 是无序集合，元素唯一</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> s0<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">let</span> s1<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token keyword">let</span> s2<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">let</span> s3 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">// 合集</span><span class="token keyword">let</span> s4 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intersection</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">// 交集</span><span class="token keyword">let</span> s5 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">subtracting</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">// 非交集部分</span><span class="token keyword">let</span> s6 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">symmetricDifference</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">// 非交集的合集</span><span class="token function">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token comment">// [4, 2, 1, 7, 3, 10, 8, 9, 6, 5]</span><span class="token function">print</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span> <span class="token comment">// [10]</span><span class="token function">print</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span> <span class="token comment">// [8, 4, 2, 6]</span><span class="token function">print</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span> <span class="token comment">// [9, 1, 3, 4, 5, 2, 6, 8, 7]</span><span class="token comment">// s0 是否被 s1 包含</span><span class="token function">print</span><span class="token punctuation">(</span>s0<span class="token punctuation">.</span><span class="token function">isSubset</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token comment">// s1 是否包含了 s0</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">isSuperset</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> s0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token keyword">let</span> s7<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment">// s0 和 s7 是否有交集</span><span class="token function">print</span><span class="token punctuation">(</span>s0<span class="token punctuation">.</span><span class="token function">isDisjoint</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> s7<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token comment">// 可变 Set</span><span class="token keyword">var</span> s8<span class="token punctuation">:</span> <span class="token class-name">Set</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">]</span>s8<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span>s8<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s8<span class="token punctuation">)</span> <span class="token comment">// ["two", "three"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字典"><a href="#字典" class="headerlink" title="字典 [:]"></a>字典 [:]</h4><p>字典是无序集合，键值对应。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> d1 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string-literal"><span class="token string">"k1"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"v1"</span></span><span class="token punctuation">,</span>    <span class="token string-literal"><span class="token string">"k2"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"v2"</span></span><span class="token punctuation">]</span>d1<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"k3"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"v3"</span></span>d1<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"k4"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token nil constant">nil</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span> <span class="token comment">// ["k2": "v2", "k3": "v3", "k1": "v1"]</span><span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> d1 <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"key is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">k</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, value is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">v</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/* key is k1, value is v1 key is k2, value is v2 key is k3, value is v3 */</span> <span class="token keyword">if</span> d1<span class="token punctuation">.</span>isEmpty <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 3</span><span class="token punctuation">&#125;</span><span class="token comment">// mapValues</span><span class="token keyword">let</span> d2 <span class="token operator">=</span> d1<span class="token punctuation">.</span>mapValues <span class="token punctuation">&#123;</span>    <span class="token short-argument">$0</span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">"_new"</span></span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span> <span class="token comment">// ["k2": "v2_new", "k3": "v3_new", "k1": "v1_new"]</span><span class="token comment">// 对字典的值或键进行分组</span><span class="token keyword">let</span> d3 <span class="token operator">=</span> <span class="token class-name">Dictionary</span><span class="token punctuation">(</span>grouping<span class="token punctuation">:</span> d1<span class="token punctuation">.</span>values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token short-argument">$0</span><span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span> <span class="token comment">// [2: ["v1", "v2", "v3"]]</span><span class="token comment">// 从字典中取值，如果键对应无值，则使用通过 default 指定的默认值</span>d1<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"k5"</span></span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"whatever"</span></span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">"."</span></span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"k5"</span></span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span> <span class="token comment">// whatever.</span><span class="token keyword">let</span> v1 <span class="token operator">=</span> d1<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"k3"</span></span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"whatever"</span></span><span class="token punctuation">]</span><span class="token function">print</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token comment">// v3</span><span class="token comment">// compactMapValues() 对字典值进行转换和解包。可以解可选类型，并去掉 nil 值</span><span class="token keyword">let</span> d4 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string-literal"><span class="token string">"k1"</span></span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string-literal"><span class="token string">"k2"</span></span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string-literal"><span class="token string">"k3"</span></span><span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">]</span><span class="token keyword">let</span> d5 <span class="token operator">=</span> d4<span class="token punctuation">.</span>mapValues <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token punctuation">&#125;</span><span class="token keyword">let</span> d6 <span class="token operator">=</span> d4<span class="token punctuation">.</span>compactMapValues<span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>d5<span class="token punctuation">)</span><span class="token comment">// ["k3": nil, "k1": Optional(1), "k2": Optional(2)]</span><span class="token function">print</span><span class="token punctuation">(</span>d6<span class="token punctuation">)</span><span class="token comment">// ["k1": 1, "k2": 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h4 id="赋值-x3D-x3D-x3D-x3D-x2F-x3D"><a href="#赋值-x3D-x3D-x3D-x3D-x2F-x3D" class="headerlink" title="赋值 &#x3D;, +&#x3D;. -&#x3D;, *&#x3D;, &#x2F;&#x3D;"></a>赋值 &#x3D;, +&#x3D;. -&#x3D;, *&#x3D;, &#x2F;&#x3D;</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> i1 <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> i2 <span class="token operator">=</span> i1i2 <span class="token operator">=</span> <span class="token number">2</span><span class="token function">print</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span> <span class="token comment">// 2</span>i2 <span class="token operator">+=</span> <span class="token number">1</span><span class="token function">print</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span> <span class="token comment">// 3</span>i2 <span class="token operator">-=</span> <span class="token number">2</span><span class="token function">print</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span> <span class="token comment">// 1</span>i2 <span class="token operator">*=</span> <span class="token number">10</span><span class="token function">print</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span> <span class="token comment">// 10</span>i2 <span class="token operator">/=</span> <span class="token number">2</span><span class="token function">print</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span> <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计算符-x2F"><a href="#计算符-x2F" class="headerlink" title="计算符 +, -, *, &#x2F;, %"></a>计算符 +, -, *, &#x2F;, %</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> i1 <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> i2 <span class="token operator">=</span> i1<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i1 <span class="token operator">+</span> i2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 2</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"i"</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">)</span> <span class="token comment">// i1</span><span class="token comment">// 一元运算符</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">-</span>i1<span class="token punctuation">)</span> <span class="token comment">// -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="比较运算符-x3D-x3D-gt"><a href="#比较运算符-x3D-x3D-gt" class="headerlink" title="比较运算符 &#x3D;&#x3D;, &gt;"></a>比较运算符 &#x3D;&#x3D;, &gt;</h4><p>遵循 Equatable 协议可以使用 &#x3D;&#x3D; 和 !&#x3D; 来判断是否相等</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">:</span> <span class="token class-name">Equatable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p1<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> p2<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">let</span> s4 <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s4<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类需要实现 &#x3D;&#x3D; 函数</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">:</span> <span class="token class-name">Equatable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p1<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> p2<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>p1 <span class="token operator">=</span> p1        <span class="token keyword">self</span><span class="token punctuation">.</span>p2 <span class="token operator">=</span> p2    <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">==</span> <span class="token punctuation">(</span>l<span class="token punctuation">:</span> <span class="token class-name">C</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> <span class="token class-name">C</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Bool</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> l<span class="token punctuation">.</span>p1 <span class="token operator">==</span> r<span class="token punctuation">.</span>p1 <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">.</span>p2 <span class="token operator">==</span> r<span class="token punctuation">.</span>p2    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token class-name">C</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">let</span> c2 <span class="token operator">=</span> <span class="token class-name">C</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 元组比较</span><span class="token comment">// 会先比较第一个数，第一个无法比较才会比较第二个数</span><span class="token comment">// 字符串比较和字母大小还有长度有关。先比较字母大小，在比较长度</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"apple"</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"apple"</span></span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"applf"</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"apple"</span></span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"appl"</span></span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"apple"</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"appm"</span></span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"apple"</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三元"><a href="#三元" class="headerlink" title="三元 _ ? _ : _"></a>三元 _ ? _ : _</h4><p>简化 if else 写法</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// if else</span><span class="token keyword">func</span> <span class="token function-definition function">f1</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> p <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"positive number"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"negative number"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 三元</span><span class="token keyword">func</span> <span class="token function-definition function">f2</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    p <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"positive number"</span></span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"negative number"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">f1</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">f2</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Nil-coalescing"><a href="#Nil-coalescing" class="headerlink" title="Nil-coalescing ??"></a>Nil-coalescing ??</h4><p>简化 if let else 写法</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// if else</span><span class="token keyword">func</span> <span class="token function-definition function">f1</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> i <span class="token operator">=</span> p <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p have value is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p is nil, use defalut value"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用 ??</span><span class="token keyword">func</span> <span class="token function-definition function">f2</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> p <span class="token operator">??</span> <span class="token number">0</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="范围-a…b"><a href="#范围-a…b" class="headerlink" title="范围 a…b"></a>范围 a…b</h4><p>简化的值范围表达方式。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 封闭范围</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 半开范围</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">10</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 单侧区间</span><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token function">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 7 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="逻辑-amp-amp"><a href="#逻辑-amp-amp" class="headerlink" title="逻辑 !, &amp;&amp;, ||"></a>逻辑 !, &amp;&amp;, ||</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> i1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">let</span> i2 <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">if</span> i1 <span class="token operator">!=</span> i2 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"i1 and i2 not equal, and one of them is negative number."</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="恒等-x3D-x3D-x3D-x3D-x3D"><a href="#恒等-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="恒等 &#x3D;&#x3D;&#x3D;, !&#x3D;&#x3D;"></a>恒等 &#x3D;&#x3D;&#x3D;, !&#x3D;&#x3D;</h4><p>恒等返回是否引用了相同实例。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>p <span class="token operator">=</span> p    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token class-name">C</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> c2 <span class="token operator">=</span> <span class="token class-name">C</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> c3 <span class="token operator">=</span> c1<span class="token function">print</span><span class="token punctuation">(</span>c1 <span class="token operator">===</span> c2<span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">print</span><span class="token punctuation">(</span>c1 <span class="token operator">===</span> c3<span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token function">print</span><span class="token punctuation">(</span>c1 <span class="token operator">!==</span> c2<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>位运算符</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> i1<span class="token punctuation">:</span> <span class="token class-name">UInt8</span> <span class="token operator">=</span> <span class="token number">0b00001111</span><span class="token keyword">let</span> i2 <span class="token operator">=</span> <span class="token operator">~</span>i1 <span class="token comment">// Bitwise NOT Operator（按位取反运算符），取反</span><span class="token keyword">let</span> i3<span class="token punctuation">:</span> <span class="token class-name">UInt8</span> <span class="token operator">=</span> <span class="token number">0b00111111</span><span class="token keyword">let</span> i4 <span class="token operator">=</span> i1 <span class="token operator">&amp;</span> i3 <span class="token comment">// Bitwise AND Operator（按位与运算符），都为1才是1</span><span class="token keyword">let</span> i5 <span class="token operator">=</span> i1 <span class="token operator">|</span> i3 <span class="token comment">// Bitwise OR Operator（按位或运算符），有一个1就是1</span><span class="token keyword">let</span> i6 <span class="token operator">=</span> i1 <span class="token operator">^</span> i3 <span class="token comment">// Bitwise XOR Operator（按位异或运算符），不同为1，相同为0</span><span class="token function">print</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span>i2<span class="token punctuation">,</span>i3<span class="token punctuation">,</span>i4<span class="token punctuation">,</span>i5<span class="token punctuation">,</span>i6<span class="token punctuation">)</span><span class="token comment">// &lt;&lt; 按位左移，>> 按位右移</span><span class="token keyword">let</span> i7 <span class="token operator">=</span> i1 <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token keyword">let</span> i8 <span class="token operator">=</span> i1 <span class="token operator">>></span> <span class="token number">2</span><span class="token function">print</span><span class="token punctuation">(</span>i7<span class="token punctuation">,</span>i8<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>溢出运算符，有 &amp;+、&amp;- 和 &amp;*</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> i1 <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span>max<span class="token function">print</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span> <span class="token comment">// 9223372036854775807</span>i1 <span class="token operator">=</span> i1 <span class="token operator">&amp;+</span> <span class="token number">1</span><span class="token function">print</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span> <span class="token comment">// -9223372036854775808</span>i1 <span class="token operator">=</span> i1 <span class="token operator">&amp;+</span> <span class="token number">10</span><span class="token function">print</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span> <span class="token comment">// -9223372036854775798</span><span class="token keyword">var</span> i2 <span class="token operator">=</span> <span class="token class-name">UInt</span><span class="token punctuation">.</span>maxi2 <span class="token operator">=</span> i2 <span class="token operator">&amp;+</span> <span class="token number">1</span><span class="token function">print</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运算符函数包括前缀运算符、后缀运算符、复合赋值运算符以及等价运算符。另，还可以自定义运算符，新的运算符要用 operator 关键字进行定义，同时要指定 prefix、infix 或者 postfix 修饰符。</p><h3 id="基础库"><a href="#基础库" class="headerlink" title="基础库"></a>基础库</h3><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><p>Date 的基本用法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Date 转 时间戳</span><span class="token keyword">let</span> interval <span class="token operator">=</span> now<span class="token punctuation">.</span>timeIntervalSince1970 <span class="token comment">// 时间戳</span><span class="token keyword">let</span> df <span class="token operator">=</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>dateFormat <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"yyyy 年 MM 月 dd 日 HH:mm:ss"</span></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"时间戳：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span> <span class="token comment">// 时间戳：1642399901</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"格式化的时间："</span></span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 格式化的时间：2022 年 01 月 17 日 14:11:41</span>df<span class="token punctuation">.</span>dateStyle <span class="token operator">=</span> <span class="token punctuation">.</span>short<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"short 样式时间："</span></span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// short 样式时间：2022/1/17</span>df<span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"zh_Hans_CN"</span></span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>dateStyle <span class="token operator">=</span> <span class="token punctuation">.</span>full<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"full 样式时间："</span></span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// full 样式时间：2022年1月17日 星期一</span><span class="token comment">// 时间戳转 Date</span><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>timeIntervalSince1970<span class="token punctuation">:</span> interval<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token comment">// 2022-01-17 06:11:41 +0000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复杂的时间操作，比如说 GitHub 接口使用的是 ISO 标准，RSS 输出的是 RSS 标准字符串，不同标准对应不同时区的时间计算处理，可以使用开源库  <a href="https://github.com/malcommac/SwiftDate">SwiftDate</a>  来完成。示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftDate</span><span class="token comment">// 使用 SwiftDate 库</span><span class="token keyword">let</span> cn <span class="token operator">=</span> <span class="token class-name">Region</span><span class="token punctuation">(</span>zone<span class="token punctuation">:</span> <span class="token class-name">Zones</span><span class="token punctuation">.</span>asiaShanghai<span class="token punctuation">,</span> locale<span class="token punctuation">:</span> <span class="token class-name">Locales</span><span class="token punctuation">.</span>chineseChina<span class="token punctuation">)</span><span class="token class-name">SwiftDate</span><span class="token punctuation">.</span>defaultRegion <span class="token operator">=</span> cn<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"2008-02-14 23:12:14"</span></span><span class="token punctuation">.</span><span class="token function">toDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>year <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span> <span class="token comment">// 2008</span><span class="token keyword">let</span> d1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"2022-01-17T23:20:35"</span></span><span class="token punctuation">.</span><span class="token function">toISODate</span><span class="token punctuation">(</span>region<span class="token punctuation">:</span> cn<span class="token punctuation">)</span><span class="token keyword">guard</span> <span class="token keyword">let</span> d1 <span class="token operator">=</span> d1 <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span>minute<span class="token punctuation">)</span> <span class="token comment">// 20</span><span class="token keyword">let</span> d2 <span class="token operator">=</span> d1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">.</span>minutes<span class="token function">print</span><span class="token punctuation">(</span>d2<span class="token punctuation">.</span>minute<span class="token punctuation">)</span><span class="token comment">// 两个 DateInRegion 相差时间 interval</span><span class="token keyword">let</span> i1 <span class="token operator">=</span> <span class="token class-name">DateInRegion</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> region<span class="token punctuation">:</span> cn<span class="token punctuation">)</span> <span class="token operator">-</span> d1<span class="token keyword">let</span> s1 <span class="token operator">=</span> i1<span class="token punctuation">.</span>toString <span class="token punctuation">&#123;</span>    <span class="token short-argument">$0</span><span class="token punctuation">.</span>maximumUnitCount <span class="token operator">=</span> <span class="token number">4</span>    <span class="token short-argument">$0</span><span class="token punctuation">.</span>allowedUnits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>day<span class="token punctuation">,</span> <span class="token punctuation">.</span>hour<span class="token punctuation">,</span> <span class="token punctuation">.</span>minute<span class="token punctuation">]</span>    <span class="token short-argument">$0</span><span class="token punctuation">.</span>collapsesLargestUnit <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token short-argument">$0</span><span class="token punctuation">.</span>unitsStyle <span class="token operator">=</span> <span class="token punctuation">.</span>abbreviated    <span class="token short-argument">$0</span><span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token class-name">Locales</span><span class="token punctuation">.</span>chineseChina<span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment">// 9小时45分钟</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><p>使用标准库的格式来描述不同场景的情况可以不用去考虑由于不同地区的区别，这些在标准库里就可以自动完成了。</p><p>描述两个时间之间相差多长时间</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 计算两个时间之间相差多少时间，支持多种语言字符串</span><span class="token keyword">let</span> d1 <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timeIntervalSince1970 <span class="token operator">-</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token keyword">let</span> f1 <span class="token operator">=</span> <span class="token class-name">RelativeDateTimeFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>dateTimeStyle <span class="token operator">=</span> <span class="token punctuation">.</span>namedf1<span class="token punctuation">.</span>formattingContext <span class="token operator">=</span> <span class="token punctuation">.</span>beginningOfSentencef1<span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"zh_Hans_CN"</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> str <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">localizedString</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>timeIntervalSince1970<span class="token punctuation">:</span> d1<span class="token punctuation">)</span><span class="token punctuation">,</span> relativeTo<span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// 昨天</span><span class="token comment">// 简写</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now<span class="token punctuation">.</span><span class="token function">addingTimeInterval</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>presentation<span class="token punctuation">:</span> <span class="token punctuation">.</span>named<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span> <span class="token comment">// yesterday</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>描述多个事物</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 描述多个事物</span><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">ListFormatter</span><span class="token punctuation">.</span><span class="token function">localizedString</span><span class="token punctuation">(</span>byJoining<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"冬天"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"春天"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"夏天"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"秋天"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>描述名字</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 名字</span><span class="token keyword">let</span> f2 <span class="token operator">=</span> <span class="token class-name">PersonNameComponentsFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> nc1 <span class="token operator">=</span> <span class="token class-name">PersonNameComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>nc1<span class="token punctuation">.</span>familyName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"戴"</span></span>nc1<span class="token punctuation">.</span>givenName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"铭"</span></span>nc1<span class="token punctuation">.</span>nickname <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"铭哥"</span></span><span class="token function">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> nc1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 戴铭</span>f2<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token punctuation">.</span>short<span class="token function">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> nc1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 铭哥</span>f2<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token punctuation">.</span>abbreviated<span class="token function">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> nc1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 戴</span><span class="token keyword">var</span> nc2 <span class="token operator">=</span> <span class="token class-name">PersonNameComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>nc2<span class="token punctuation">.</span>familyName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Dai"</span></span>nc2<span class="token punctuation">.</span>givenName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Ming"</span></span>nc2<span class="token punctuation">.</span>nickname <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Starming"</span></span>f2<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token function">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> nc2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Ming Dai</span>f2<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token punctuation">.</span>short<span class="token function">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> nc2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Starming</span>f2<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token punctuation">.</span>abbreviated<span class="token function">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> nc2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// MD</span><span class="token comment">// 取出名</span><span class="token keyword">let</span> componets <span class="token operator">=</span> f2<span class="token punctuation">.</span><span class="token function">personNameComponents</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"戴铭"</span></span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>componets<span class="token operator">?</span><span class="token punctuation">.</span>givenName <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span> <span class="token comment">// 铭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>描述数字</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 数字</span><span class="token keyword">let</span> f3 <span class="token operator">=</span> <span class="token class-name">NumberFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"zh_Hans_CN"</span></span><span class="token punctuation">)</span>f3<span class="token punctuation">.</span>numberStyle <span class="token operator">=</span> <span class="token punctuation">.</span>currency<span class="token function">print</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">123456</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span> <span class="token comment">// ¥123,456.00</span>f3<span class="token punctuation">.</span>numberStyle <span class="token operator">=</span> <span class="token punctuation">.</span>percent<span class="token function">print</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">123456</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span> <span class="token comment">// 12,345,600%</span><span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token number">1.23456</span><span class="token keyword">let</span> n1Str <span class="token operator">=</span> n1<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">precision</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">fractionLength</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rounded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>n1Str<span class="token punctuation">)</span> <span class="token comment">// 1.235</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>描述地址</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 地址</span><span class="token keyword">import</span> <span class="token class-name">Contacts</span><span class="token keyword">let</span> f4 <span class="token operator">=</span> <span class="token class-name">CNPostalAddressFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> address <span class="token operator">=</span> <span class="token class-name">CNMutablePostalAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>address<span class="token punctuation">.</span>street <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"海淀区王庄路XX号院X号楼X门XXX"</span></span>address<span class="token punctuation">.</span>postalCode <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"100083"</span></span>address<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"北京"</span></span>address<span class="token punctuation">.</span>country <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"中国"</span></span><span class="token function">print</span><span class="token punctuation">(</span>f4<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">/// 海淀区王庄路XX号院X号楼X门XXX</span><span class="token comment">/// 北京 100083</span><span class="token comment">/// 中国</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="度量值"><a href="#度量值" class="headerlink" title="度量值"></a>度量值</h4><p>标准库里的物理量，在这个文档里有详细列出，包括角度、平方米等。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 参考：https://developer.apple.com/documentation/foundation/nsdimension</span><span class="token keyword">let</span> m1 <span class="token operator">=</span> <span class="token class-name">Measurement</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">:</span> <span class="token class-name">UnitLength</span><span class="token punctuation">.</span>kilometers<span class="token punctuation">)</span><span class="token keyword">let</span> m2 <span class="token operator">=</span> m1<span class="token punctuation">.</span><span class="token function">converted</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token punctuation">.</span>meters<span class="token punctuation">)</span> <span class="token comment">// 千米转米</span><span class="token function">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span> <span class="token comment">// 1000.0 m</span><span class="token comment">// 度量值转为本地化的值</span><span class="token keyword">let</span> mf <span class="token operator">=</span> <span class="token class-name">MeasurementFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mf<span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"zh_Hans_CN"</span></span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>mf<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> m1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1公里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些物理公式供参考：</p><pre class="line-numbers language-none"><code class="language-none">面积 &#x3D; 长度 × 长度体积 &#x3D; 长度 × 长度 × 长度 &#x3D; 面积 × 长度速度&#x3D;长度&#x2F;时间加速度&#x3D;速度&#x2F;时间力 &#x3D; 质量 × 加速度扭矩 &#x3D; 力 × 长度压力 &#x3D; 力 &#x2F; 面积密度&#x3D;质量 &#x2F; 体积能量 &#x3D; 功率 × 时间电阻 &#x3D; 电压 &#x2F; 电流<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h4><p>数据压缩和解压</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 对数据的压缩</span><span class="token keyword">let</span> d1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？"</span></span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span><span class="token operator">!</span> <span class="token keyword">as</span> <span class="token class-name">NSData</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"ori </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">d1<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> bytes"</span></span><span class="token punctuation">)</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/// 压缩算法</span>    <span class="token comment">/// * lz4</span>    <span class="token comment">/// * lzma</span>    <span class="token comment">/// * zlib</span>    <span class="token comment">/// * lzfse</span>    <span class="token keyword">let</span> compressed <span class="token operator">=</span> <span class="token keyword">try</span> d1<span class="token punctuation">.</span><span class="token function">compressed</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> <span class="token punctuation">.</span>zlib<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"comp </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">compressed<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> bytes"</span></span><span class="token punctuation">)</span>        <span class="token comment">// 对数据解压</span>    <span class="token keyword">let</span> decomressed <span class="token operator">=</span> <span class="token keyword">try</span> compressed<span class="token punctuation">.</span><span class="token function">decompressed</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> <span class="token punctuation">.</span>zlib<span class="token punctuation">)</span>    <span class="token keyword">let</span> deStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> decomressed <span class="token keyword">as</span> <span class="token class-name">Data</span><span class="token punctuation">,</span> encoding<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>deStr <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/// ori 297 bytes</span><span class="token comment">/// comp 37 bytes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>文件的一些基本操作的代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> path1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"/Users/mingdai/Downloads/1.html"</span></span><span class="token keyword">let</span> path2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"/Users/mingdai/Documents/GitHub/"</span></span><span class="token keyword">let</span> u1 <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> path1<span class="token punctuation">)</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 写入</span>    <span class="token keyword">let</span> url1 <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>itemReplacementDirectory<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>userDomainMask<span class="token punctuation">,</span> appropriateFor<span class="token punctuation">:</span> u1<span class="token punctuation">,</span> create<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 保证原子性安全保存</span>    <span class="token function">print</span><span class="token punctuation">(</span>url1<span class="token punctuation">)</span>    <span class="token comment">// 读取</span>    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">String</span><span class="token punctuation">(</span>contentsOfFile<span class="token punctuation">:</span> path1<span class="token punctuation">,</span> encoding<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 检查路径是否可用</span><span class="token keyword">let</span> u2 <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>fileURLWithPath<span class="token punctuation">:</span>path2<span class="token punctuation">)</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token keyword">try</span> u2<span class="token punctuation">.</span><span class="token function">resourceValues</span><span class="token punctuation">(</span>forKeys<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>volumeAvailableCapacityForImportantUsageKey<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> capacity <span class="token operator">=</span> values<span class="token punctuation">.</span>volumeAvailableCapacityForImportantUsage <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"可用: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">capacity</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"不可用"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"错误: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">error<span class="token punctuation">.</span>localizedDescription</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>怎么遍历多级目录结构中的文件呢？看下面的代码的实现：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 遍历路径下所有目录</span><span class="token keyword">let</span> u3 <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>fileURLWithPath<span class="token punctuation">:</span> <span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span>currentDirectoryPath<span class="token punctuation">)</span><span class="token keyword">let</span> fm <span class="token operator">=</span> <span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span>fm<span class="token punctuation">.</span><span class="token function">enumerator</span><span class="token punctuation">(</span>atPath<span class="token punctuation">:</span> u3<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path <span class="token keyword">in</span>    <span class="token keyword">guard</span> <span class="token keyword">let</span> path <span class="token operator">=</span> path <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">String</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>fileURLWithPath<span class="token punctuation">:</span> path<span class="token punctuation">,</span> relativeTo<span class="token punctuation">:</span> u3<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>lastPathComponent<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用 FileWrapper 来创建文件夹和文件。举个例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// FileWrapper 的使用</span><span class="token comment">// 创建文件</span><span class="token keyword">let</span> f1 <span class="token operator">=</span> <span class="token class-name">FileWrapper</span><span class="token punctuation">(</span>regularFileWithContents<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"# 第 n 个文件\n ## 标题"</span></span><span class="token punctuation">.</span>utf8<span class="token punctuation">)</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>fileAttributes<span class="token punctuation">[</span><span class="token class-name">FileAttributeKey</span><span class="token punctuation">.</span>creationDate<span class="token punctuation">.</span>rawValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>f1<span class="token punctuation">.</span>fileAttributes<span class="token punctuation">[</span><span class="token class-name">FileAttributeKey</span><span class="token punctuation">.</span>modificationDate<span class="token punctuation">.</span>rawValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 创建文件夹</span><span class="token keyword">let</span> folder1 <span class="token operator">=</span> <span class="token class-name">FileWrapper</span><span class="token punctuation">(</span>directoryWithFileWrappers<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string-literal"><span class="token string">"file1.md"</span></span><span class="token punctuation">:</span> f1<span class="token punctuation">]</span><span class="token punctuation">)</span>folder1<span class="token punctuation">.</span>fileAttributes<span class="token punctuation">[</span><span class="token class-name">FileAttributeKey</span><span class="token punctuation">.</span>creationDate<span class="token punctuation">.</span>rawValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>folder1<span class="token punctuation">.</span>fileAttributes<span class="token punctuation">[</span><span class="token class-name">FileAttributeKey</span><span class="token punctuation">.</span>modificationDate<span class="token punctuation">.</span>rawValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> folder1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>        to<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>fileURLWithPath<span class="token punctuation">:</span> <span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span>currentDirectoryPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendingPathComponent</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"NewFolder"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">.</span>atomic<span class="token punctuation">,</span>        originalContentsURL<span class="token punctuation">:</span> <span class="token nil constant">nil</span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span>currentDirectoryPath<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码写起来比较繁琐，对 FileWrapper 更好的封装可以参考这篇文章《 <a href="https://heberti.com/posts/filewrapper/">A Type-Safe FileWrapper | Heberti Almeida</a> 》。</p><p>文件读写处理完整能力可以参看这个库  <a href="https://github.com/JohnSundell/Files">GitHub - JohnSundell&#x2F;Files: A nicer way to handle files &amp; folders in Swift</a> </p><p>本地或者网络上，比如网盘和FTP的文件发生变化时，怎样知道能够观察到呢？</p><p>通过 HTTPHeader 里的 If-Modified-Since、Last-Modified、If-None-Match 和 Etag 等字段来判断文件的变化，本地则是使用 DispatchSource.makeFileSystemObjectSource 来进行的文件变化监听。可以参考  <a href="https://github.com/krzysztofzablocki/KZFileWatchers">KZFileWatchers</a>  库的做法。</p><h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"""one1,two2,three3."""</span></span><span class="token keyword">let</span> sn1 <span class="token operator">=</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> s1<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token operator">!</span>sn1<span class="token punctuation">.</span>isAtEnd <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> r1 <span class="token operator">=</span> sn1<span class="token punctuation">.</span><span class="token function">scanUpToCharacters</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token punctuation">.</span>newlines<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span>r1 <span class="token keyword">as</span> <span class="token class-name">String</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/// one1,</span><span class="token comment">/// two2,</span><span class="token comment">/// three3.</span><span class="token comment">// 找出数字</span><span class="token keyword">let</span> sn2 <span class="token operator">=</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> s1<span class="token punctuation">)</span>sn2<span class="token punctuation">.</span>charactersToBeSkipped <span class="token operator">=</span> <span class="token class-name">CharacterSet</span><span class="token punctuation">.</span>decimalDigits<span class="token punctuation">.</span>inverted <span class="token comment">// 不是数字的就跳过</span><span class="token keyword">var</span> p<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token operator">!</span>sn2<span class="token punctuation">.</span>isAtEnd <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> sn2<span class="token punctuation">.</span><span class="token function">scanInt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/// 1</span><span class="token comment">/// 2</span><span class="token comment">/// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码还不是那么 Swifty，可以通过用AnySequence和AnyIterator来包装下，将序列中的元素推迟到实际需要时再来处理，这样性能也会更好些。具体实现可以参看《 <a href="https://www.swiftbysundell.com/articles/string-parsing-in-swift/">String parsing in Swift</a> 》这篇文章。</p><h4 id="AttributeString"><a href="#AttributeString" class="headerlink" title="AttributeString"></a>AttributeString</h4><p>效果如下：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/150132322-20c5c2d4-6452-4d06-9202-4b93cffd8133.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/150132322-20c5c2d4-6452-4d06-9202-4b93cffd8133.png"></p><p>代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> aStrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">AttributedString</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> aStr1 <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"""标题正文内容，具体查看链接。这里摘出第一个重点，还要强调的内容。"""</span></span><span class="token punctuation">)</span><span class="token comment">// 标题</span><span class="token keyword">let</span> title <span class="token operator">=</span> aStr1<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"标题"</span></span><span class="token punctuation">)</span><span class="token keyword">guard</span> <span class="token keyword">let</span> title <span class="token operator">=</span> title <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> aStrs<span class="token punctuation">&#125;</span><span class="token keyword">var</span> c1 <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 可复用容器</span>c1<span class="token punctuation">.</span>inlinePresentationIntent <span class="token operator">=</span> <span class="token punctuation">.</span>stronglyEmphasizedc1<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span>largeTitleaStr1<span class="token punctuation">[</span>title<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token comment">// 链接</span><span class="token keyword">let</span> link <span class="token operator">=</span> aStr1<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"链接"</span></span><span class="token punctuation">)</span><span class="token keyword">guard</span> <span class="token keyword">let</span> link <span class="token operator">=</span> link <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> aStrs<span class="token punctuation">&#125;</span><span class="token keyword">var</span> c2 <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 链接</span>c2<span class="token punctuation">.</span>strokeColor <span class="token operator">=</span> <span class="token punctuation">.</span>bluec2<span class="token punctuation">.</span>link <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://ming1016.github.io/"</span></span><span class="token punctuation">)</span>aStr1<span class="token punctuation">[</span>link<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">merging</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 合并 AttributeContainer</span><span class="token comment">// Runs</span><span class="token keyword">let</span> i1 <span class="token operator">=</span> aStr1<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"重点"</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> i2 <span class="token operator">=</span> aStr1<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"强调"</span></span><span class="token punctuation">)</span><span class="token keyword">guard</span> <span class="token keyword">let</span> i1 <span class="token operator">=</span> i1<span class="token punctuation">,</span> <span class="token keyword">let</span> i2 <span class="token operator">=</span> i2 <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> aStrs<span class="token punctuation">&#125;</span><span class="token keyword">var</span> c3 <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c3<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>yellowc3<span class="token punctuation">.</span>inlinePresentationIntent <span class="token operator">=</span> <span class="token punctuation">.</span>stronglyEmphasizedaStr1<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span>aStr1<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token keyword">for</span> r <span class="token keyword">in</span> aStr1<span class="token punctuation">.</span>runs <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"-------------"</span></span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>attributes<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>aStrs<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>aStr1<span class="token punctuation">)</span><span class="token comment">// Markdown</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> aStr2 <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span>markdown<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"""    内容[链接](https://ming1016.github.io/)。需要**强调**的内容。    """</span></span><span class="token punctuation">)</span>        aStrs<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>aStr2<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SwiftUI 的 Text 可以直接读取 AttributedString 来进行显示。</p><h4 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h4><p>用法：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> ri <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>ri<span class="token punctuation">)</span> <span class="token comment">// 0到10随机数</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 数组中随机取个数</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">shuffled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 随机打乱数组顺序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UserDefaults"><a href="#UserDefaults" class="headerlink" title="UserDefaults"></a>UserDefaults</h4><p>使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token class-name">UDKey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> k1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"token"</span></span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> ud <span class="token operator">=</span> <span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standardud<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"xxxxxx"</span></span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token class-name">UDKey</span><span class="token punctuation">.</span>k1<span class="token punctuation">)</span><span class="token keyword">let</span> tk <span class="token operator">=</span> ud<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token class-name">UDKey</span><span class="token punctuation">.</span>k1<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>tk <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><h4 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">S</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> shared <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 防止实例初始化</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="系统及设备"><a href="#系统及设备" class="headerlink" title="系统及设备"></a>系统及设备</h3><h4 id="系统判断"><a href="#系统判断" class="headerlink" title="系统判断"></a>系统判断</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>tvOS<span class="token punctuation">)</span></span>     <span class="token comment">// do something in tvOS</span><span class="token directive property"><span class="token directive-name">#elseif</span> os<span class="token punctuation">(</span>iOS<span class="token punctuation">)</span></span>     <span class="token comment">// do somthing in iOS</span><span class="token directive property"><span class="token directive-name">#elseif</span> os<span class="token punctuation">(</span>macOS<span class="token punctuation">)</span></span>    <span class="token comment">// do somthing in macOS</span><span class="token directive property"><span class="token directive-name">#endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="版本兼容"><a href="#版本兼容" class="headerlink" title="版本兼容"></a>版本兼容</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 版本</span><span class="token attribute atrule">@available</span><span class="token punctuation">(</span>iOS <span class="token number">15</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function-definition function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 版本检查</span><span class="token keyword">if</span> <span class="token other-directive property">#available</span><span class="token punctuation">(</span>iOS <span class="token number">15</span><span class="token punctuation">,</span> macOS <span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// nothing happen</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="canImport-判断库是否可使用"><a href="#canImport-判断库是否可使用" class="headerlink" title="canImport 判断库是否可使用"></a>canImport 判断库是否可使用</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token directive property"><span class="token directive-name">#if</span> canImport<span class="token punctuation">(</span>SpriteKit<span class="token punctuation">)</span></span>   <span class="token comment">// iOS 等苹果系统执行</span><span class="token directive property"><span class="token directive-name">#else</span></span>   <span class="token comment">// 非苹果系统</span><span class="token directive property"><span class="token directive-name">#endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="targetEnvironment-环境的判断"><a href="#targetEnvironment-环境的判断" class="headerlink" title="targetEnvironment 环境的判断"></a>targetEnvironment 环境的判断</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token directive property"><span class="token directive-name">#if</span> targetEnvironment<span class="token punctuation">(</span>simulator<span class="token punctuation">)</span></span>   <span class="token comment">// 模拟器</span><span class="token directive property"><span class="token directive-name">#else</span></span>   <span class="token comment">// 真机</span><span class="token directive property"><span class="token directive-name">#endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自带属性包装"><a href="#自带属性包装" class="headerlink" title="自带属性包装"></a>自带属性包装</h3><h4 id="resultBuilder"><a href="#resultBuilder" class="headerlink" title="@resultBuilder"></a>@resultBuilder</h4><p>结果生成器（Result builders），通过传递序列创建新值，SwiftUI就是使用的结果生成器将多个视图生成一个视图</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@resultBuilder</span><span class="token keyword">struct</span> <span class="token constant">RBS</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 基本闭包支持</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildBlock</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> components<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>        components<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> partialResult<span class="token punctuation">,</span> i <span class="token keyword">in</span>            partialResult <span class="token operator">+</span> i        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 支持条件判断</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildEither</span><span class="token punctuation">(</span>first component<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>        component    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildEither</span><span class="token punctuation">(</span>second component<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>        component    <span class="token punctuation">&#125;</span>    <span class="token comment">// 支持循环</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">buildArray</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> components<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>        components<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> partialResult<span class="token punctuation">,</span> i <span class="token keyword">in</span>            partialResult <span class="token operator">+</span> i        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token constant">RBS</span><span class="token punctuation">.</span><span class="token function">buildBlock</span><span class="token punctuation">(</span>    <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 6</span><span class="token comment">// 应用到函数中</span><span class="token attribute atrule">@RBS</span> <span class="token keyword">func</span> <span class="token function-definition function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>    <span class="token number">1</span>    <span class="token number">2</span>    <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span><span class="token comment">// 设置了 buildEither 就可以在闭包中进行条件判断。</span><span class="token attribute atrule">@RBS</span> <span class="token keyword">func</span> <span class="token function-definition function">f2</span><span class="token punctuation">(</span>stopAtThree<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>    <span class="token number">1</span>    <span class="token number">2</span>    <span class="token number">3</span>    <span class="token keyword">if</span> stopAtThree <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>        <span class="token number">0</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token number">4</span>        <span class="token number">5</span>        <span class="token number">6</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span>stopAtThree<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 21</span><span class="token comment">// 设置了 buildArray 就可以在闭包内使用循环了</span><span class="token attribute atrule">@RBS</span> <span class="token keyword">func</span> <span class="token function-definition function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">3</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">*</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="dynamicMemberLookup-动态成员查询"><a href="#dynamicMemberLookup-动态成员查询" class="headerlink" title="@dynamicMemberLookup 动态成员查询"></a>@dynamicMemberLookup 动态成员查询</h4><p>@dynamicMemberLookup 指示访问属性时调用一个已实现的处理动态查找的下标方法 subscript(dynamicMemeber:)，通过指定属性字符串名返回值。使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@dynamicMemberLookup</span><span class="token keyword">struct</span> <span class="token class-name">D</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 找字符串</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>dynamicMember m<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"first"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"second"</span></span><span class="token punctuation">]</span>        <span class="token keyword">return</span> p<span class="token punctuation">[</span>m<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 找整型</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>dynamicMember m<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> p<span class="token punctuation">[</span>m<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 找闭包</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>dynamicMember m<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">(</span><span class="token omit keyword">_</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"show </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 静态数组成员</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"This is a member"</span></span><span class="token punctuation">]</span>    <span class="token comment">// 动态数组成员</span>    <span class="token keyword">subscript</span><span class="token punctuation">(</span>dynamicMember m<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"This is a dynamic member"</span></span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> s1<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> d<span class="token punctuation">.</span>one<span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment">// first</span><span class="token keyword">let</span> i1<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> d<span class="token punctuation">.</span>one<span class="token function">print</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span> <span class="token comment">// 1</span>d<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"something"</span></span><span class="token punctuation">)</span> <span class="token comment">// show something</span><span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>p<span class="token punctuation">)</span> <span class="token comment">// ["This is a member"]</span><span class="token keyword">let</span> dynamicP<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">.</span>dp<span class="token function">print</span><span class="token punctuation">(</span>dynamicP<span class="token punctuation">)</span> <span class="token comment">// ["This is a dynamic member"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类使用 @dynamicMemberLookup，继承的类也会自动加上 @dynamicMemberLookup。协议上定义 @dynamicMemberLookup，通过扩展可以默认实现 subscript(dynamicMember:) 方法。</p><h4 id="dynamicCallable-动态可调用类型"><a href="#dynamicCallable-动态可调用类型" class="headerlink" title="@dynamicCallable 动态可调用类型"></a>@dynamicCallable 动态可调用类型</h4><p>@dynamicCallable 动态可调用类型。通过实现 dynamicallyCall 方法来定义变参的处理。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@dynamicCallable</span><span class="token keyword">struct</span> <span class="token class-name">D</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 带参数说明</span>    <span class="token keyword">func</span> <span class="token function-definition function">dynamicallyCall</span><span class="token punctuation">(</span>withKeywordArguments args<span class="token punctuation">:</span> <span class="token class-name">KeyValuePairs</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> firstArg <span class="token operator">=</span> args<span class="token punctuation">.</span>first<span class="token operator">?</span><span class="token punctuation">.</span>value <span class="token operator">??</span> <span class="token number">0</span>        <span class="token keyword">return</span> firstArg <span class="token operator">*</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 无参数说明</span>    <span class="token keyword">func</span> <span class="token function-definition function">dynamicallyCall</span><span class="token punctuation">(</span>withArguments args<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> firstArg <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>        <span class="token keyword">if</span> args<span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            firstArg <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"show </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">firstArg</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token function">d</span><span class="token punctuation">(</span>numberIs<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 4</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// show hi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自带协议"><a href="#自带协议" class="headerlink" title="自带协议"></a>自带协议</h3><h4 id="Hashable"><a href="#Hashable" class="headerlink" title="Hashable"></a>Hashable</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">H</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p1<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> p2<span class="token punctuation">:</span> <span class="token class-name">Int</span>        <span class="token comment">// 提供随机 seed</span>    <span class="token keyword">func</span> <span class="token function-definition function">hash</span><span class="token punctuation">(</span>into hasher<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Hasher</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        hasher<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> h1 <span class="token operator">=</span> <span class="token class-name">H</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">let</span> h2 <span class="token operator">=</span> <span class="token class-name">H</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">var</span> hs1 <span class="token operator">=</span> <span class="token class-name">Hasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>hs1<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span>hs1<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>h2<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span>hashValue<span class="token punctuation">)</span> <span class="token comment">// 7417088153212460033 随机值</span><span class="token function">print</span><span class="token punctuation">(</span>h2<span class="token punctuation">.</span>hashValue<span class="token punctuation">)</span> <span class="token comment">// -6972912482785541972 随机值</span><span class="token function">print</span><span class="token punctuation">(</span>hs1<span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 7955861102637572758 随机值</span><span class="token function">print</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span>hashValue<span class="token punctuation">)</span> <span class="token comment">// 7417088153212460033 和前面 h1 一样</span><span class="token keyword">let</span> h3 <span class="token operator">=</span> <span class="token class-name">H</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>h3<span class="token punctuation">.</span>hashValue<span class="token punctuation">)</span> <span class="token comment">// 7417088153212460033 和前面 h1 一样</span><span class="token keyword">var</span> hs2 <span class="token operator">=</span> <span class="token class-name">Hasher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>hs2<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>h3<span class="token punctuation">)</span>hs2<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>h2<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>hs2<span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 7955861102637572758 和前面 hs1 一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用生命周期内，调用 combine() 添加相同属性哈希值相同，由于 Hasher 每次都会使用随机的 seed，因此不同应用生命周期，也就是下次启动的哈希值，就会和上次的哈希值不同。</p><h3 id="Codable"><a href="#Codable" class="headerlink" title="Codable"></a>Codable</h3><h4 id="JSON-没有-id-字段"><a href="#JSON-没有-id-字段" class="headerlink" title="JSON 没有 id 字段"></a>JSON 没有 id 字段</h4><p>如果SwiftUI要求数据Model都是遵循Identifiable协议的，而有的json没有id这个字段，可以使用扩展struct的方式解决：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">CommitModel</span><span class="token punctuation">:</span> <span class="token class-name">Decodable</span><span class="token punctuation">,</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> sha<span class="token punctuation">:</span> <span class="token class-name">String</span>  <span class="token keyword">var</span> author<span class="token punctuation">:</span> <span class="token class-name">AuthorModel</span>  <span class="token keyword">var</span> commit<span class="token punctuation">:</span> <span class="token class-name">CommitModel</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">CommitModel</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sha  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h4 id="网络状态检查"><a href="#网络状态检查" class="headerlink" title="网络状态检查"></a>网络状态检查</h4><p>通过 Network 库的 NWPathMonitor 来检查</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">import</span> <span class="token class-name">Network</span><span class="token comment">// 网络状态检查 network state check</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Nsck</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> shared <span class="token operator">=</span> <span class="token class-name">Nsck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> pb <span class="token operator">=</span> <span class="token function">mkpb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@Published</span> <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> pt<span class="token punctuation">:</span> <span class="token class-name">NWPath</span>        <span class="token keyword">private</span> <span class="token keyword">let</span> monitor<span class="token punctuation">:</span> <span class="token class-name">NWPathMonitor</span>    <span class="token keyword">private</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> sj <span class="token operator">=</span> <span class="token class-name">CurrentValueSubject</span><span class="token operator">&lt;</span><span class="token class-name">NWPath</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span>monitor<span class="token punctuation">.</span>currentPath<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> sb<span class="token punctuation">:</span> <span class="token class-name">AnyCancellable</span><span class="token operator">?</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        monitor <span class="token operator">=</span> <span class="token class-name">NWPathMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        pt <span class="token operator">=</span> monitor<span class="token punctuation">.</span>currentPath        monitor<span class="token punctuation">.</span>pathUpdateHandler <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> path <span class="token keyword">in</span>            <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>pt <span class="token operator">=</span> path            <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>sj<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">deinit</span> <span class="token punctuation">&#123;</span>        monitor<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        sj<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>completion<span class="token punctuation">:</span> <span class="token punctuation">.</span>finished<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">mkpb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">AnyPublisher</span><span class="token operator">&lt;</span><span class="token class-name">NWPath</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sj<span class="token punctuation">.</span><span class="token function">eraseToAnyPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> alertMsg <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token class-name">Nsck</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span>pb    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>        <span class="token comment">//</span>    <span class="token punctuation">&#125;</span> receiveValue<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> path <span class="token keyword">in</span>        alertMsg <span class="token operator">=</span> path<span class="token punctuation">.</span>debugDescription        <span class="token keyword">switch</span> path<span class="token punctuation">.</span>status <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>satisfied<span class="token punctuation">:</span>            alertMsg <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>unsatisfied<span class="token punctuation">:</span>            alertMsg <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"😱"</span></span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>requiresConnection<span class="token punctuation">:</span>            alertMsg <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"🥱"</span></span>        <span class="token attribute atrule">@unknown</span> <span class="token keyword">default</span><span class="token punctuation">:</span>            alertMsg <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"🤔"</span></span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> path<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token punctuation">.</span>unsatisfied <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> path<span class="token punctuation">.</span>unsatisfiedReason <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token punctuation">.</span>notAvailable<span class="token punctuation">:</span>                alertMsg <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">"网络不可用"</span></span>            <span class="token keyword">case</span> <span class="token punctuation">.</span>cellularDenied<span class="token punctuation">:</span>                alertMsg <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">"蜂窝网不可用"</span></span>            <span class="token keyword">case</span> <span class="token punctuation">.</span>wifiDenied<span class="token punctuation">:</span>                alertMsg <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">"Wifi不可用"</span></span>            <span class="token keyword">case</span> <span class="token punctuation">.</span>localNetworkDenied<span class="token punctuation">:</span>                alertMsg <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">"网线不可用"</span></span>            <span class="token attribute atrule">@unknown</span> <span class="token keyword">default</span><span class="token punctuation">:</span>                alertMsg <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">"网络不可用"</span></span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>sb<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h4 id="布局动画"><a href="#布局动画" class="headerlink" title="布局动画"></a>布局动画</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">struct</span> <span class="token class-name">AnimateLayout</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span> <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> changeLayout<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token attribute atrule">@Namespace</span> <span class="token keyword">var</span> namespace <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> changeLayout <span class="token punctuation">&#123;</span>    <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span> items <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span> items <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"切换布局"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    withAnimation <span class="token punctuation">&#123;</span> changeLayout<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">var</span> items<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> namespace<span class="token punctuation">)</span>  <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> namespace<span class="token punctuation">)</span>  <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Three"</span></span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Three"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> namespace<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><h4 id="Keychain"><a href="#Keychain" class="headerlink" title="Keychain"></a>Keychain</h4><p>使用方法：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> d1 <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"keyChain github token"</span></span><span class="token punctuation">.</span>utf8<span class="token punctuation">)</span><span class="token keyword">let</span> service <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"access-token"</span></span><span class="token keyword">let</span> account <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"github"</span></span><span class="token keyword">let</span> q1 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token constant">kSecValueData</span><span class="token punctuation">:</span> d1<span class="token punctuation">,</span>    <span class="token constant">kSecClass</span><span class="token punctuation">:</span> <span class="token constant">kSecClassGenericPassword</span><span class="token punctuation">,</span>    <span class="token constant">kSecAttrService</span><span class="token punctuation">:</span> service<span class="token punctuation">,</span>    <span class="token constant">kSecAttrAccount</span><span class="token punctuation">:</span> account<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">CFDictionary</span><span class="token comment">// 添加一个 keychain</span><span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token class-name">SecItemAdd</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span><span class="token comment">// 如果已经添加过会抛出 -25299 错误代码，需要调用 SecItemUpdate 来进行更新</span><span class="token keyword">if</span> status <span class="token operator">==</span> errSecDuplicateItem <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> q2 <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token constant">kSecClass</span><span class="token punctuation">:</span> <span class="token constant">kSecClassGenericPassword</span><span class="token punctuation">,</span>        <span class="token constant">kSecAttrService</span><span class="token punctuation">:</span> service<span class="token punctuation">,</span>        <span class="token constant">kSecAttrAccount</span><span class="token punctuation">:</span> account    <span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">CFDictionary</span>    <span class="token keyword">let</span> q3 <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token constant">kSecValueData</span><span class="token punctuation">:</span> d1    <span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">CFDictionary</span>    <span class="token class-name">SecItemUpdate</span><span class="token punctuation">(</span>q2<span class="token punctuation">,</span> q3<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 读取</span><span class="token keyword">let</span> q4 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token constant">kSecAttrService</span><span class="token punctuation">:</span> service<span class="token punctuation">,</span>    <span class="token constant">kSecAttrAccount</span><span class="token punctuation">:</span> account<span class="token punctuation">,</span>    <span class="token constant">kSecClass</span><span class="token punctuation">:</span> <span class="token constant">kSecClassGenericPassword</span><span class="token punctuation">,</span>    <span class="token constant">kSecReturnData</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">CFDictionary</span><span class="token keyword">var</span> re<span class="token punctuation">:</span> <span class="token class-name">AnyObject</span><span class="token operator">?</span><span class="token class-name">SecItemCopyMatching</span><span class="token punctuation">(</span>q4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>re<span class="token punctuation">)</span><span class="token keyword">guard</span> <span class="token keyword">let</span> reData <span class="token operator">=</span> re <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">Data</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> reData<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// keyChain github token</span><span class="token comment">// 删除</span><span class="token keyword">let</span> q5 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token constant">kSecAttrService</span><span class="token punctuation">:</span> service<span class="token punctuation">,</span>    <span class="token constant">kSecAttrAccount</span><span class="token punctuation">:</span> account<span class="token punctuation">,</span>    <span class="token constant">kSecClass</span><span class="token punctuation">:</span> <span class="token constant">kSecClassGenericPassword</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">CFDictionary</span><span class="token class-name">SecItemDelete</span><span class="token punctuation">(</span>q5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工程"><a href="#工程" class="headerlink" title="工程"></a>工程</h3><h4 id="程序入口点"><a href="#程序入口点" class="headerlink" title="程序入口点"></a>程序入口点</h4><p>Swift 允许全局编写 Swift 代码，实际上 clang 会自动将代码包进一个模拟 C 的函数中。Swift 也能够指定入口点，比如 @UIApplicationMain 或 @NSApplicationMain，UIKit 启动后生命周期管理是 AppDelegate 和 SceneDelegate，《 <a href="https://www.donnywals.com/understanding-the-ios-13-scene-delegate/">Understanding the iOS 13 Scene Delegate</a> 》这篇有详细介绍。</p><p>@UIApplicationMain 和 @NSApplicationMain 会自动生成入口点。这些入口点都是平台相关的，Swift 发展来看是多平台的，这样在 Swift 5.3 时引入了 @main，可以方便的指定入口点。代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@main</span> <span class="token comment">// 要定义个静态的 main 函数</span><span class="token keyword">struct</span> <span class="token class-name">M</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"let's begin"</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>  库，Swift 官方开源的一个开发命令行工具的库，也支持 @main。使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">ArgumentParser</span><span class="token attribute atrule">@main</span><span class="token keyword">struct</span> <span class="token class-name">C</span><span class="token punctuation">:</span> <span class="token class-name">ParsableCommand</span> <span class="token punctuation">&#123;</span>  <span class="token attribute atrule">@Argument</span><span class="token punctuation">(</span>help<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Start"</span></span><span class="token punctuation">)</span>  <span class="token keyword">var</span> phrase<span class="token punctuation">:</span> <span class="token class-name">String</span>     <span class="token keyword">func</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">&#123;</span>      <span class="token function">print</span><span class="token punctuation">(</span>phrase<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="专题"><a href="#专题" class="headerlink" title="专题"></a>专题</h2><h3 id="Swift-那些事"><a href="#Swift-那些事" class="headerlink" title="Swift 那些事"></a>Swift 那些事</h3><h4 id="Swift-各版本演进"><a href="#Swift-各版本演进" class="headerlink" title="Swift 各版本演进"></a>Swift 各版本演进</h4><p><em>Swift 1.1</em></p><ul><li>countElements() 改成了 count()。</li><li>@NSApplicationMain 可以在 macOS 上使用。</li></ul><p><em>Swift 1.2</em></p><ul><li>引入 Set 类型。</li><li>if let 可以放到一起，使用逗号分隔。</li><li>新增 zip() 和 flatMap()。</li><li>类增加静态方法和静态属性，使用 static 关键字描述。</li><li>as! 用于类型强转，失败会崩溃。</li><li>@noescape 用于描述作为参数闭包，用来告诉 Swift 闭包将在函数返回前使用。</li><li>常量可以延后初始化。</li></ul><p><em>Swift 2.0</em></p><ul><li>增加 guard 关键字，用于解可选项值。</li><li>defer 关键字用来延迟执行，即使抛出错误了都会在最后执行。</li><li>ErrorType 协议，以及 throws、do、try 和 catch 的引入用来处理错误。</li><li>characters 加上 count，用来替代 count()。</li><li>#available 用来检查系统版本。</li></ul><p><em>Swift 2.1</em></p><ul><li>字符串插值可以包含字符串字面符号。</li></ul><p><em>Swift 2.2</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-2.2-released/">Swift 2.2 Released!</a>、<a href="https://swift.org/blog/swift-2.2-new-features/">New Features in Swift 2.2</a>、<a href="https://swift.org/blog/swift-2.2-release-process/">Swift 2.2 Release Process</a></p><ul><li><strong>FILE</strong>, <strong>LINE</strong> 和 <strong>FUNCTION</strong> 换成 #file，#line 和 #function。</li><li>废弃 ++ 和 – 操作符。</li><li>C 语言风格 for 循环废弃。</li><li>废弃变量参数，因为变量参数容易和 inout 搞混。</li><li>废弃字符串化的选择器，选择器不再能写成字符串了。</li><li>元组可直接比较是否相等。</li></ul><p><em>Swift 3.0</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-3.0-released/">Swift 3.0 Released!</a>、<a href="https://swift.org/blog/swift-3.0-preview-1-released/">Swift 3.0 Preview 1 Released!</a>、<a href="https://swift.org/blog/swift-3.0-release-process/">Swift 3.0 Release Process</a></p><ul><li>规范动词和名词来命名。</li><li>去掉 NS 前缀。</li><li>方法名描述参数部分变为参数名。</li><li>省略没必要的单词，命名做了简化呢。比如 stringByTrimmingCharactersInSet 就换成了 trimmingCharacters。</li><li>枚举的属性使用小写开头。</li><li>引入 C 函数的属性。</li></ul><p><em>Swift 3.1</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-3.1-released/">Swift 3.1 Released!</a>、<a href="https://swift.org/blog/swift-3.1-release-process/">Swift 3.1 Release Process</a></p><ul><li>序列新增 prefix(while:) 和 drop(while:) 方法，顺序遍历执行闭包里的逻辑判断，满足条件就返回，遇到不匹配就会停止遍历。prefix 返回满足条件的元素集合，drop 返回停止遍历之后那些元素集合。</li><li>泛型适用于嵌套类型。</li><li>类型的扩展可以使用约束条件，比如扩展数组时，加上元素为整数的约束，这样的扩展就只会对元素为整数的数组有效。</li></ul><p><em>Swift 4.0</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-4.0-released/">Swift 4.0 Released!</a>、<a href="https://swift.org/blog/swift-4.0-release-process/">Swift 4 Release Process</a></p><ul><li>加入 Codable 协议，更 Swifty 的编码和解码。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0167-swift-encoders.md">SE-0167 Swift Encoders</a></li><li>字符串加入三个双引号的支持，让多行字符串编写更加直观。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0168-multi-line-string-literals.md">SE-0168 Multi-Line String Literals</a></li><li>字符串变成集合，表示可以对字符串进行逐字遍历、map 和反转等操作。</li><li>keypaths 语法提升。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0161-key-paths.md">SE-0161 Smart KeyPaths: Better Key-Value Coding for Swift</a></li><li>集合加入 ..&lt;10 这样语法的单边切片。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0172-one-sided-ranges.md">SE-0172 One-sided Ranges</a></li><li>字典新增 mapValues，可 map 字典的值。通过 grouping 可对字典进行分组生成新字典，键和值都可以。从字典中取值，如果键对应无值，则使用通过 default 指定的默认值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md">SE-0165 Dictionary &amp; Set Enhancements</a></li></ul><p><em>Swift 4.1</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-4.1-released/">Swift 4.1 Released!</a>、<a href="https://swift.org/blog/swift-4.1-release-process/">Swift 4.1 Release Process</a></p><ul><li>Hashable 也不需要返回一个唯一的 hashValue 哈希值属性。</li><li>Equatable 和 Hashable 自动合成的提案参见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md">SE-0185 Synthesizing Equatable and Hashable conformance</a>。</li><li>两个自定类型比较是否相等时，不再需要比较每个属性，Swift 会自动生成 &#x3D;&#x3D; 方法，你只需要声明 Equatable 协议。</li><li>引入 KeyDecodingStrategy属性，其中 .convertFromSnakeCase 可以将下划线的命名转化成驼峰的命名。</li><li>引入条件符合性，只有满足一定条件才符合协议。比如扩展数组要求当里面元素满足某协议数组才符合这个协议。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md">SE-0143 Conditional conformances</a>。</li><li>引入 canImport 宏条件关键字，判断是否可以使用某库，以前只能通过判断操作系统平台来判断。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md">SE-0075 Adding a Build Configuration Import Test</a>。</li><li>新增能够去除为零项目的 compactMap()。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0187-introduce-filtermap.md">SE-0187 Introduce Sequence.compactMap(_:)</a></li><li>关联类型可以创建递归约束，提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0157-recursive-protocol-constraints.md">SE-0157 Support recursive constraints on associated types</a></li><li>targetEnvironment 环境的判断，比如模拟器。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0190-target-environment-platform-condition.md">SE-0190 Target environment platform condition</a> 。</li></ul><p><em>Swift 4.2</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-4.2-released/">Swift 4.2 Released!</a>、<a href="https://swift.org/blog/4.2-release-process/">Swift 4.2 Release Process</a></p><ul><li>新增动态成员查询，@dynamicMemberLookup 新属性，指示访问属性时调用一个已实现的处理动态查找的下标方法 subscript(dynamicMemeber:)，通过指定属性字符串名返回值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md">SE-0195 Introduce User-defined “Dynamic Member Lookup” Types</a></li><li>集合新加 removeAll(where:) 方法，过滤满足条件所有元素。比 filter 更高效。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0197-remove-where.md">SE-0197 Adding in-place removeAll(where:) to the Standard Library</a></li><li>布尔值增加 toggle() 方法，用来切换布尔值。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0199-bool-toggle.md">SE-0199 Adding toggle to Bool</a></li><li>引入 CaseIterable 协议，可以将枚举中所有 case 生成 allCases 数组。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0194-derived-collection-of-enum-cases.md">SE-0194 Derived Collection of Enum Cases</a></li><li>引入 #warning 和 #error 两个新的编译器指令。#warning 会产生一个警告，#error 会直接让编译出错。比如必须要填写 token 才能编译的话可以在设置 token 的代码前加上 #error 和说明。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0196-diagnostic-directives.md">SE-0196 Compiler Diagnostic Directives</a></li><li>新增加密安全的随机 API。直接在数字类型上调用 random() 方法生成随机数。shuffle() 方法可以对数组进行乱序重排。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md">SE-0202 Random Unification</a></li><li>更简单更安全的哈希协议，引入新的 Hasher 结构，通过 combine() 方法为哈希值添加更多属性，调用 finalize() 方法生成最终哈希值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0206-hashable-enhancements.md">SE-0206 Hashable Enhancements</a></li><li>集合增加 allSatisfy() 用来判断集合中的元素是否都满足了一个条件。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0207-containsOnly.md">SE-0207 Add an allSatisfy algorithm to Sequence</a></li></ul><p><em>Swift 5.0</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-5-released/">Swift 5 Released!</a>、<a href="https://swift.org/blog/5.0-release-process/">Swift 5.0 Release Process</a></p><ul><li>@dynamicCallable 动态可调用类型。通过实现 dynamicallyCall 方法来定义变参的处理。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md">SE-0216 Introduce user-defined dynamically “callable” types</a></li><li>新加 Result 类型用来处理错误。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md">SE-0235 Add Result to the Standard Library</a></li><li>新增原始字符串能力，在字符串前加上一个或多个#符号。里面的双引号和转义符号将不再起作用了，如果想让转义符起作用，需要在转义符后面加上#符号。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md">SE-0200 Enhancing String Literals Delimiters to Support Raw Text</a></li><li>自定义字符串插值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md">SE-0228 Fix ExpressibleByStringInterpolation</a></li><li>枚举新增 @unknown 用来区分固定的枚举和可能改变的枚举的能力。用于防止未来新增枚举属性会进行提醒提示完善每个 case 的处理。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md">SE-0192 Handling Future Enum Cases</a></li><li>compactMapValues() 对字典值进行转换和解包。可以解可选类型，并去掉 nil 值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0218-introduce-compact-map-values.md">SE-0218 Introduce compactMapValues to Dictionary</a></li><li>扁平化 try?。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0230-flatten-optional-try.md">SE-0230 Flatten nested optionals resulting from ‘try?’</a></li><li>isMultiple(of:) 方法检查一个数字是否是另一个数字的倍数。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0225-binaryinteger-iseven-isodd-ismultiple.md">SE-0225 Adding isMultiple to BinaryInteger</a></li></ul><p><em>Swift 5.1</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.1-released/">Swift 5.1 Released!</a>、<a href="https://swift.org/blog/5.1-release-process/">Swift 5.1 Release Process</a></p><ul><li>有序集合的 diff，通过 difference(from:) 方法，可以返回要删除哪些和添加哪些项目能够让两个集合相等。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0240-ordered-collection-diffing.md">SE-0240 Ordered Collection Diffing</a></li><li>属性包装。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0258-property-wrappers.md">SE-0258 Property Wrappers</a></li><li>不透明返回类型。函数调用者决定返回什么类型是泛型，函数自身决定返回什么类型使用不透明返回类型。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md">SE-0244 Opaque Result Types</a></li><li>初始化有默认值的属性可不设置。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0242-default-values-memberwise.md">SE-0242 Synthesize default values for the memberwise initializer</a></li><li>单行表达式函数隐式返回，返回一个单行表达式的函数可以不用 return 关键字。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0255-omit-return.md">SE-0255 Implicit returns from single-expression functions</a></li><li>在类、结构体和枚举里使用 Self，Self 可以指代包含的类型。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md">SE-0068 Expanding Swift Self to class members and value types</a></li><li>静态下标。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0254-static-subscripts.md">SE-0254 Static and class subscripts</a></li><li>枚举里有 none 的 case 编译器会提示换成 Optional.none。</li><li>引入未初始化数组。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0245-array-uninitialized-initializer.md">SE-0245 Add an Array Initializer with Access to Uninitialized Storage</a></li></ul><p><em>Swift 5.2</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.2-released/">Swift 5.2 Released!</a>、<a href="https://swift.org/blog/5.2-release-process/">Swift 5.2 Release Process</a></p><ul><li>自定义类型中实现了 callAsFunction() 的话，该类型的值就可以直接调用。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0253-callable.md">SE-0253 Callable values of user-defined nominal types</a></li><li>键路径表达式作为函数。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0249-key-path-literal-function-expressions.md">SE-0249 Key Path Expressions as Functions</a></li></ul><p><em>Swift 5.3</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.3-released/">Swift 5.3 released!</a>、<a href="https://swift.org/blog/5.3-release-process/">Swift 5.3 Release Process</a></p><ul><li>SPM 包管理资源，SPM 可以包含资源文件，比如多媒体或文本等。通过 Bundle.module 访问这些资源。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0271-package-manager-resources.md">SE-0271 Package Manager Resources</a></li><li>SPM 包里资源本地化。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0278-package-manager-localized-resources.md">SE-0278 Package Manager Localized Resources</a></li><li>SPM 可以整合二进制包依赖。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0272-swiftpm-binary-dependencies.md">SE-0272 Package Manager Binary Dependencies</a></li><li>SPM 可以设置特定平台的依赖。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0273-swiftpm-conditional-target-dependencies.md">SE-0273 Package Manager Conditional Target Dependencies</a></li><li>单个 catch 块中捕获多个 Error 的 case。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0276-multi-pattern-catch-clauses.md">SE-0276 Multi-Pattern Catch Clauses</a></li><li>支持多个尾部闭包。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0279-multiple-trailing-closures.md">SE-0279 Multiple Trailing Closures</a></li><li>符合 Comparable 协议的枚举可以进行比较。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0266-synthesized-comparable-for-enumerations.md">SE-0266 Synthesized Comparable conformance for enum types</a></li><li>很多地方可以不用加 self 来指代实例自己了。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0269-implicit-self-explicit-capture.md">SE-0269 Increase availability of implicit self in @escaping closures when reference cycles are unlikely to occur</a></li><li>@main 可以方便指定程序入口点。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0281-main-attribute.md">SE-0281 @main: Type-Based Program Entry Points</a></li><li>where 子句可以用到泛型和扩展函数中。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0267-where-on-contextually-generic.md">SE-0267 where clauses on contextually generic declarations</a></li><li>枚举的 case 也可以符合协议。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0280-enum-cases-as-protocol-witnesses.md">SE-0280 Enum cases as protocol witnesses</a></li><li>完善 didSet，性能提升。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0268-didset-semantics.md">SE-0268 Refine didSet Semantics</a></li><li>新增 Float16 类型，即半精度浮点类型。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0277-float16.md">SE-0277 Float16</a></li></ul><p><em>Swift 5.4</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.4-released/">Swift 5.4 Released!</a></p><ul><li>SPM 支持 @main。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0294-package-executable-targets.md">SE-0294 Declaring executable targets in Package Manifests</a></li><li>结果生成器（Result builders），通过传递序列创建新值，SwiftUI就是使用的结果生成器将多个视图生成一个视图。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md">SE-0289 Result builders</a></li><li>增强隐式成员语法，即使用了隐式的成员可以进行链式处理。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0287-implicit-member-chains.md">SE-0287 Extend implicit member syntax to cover chains of member references</a></li><li>函数开始有了使用多个变量参数的能力。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0284-multiple-variadic-parameters.md">SE-0284 Allow Multiple Variadic Parameters in Functions, Subscripts, and Initializers</a></li><li>嵌套函数可以重载，嵌套函数可以在声明函数之前调用他。</li><li>属性包装支持局部变量。</li></ul><p><em>Swift 5.5</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.5-released/">Swift 5.5 Released!</a></p><ul><li>Async await，用同步写法来处理异步。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296 Async&#x2F;await</a></li><li>Async sequences，异步序列上的循环能力。符合 AsyncSequence 协议的序列可以通过 for await 来进行异步循环。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298 Async&#x2F;Await: Sequences</a> </li><li>结构化的并发，使用 Task 和 TaskGroup 执行、取消和监听当前操作的方法。复杂的并发处理可以使用 withTaskGroup() 来创建一组 Task，addTask() 用来添加任务，cancelAll() 可以取消任务，addTask() 在取消任务后可以继续添加任务，如果使用了 addTaskUnlessCancelled() 方法就可以避免取消后会继续添加任务这种情况。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304 Structured concurrency</a></li><li>只读属性支持 async 和 throws 关键字。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0310-effectful-readonly-properties.md">SE-0310 Effectful Read-only Properties</a></li><li>async let，可以创建 await 子任务。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0317-async-let.md">SE-0317 async let bindings</a></li><li>以前异步代码的适配。比如 DispatchQueue.main.async，外部库可以通过 withCheckedContinuation() 函数来对以前异步代码进行封装。 提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">SE-0300 Continuations for interfacing async tasks with synchronous code</a></li><li>Actor，可以确保内部只能被一个线程访问，避免存储属性和方法出现竞争条件。提案在这 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306 Actors</a></li><li>全局 actors，通过 actor 将全局状态隔离出来，避免数据竞争。比如主线程 @MainActor 这个属性包装可以将属性和方法标记为只能在主线程上访问。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0316-global-actors.md">SE-0316 Global actors</a></li><li>Sendable 协议和 @Sendable 属性包装，目的是支持安全的将数据从一个线程传给另一个线程。Swift 的核心数据类型比如字符、集合等已符合 Sendable 协议。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0302-concurrent-value-and-concurrent-closures.md">SE-0302 Sendable and @Sendable closures</a></li><li>局部变量可以使用 lazy。</li><li>属性包装可以用到函数和闭包参数上。提案<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0293-extend-property-wrappers-to-function-and-closure-parameters.md">SE-0293 Extend Property Wrappers to Function and Closure Parameters</a></li><li>泛型支持静态成员查找。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0299-extend-generic-static-member-lookup.md">SE-0299 Extending Static Member Lookup in Generic Contexts</a></li><li>#if 用于后缀成员表达式。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0308-postfix-if-config-expressions.md">SE-0308 #if for postfix member expressions</a></li><li>CGFloat 和 Double 之间可以隐式转换。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0307-allow-interchangeable-use-of-double-cgfloat-types.md">SE-0307 Allow interchangeable use of CGFloat and Double types</a></li><li>Codable 支持关联值枚举。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0295-codable-synthesis-for-enums-with-associated-values.md">SE-0295 Codable synthesis for enums with associated values</a></li></ul><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>参考：</p><ul><li><a href="https://google.github.io/swift/">Swift Style Guide</a></li></ul><p>多用静态特性。swift 在编译期间所做的优化比 OC 要多，这是由于他的静态派发、泛型特化、写时复制这些静态特性决定的。另外通过 final  和 private 这样的表示可将动态特性转化为静态方式，编译开启 WMO 可以自动推导出哪些动态派发可转化为静态派发。</p><p>如何避免崩溃？</p><ul><li>字典：用结构体替代</li><li>Any：可用泛型或关联关联类型替代</li><li>as? ：少用 AnyObject，多用泛型或不透明类型</li><li>!：要少用</li></ul><p>好的实践？</p><ul><li>少用继承，多用 protocol</li><li>多用 extension 对自己代码进行管理</li></ul><h3 id="资料推荐"><a href="#资料推荐" class="headerlink" title="资料推荐"></a>资料推荐</h3><h4 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h4><ul><li>《Thinking in SwiftUI》</li><li>《Swift 进阶》</li><li>《函数式Swift》</li><li>《深入解析Mac OS X &amp; iOS操作系统》</li><li>《LLVM Techniques, Tips, and Best Practices Clang and Middle-End Libraries》</li><li>《Learn LLVM 12》</li><li>《Crafting Interpreters》</li><li>《TCP&#x2F;IP Illustrated》</li><li>《松本行弘的程序世界》</li><li>《现代操作系统》</li><li>《深入理解计算机系统》</li><li>《程序员的自我修养》</li><li>《Head First 设计模式》</li></ul><h3 id="三方库使用"><a href="#三方库使用" class="headerlink" title="三方库使用"></a>三方库使用</h3><h4 id="SQLite-swift-的使用"><a href="#SQLite-swift-的使用" class="headerlink" title="SQLite.swift 的使用"></a>SQLite.swift 的使用</h4><p>下面是 SQLite.swift 库的使用介绍，包括了数据库创建，表创建，表的添加、更新、删除、查找等处理方法</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SQLite</span><span class="token keyword">struct</span> <span class="token constant">DB</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> shared <span class="token operator">=</span> <span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token class-name">NSSearchPathForDirectoriesInDomains</span><span class="token punctuation">(</span>        <span class="token punctuation">.</span>applicationSupportDirectory<span class="token punctuation">,</span> <span class="token punctuation">.</span>userDomainMask<span class="token punctuation">,</span> <span class="token boolean">true</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token operator">!</span>    <span class="token keyword">let</span> <span class="token constant">BBDB</span><span class="token punctuation">:</span> <span class="token class-name">Connection</span><span class="token operator">?</span>    <span class="token keyword">private</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token constant">DB</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span>            <span class="token constant">BBDB</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token constant">DB</span><span class="token punctuation">.</span>path</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">/github.sqlite3"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>            <span class="token constant">BBDB</span> <span class="token operator">=</span> <span class="token nil constant">nil</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/// Swift 类型和 SQLite 类型对标如下：</span>        <span class="token comment">/// Int64 = INTEGER</span>        <span class="token comment">/// Double = REAL</span>        <span class="token comment">/// String = TEXT</span>        <span class="token comment">/// nil = NULL</span>        <span class="token comment">/// SQLite.Blob = BLOB</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">// 创建表</span>    <span class="token keyword">func</span> <span class="token function-definition function">cTbs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token class-name">ReposNotiDataHelper</span><span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">try</span> <span class="token class-name">DevsNotiDataHelper</span><span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>connectionErr        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token class-name">DBError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> connectionErr<span class="token punctuation">,</span> insertErr<span class="token punctuation">,</span> deleteErr<span class="token punctuation">,</span> searchErr<span class="token punctuation">,</span> updateErr<span class="token punctuation">,</span> nilInData<span class="token punctuation">&#125;</span><span class="token keyword">protocol</span> <span class="token class-name">DataHelperProtocol</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">associatedtype</span> <span class="token class-name">T</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-></span> <span class="token class-name">Int64</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">delete</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: 开发者更新提醒</span><span class="token keyword">typealias</span> <span class="token class-name">DBDevNoti</span> <span class="token operator">=</span> <span class="token punctuation">(</span>    login<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    lastReadId<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    unRead<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span><span class="token keyword">struct</span> <span class="token class-name">DevsNotiDataHelper</span><span class="token punctuation">:</span> <span class="token class-name">DataHelperProtocol</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> table <span class="token operator">=</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"devsNoti"</span></span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> login <span class="token operator">=</span> <span class="token class-name">Expression</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"login"</span></span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> lastReadId <span class="token operator">=</span> <span class="token class-name">Expression</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"lastReadId"</span></span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> unRead <span class="token operator">=</span> <span class="token class-name">Expression</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"unRead"</span></span><span class="token punctuation">)</span>    <span class="token keyword">typealias</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token class-name">DBDevNoti</span>        <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">guard</span> <span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token constant">BBDB</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>connectionErr        <span class="token punctuation">&#125;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> <span class="token omit keyword">_</span> <span class="token operator">=</span> <span class="token keyword">try</span> db<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ifNotExists<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>                t<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span>login<span class="token punctuation">,</span> unique<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                t<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span>lastReadId<span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span>                t<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span>unRead<span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token omit keyword">_</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>connectionErr        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end createTable</span>        <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">DBDevNoti</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-></span> <span class="token class-name">Int64</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">guard</span> <span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token constant">BBDB</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>connectionErr        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> insert <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>login <span class="token operator">&lt;-</span> i<span class="token punctuation">.</span>login<span class="token punctuation">,</span> lastReadId <span class="token operator">&lt;-</span> i<span class="token punctuation">.</span>lastReadId<span class="token punctuation">,</span> unRead <span class="token operator">&lt;-</span> i<span class="token punctuation">.</span>unRead<span class="token punctuation">)</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> rowId <span class="token operator">=</span> <span class="token keyword">try</span> db<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>insert<span class="token punctuation">)</span>            <span class="token keyword">guard</span> rowId <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>insertErr            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> rowId        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>insertErr        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end insert</span>        <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">delete</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">DBDevNoti</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">guard</span> <span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token constant">BBDB</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>connectionErr        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> query <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>login <span class="token operator">==</span> i<span class="token punctuation">.</span>login<span class="token punctuation">)</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token keyword">try</span> db<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">guard</span> tmp <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>deleteErr            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>deleteErr        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end delete</span>        <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">find</span><span class="token punctuation">(</span>sLogin<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-></span> <span class="token class-name">DBDevNoti</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">guard</span> <span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token constant">BBDB</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>connectionErr        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> query <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>login <span class="token operator">==</span> sLogin<span class="token punctuation">)</span>        <span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token keyword">try</span> db<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> items <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">DBDevNoti</span><span class="token punctuation">(</span>login<span class="token punctuation">:</span> i<span class="token punctuation">[</span>login<span class="token punctuation">]</span><span class="token punctuation">,</span> lastReadId<span class="token punctuation">:</span> i<span class="token punctuation">[</span>lastReadId<span class="token punctuation">]</span><span class="token punctuation">,</span> unRead<span class="token punctuation">:</span> i<span class="token punctuation">[</span>unRead<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token nil constant">nil</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end find</span>        <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">DBDevNoti</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">guard</span> <span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token constant">BBDB</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>connectionErr        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> query <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>login <span class="token operator">==</span> i<span class="token punctuation">.</span>login<span class="token punctuation">)</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">try</span> db<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>lastReadId <span class="token operator">&lt;-</span> i<span class="token punctuation">.</span>lastReadId<span class="token punctuation">,</span> unRead <span class="token operator">&lt;-</span> i<span class="token punctuation">.</span>unRead<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>updateErr            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>updateErr        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end update</span>        <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">DBDevNoti</span><span class="token punctuation">]</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">guard</span> <span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token constant">BBDB</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token class-name">DBError</span><span class="token punctuation">.</span>connectionErr        <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">DBDevNoti</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token keyword">try</span> db<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> items <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">DBDevNoti</span><span class="token punctuation">(</span>login<span class="token punctuation">:</span> i<span class="token punctuation">[</span>login<span class="token punctuation">]</span><span class="token punctuation">,</span> lastReadId<span class="token punctuation">:</span> i<span class="token punctuation">[</span>lastReadId<span class="token punctuation">]</span><span class="token punctuation">,</span> unRead<span class="token punctuation">:</span> i<span class="token punctuation">[</span>unRead<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> arr    <span class="token punctuation">&#125;</span> <span class="token comment">// end find all</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用时，可以在初始化时这么做：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: 初始化数据库</span>et db <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">.</span>shared<span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> db<span class="token punctuation">.</span><span class="token function">cTbs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建表</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用的操作示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> fd <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">ReposNotiDataHelper</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>sFullName<span class="token punctuation">:</span> r<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        reposDic<span class="token punctuation">[</span>fd<span class="token punctuation">.</span>fullName<span class="token punctuation">]</span> <span class="token operator">=</span> fd<span class="token punctuation">.</span>unRead    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> <span class="token omit keyword">_</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">ReposNotiDataHelper</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">DBRepoNoti</span><span class="token punctuation">(</span>fullName<span class="token punctuation">:</span> r<span class="token punctuation">.</span>id<span class="token punctuation">,</span> lastReadCommitSha<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span> unRead<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            reposDic<span class="token punctuation">[</span>r<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> reposDic        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> reposDic<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><ul><li>官方提供的两个例子，<a href="https://developer.apple.com/tutorials/swiftui/creating-a-macos-app">Creating a macOS App</a>，<a href="https://developer.apple.com/documentation/swiftui/building_a_great_mac_app_with_swiftui">Building a Great Mac App with SwiftUI</a> （有table和LazyVGrid的用法）。</li><li><a href="https://github.com/adamayoung/Movies">GitHub - adamayoung&#x2F;Movies: Movies and TV Shows App for iOS, iPadOS, watchOS and macOS</a> 使用了SwiftUI和Combine，电影数据使用的是<a href="https://www.themoviedb.org/">The Movie Database (TMDB)</a>的API</li></ul><h4 id="三栏结构"><a href="#三栏结构" class="headerlink" title="三栏结构"></a>三栏结构</h4><p>三栏结构架子搭建，代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">struct</span> <span class="token class-name">SwiftPamphletApp</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">SPSidebar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第二栏"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第三栏"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Swift 小册子"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token class-name">ToolbarItemPlacement</span><span class="token punctuation">.</span>navigation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">NSApp</span><span class="token punctuation">.</span>keyWindow<span class="token operator">?</span><span class="token punctuation">.</span>firstResponder<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">tryToPerform</span><span class="token punctuation">(</span><span class="token other-directive property">#selector</span><span class="token punctuation">(</span><span class="token class-name">NSSplitViewController</span><span class="token punctuation">.</span><span class="token function">toggleSidebar</span><span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Sidebar"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"sidebar.left"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">SPSidebar</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第一组"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第一项"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token class-name">SPList</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"列表1"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">badge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第二项"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token class-name">SPList</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"列表2"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第二组"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第三项"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token class-name">SPList</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"列表3"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第四项"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token class-name">SPList</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"列表4"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">listStyle</span><span class="token punctuation">(</span><span class="token class-name">SidebarListStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>minWidth<span class="token punctuation">:</span> <span class="token number">160</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>            <span class="token class-name">ToolbarItem</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Menu</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"2"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Label"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"slider.horizontal.3"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">SPList</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> searchText<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"内容</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">toolbar</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Add"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"plus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">navigationSubtitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"副标题"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $searchText<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果如下：<br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/142977421-bed5b5ae-01fe-471f-a951-63dd4338c97a.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/142977421-bed5b5ae-01fe-471f-a951-63dd4338c97a.png"></p><h4 id="全屏模式"><a href="#全屏模式" class="headerlink" title="全屏模式"></a>全屏模式</h4><p>将 NSSplitView 里的其中一个 NSView 设置为全屏和退出全屏的函数如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - 获取 NSSplitViewController</span><span class="token keyword">func</span> <span class="token function-definition function">splitVC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">NSSplitViewController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">NSApp</span><span class="token punctuation">.</span>keyWindow<span class="token operator">?</span><span class="token punctuation">.</span>contentView<span class="token operator">?</span><span class="token punctuation">.</span>subviews<span class="token punctuation">.</span>first<span class="token operator">?</span><span class="token punctuation">.</span>subviews<span class="token punctuation">.</span>first<span class="token operator">?</span><span class="token punctuation">.</span>subviews<span class="token punctuation">.</span>first <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">NSSplitView</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>delegate <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">NSSplitViewController</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 全屏</span><span class="token keyword">func</span> <span class="token function-definition function">fullScreen</span><span class="token punctuation">(</span>isEnter<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> isEnter <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 进入全屏</span>        <span class="token keyword">let</span> presOptions<span class="token punctuation">:</span>        <span class="token class-name">NSApplication</span><span class="token punctuation">.</span><span class="token class-name">PresentationOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>autoHideDock<span class="token punctuation">,</span><span class="token punctuation">.</span>autoHideMenuBar<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> optionsDictionary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">NSView</span><span class="token punctuation">.</span><span class="token class-name">FullScreenModeOptionKey</span><span class="token punctuation">.</span>fullScreenModeApplicationPresentationOptions <span class="token punctuation">:</span> <span class="token class-name">NSNumber</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> presOptions<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span><span class="token punctuation">]</span>                <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token function">splitVC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitViewItems<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>viewController<span class="token punctuation">.</span>view        v<span class="token punctuation">.</span><span class="token function">enterFullScreenMode</span><span class="token punctuation">(</span><span class="token class-name">NSScreen</span><span class="token punctuation">.</span>main<span class="token operator">!</span><span class="token punctuation">,</span> withOptions<span class="token punctuation">:</span> optionsDictionary<span class="token punctuation">)</span>        v<span class="token punctuation">.</span>wantsLayer <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 退出全屏</span>        <span class="token class-name">NSApp</span><span class="token punctuation">.</span>keyWindow<span class="token operator">?</span><span class="token punctuation">.</span>contentView<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">exitFullScreenMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end if</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">V</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> appVM <span class="token operator">=</span> <span class="token class-name">AppVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> isEnterFullScreen<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 全屏控制</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>            isEnterFullScreen<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            appVM<span class="token punctuation">.</span><span class="token function">fullScreen</span><span class="token punctuation">(</span>isEnter<span class="token punctuation">:</span> isEnterFullScreen<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> isEnterFullScreen <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"arrow.down.right.and.arrow.up.left"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"arrow.up.left.and.arrow.down.right"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="共享菜单"><a href="#共享菜单" class="headerlink" title="共享菜单"></a>共享菜单</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ShareView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Menu</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token class-name">NSPasteboard</span><span class="token punctuation">.</span>general                p<span class="token punctuation">.</span><span class="token function">declareTypes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>string<span class="token punctuation">]</span><span class="token punctuation">,</span> owner<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>                p<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> forType<span class="token punctuation">:</span> <span class="token punctuation">.</span>string<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"拷贝链接"</span></span><span class="token punctuation">)</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"doc.on.doc"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">NSSharingService</span><span class="token punctuation">.</span><span class="token function">sharingServices</span><span class="token punctuation">(</span>forItems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> item <span class="token keyword">in</span>                <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                    item<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>withItems<span class="token punctuation">:</span> <span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>title<span class="token punctuation">)</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span>nsImage<span class="token punctuation">:</span> item<span class="token punctuation">.</span>image<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"分享"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"square.and.arrow.up"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="剪贴板"><a href="#剪贴板" class="headerlink" title="剪贴板"></a>剪贴板</h4><p>添加和读取剪贴板的方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 读取剪贴板内容</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">NSPasteboard</span><span class="token punctuation">.</span>general<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>forType<span class="token punctuation">:</span> <span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token keyword">guard</span> <span class="token keyword">let</span> s <span class="token operator">=</span> s <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">// 设置剪贴板内容</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token class-name">NSPasteboard</span><span class="token punctuation">.</span>generalp<span class="token punctuation">.</span><span class="token function">declareTypes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>string<span class="token punctuation">]</span><span class="token punctuation">,</span> owner<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> forType<span class="token punctuation">:</span> <span class="token punctuation">.</span>string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Combine"><a href="#Combine" class="headerlink" title="Combine"></a>Combine</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="Combine-是什么？"><a href="#Combine-是什么？" class="headerlink" title="Combine 是什么？"></a>Combine 是什么？</h4><p>WWDC 2019苹果推出Combine，Combine是一种响应式编程范式，采用声明式的Swift API。</p><p>Combine 写代码的思路是你写代码不同于以往命令式的描述如何处理数据，Combine 是要去描述好数据会经过哪些逻辑运算处理。这样代码更好维护，可以有效的减少嵌套闭包以及分散的回调等使得代码维护麻烦的苦恼。</p><p>声明式和过程时区别可见如下代码：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 所有数相加</span><span class="token comment">// 命令式思维</span><span class="token keyword">func</span> <span class="token function-definition function">sum1</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> sum<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> v <span class="token keyword">in</span> arr <span class="token punctuation">&#123;</span>    sum <span class="token operator">+=</span> v  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span class="token comment">// 声明式思维</span><span class="token keyword">func</span> <span class="token function-definition function">sum2</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Combine 主要用来处理异步的事件和值。苹果 UI 框架都是在主线程上进行 UI 更新，Combine 通过 Publisher 的 receive 设置回主线程更新UI会非常的简单。</p><p>已有的 RxSwift 和 ReactiveSwift 框架和 Combine 的思路和用法类似。</p><p>Combine 的三个核心概念</p><ul><li>发布者</li><li>订阅者</li><li>操作符</li></ul><p>简单举个发布数据和类属性绑定的例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> pA <span class="token operator">=</span> <span class="token class-name">Just</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">let</span> <span class="token omit keyword">_</span> <span class="token operator">=</span> pA<span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span> v <span class="token keyword">in</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"pA is: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">v</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> pB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">.</span>publisher<span class="token keyword">let</span> <span class="token omit keyword">_</span> <span class="token operator">=</span> pB    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span> v <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"pB: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">v</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">AClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> p<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">didSet</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"property update to </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">p</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token class-name">AClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> <span class="token omit keyword">_</span> <span class="token operator">=</span> pB<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>p<span class="token punctuation">,</span> on<span class="token punctuation">:</span> o<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Combine-资料"><a href="#Combine-资料" class="headerlink" title="Combine 资料"></a>Combine 资料</h4><p>官方文档链接  <a href="https://developer.apple.com/documentation/combine">Combine | Apple Developer Documentation</a> 。还有  <a href="https://heckj.github.io/swiftui-notes/">Using Combine</a>  这里有大量使用示例，内容较全。官方讨论Combine的论坛  <a href="https://forums.swift.org/tag/combine">Topics tagged combine</a> 。StackOverflow上相关问题  <a href="https://stackoverflow.com/questions/tagged/combine">Newest ‘combine’ Questions</a> 。</p><p>WWDC上关于Combine的Session如下：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2019/722/">Introducing Combine</a> </li><li><a href="https://developer.apple.com/videos/play/wwdc2019/721/">Combine in Practice</a></li></ul><p>和Combine相关的Session：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2019/415/">Modern Swift API Design</a> </li><li><a href="https://developer.apple.com/videos/play/wwdc2019/226">Data Flow Through SwiftUI</a> </li><li><a href="https://developer.apple.com/videos/play/wwdc2019/711">Introducing Combine and Advances in Foundation</a> </li><li><a href="https://developer.apple.com/videos/play/wwdc2019/712/">Advances in Networking, Part 1</a> </li><li><a href="https://developer.apple.com/videos/play/wwdc2019/610/">Building Collaborative AR Experiences</a> </li><li><a href="https://developer.apple.com/videos/play/wwdc2019/223/">Expanding the Sensory Experience with Core Haptics</a></li></ul><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><h4 id="publisher"><a href="#publisher" class="headerlink" title="publisher"></a>publisher</h4><p>publisher 是发布者，sink 是订阅者</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">struct</span> <span class="token class-name">S</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> p1<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> p2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">S</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"2"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">.</span>publisher    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"array"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 输出<br> <pre class="line-numbers language-none"><code class="language-none"> array: receive subscription: ([戴铭的开发小册子.AppDelegate.(unknown context at $10ac82d20).(unknown context at $10ac82da4).S(p1: &quot;1&quot;, p2: &quot;one&quot;), 戴铭的开发小册子.AppDelegate.(unknown context at $10ac82d20).(unknown context at $10ac82da4).S(p1: &quot;2&quot;, p2: &quot;two&quot;)])array: request unlimitedarray: receive value: (S(p1: &quot;1&quot;, p2: &quot;one&quot;))S(p1: &quot;1&quot;, p2: &quot;one&quot;)array: receive value: (S(p1: &quot;2&quot;, p2: &quot;two&quot;))S(p1: &quot;2&quot;, p2: &quot;two&quot;)array: receive finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h4><p>Just 是发布者，发布的数据在初始化时完成</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">struct</span> <span class="token class-name">S</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> p1<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> p2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> pb <span class="token operator">=</span> <span class="token class-name">Just</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>pb    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"pb"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">pb: receive subscription: (Just)pb: request unlimitedpb: receive value: (S(p1: &quot;1&quot;, p2: &quot;one&quot;))S(p1: &quot;1&quot;, p2: &quot;one&quot;)pb: receive finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PassthroughSubject"><a href="#PassthroughSubject" class="headerlink" title="PassthroughSubject"></a>PassthroughSubject</h4><p>PassthroughSubject 可以传递多值，订阅者可以是一个也可以是多个，send 指明 completion 后，订阅者就没法接收到新发送的值了。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">struct</span> <span class="token class-name">S</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> p1<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> p2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token class-name">CError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> aE<span class="token punctuation">,</span> bE<span class="token punctuation">&#125;</span><span class="token keyword">let</span> ps1 <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">CError</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>ps1    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"ps1"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span> c <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"completion:"</span></span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// send 了 .finished 后会执行</span>    <span class="token punctuation">&#125;</span> receiveValue<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"receive:"</span></span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>completion<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token class-name">CError</span><span class="token punctuation">.</span>aE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 和 .finished 一样后面就不会发送了</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"2"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>completion<span class="token punctuation">:</span> <span class="token punctuation">.</span>finished<span class="token punctuation">)</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"3"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 多个订阅者</span><span class="token keyword">let</span> ps2 <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span> <span class="token comment">// 订阅之前 send 的数据没有订阅者可以接收</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> sb1 <span class="token operator">=</span> ps2    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"ps2 sb1"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>    <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span> <span class="token comment">// 这个 send 的值会被 sb1</span><span class="token keyword">let</span> sb2 <span class="token operator">=</span> ps2    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"ps2 sb2"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"four"</span></span><span class="token punctuation">)</span> <span class="token comment">// 这个 send 的值会被 sb1 和 sb2 接受</span>sb1<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span>sb2<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>completion<span class="token punctuation">:</span> <span class="token punctuation">.</span>finished<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">ps1: receive subscription: (PassthroughSubject)ps1: request unlimitedps1: receive value: (S(p1: &quot;1&quot;, p2: &quot;one&quot;))receive: S(p1: &quot;1&quot;, p2: &quot;one&quot;)ps1: receive error: (aE)completion: failure(戴铭的开发小册子.AppDelegate.(unknown context at $10b15ce10).(unknown context at $10b15cf3c).CError.aE)ps2 sb1: receive subscription: (PassthroughSubject)ps2 sb1: request unlimitedps2 sb1: receive value: (three)threeps2 sb2: receive subscription: (PassthroughSubject)ps2 sb2: request unlimitedps2 sb1: receive value: (four)fourps2 sb2: receive value: (four)fourps2 sb1: receive finishedps2 sb2: receive finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Empty"><a href="#Empty" class="headerlink" title="Empty"></a>Empty</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">struct</span> <span class="token class-name">S</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> p1<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> p2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> ept <span class="token operator">=</span> <span class="token class-name">Empty</span><span class="token operator">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 加上 completeImmediately: false 后面即使用 replaceEmpty 也不会接受值</span>ept    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"ept"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span> c <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"completion:"</span></span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> receiveValue<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"receive:"</span></span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span>ept<span class="token punctuation">.</span><span class="token function">replaceEmpty</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token class-name">S</span><span class="token punctuation">(</span>p1<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span> c <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"completion:"</span></span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> receiveValue<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"receive:"</span></span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">ept: receive subscription: (Empty)ept: request unlimitedept: receive finishedcompletion: finishedreceive: S(p1: &quot;1&quot;, p2: &quot;one&quot;)completion: finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CurrentValueSubject"><a href="#CurrentValueSubject" class="headerlink" title="CurrentValueSubject"></a>CurrentValueSubject</h4><p>CurrentValueSubject 的订阅者可以收到订阅时已发出的那条数据</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> cs <span class="token operator">=</span> <span class="token class-name">CurrentValueSubject</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>cs<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>cs<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> sb1 <span class="token operator">=</span> cs    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"cs sb1"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    cs<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"four"</span></span><span class="token punctuation">)</span>cs<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"five"</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> sb2 <span class="token operator">=</span> cs    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"cs sb2"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>cs<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"six"</span></span><span class="token punctuation">)</span>sb1<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span>sb2<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">cs sb1: receive subscription: (CurrentValueSubject)cs sb1: request unlimitedcs sb1: receive value: (three)threecs sb1: receive value: (four)fourcs sb1: receive value: (five)fivecs sb2: receive subscription: (CurrentValueSubject)cs sb2: request unlimitedcs sb2: receive value: (five)fivecs sb1: receive value: (six)sixcs sb2: receive value: (six)sixcs sb1: receive cancelcs sb2: receive cancel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="removeDuplicates"><a href="#removeDuplicates" class="headerlink" title="removeDuplicates"></a>removeDuplicates</h4><p>使用 removeDuplicates，重复的值就不会发送了。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> pb <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"four"</span></span><span class="token punctuation">]</span>    <span class="token punctuation">.</span>publisher<span class="token keyword">let</span> sb <span class="token operator">=</span> pb    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"sb"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    sb<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">sb: receive subscription: ([&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;three&quot;, &quot;four&quot;])sb: request unlimitedsb: receive value: (one)onesb: receive value: (two)twosb: receive value: (three)threesb: receive value: (three)sb: request max: (1) (synchronous)sb: receive value: (four)foursb: receive finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p>flatMap 能将多个发布者的值打平发送给订阅者</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">struct</span> <span class="token class-name">S</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> p<span class="token punctuation">:</span> <span class="token class-name">AnyPublisher</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token class-name">Just</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eraseToAnyPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token class-name">Just</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eraseToAnyPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token class-name">S</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> <span class="token class-name">Just</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eraseToAnyPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">let</span> pb <span class="token operator">=</span> <span class="token punctuation">[</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">]</span><span class="token punctuation">.</span>publisher    <span class="token keyword">let</span> sb <span class="token operator">=</span> pb    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"sb"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>flatMap <span class="token punctuation">&#123;</span>        <span class="token short-argument">$0</span><span class="token punctuation">.</span>p    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>sb<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">sb: receive subscription: ([戴铭的开发小册子.AppDelegate.(unknown context at $101167070).(unknown context at $1011670f4).S(p: AnyPublisher), 戴铭的开发小册子.AppDelegate.(unknown context at $101167070).(unknown context at $1011670f4).S(p: AnyPublisher), 戴铭的开发小册子.AppDelegate.(unknown context at $101167070).(unknown context at $1011670f4).S(p: AnyPublisher)])sb: request unlimitedsb: receive value: (S(p: AnyPublisher))onesb: receive value: (S(p: AnyPublisher))twosb: receive value: (S(p: AnyPublisher))threesb: receive finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p>append 会在发布者发布结束后追加发送数据，发布者不结束，append 的数据不会发送。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> pb <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> sb <span class="token operator">=</span> pb    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"sb"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"five"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"six"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>sb<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span>pb<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>pb<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>pb<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span>pb<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>completion<span class="token punctuation">:</span> <span class="token punctuation">.</span>finished<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">sb: receive subscription: ([戴铭的开发小册子.AppDelegate.(unknown context at $101167070).(unknown context at $1011670f4).S(p: AnyPublisher), 戴铭的开发小册子.AppDelegate.(unknown context at $101167070).(unknown context at $1011670f4).S(p: AnyPublisher), 戴铭的开发小册子.AppDelegate.(unknown context at $101167070).(unknown context at $1011670f4).S(p: AnyPublisher)])sb: request unlimitedsb: receive value: (S(p: AnyPublisher))onesb: receive value: (S(p: AnyPublisher))twosb: receive value: (S(p: AnyPublisher))threesb: receive finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="prepend"><a href="#prepend" class="headerlink" title="prepend"></a>prepend</h4><p>prepend 会在发布者发布前先发送数据，发布者不结束也不会受影响。发布者和集合也可以被打平发布。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> pb1 <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> pb2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"nine"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"ten"</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>publisher<span class="token keyword">let</span> sb <span class="token operator">=</span> pb1    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"sb"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span>pb2<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"seven"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"eight"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"five"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"six"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>sb<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span>pb1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>pb1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>pb1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">fivesixseveneightninetensb: receive subscription: (PassthroughSubject)sb: request unlimitedsb: receive value: (one)onesb: receive value: (two)twosb: receive value: (three)threesb: receive cancel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>订阅者可以通过 merge 合并多个发布者发布的数据</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> ps1 <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> ps2 <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> sb1 <span class="token operator">=</span> ps1<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> ps2<span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">)</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"2"</span></span><span class="token punctuation">)</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span>sb1<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">sb1: receive subscription: (Merge)sb1: request unlimitedsb1: receive value: (one)onesb1: receive value: (two)twosb1: receive value: (1)1sb1: receive value: (2)2sb1: receive value: (three)threesb1: receive cancel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>zip 会合并多个发布者发布的数据，只有当多个发布者都发布了数据后才会组合成一个数据给订阅者。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> ps1 <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> ps2 <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> ps3 <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> sb1 <span class="token operator">=</span> ps1<span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>ps2<span class="token punctuation">,</span> ps3<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"sb1"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">)</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"2"</span></span><span class="token punctuation">)</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"four"</span></span><span class="token punctuation">)</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"3"</span></span><span class="token punctuation">)</span>ps3<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一"</span></span><span class="token punctuation">)</span>sb1<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">sb1: receive subscription: (Zip)sb1: request unlimitedsb1: receive value: ((&quot;one&quot;, &quot;1&quot;, &quot;一&quot;))(&quot;one&quot;, &quot;1&quot;, &quot;一&quot;)sb1: receive cancel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><p>combineLatest 会合并多个发布者发布的数据，只有当多个发布者都发布了数据后才会触发合并，合并每个发布者发布的最后一个数据。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> ps1 <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> ps2 <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> ps3 <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> sb1 <span class="token operator">=</span> ps1<span class="token punctuation">.</span><span class="token function">combineLatest</span><span class="token punctuation">(</span>ps2<span class="token punctuation">,</span> ps3<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"sb1"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">)</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"2"</span></span><span class="token punctuation">)</span>ps1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"four"</span></span><span class="token punctuation">)</span>ps2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"3"</span></span><span class="token punctuation">)</span>ps3<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一"</span></span><span class="token punctuation">)</span>ps3<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"二"</span></span><span class="token punctuation">)</span>sb1<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">sb1: receive subscription: (CombineLatest)sb1: request unlimitedsb1: receive value: ((&quot;four&quot;, &quot;3&quot;, &quot;一&quot;))(&quot;four&quot;, &quot;3&quot;, &quot;一&quot;)sb1: receive value: ((&quot;four&quot;, &quot;3&quot;, &quot;二&quot;))(&quot;four&quot;, &quot;3&quot;, &quot;二&quot;)sb1: receive cancel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h4><p>Scheduler 处理队列。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">var</span> cc <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> sb1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>publisher    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"sb1"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">handleEvents</span><span class="token punctuation">(</span>receiveOutput<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"receiveOutput"</span></span><span class="token punctuation">,</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">)</span>    <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>sb1<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">sb1: receive subscription: ([1, 2, 3])sb1: request unlimitedsb1: receive value: (1)receiveOutput 1sb1: receive value: (2)receiveOutput 2sb1: receive value: (3)receiveOutput 3sb1: receive finished123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><p>网络URLSession.dataTaskPublisher使用例子如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> req <span class="token operator">=</span> <span class="token class-name">URLRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"http://www.starming.com"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token keyword">let</span> dpPublisher <span class="token operator">=</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">dataTaskPublisher</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> req<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个请求Github接口并展示结果的例子</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">//</span><span class="token comment">// CombineSearchAPI.swift</span><span class="token comment">// SwiftOnly (iOS)</span><span class="token comment">//</span><span class="token comment">// Created by Ming Dai on 2021/11/4.</span><span class="token comment">//</span><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">struct</span> <span class="token class-name">CombineSearchAPI</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">GithubSearchView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: Github View</span><span class="token keyword">struct</span> <span class="token class-name">GithubSearchView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> str<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Swift"</span></span>  <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> ss<span class="token punctuation">:</span> <span class="token class-name">SearchStore</span> <span class="token operator">=</span> <span class="token class-name">SearchStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> repos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GithubRepo</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"输入："</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $str<span class="token punctuation">,</span> onCommit<span class="token punctuation">:</span> fetch<span class="token punctuation">)</span>        <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>ss<span class="token punctuation">.</span>repos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> repo <span class="token operator">-></span> <span class="token class-name">GithubRepoCell</span> <span class="token keyword">in</span>          <span class="token class-name">GithubRepoCell</span><span class="token punctuation">(</span>repo<span class="token punctuation">:</span> repo<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"搜索"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token function">onAppear</span><span class="token punctuation">(</span>perform<span class="token punctuation">:</span> fetch<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>     <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>ss<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">GithubRepoCell</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> repo<span class="token punctuation">:</span> <span class="token class-name">GithubRepo</span>  <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>repo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>repo<span class="token punctuation">.</span>description<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: Github Service</span><span class="token keyword">struct</span> <span class="token class-name">GithubRepo</span><span class="token punctuation">:</span> <span class="token class-name">Decodable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span>  <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span>  <span class="token keyword">let</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">GithubResp</span><span class="token punctuation">:</span> <span class="token class-name">Decodable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> items<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GithubRepo</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">GithubSearchManager</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">func</span> <span class="token function-definition function">search</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">AnyPublisher</span><span class="token operator">&lt;</span><span class="token class-name">GithubResp</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">guard</span> <span class="token keyword">var</span> urlComponents <span class="token operator">=</span> <span class="token class-name">URLComponents</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://api.github.com/search/repositories"</span></span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">preconditionFailure</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"链接无效"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    urlComponents<span class="token punctuation">.</span>queryItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">URLQueryItem</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"q"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">]</span>         <span class="token keyword">guard</span> <span class="token keyword">let</span> url <span class="token operator">=</span> urlComponents<span class="token punctuation">.</span>url <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">preconditionFailure</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"链接无效"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> sch <span class="token operator">=</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"API"</span></span><span class="token punctuation">,</span> qos<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> attributes<span class="token punctuation">:</span> <span class="token punctuation">.</span>concurrent<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared      <span class="token punctuation">.</span><span class="token function">dataTaskPublisher</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> url<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> sch<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">tryMap</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> element <span class="token operator">-></span> <span class="token class-name">Data</span> <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> element<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> element<span class="token punctuation">.</span>data      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token class-name">GithubResp</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> decoder<span class="token punctuation">:</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span> <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>        <span class="token class-name">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eraseToAnyPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token function">eraseToAnyPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SearchStore</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">&#123;</span>  <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> query<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>  <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> repos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GithubRepo</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">private</span> <span class="token keyword">let</span> searchManager<span class="token punctuation">:</span> <span class="token class-name">GithubSearchManager</span>  <span class="token keyword">private</span> <span class="token keyword">var</span> cancellable <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">init</span><span class="token punctuation">(</span>searchManager<span class="token punctuation">:</span> <span class="token class-name">GithubSearchManager</span> <span class="token operator">=</span> <span class="token class-name">GithubSearchManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>searchManager <span class="token operator">=</span> searchManager    $query      <span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scheduler<span class="token punctuation">:</span> <span class="token class-name">RunLoop</span><span class="token punctuation">.</span>main<span class="token punctuation">)</span>      <span class="token punctuation">.</span>flatMap <span class="token punctuation">&#123;</span> query <span class="token operator">-></span> <span class="token class-name">AnyPublisher</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token class-name">GithubRepo</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span> <span class="token keyword">in</span>        <span class="token keyword">return</span> searchManager<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span> query<span class="token punctuation">)</span>          <span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span>            <span class="token short-argument">$0</span><span class="token punctuation">.</span>items          <span class="token punctuation">&#125;</span>          <span class="token punctuation">.</span><span class="token function">eraseToAnyPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>repos<span class="token punctuation">,</span> on<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>cancellable<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">func</span> <span class="token function-definition function">search</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>query <span class="token operator">=</span> str  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象基础网络能力，方便扩展，代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">//</span><span class="token comment">// CombineAPI.swift</span><span class="token comment">// SwiftOnly (iOS)</span><span class="token comment">//</span><span class="token comment">// Created by Ming Dai on 2021/11/4.</span><span class="token comment">//</span><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> <span class="token class-name">Combine</span><span class="token keyword">struct</span> <span class="token class-name">CombineAPI</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RepListView</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">RepListView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token attribute atrule">@ObservedObject</span> <span class="token keyword">var</span> vm<span class="token punctuation">:</span> <span class="token class-name">RepListVM</span>     <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">List</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>repos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> rep <span class="token keyword">in</span>        <span class="token class-name">RepListCell</span><span class="token punctuation">(</span>rep<span class="token punctuation">:</span> rep<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $vm<span class="token punctuation">.</span>isErrorShow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Alert</span> <span class="token keyword">in</span>        <span class="token class-name">Alert</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"出错了"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token function">navigationBarTitle</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"仓库"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>      vm<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">.</span>onAppear<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">RepListCell</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> rep<span class="token punctuation">:</span> <span class="token class-name">RepoModel</span>  <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">VStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AsyncImage</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> rep<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>avatarUrl <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> image <span class="token keyword">in</span>          image            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        placeholder<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">ProgressView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">rep<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>login</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">rep<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">rep<span class="token punctuation">.</span>stargazersCount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">String</span><span class="token punctuation">(</span>describing<span class="token punctuation">:</span> rep<span class="token punctuation">.</span>description <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">String</span><span class="token punctuation">(</span>describing<span class="token punctuation">:</span> rep<span class="token punctuation">.</span>language <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: Repo View Model</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RepListVM</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span><span class="token punctuation">,</span> <span class="token class-name">UnidirectionalDataFlowType</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">typealias</span> <span class="token class-name">InputType</span> <span class="token operator">=</span> <span class="token class-name">Input</span>  <span class="token keyword">private</span> <span class="token keyword">var</span> cancellables<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">AnyCancellable</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment">// Input</span>  <span class="token keyword">enum</span> <span class="token class-name">Input</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> onAppear  <span class="token punctuation">&#125;</span>  <span class="token keyword">func</span> <span class="token function-definition function">apply</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> input<span class="token punctuation">:</span> <span class="token class-name">Input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> input <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token punctuation">.</span>onAppear<span class="token punctuation">:</span>      onAppearSubject<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token keyword">let</span> onAppearSubject <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// Output</span>  <span class="token attribute atrule">@Published</span> <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> repos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">RepoModel</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> isErrorShow <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> errorMessage <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>  <span class="token attribute atrule">@Published</span> <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> shouldShowIcon <span class="token operator">=</span> <span class="token boolean">false</span>     <span class="token keyword">private</span> <span class="token keyword">let</span> resSubject <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">SearchRepoModel</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">let</span> errSubject <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">APISevError</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token keyword">let</span> apiSev<span class="token punctuation">:</span> <span class="token class-name">APISev</span>     <span class="token keyword">init</span><span class="token punctuation">(</span>apiSev<span class="token punctuation">:</span> <span class="token class-name">APISev</span> <span class="token operator">=</span> <span class="token class-name">APISev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>apiSev <span class="token operator">=</span> apiSev    <span class="token function">bindInputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">bindOutputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>     <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">bindInputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> req <span class="token operator">=</span> <span class="token class-name">SearchRepoRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> resPublisher <span class="token operator">=</span> onAppearSubject      <span class="token punctuation">.</span>flatMap <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>apiSev<span class="token punctuation">]</span> <span class="token keyword">in</span>        apiSev<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> req<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token keyword">catch</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> error <span class="token operator">-></span> <span class="token class-name">Empty</span><span class="token operator">&lt;</span><span class="token class-name">SearchRepoModel</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span> <span class="token keyword">in</span>            <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>errSubject<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> resStream <span class="token operator">=</span> resPublisher      <span class="token punctuation">.</span><span class="token function">share</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>resSubject<span class="token punctuation">)</span>         <span class="token comment">// 其它异步事件，比如日志等操作都可以做成Stream加到下面数组内。</span>    cancellables <span class="token operator">+=</span> <span class="token punctuation">[</span>resStream<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>     <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">bindOutputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> repStream <span class="token operator">=</span> resSubject      <span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span>        <span class="token short-argument">$0</span><span class="token punctuation">.</span>items      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>repos<span class="token punctuation">,</span> on<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> errMsgStream <span class="token operator">=</span> errSubject      <span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> error <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token keyword">in</span>        <span class="token keyword">switch</span> error <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>resError<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"network error"</span></span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>parseError<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"parse error"</span></span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>errorMessage<span class="token punctuation">,</span> on<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> errStream <span class="token operator">=</span> errSubject      <span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>        <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>isErrorShow<span class="token punctuation">,</span> on<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span>    cancellables <span class="token operator">+=</span> <span class="token punctuation">[</span>repStream<span class="token punctuation">,</span>errStream<span class="token punctuation">,</span>errMsgStream<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">protocol</span> <span class="token class-name">UnidirectionalDataFlowType</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">associatedtype</span> <span class="token class-name">InputType</span>  <span class="token keyword">func</span> <span class="token function-definition function">apply</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> input<span class="token punctuation">:</span> <span class="token class-name">InputType</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: Repo Request and Models</span><span class="token keyword">struct</span> <span class="token class-name">SearchRepoRequest</span><span class="token punctuation">:</span> <span class="token class-name">APIReqType</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">typealias</span> <span class="token class-name">Res</span> <span class="token operator">=</span> <span class="token class-name">SearchRepoModel</span>     <span class="token keyword">var</span> path<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"/search/repositories"</span></span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> qItems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">URLQueryItem</span><span class="token punctuation">]</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>      <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"q"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Combine"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"order"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"desc"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">SearchRepoModel</span><span class="token punctuation">:</span> <span class="token class-name">Decodable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> items<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">RepoModel</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">RepoModel</span><span class="token punctuation">:</span> <span class="token class-name">Decodable</span><span class="token punctuation">,</span> <span class="token class-name">Hashable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token class-name">Int64</span>  <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span>  <span class="token keyword">var</span> fullName<span class="token punctuation">:</span> <span class="token class-name">String</span>  <span class="token keyword">var</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>  <span class="token keyword">var</span> stargazersCount<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">var</span> language<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>  <span class="token keyword">var</span> owner<span class="token punctuation">:</span> <span class="token class-name">OwnerModel</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">OwnerModel</span><span class="token punctuation">:</span> <span class="token class-name">Decodable</span><span class="token punctuation">,</span> <span class="token class-name">Hashable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token class-name">Int64</span>  <span class="token keyword">var</span> login<span class="token punctuation">:</span> <span class="token class-name">String</span>  <span class="token keyword">var</span> avatarUrl<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: API Request Fundation</span><span class="token keyword">protocol</span> <span class="token class-name">APIReqType</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">associatedtype</span> <span class="token class-name">Res</span><span class="token punctuation">:</span> <span class="token class-name">Decodable</span>  <span class="token keyword">var</span> path<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> qItems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">URLQueryItem</span><span class="token punctuation">]</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">protocol</span> <span class="token class-name">APISevType</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">func</span> <span class="token function-definition function">response</span><span class="token operator">&lt;</span><span class="token class-name">Request</span><span class="token operator">></span><span class="token punctuation">(</span>from req<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">AnyPublisher</span><span class="token operator">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">.</span><span class="token class-name">Res</span><span class="token punctuation">,</span> <span class="token class-name">APISevError</span><span class="token operator">></span> <span class="token keyword">where</span> <span class="token class-name">Request</span><span class="token punctuation">:</span> <span class="token class-name">APIReqType</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">APISev</span><span class="token punctuation">:</span> <span class="token class-name">APISevType</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">let</span> rootUrl<span class="token punctuation">:</span> <span class="token constant">URL</span>  <span class="token keyword">init</span><span class="token punctuation">(</span>rootUrl<span class="token punctuation">:</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://api.github.com"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">self</span><span class="token punctuation">.</span>rootUrl <span class="token operator">=</span> rootUrl  <span class="token punctuation">&#125;</span>     <span class="token keyword">func</span> <span class="token function-definition function">response</span><span class="token operator">&lt;</span><span class="token class-name">Request</span><span class="token operator">></span><span class="token punctuation">(</span>from req<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">AnyPublisher</span><span class="token operator">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">.</span><span class="token class-name">Res</span><span class="token punctuation">,</span> <span class="token class-name">APISevError</span><span class="token operator">></span> <span class="token keyword">where</span> <span class="token class-name">Request</span> <span class="token punctuation">:</span> <span class="token class-name">APIReqType</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> req<span class="token punctuation">.</span>path<span class="token punctuation">,</span> relativeTo<span class="token punctuation">:</span> rootUrl<span class="token punctuation">)</span><span class="token operator">!</span>    <span class="token keyword">var</span> comp <span class="token operator">=</span> <span class="token class-name">URLComponents</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> path<span class="token punctuation">,</span> resolvingAgainstBaseURL<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">!</span>    comp<span class="token punctuation">.</span>queryItems <span class="token operator">=</span> req<span class="token punctuation">.</span>qItems    <span class="token function">print</span><span class="token punctuation">(</span>comp<span class="token punctuation">.</span>url<span class="token operator">?</span><span class="token punctuation">.</span>description <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"url wrong"</span></span><span class="token punctuation">)</span>    <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token class-name">URLRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> comp<span class="token punctuation">.</span>url<span class="token operator">!</span><span class="token punctuation">)</span>    req<span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"application/json"</span></span><span class="token punctuation">,</span> forHTTPHeaderField<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Content-Type"</span></span><span class="token punctuation">)</span>         <span class="token keyword">let</span> de <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    de<span class="token punctuation">.</span>keyDecodingStrategy <span class="token operator">=</span> <span class="token punctuation">.</span>convertFromSnakeCase    <span class="token keyword">return</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">dataTaskPublisher</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> req<span class="token punctuation">)</span>      <span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> res <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>decoding<span class="token punctuation">:</span> data<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> UTF8<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> data      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span>mapError <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>        <span class="token class-name">APISevError</span><span class="token punctuation">.</span>resError      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token punctuation">.</span><span class="token class-name">Res</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> decoder<span class="token punctuation">:</span> de<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">mapError</span><span class="token punctuation">(</span><span class="token class-name">APISevError</span><span class="token punctuation">.</span>parseError<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token class-name">RunLoop</span><span class="token punctuation">.</span>main<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">eraseToAnyPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token class-name">APISevError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> resError  <span class="token keyword">case</span> <span class="token function">parseError</span><span class="token punctuation">(</span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h4><p>例子如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">KVOObject</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span> <span class="token punctuation">&#123;</span>  <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> intV<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> boolV<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token class-name">KVOObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> <span class="token omit keyword">_</span> <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">publisher</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>intV<span class="token punctuation">)</span>  <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span> v <span class="token keyword">in</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"value : </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">v</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h4><p>使用例子如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token class-name">Notification</span><span class="token punctuation">.</span><span class="token class-name">Name</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> noti <span class="token operator">=</span> <span class="token class-name">Notification</span><span class="token punctuation">.</span><span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"nameofnoti"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> notiPb <span class="token operator">=</span> <span class="token class-name">NotificationCenter</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">publisher</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>noti<span class="token punctuation">,</span> object<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>退到后台接受通知的例子如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> storage <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">AnyCancellable</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">NotificationCenter</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">publisher</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">UIWindowScene</span><span class="token punctuation">.</span>didEnterBackgroundNotification<span class="token punctuation">)</span>      <span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"enter background"</span></span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>storage<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h4><p>使用方式如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> timePb <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>every<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> on<span class="token punctuation">:</span> <span class="token class-name">RunLoop</span><span class="token punctuation">.</span>main<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token keyword">let</span> timeSk <span class="token operator">=</span> timePb<span class="token punctuation">.</span>sink <span class="token punctuation">&#123;</span> r <span class="token keyword">in</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"r is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">r</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> cPb <span class="token operator">=</span> timePb<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><h4 id="Swift-Concurrency-是什么？"><a href="#Swift-Concurrency-是什么？" class="headerlink" title="Swift Concurrency 是什么？"></a>Swift Concurrency 是什么？</h4><p>ABI 稳定后，Swift 的核心团队可以开始关注 Swift 语言一直缺失的原生并发能力了。最初是由 <a href="https://twitter.com/clattner_llvm">Chris Lattner</a> 在17年发的 <a href="https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782">Swift并发宣言</a> ，从此开阔了大家的眼界。后来 Swift Evolution 社区讨论了十几个提案，几十个方案，以及几百页的设计文件，做了大量的改进，社区中用户积极的参与反馈，Chris 也一直在 Evolution 中积极的参与设计。</p><p>Swift Concurrency 的实现用了 <a href="https://llvm.org/docs/Coroutines.html">LLVM的协程</a> 把 async&#x2F;await 函数转换为基于回调的代码，这个过程发生在编译后期，这个阶段你的代码都没法辨识了。异步的函数被实现为 coroutines，在每次异步调用时，函数被分割成可调用的函数部分和后面恢复的部分。coroutine 拆分的过程发生在生成LLVM IR阶段。Swift使用了哪些带有自定义调用约定的函数保证尾部调用，并专门为Swift进行了调整。</p><p>Swift Concurrency 不是建立在 GCD 上，而是使用的一个全新的线程池。GCD 中启动队列工作会很快在提起线程，一个队列阻塞了线程，就会生成一个新线程。基于这种机制 GCD 线程数很容易比 CPU 核心数量多，线程多了，线程就会有大量的调度开销，大量的上下文切换，会使 CPU 运行效率降低。而 Swift Concurrency 的线程数量不会超过 CPU 内核，将上下文切换放到同一个线程中去做。为了实现线程不被阻塞，需要通过语言特性来做。做法是，每个线程都有一个堆栈记录函数调用情况，一个函数占一个帧。函数返回后，这个函数所占的帧就会从堆栈弹出。await 的 async 函数被作为异步帧保存在堆上等待恢复，而不阻碍其它函数入栈执行。在 await 后运行的代码叫 continuation，continuation 会在要恢复时放回到线程的堆栈里。异步帧会根据需要放回栈上。在一个异步函数中调用同步代码将添加帧到线程的堆栈中。这样线程就能够一直向前跑，而不用创建更多线程减少调度。</p><p>Douglas 在 Swift 论坛里发的 Swift Concurrency 下个版本的规划贴  <a href="https://forums.swift.org/t/concurrency-in-swift-5-and-6/49337">Concurrency in Swift 5 and 6</a> ，论坛里还有一个帖子是专门用来 <a href="https://forums.swift.org/t/swift-concurrency-feedback-wanted/49336">征集Swift Concurrency意见</a> 的，帖子本身列出了 Swift Concurrency 相关的所有提案，也提出欢迎有新提案发出来，除了这些提案可以看外，帖子回复目前已经过百，非常热闹，可以看出大家对 Swift Concurrency 的关注度相当的高。</p><p>非常多的人参与了 Swift Concurrency 才使其看起来和用起来那么简单。Doug Gregor 在参与 John Sundell 的播客后，发了很多条推聊 Swift Concurrency，可以看到参与的人非常多，可见背后付出的努力有多大。下面我汇总了 Doug Gregor 在推上发的一些信息，你通过这些信息也可以了解 Swift Concurrency 幕后信息，所做的事和负责的人。</p><p> <a href="https://twitter.com/pathofshrines">@pathofshrines</a> 是 Swift Concurrency 整体架构师，包括低级别运行时和编译器相关细节。 <a href="https://twitter.com/illian">@illian</a> 是 async sequences、stream 和 Fundation 的负责人。 <a href="https://twitter.com/optshiftk">@optshiftk</a> 对 UI 和并发交互的极好的洞察力带来了很棒的 async 接口， <a href="https://twitter.com/phausler">@phausler</a> 带来了 async sequences。Arnold Schwaighofer、 <a href="https://twitter.com/neightchan">@neightchan</a> 、 <a href="https://twitter.com/typesanitizer">@typesanitizer</a> 还有 Tim Northover 实现了 async calling convention。</p><p> <a href="https://twitter.com/ktosopl">@ktosopl</a> 有很深厚的 actor、分布式计算和 Swift-on-Server 经验，带来了 actor 系统。Erik Eckstein 为 async 函数和actors建立了关键的优化和功能。</p><p>SwiftUI是 <a href="https://twitter.com/ricketson_">@ricketson_</a> 和 <a href="https://twitter.com/luka_bernardi">@luka_bernardi</a> 完成的async接口。async I&#x2F;O的接口是 <a href="https://twitter.com/Catfish_Man">@Catfish_Man</a> 完成的。 <a href="https://twitter.com/slava_pestov">@slava_pestov</a> 处理了 Swift 泛型问题，还指导其他人编译器实现的细节。async 重构工具是Ben Barham 做的。大量代码移植到 async 是由 <a href="https://twitter.com/AirspeedSwift">@AirspeedSwift</a> 领导，由 Angela Laar，Clack Cole，Nicole Jacques 和 <a href="https://twitter.com/mishaldshah">@mishaldshah</a> 共同完成的。</p><p> <a href="https://twitter.com/lorentey">@lorentey</a> 负责 Swift 接口的改进。 <a href="https://twitter.com/jckarter">@jckarter</a> 有着敏锐的语言设计洞察力，带来了语言设计经验和编译器及运行时实现技能。 <a href="https://twitter.com/mikeash">@mikeash</a>  也参与了运行时开发中。操作系统的集成是 <a href="https://twitter.com/rokhinip">@rokhinip</a> 完成的， <a href="https://twitter.com/chimz">@chimz</a> 提供了关于 Dispatch 和 OS 很好的建议，Pavel Yaskevich 和<br> <a href="https://ming1016.github.io/2021/07/24/my-little-idea-about-writing-technical-article/">@hollyborla</a> 进行了并发所需要关键类型检查器的改进。 <a href="https://twitter.com/kastiglione">@kastiglione</a> 、Adrian Prantl和 <a href="https://twitter.com/fred_riss">@fred_riss</a> 实现了调试。 <a href="https://twitter.com/etcwilde">@etcwilde</a> 和 <a href="https://twitter.com/call1cc">@call1cc</a> 实现了语义模型中的重要部分。</p><p> <a href="https://twitter.com/evonox">@evonox</a> 负责了服务器Linux 的支持。 <a href="https://twitter.com/compnerd">@compnerd</a> 将 Swift Concurrency 移植到了 Windows。</p><p>Swift Concurrency 模型简单，细节都被隐藏了，比 Kotlin 和 C++的 Coroutine 接口要简洁很多。比如 Task 接口形式就很简洁。Swift Concurrency 大体可分为 async&#x2F;await、Async Sequences、结构化并发和 Actors。</p><h4 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h4><p>通过类似 throws 语法的 async 来指定函数为异步函数，异步函数才能够使用 await，使用异步函数要用 await。await 修饰在 suspension point 时当前线程可以让给其它任务执行，而不用阻塞当前线程，等 await 后面的函数执行完成再回来继续执行，这里需要注意的是回来执行不一定是在离开时的线程上。async&#x2F;await 提案是 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296</a> 。如果想把现有的异步开发带到 async&#x2F;await 世界，请使用 withCheckedThrowingContinuation。</p><p>async&#x2F;await 还有一个非常明显的好处，就是不会再有[weak self] dance 了。</p><h4 id="Async-Sequences"><a href="#Async-Sequences" class="headerlink" title="Async Sequences"></a>Async Sequences</h4><p>AsyncSequence 的使用方式是 for-await-in 和 for-try-await-in，系统提供了一些接口，如下：</p><ul><li>FileHandle.standardInput.bytes.lines</li><li>URL.lines</li><li>URLSession.shared.data(from: URL)</li><li>let (localURL, _ ) &#x3D; try await session.download(from: url) 下载和get请求数据区别是需要边请求边存储数据以减少内存占用</li><li>let (responseData, response) &#x3D; try await session.upload(for: request, from: data)</li><li>URLSession.shared.bytes(from: URL)</li><li>NotificationCenter.default.notifications</li></ul><h4 id="结构化并发"><a href="#结构化并发" class="headerlink" title="结构化并发"></a>结构化并发</h4><p>使用这些接口可以一边接收数据一边进行显示，AsyncSequence 的提案是 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298</a> （Swift 5.5可用）。AsyncStream 是创建自己异步序列的最简单的方法，处理迭代、取消和缓冲。AsyncStream 正在路上，提案是 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md">SE-0314</a> 。</p><p>Task 为一组并发任务创建一个运行环境，async let 可以让任务并发执行，结构化并发（Structured concurrency，提案在路上 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304</a> ）withTaskGroup 中 group.async 可以将并发任务进行分组。</p><h4 id="Actors"><a href="#Actors" class="headerlink" title="Actors"></a>Actors</h4><p>我们写的程序会在进程中被拆成一个一个小指令，这些指令会在某刻会一个接一个同步的或者并发的执行。系统会用多个线程执行并行的任务，执行顺序是调度器来管理的，现代多核可以同时处理多个线程，当一个资源在多个线程上同时被更改时就会出问题。并发任务对数据资源操作容易造成数据竞争，以前需要手动放到串行队列、使用锁、调度屏障或 Atomics 的方式来避免。以前处理容易导致昂贵的上下文切换，过多线程容易导致线程爆炸，容易意外阻断线程导致后面代码没法执行，多任务相互的等待造成了死锁，block 和内存引用容易出错等等问题。</p><p>现在 Swift Concurrency 可以通过 actor 来创建一个区域，在这个区域会自动进行数据安全保护，保证一定时间只有一个线程访问里面数据，防止数据竞争。actor 内部对成员访问是同步的，成员默认是隔离的，actor 外部对 actor 内成员的访问只能是异步的，隐式同步以防止数据竞争。MainActor 继承自能确保全局唯一实例的 GlobalActor，保证任务在主线程执行，这样你就可以抛弃掉在你的 ViewModel 里写 DispatchQueue.main.async 了。</p><p>Actors 的概念通常被用于分布式计算，Actor 模型参看 <a href="https://en.wikipedia.org/wiki/Actor_model">Wikipedia</a> 里的详细解释，Swift 中的实现效果也非常的理想。Actors 的提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306</a> 已在 Swift 5.5落实。</p><p>很多语言都支持 actors 还有 async&#x2F;await，实现的方式也类似，actor 使用的不是锁，而是用的 async&#x2F;await 这样能够在一个线程中切换上下文来避免线程空闲的线程模型。actor 还利用编译器，提前做会引起并发问题的检查。</p><p>actor 是遵循 Sendable 协议的，只有结构体和 final 类才能够遵循 Sendable，继承于 Sendable 协议的 Excutor 协议表示方法本身，SerialExecutor 表示以串行方式执行。actor 使用 C++写的，源码在 <a href="https://github.com/apple/swift/blob/main/stdlib/public/Concurrency/Actor.cpp">这里</a> ，可以看到 actor 主要是通过控制各个 job 执行的状态的管理器。job 执行优先级来自 Task 对象，排队时需要确保高优 job 先被执行。全局 Executor 用来为 job 排队，通知 actor 拥有或者放弃线程，实现在 <a href="https://github.com/apple/swift/blob/main/stdlib/public/Concurrency/GlobalExecutor.cpp">这里</a> 。由于等待而放弃当前线程让其他 actor 执行的 actor，在收到全局 Executor 创建一个新的 job 的通知，使其可以进入一个可能不同线程，这个过程就是并发模型中描述的 Actor Reentrancy。</p><h4 id="相关提案"><a href="#相关提案" class="headerlink" title="相关提案"></a>相关提案</h4><p>所有相关提案清单如下：</p><ul><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296: Async&#x2F;await</a>   <a href="https://kemchenj.github.io/2021-03-06/">【译】SE-0296 Async&#x2F;await</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0317-async-let.md">SE-0317: async let</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">SE-0300: Continuations for interfacing async tasks with synchronous code</a>   <a href="https://kemchenj.github.io/2021-03-31/">【译】SE-0300 Continuation – 执行同步代码的异步任务接口</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0302-concurrent-value-and-concurrent-closures.md">SE-0302: Sendable and @Sendable closures</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298: Async&#x2F;Await: Sequences</a>   <a href="https://kemchenj.github.io/2021-03-10/">【译】SE-0298 Async&#x2F;Await 序列</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304: Structured concurrency</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306: Actors</a>   <a href="https://kemchenj.github.io/2021-04-25/">【译】SE-0306 Actors</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0313-actor-isolation-control.md">SE-0313: Improved control over actor isolation</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0297-concurrency-objc.md">SE-0297: Concurrency Interoperability with Objective-C</a>   <a href="https://kemchenj.github.io/2021-03-07/">【译】SE-0297 Concurrency 与 Objective-C 的交互</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md">SE-0314: AsyncStream and AsyncThrowingStream</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0316-global-actors.md">SE-0316: Global actors</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0310-effectful-readonly-properties.md">SE-0310: Effectful read-only properties</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0311-task-locals.md">SE-0311: Task Local Values</a> </li><li><a href="https://forums.swift.org/t/support-custom-executors-in-swift-concurrency/44425">Custom Executors</a></li></ul><h4 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h4><p>如果打算尝试 Swift Concurrency 的话，按照先后顺序，可以先看官方手册介绍文章 <a href="https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html">Concurrency</a> 。再看 <a href="https://developer.apple.com/videos/play/wwdc2021/10132/">Meet async&#x2F;await in Swift</a> 这个Session，了解背后原理看 <a href="https://developer.apple.com/videos/play/wwdc2021/10134">Explore structured concurrency in Swift</a> 。动手照着试示例代码，看Paul的 <a href="https://www.hackingwithswift.com/quick-start/concurrency">Swift Concurrency by Example</a> 这个系列。接着看 <a href="https://developer.apple.com/videos/play/wwdc2021/10133">Protect mutable state with Swift actors</a> 来了解 actors 怎么防止数据竞争。通过 <a href="https://developer.apple.com/videos/play/wwdc2021/10019">Discover concurrency in SwiftUI</a> 看 concurrency 如何在 SwiftUI 中使用， <a href="https://developer.apple.com/videos/play/wwdc2021/10095">Use async&#x2F;await with URLSession</a> 来看怎么在 URLSession 中使用 async&#x2F;await。最后听听负责 Swift Concurrency 的 Doug Gregor 参加的一个 <a href="https://www.swiftbysundell.com/podcast/99/">播客的访谈</a> ，了解下 Swift Concurrency 背后的故事。</p><h4 id="Swift-Concurrency-和-Combine"><a href="#Swift-Concurrency-和-Combine" class="headerlink" title="Swift Concurrency 和 Combine"></a>Swift Concurrency 和 Combine</h4><p>由于 Swift Concurrency 的推出和大量的 Session 发布，特别是 <a href="https://developer.apple.com/documentation/swift/asyncsequence/">AsyncSequence</a> 的出现，以及正在路上的 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md">AsyncStream、AsyncThrowingStream</a> 和 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">continuation</a> 提案（在Xcode 13.0 beta 3 AsyncStream 正式 <a href="https://developer.apple.com/documentation/swift/asyncstream?changes=latest_beta">release</a> ），这些越来越多和 Combine 功能重叠的特性出现在 Swift Concurrency 蓝图里时，大家开始猜测是否 Combine 会被 Swift Concurrency 替代。关于未来是 Swift Concurrency 还是 Combine，我的感觉是，Combine 更侧重在响应式编程上，而响应式编程并不是所有开发人员都会接受的，而 Swift Concurrency 是所有人都愿意接受的开发方式，从 Swift Concurrency 推出后开发者使用的数量和社区反应火热程度来看都比 Combine 要大。在苹果对 Combine 有下一步动作之前，我还是更偏向 Swift Concurrency。</p><h2 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><h4 id="SwiftUI-是什么？"><a href="#SwiftUI-是什么？" class="headerlink" title="SwiftUI 是什么？"></a>SwiftUI 是什么？</h4><p>对于一个基于UIKit的项目是没有必要全部用SwiftUI重写的，在UIKit里使用SwiftUI的视图非常容易，UIHostingController是UIViewController的子类，可以直接用在UIKit里，因此直接将SwiftUI视图加到UIHostingController中，就可以在UIKit里使用SwiftUI视图了。</p><p>SwiftUI的布局核心是 GeometryReader、View Preferences和Anchor Preferences。如下图所示：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/142988837-ab49c202-9779-4c7a-8dc2-5584900c0765.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/142988837-ab49c202-9779-4c7a-8dc2-5584900c0765.png"></p><p>SwiftUI的数据流更适合Redux结构，如下图所示：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/142988879-af591aaf-161f-4f60-9891-d7b8d313f69f.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/142988879-af591aaf-161f-4f60-9891-d7b8d313f69f.png"></p><p>如上图，Redux结构是真正的单向单数据源结构，易于分割，能充分利用SwiftUI内置的数据流Property Wrapper。UI组件干净、体量小、可复用并且无业务逻辑，因此开发时可以聚焦于UI代码。业务逻辑放在一起，所有业务逻辑和数据Model都在Reducer里。 <a href="https://github.com/Dimillian/ACHNBrowserUI">ACHNBrowserUI</a>  和  <a href="https://github.com/Dimillian/MovieSwiftUI">MovieSwiftUI</a>  开源项目都是使用的Redux架构。最近比较瞩目的TCA（The Composable Architecture）也是类Redux&#x2F;Elm的架构的框架， <a href="https://github.com/pointfreeco/swift-composable-architecture">项目地址见</a> 。</p><p>提到数据流就不得不说下苹果公司新出的Combine，对标的是RxSwift，由于是苹果公司官方的库，所以应该优先选择。不过和SwiftUI一样，这两个新库对APP支持最低的系统版本都要求是iOS13及以上。那么怎么能够提前用上SwiftUI和Combine呢？或者说现在使用什么库可以以相同接口方式暂时替换它们，又能在以后改为SwiftUI和Combine时成本最小化呢？</p><p>对于SwiftUI，AcFun自研了声明式UI Ysera，类似SwiftUI的接口，并且重构了AcFun里收藏模块列表视图和交互逻辑，如下图所示：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/142988909-e6626954-2c93-4c34-b10e-5345c8015cea.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/142988909-e6626954-2c93-4c34-b10e-5345c8015cea.png"></p><p>通过上图可以看到，swift代码量相比较OC减少了65%以上，原先使用Objective-C实现的相同功能代码超过了1000行，而Swift重写只需要350行，对于AcFun的业务研发工程师而言，同样的需求实现代码比之前少了至少30%，面对单周迭代这样的节奏，团队也变得更从容。代码可读性增加了，后期功能迭代和维护更容易了，Swift让AcFun驶入了iOS开发生态的“快车道”。</p><p>SwiftUI全部都是基于Swift的各大可提高开发效率特性完成的，比如前面提到的，能够访问只给语言特性级别行为的Property Wrapper，通过Property Wrapper包装代码逻辑，来降低代码复杂度，除了SwiftUI和Combine里@开头的Property Wrapper外，Swift还自带类似 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md">@dynamicMemberLookup</a>  和 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md">@dynamicCallable</a>  这样重量级的Property Wrapper。还有 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md">ResultBuilder</a> 这种能够简化语法的特性，有些如GraphQL、REST和Networking实际使用ResultBuilder的 <a href="https://github.com/carson-katri/awesome-result-builders">范例可以参考</a> 。这些Swift的特性如果也能得到充分利用，即使不用SwiftUI也能使开发效率得到大幅提升。</p><p>网飞（Netflix）App已使用SwiftUI重构了登录界面，网飞增长团队移动负责人故胤道长记录了SwiftUI在网飞的落地过程，详细描述了 <a href="https://mp.weixin.qq.com/s/oRPRCx78owLe3_gROYapCw">SwiftUI的收益</a> 。网飞能够直接使用SwiftUI得益于他们最低支持iOS 13系统。</p><p>不过如最低支持系统低于iOS 13，还有开源项目 <a href="https://github.com/rakutentech/AltSwiftUI">AltSwiftUI</a> 也实现了SwiftUI的语法和特性，能够向前兼容到iOS 11。</p><h3 id="视图组件使用"><a href="#视图组件使用" class="headerlink" title="视图组件使用"></a>视图组件使用</h3><h4 id="SwiftUI-对标的-UIKit-视图"><a href="#SwiftUI-对标的-UIKit-视图" class="headerlink" title="SwiftUI 对标的 UIKit 视图"></a>SwiftUI 对标的 UIKit 视图</h4><p>如下：</p><table><thead><tr><th>SwiftUI</th><th>UIKit</th></tr></thead><tbody><tr><td>Text 和 Label</td><td>UILabel</td></tr><tr><td>TextField</td><td>UITextField</td></tr><tr><td>TextEditor</td><td>UITextView</td></tr><tr><td>Button 和 Link</td><td>UIButton</td></tr><tr><td>Image</td><td>UIImageView</td></tr><tr><td>NavigationView</td><td>UINavigationController 和 UISplitViewController</td></tr><tr><td>ToolbarItem</td><td>UINavigationItem</td></tr><tr><td>ScrollView</td><td>UIScrollView</td></tr><tr><td>List</td><td>UITableView</td></tr><tr><td>LazyVGrid 和 LazyHGrid</td><td>UICollectionView</td></tr><tr><td>HStack 和 LazyHStack</td><td>UIStack</td></tr><tr><td>VStack 和 LazyVStack</td><td>UIStack</td></tr><tr><td>TabView</td><td>UITabBarController 和 UIPageViewController</td></tr><tr><td>Toggle</td><td>UISwitch</td></tr><tr><td>Slider</td><td>UISlider</td></tr><tr><td>Stepper</td><td>UIStepper</td></tr><tr><td>ProgressView</td><td>UIProgressView 和 UIActivityIndicatorView</td></tr><tr><td>Picker</td><td>UISegmentedControl</td></tr><tr><td>DatePicker</td><td>UIDatePicker</td></tr><tr><td>Alert</td><td>UIAlertController</td></tr><tr><td>ActionSheet</td><td>UIAlertController</td></tr><tr><td>Map</td><td>MapKit</td></tr></tbody></table><h4 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h4><p>基本用法</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/154473546-94ba6f9f-2ce3-44ef-a7c6-60d86df8c90f.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/154473546-94ba6f9f-2ce3-44ef-a7c6-60d86df8c90f.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - Text</span><span class="token keyword">struct</span> <span class="token class-name">PlayTextView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> manyString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"这是一段长文。总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么吧。"</span></span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"大标题"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"说点啥呢？"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tracking</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// 字间距</span>                    <span class="token punctuation">.</span><span class="token function">kerning</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// 尾部留白</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"划重点"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">underline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>heavy<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"可旋转的文字"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fixedSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"自定义系统字体大小"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"使用指定的字体"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Georgia"</span></span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"有阴影"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">italic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Gradient Background"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>gradient<span class="token punctuation">:</span> <span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>white<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token punctuation">.</span>red<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Gradient Background"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>gradient<span class="token punctuation">:</span> <span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>white<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token punctuation">.</span>purple<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>trailing<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"渐变透明材质风格"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                            <span class="token punctuation">.</span>regularMaterial<span class="token punctuation">,</span>                            <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span>                        <span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                    <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Angular Gradient Background"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">AngularGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token punctuation">.</span>green<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>red<span class="token punctuation">]</span><span class="token punctuation">,</span> center<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"带背景图片的"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>background <span class="token punctuation">&#123;</span>                        <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 设置 lineLimit 表示最多支持行数，依据情况依然有会被减少显示行数</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>manyString<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">lineLimit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 对行的限制，如果多余设定行数，尾部会显示...</span>                    <span class="token punctuation">.</span><span class="token function">lineSpacing</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 行间距</span>                    <span class="token punctuation">.</span><span class="token function">multilineTextAlignment</span><span class="token punctuation">(</span><span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token comment">// 对齐</span>                                <span class="token comment">// 使用 fixedSize 就可以在任何时候完整显示</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>manyString<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fixedSize</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> vertical<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 使用 AttributeString</span>            <span class="token class-name">PTextViewAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 使用 Markdown</span>            <span class="token class-name">PTextViewMarkdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 时间</span>            <span class="token class-name">PTextViewDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 插值</span>            <span class="token class-name">PTextViewInterpolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>font 字体设置的样式对应 weight 和 size 可以在官方交互文档中查看 <a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/typography/#dynamic-type-sizes">Typography</a></p><p>markdown 使用</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - Markdown</span><span class="token keyword">struct</span> <span class="token class-name">PTextViewMarkdown</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> mdaStr<span class="token punctuation">:</span> <span class="token class-name">AttributedString</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> mda <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span>localized<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"这是一个 **Attribute** ~string~"</span></span><span class="token punctuation">)</span>                <span class="token comment">/// 自定义的属性语法是^[string](key：value)</span>        mda <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span>localized<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"^[这是](p2:'one')^[一](p3:&#123;k1:1,k2:2&#125;)个 **Attribute** ~string~"</span></span><span class="token punctuation">,</span> including<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>newScope<span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span>mda<span class="token punctuation">)</span>        <span class="token comment">/// 这是 &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">///     p2 = one</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// 一 &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">///     p3 = P3(k1: 1, k2: 2)</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// 个  &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// Attribute &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">///     NSInlinePresentationIntent = NSInlinePresentationIntent(rawValue: 2)</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">///   &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// string &#123;</span>        <span class="token comment">///     NSInlinePresentationIntent = NSInlinePresentationIntent(rawValue: 32)</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">/// &#125;</span>                <span class="token comment">// 从文件中读取 Markdown 内容</span>        <span class="token keyword">let</span> mdUrl <span class="token operator">=</span> <span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>forResource<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">,</span> withExtension<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"md"</span></span><span class="token punctuation">)</span><span class="token operator">!</span>        mda <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> mdUrl<span class="token punctuation">,</span>options<span class="token punctuation">:</span> <span class="token class-name">AttributedString</span><span class="token punctuation">.</span><span class="token class-name">MarkdownParsingOptions</span><span class="token punctuation">(</span>interpretedSyntax<span class="token punctuation">:</span> <span class="token punctuation">.</span>inlineOnlyPreservingWhitespace<span class="token punctuation">)</span><span class="token punctuation">,</span> baseURL<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token comment">// .inlineOnlyPreservingWhitespace 支持 markdown 文件的换行</span>                        <span class="token comment">// Markdown 已转换成 AtrributedString 结构。</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> mda<span class="token punctuation">.</span>runs <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> ipi <span class="token operator">=</span> r<span class="token punctuation">.</span>inlinePresentationIntent <span class="token punctuation">&#123;</span>                <span class="token keyword">switch</span> ipi <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token punctuation">.</span>lineBreak<span class="token punctuation">:</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"paragrahp"</span></span><span class="token punctuation">)</span>                <span class="token keyword">case</span> <span class="token punctuation">.</span>code<span class="token punctuation">:</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is code"</span></span><span class="token punctuation">)</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> pi <span class="token operator">=</span> r<span class="token punctuation">.</span>presentationIntent <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> c <span class="token keyword">in</span> pi<span class="token punctuation">.</span>components <span class="token punctuation">&#123;</span>                    <span class="token keyword">switch</span> c<span class="token punctuation">.</span>kind <span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token punctuation">.</span>paragraph<span class="token punctuation">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is paragraph"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">codeBlock</span><span class="token punctuation">(</span><span class="token keyword">let</span> lang<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">lang <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> code"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token keyword">let</span> level<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">level</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> level"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span>                        <span class="token keyword">break</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> mda    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>mdaStr<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AttributedString 的使用</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - AttributedString</span><span class="token keyword">struct</span> <span class="token class-name">PTextViewAttribute</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> aStr<span class="token punctuation">:</span> <span class="token class-name">AttributedString</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这是一个 "</span></span><span class="token punctuation">)</span>        <span class="token keyword">var</span> c1 <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c1<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span>footnote        c1<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>secondary        a1<span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span>                <span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Attribute "</span></span><span class="token punctuation">)</span>        <span class="token keyword">var</span> c2 <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c2<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span>title        a2<span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span>                <span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"String "</span></span><span class="token punctuation">)</span>        <span class="token keyword">var</span> c3 <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c3<span class="token punctuation">.</span>baselineOffset <span class="token operator">=</span> <span class="token number">10</span>        c3<span class="token punctuation">.</span>appKit<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>yellow <span class="token comment">// 仅在 macOS 里显示的颜色</span>        c3<span class="token punctuation">.</span>swiftUI<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>secondary        c3<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span>footnote        a3<span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span>        <span class="token comment">// a3 使用自定义属性</span>        a3<span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"This is a custom property."</span></span>                <span class="token comment">// formatter 的支持</span>        <span class="token keyword">var</span> a4 <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>dateTime                                        <span class="token punctuation">.</span><span class="token function">hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">minute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">weekday</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span>attributed        <span class="token punctuation">)</span>                <span class="token keyword">let</span> c4AMPM <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dateField</span><span class="token punctuation">(</span><span class="token punctuation">.</span>amPM<span class="token punctuation">)</span>        <span class="token keyword">let</span> c4AMPMColor <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span>                a4<span class="token punctuation">.</span><span class="token function">replaceAttributes</span><span class="token punctuation">(</span>c4AMPM<span class="token punctuation">,</span> with<span class="token punctuation">:</span> c4AMPMColor<span class="token punctuation">)</span>        <span class="token keyword">let</span> c4Week <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dateField</span><span class="token punctuation">(</span><span class="token punctuation">.</span>weekday<span class="token punctuation">)</span>        <span class="token keyword">let</span> c4WeekColor <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>purple<span class="token punctuation">)</span>        a4<span class="token punctuation">.</span><span class="token function">replaceAttributes</span><span class="token punctuation">(</span>c4Week<span class="token punctuation">,</span> with<span class="token punctuation">:</span> c4WeekColor<span class="token punctuation">)</span>                a1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span>        a1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span>        a1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span>                                <span class="token comment">// Runs 视图</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> a1<span class="token punctuation">.</span>runs <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/// 这是一个  &#123;</span>        <span class="token comment">///     SwiftUI.Font = Font(provider: SwiftUI.(unknown context at $7ff91d4a5e90).FontBox&lt;SwiftUI.Font.(unknown context at $7ff91d4ad5d8).TextStyleProvider>)</span>        <span class="token comment">///     SwiftUI.ForegroundColor = secondary</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// Attribute  &#123;</span>        <span class="token comment">///     SwiftUI.Font = Font(provider: SwiftUI.(unknown context at $7ff91d4a5e90).FontBox&lt;SwiftUI.Font.(unknown context at $7ff91d4ad5d8).TextStyleProvider>)</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// String  &#123;</span>        <span class="token comment">///     SwiftUI.ForegroundColor = secondary</span>        <span class="token comment">///     SwiftUI.BaselineOffset = 10.0</span>        <span class="token comment">///     NSColor = sRGB IEC61966-2.1 colorspace 1 1 0 1</span>        <span class="token comment">///     SwiftUI.Font = Font(provider: SwiftUI.(unknown context at $7ff91d4a5e90).FontBox&lt;SwiftUI.Font.(unknown context at $7ff91d4ad5d8).TextStyleProvider>)</span>        <span class="token comment">///     p1 = This is a custom property.</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// Tue &#123;</span>        <span class="token comment">///     SwiftUI.ForegroundColor = purple</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">///   &#123;</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// 5 &#123;</span>        <span class="token comment">///     Foundation.DateFormatField = hour</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// : &#123;</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// 16 &#123;</span>        <span class="token comment">///     Foundation.DateFormatField = minute</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">///   &#123;</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// PM &#123;</span>        <span class="token comment">///     SwiftUI.ForegroundColor = green</span>        <span class="token comment">/// &#125;</span>                <span class="token keyword">return</span> a1    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>aStr<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定 AttributedString 属性</span><span class="token keyword">struct</span> PAKP1<span class="token punctuation">:</span> <span class="token class-name">AttributedStringKey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">typealias</span> <span class="token class-name">Value</span> <span class="token operator">=</span> <span class="token class-name">String</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p1"</span></span>        <span class="token punctuation">&#125;</span><span class="token keyword">struct</span> PAKP2<span class="token punctuation">:</span> <span class="token class-name">CodableAttributedStringKey</span><span class="token punctuation">,</span> <span class="token class-name">MarkdownDecodableAttributedStringKey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> P2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Codable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p2"</span></span>    <span class="token keyword">typealias</span> <span class="token class-name">Value</span> <span class="token operator">=</span> P2<span class="token punctuation">&#125;</span><span class="token keyword">struct</span> PAKP3<span class="token punctuation">:</span> <span class="token class-name">CodableAttributedStringKey</span><span class="token punctuation">,</span> <span class="token class-name">MarkdownDecodableAttributedStringKey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">struct</span> P3<span class="token punctuation">:</span> <span class="token class-name">Codable</span><span class="token punctuation">,</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> k1<span class="token punctuation">:</span> <span class="token class-name">Int</span>        <span class="token keyword">let</span> k2<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">typealias</span> <span class="token class-name">Value</span> <span class="token operator">=</span> P3    <span class="token keyword">static</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">AttributeScopes</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">NewScope</span><span class="token punctuation">:</span> <span class="token class-name">AttributeScope</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> p1<span class="token punctuation">:</span> PAKP1        <span class="token keyword">let</span> p2<span class="token punctuation">:</span> PAKP2        <span class="token keyword">let</span> p3<span class="token punctuation">:</span> PAKP3    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> newScope<span class="token punctuation">:</span> <span class="token class-name">NewScope</span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NewScope</span><span class="token punctuation">.</span><span class="token keyword">self</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">AttributeDynamicLookup</span><span class="token punctuation">&#123;</span>    <span class="token keyword">subscript</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">(</span>dynamicMember keyPath<span class="token punctuation">:</span><span class="token class-name">KeyPath</span><span class="token operator">&lt;</span><span class="token class-name">AttributeScopes</span><span class="token punctuation">.</span><span class="token class-name">NewScope</span><span class="token punctuation">,</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">T</span> <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span><span class="token class-name">AttributedStringKey</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间的显示</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - 时间</span><span class="token keyword">struct</span> <span class="token class-name">PDateTextView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> date<span class="token punctuation">:</span> <span class="token class-name">Date</span> <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> df<span class="token punctuation">:</span> <span class="token class-name">DateFormatter</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> df <span class="token operator">=</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        df<span class="token punctuation">.</span>dateStyle <span class="token operator">=</span> <span class="token punctuation">.</span>long        df<span class="token punctuation">.</span>timeStyle <span class="token operator">=</span> <span class="token punctuation">.</span>short        <span class="token keyword">return</span> df    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> dv<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> df<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> date<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>dv<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>locale<span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"zh_cn"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插值使用</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - 插值</span><span class="token keyword">struct</span> <span class="token class-name">PTextViewInterpolation</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> nf<span class="token punctuation">:</span> <span class="token class-name">NumberFormatter</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">NumberFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>numberStyle <span class="token operator">=</span> <span class="token punctuation">.</span>currencyPlural        <span class="token keyword">return</span> f    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"图文 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"sun.min"</span></span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"💰 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token number">999</span> <span class="token keyword">as</span> <span class="token class-name">NSNumber</span><span class="token punctuation">,</span> formatter<span class="token punctuation">:</span> nf</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>locale<span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"zh_cn"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"数组： </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"红字：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">red<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"变红了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">，带图标的字：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">sun<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"天晴"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 扩展 LocalizedStringKey.StringInterpolation 自定义插值</span><span class="token keyword">extension</span> <span class="token class-name">LocalizedStringKey</span><span class="token punctuation">.</span><span class="token class-name">StringInterpolation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 特定类型处理</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> value <span class="token punctuation">&#123;</span>            <span class="token function">appendLiteral</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span>            <span class="token function">appendInterpolation</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string-literal"><span class="token string">" "</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 实现不同情况处理，可以简化设置修改器设置</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span>red value<span class="token punctuation">:</span> <span class="token class-name">LocalizedStringKey</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">appendInterpolation</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span>sun value<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">appendInterpolation</span><span class="token punctuation">(</span><span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"sun.max.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">appendLiteral</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h4><p>使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayLinkView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openURL<span class="token punctuation">)</span> <span class="token keyword">var</span> openURL    <span class="token keyword">var</span> aStr<span class="token punctuation">:</span> <span class="token class-name">AttributedString</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的博客"</span></span><span class="token punctuation">)</span>        a<span class="token punctuation">.</span>link <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://ming1016.github.io/"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> a    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 普通</span>            <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"前往 www.starming.com"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"http://www.starming.com"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderedProminent<span class="token punctuation">)</span>            <span class="token class-name">Link</span><span class="token punctuation">(</span>destination<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://twitter.com/daiming_cn"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"My Twitter"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"message.circle.fill"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// AttributedString 链接</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>aStr<span class="token punctuation">)</span>                        <span class="token comment">// markdown 链接</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"[Go Ming's GitHub](https://github.com/ming1016)"</span></span><span class="token punctuation">)</span>                        <span class="token comment">// 控件使用 OpenURL</span>            <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"小册子源码"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://github.com/KwaiAppTeam/SwiftPamphletApp"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openURL<span class="token punctuation">,</span> <span class="token class-name">OpenURLAction</span> <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>                    <span class="token keyword">return</span> <span class="token punctuation">.</span>systemAction                    <span class="token comment">/// return .handled 不会返回系统打开浏览器动作，只会处理 return 前的事件。</span>                    <span class="token comment">/// .discard 和 .handled 类似。</span>                    <span class="token comment">/// .systemAction(URL(string: "https://www.anotherurl.com")) 可以返回另外一个 url 来替代指定的url</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                        <span class="token comment">// 扩展 View 后更简洁的使用 OpenURL</span>            <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的微博"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://weibo.com/allstarming"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>goOpenURL <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>                    <span class="token function">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>absoluteString<span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token punctuation">.</span>systemAction                <span class="token punctuation">&#125;</span>                        <span class="token comment">// 根据内容返回不同链接</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭博客有好几个，存在[GitHub Page](github)、[自建服务器](starming)和[知乎](zhihu)上"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openURL<span class="token punctuation">,</span> <span class="token class-name">OpenURLAction</span> <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>                    <span class="token keyword">switch</span> url<span class="token punctuation">.</span>absoluteString <span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">"github"</span></span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">systemAction</span><span class="token punctuation">(</span><span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://ming1016.github.io/"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">"starming"</span></span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">systemAction</span><span class="token punctuation">(</span><span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"http://www.starming.com"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">"zhihu"</span></span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">systemAction</span><span class="token punctuation">(</span><span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://www.zhihu.com/people/starming/posts"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token punctuation">.</span>handled                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">// View 支持 openURL 的能力</span>    <span class="token keyword">func</span> <span class="token function-definition function">goUrl</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token omit keyword">_</span> accepted<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">openURL</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> completion<span class="token punctuation">:</span> done<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 为 View 扩展一个 OpenURL 方法</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">goOpenURL</span><span class="token punctuation">(</span>done<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">OpenURLAction</span><span class="token punctuation">.</span><span class="token class-name">Result</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openURL<span class="token punctuation">,</span> <span class="token class-name">OpenURLAction</span><span class="token punctuation">(</span>handler<span class="token punctuation">:</span> done<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>View 的 onOpenURL 方法可以处理 Universal Links。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">V</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>onOpenURL <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>absoluteString<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/154474725-d696d50b-9da7-4a0d-808f-07894a9597cb.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/154474725-d696d50b-9da7-4a0d-808f-07894a9597cb.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayLabelView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一个 Label"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"bolt.circle"</span></span><span class="token punctuation">)</span>                        <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"只显示 icon"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"heart.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>iconOnly<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span>                        <span class="token comment">// 自建 Label</span>            <span class="token class-name">Label</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"自建 Label"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> icon<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 自定义 LabelStyle</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"有边框的 Label"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"b.square.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>border<span class="token punctuation">)</span>                        <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"仅标题有边框"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"text.bubble"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderOnlyTitle<span class="token punctuation">)</span>                        <span class="token comment">// 扩展的 Label</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"扩展的 Label"</span></span><span class="token punctuation">,</span> originalSystemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.sun.bolt.fill"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// 对 Label 做扩展</span><span class="token keyword">extension</span> <span class="token class-name">Label</span> <span class="token keyword">where</span> <span class="token class-name">Title</span> <span class="token operator">==</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Icon</span> <span class="token operator">==</span> <span class="token class-name">Image</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> title<span class="token punctuation">:</span> <span class="token class-name">LocalizedStringKey</span><span class="token punctuation">,</span> originalSystemImage systemImageString<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> icon<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> systemImageString<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span> <span class="token comment">// 让 SFSymbol 显示本身的颜色</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 添加自定义 LabelStyle，用来加上边框</span><span class="token keyword">struct</span> <span class="token class-name">BorderLabelStyle</span><span class="token punctuation">:</span> <span class="token class-name">LabelStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Label</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token comment">// 样式擦除器，防止样式被 .iconOnly、.titleOnly 这样的 LabelStyle 擦除了样式。</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">LabelStyle</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">BorderLabelStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">var</span> border<span class="token punctuation">:</span> <span class="token class-name">BorderLabelStyle</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BorderLabelStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 只给标题加边框</span><span class="token keyword">struct</span> <span class="token class-name">BorderOnlyTitleLabelStyle</span><span class="token punctuation">:</span> <span class="token class-name">LabelStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>icon            configuration<span class="token punctuation">.</span>title                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">LabelStyle</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">BorderOnlyTitleLabelStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">var</span> borderOnlyTitle<span class="token punctuation">:</span> <span class="token class-name">BorderOnlyTitleLabelStyle</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BorderOnlyTitleLabelStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TextEditor"><a href="#TextEditor" class="headerlink" title="TextEditor"></a>TextEditor</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/154667163-e906dfd4-074e-4c04-9c80-94af86df4ba6.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/154667163-e906dfd4-074e-4c04-9c80-94af86df4ba6.png"></p><p>对应的代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> <span class="token class-name">CodeEditorView</span><span class="token keyword">struct</span> <span class="token class-name">PlayTextEditorView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// for TextEditor</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> txt<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"一段可编辑文字...\n"</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment">// for CodeEditorView</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">var</span> colorScheme<span class="token punctuation">:</span> <span class="token class-name">ColorScheme</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> codeMessages<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Located</span><span class="token operator">&lt;</span><span class="token class-name">Message</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token class-name">Set</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@SceneStorage</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"editLocation"</span></span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">var</span> editLocation<span class="token punctuation">:</span> <span class="token class-name">CodeEditor</span><span class="token punctuation">.</span><span class="token class-name">Location</span> <span class="token operator">=</span> <span class="token class-name">CodeEditor</span><span class="token punctuation">.</span><span class="token class-name">Location</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 使用 SwiftUI 自带 TextEditor</span>        <span class="token class-name">TextEditor</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $txt<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">lineSpacing</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">disableAutocorrection</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> txt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                count <span class="token operator">=</span> txt<span class="token punctuation">.</span>count            <span class="token punctuation">&#125;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"字数：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>footnote<span class="token punctuation">)</span>                <span class="token comment">// 使用的 CodeEditorView 显示和编辑代码高亮的代码，还有 minimap</span>        <span class="token class-name">CodeEditor</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"""static func number() &#123;    // Int    let i1 = 100    let i2 = 22    print(i1 / i2) // 向下取整得 4    // Float    let f1: Float = 100.0    let f2: Float = 22.0    print(f1 / f2) // 4.5454545        let f4: Float32 = 5.0    let f5: Float64 = 5.0    print(f4, f5) // 5.0 5.0 5.0    // Double    let d1: Double = 100.0    let d2: Double = 22.0    print(d1 / d2) // 4.545454545454546    // 字面量    print(Int(0b10101)) // 0b 开头是二进制    print(Int(0x00afff)) // 0x 开头是十六进制    print(2.5e4) // 2.5x10^4 十进制用 e    print(0xAp2) // 10*2^2  十六进制用 p    print(2_000_000) // 2000000        // isMultiple(of:) 方法检查一个数字是否是另一个数字的倍数    let i3 = 36    print(i3.isMultiple(of: 9)) // true&#125;"""</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   messages<span class="token punctuation">:</span> $codeMessages<span class="token punctuation">,</span>                   language<span class="token punctuation">:</span> <span class="token punctuation">.</span>swift<span class="token punctuation">,</span>                   layout<span class="token punctuation">:</span> <span class="token class-name">CodeEditor</span><span class="token punctuation">.</span><span class="token class-name">LayoutConfiguration</span><span class="token punctuation">(</span>showMinimap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>codeEditorTheme<span class="token punctuation">,</span> colorScheme <span class="token operator">==</span> <span class="token punctuation">.</span>dark <span class="token operator">?</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span>defaultDark <span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span>defaultLight<span class="token punctuation">)</span>                <span class="token comment">// 包装的 NSTextView</span>        <span class="token class-name">HSplitView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PNSTextView</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"左边写...\n"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> onDidChange<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">in</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Typing </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> times."</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">PNSTextView</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"右边写...\n"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end HSplitView</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自己包装 NSTextView</span><span class="token keyword">struct</span> <span class="token class-name">PNSTextView</span><span class="token punctuation">:</span> <span class="token class-name">NSViewRepresentable</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> onBeginEditing<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> onCommit<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> onDidChange<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span><span class="token punctuation">,</span><span class="token omit keyword">_</span>  <span class="token keyword">in</span> <span class="token punctuation">&#125;</span>        <span class="token comment">// 返回要包装的 NSView</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeNSView</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">PNSTextConfiguredView</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">PNSTextConfiguredView</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> text<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>delegate <span class="token operator">=</span> context<span class="token punctuation">.</span>coordinator        <span class="token keyword">return</span> t    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">updateNSView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> view<span class="token punctuation">:</span> <span class="token class-name">PNSTextConfiguredView</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        view<span class="token punctuation">.</span>text <span class="token operator">=</span> text        view<span class="token punctuation">.</span>selectedRanges <span class="token operator">=</span> context<span class="token punctuation">.</span>coordinator<span class="token punctuation">.</span>sRanges    <span class="token punctuation">&#125;</span>        <span class="token comment">// 回调</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeCoordinator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">TextViewDelegate</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TextViewDelegate</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理 delegate 回调</span><span class="token keyword">extension</span> <span class="token class-name">PNSTextView</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">TextViewDelegate</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span><span class="token punctuation">,</span> <span class="token class-name">NSTextViewDelegate</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> tView<span class="token punctuation">:</span> <span class="token class-name">PNSTextView</span>        <span class="token keyword">var</span> sRanges<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">NSValue</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">var</span> typeCount<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> v<span class="token punctuation">:</span> <span class="token class-name">PNSTextView</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>tView <span class="token operator">=</span> v        <span class="token punctuation">&#125;</span>        <span class="token comment">// 开始编辑</span>        <span class="token keyword">func</span> <span class="token function-definition function">textDidBeginEditing</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> notification<span class="token punctuation">:</span> <span class="token class-name">Notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> textView <span class="token operator">=</span> notification<span class="token punctuation">.</span>object <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">NSTextView</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span>text <span class="token operator">=</span> textView<span class="token punctuation">.</span>string            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span><span class="token function">onBeginEditing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 每次敲字</span>        <span class="token keyword">func</span> <span class="token function-definition function">textDidChange</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> notification<span class="token punctuation">:</span> <span class="token class-name">Notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> textView <span class="token operator">=</span> notification<span class="token punctuation">.</span>object <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">NSTextView</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            typeCount <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span>text <span class="token operator">=</span> textView<span class="token punctuation">.</span>string            <span class="token keyword">self</span><span class="token punctuation">.</span>sRanges <span class="token operator">=</span> textView<span class="token punctuation">.</span>selectedRanges            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span><span class="token function">onDidChange</span><span class="token punctuation">(</span>textView<span class="token punctuation">.</span>string<span class="token punctuation">,</span> typeCount<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 提交</span>        <span class="token keyword">func</span> <span class="token function-definition function">textDidEndEditing</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> notification<span class="token punctuation">:</span> <span class="token class-name">Notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> textView <span class="token operator">=</span> notification<span class="token punctuation">.</span>object <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">NSTextView</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span>text <span class="token operator">=</span> textView<span class="token punctuation">.</span>string            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span><span class="token function">onCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 配置 NSTextView</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PNSTextConfiguredView</span><span class="token punctuation">:</span> <span class="token class-name">NSView</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">weak</span> <span class="token keyword">var</span> delegate<span class="token punctuation">:</span> <span class="token class-name">NSTextViewDelegate</span><span class="token operator">?</span>        <span class="token keyword">private</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> tv<span class="token punctuation">:</span> <span class="token class-name">NSTextView</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> contentSize <span class="token operator">=</span> sv<span class="token punctuation">.</span>contentSize        <span class="token keyword">let</span> textStorage <span class="token operator">=</span> <span class="token class-name">NSTextStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">let</span> layoutManager <span class="token operator">=</span> <span class="token class-name">NSLayoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        textStorage<span class="token punctuation">.</span><span class="token function">addLayoutManager</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span>                <span class="token keyword">let</span> textContainer <span class="token operator">=</span> <span class="token class-name">NSTextContainer</span><span class="token punctuation">(</span>containerSize<span class="token punctuation">:</span> sv<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">)</span>        textContainer<span class="token punctuation">.</span>widthTracksTextView <span class="token operator">=</span> <span class="token boolean">true</span>        textContainer<span class="token punctuation">.</span>containerSize <span class="token operator">=</span> <span class="token class-name">NSSize</span><span class="token punctuation">(</span>            width<span class="token punctuation">:</span> contentSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span>greatestFiniteMagnitude        <span class="token punctuation">)</span>                layoutManager<span class="token punctuation">.</span><span class="token function">addTextContainer</span><span class="token punctuation">(</span>textContainer<span class="token punctuation">)</span>                <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">NSTextView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">,</span> textContainer<span class="token punctuation">:</span> textContainer<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>delegate        t<span class="token punctuation">.</span>isEditable <span class="token operator">=</span> <span class="token boolean">true</span>        t<span class="token punctuation">.</span>allowsUndo <span class="token operator">=</span> <span class="token boolean">true</span>                t<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">systemFont</span><span class="token punctuation">(</span>ofSize<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>textColor <span class="token operator">=</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>labelColor        t<span class="token punctuation">.</span>drawsBackground <span class="token operator">=</span> <span class="token boolean">true</span>        t<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>textBackgroundColor                t<span class="token punctuation">.</span>maxSize <span class="token operator">=</span> <span class="token class-name">NSSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span>greatestFiniteMagnitude<span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span>greatestFiniteMagnitude<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>minSize <span class="token operator">=</span> <span class="token class-name">NSSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> contentSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>autoresizingMask <span class="token operator">=</span> <span class="token punctuation">.</span>width        t<span class="token punctuation">.</span>isHorizontallyResizable <span class="token operator">=</span> <span class="token boolean">false</span>        t<span class="token punctuation">.</span>isVerticallyResizable   <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token keyword">return</span> t    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> sv<span class="token punctuation">:</span> <span class="token class-name">NSScrollView</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">NSScrollView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>drawsBackground <span class="token operator">=</span> <span class="token boolean">true</span>        s<span class="token punctuation">.</span>borderType <span class="token operator">=</span> <span class="token punctuation">.</span>noBorder        s<span class="token punctuation">.</span>hasVerticalScroller <span class="token operator">=</span> <span class="token boolean">true</span>        s<span class="token punctuation">.</span>hasHorizontalRuler <span class="token operator">=</span> <span class="token boolean">false</span>        s<span class="token punctuation">.</span>translatesAutoresizingMaskIntoConstraints <span class="token operator">=</span> <span class="token boolean">false</span>        s<span class="token punctuation">.</span>autoresizingMask <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token punctuation">.</span>height<span class="token punctuation">]</span>        <span class="token keyword">return</span> s    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">didSet</span> <span class="token punctuation">&#123;</span>            tv<span class="token punctuation">.</span>string <span class="token operator">=</span> text        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> selectedRanges<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">NSValue</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">didSet</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">guard</span> selectedRanges<span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            tv<span class="token punctuation">.</span>selectedRanges <span class="token operator">=</span> selectedRanges        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>coder<span class="token punctuation">:</span> <span class="token class-name">NSCoder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Error coder"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">init</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewWillDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewWillDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        sv<span class="token punctuation">.</span>translatesAutoresizingMaskIntoConstraints <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token function">addSubview</span><span class="token punctuation">(</span>sv<span class="token punctuation">)</span>        <span class="token class-name">NSLayoutConstraint</span><span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            sv<span class="token punctuation">.</span>topAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> topAnchor<span class="token punctuation">)</span><span class="token punctuation">,</span>            sv<span class="token punctuation">.</span>trailingAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> trailingAnchor<span class="token punctuation">)</span><span class="token punctuation">,</span>            sv<span class="token punctuation">.</span>bottomAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> bottomAnchor<span class="token punctuation">)</span><span class="token punctuation">,</span>            sv<span class="token punctuation">.</span>leadingAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> leadingAnchor<span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>        sv<span class="token punctuation">.</span>documentView <span class="token operator">=</span> tv    <span class="token punctuation">&#125;</span> <span class="token comment">// end viewWillDraw</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SwiftUI 中用 NSView，可以通过 NSViewRepresentable 来包装视图，这个协议主要是实现 makeNSView、updateNSView 和 makeCoordinator 三个方法。makeNSView 要求返回需要包装的 NSView。每当 SwiftUI 的状态变化时触发 updateNSView 方法的调用。为了实现 NSView 里的 delegate 和 SwiftUI 通信，就要用 makeCoordinator 返回一个用于处理 delegate 的实例。</p><h4 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/154916174-2e9b1bd8-992a-485e-803a-07da59d0c7e3.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/154916174-2e9b1bd8-992a-485e-803a-07da59d0c7e3.png"></p><p>使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayTextFieldView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Starming"</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> showT <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isEditing <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> placeholder <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"输入些文字..."</span></span>        <span class="token attribute atrule">@FocusState</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isFocus<span class="token punctuation">:</span> <span class="token class-name">Bool</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TextField</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $t<span class="token punctuation">)</span>                        <span class="token comment">// 样式设置</span>            <span class="token class-name">TextField</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $t<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>roundedBorder<span class="token punctuation">)</span> <span class="token comment">// textFieldStyle 有三个预置值 automatic、plain 和 roundedBorder。</span>                <span class="token punctuation">.</span><span class="token function">multilineTextAlignment</span><span class="token punctuation">(</span><span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token comment">// 对齐方式</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span> weight<span class="token punctuation">:</span> <span class="token punctuation">.</span>heavy<span class="token punctuation">,</span> design<span class="token punctuation">:</span> <span class="token punctuation">.</span>rounded<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token punctuation">.</span>teal<span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>brown<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textCase</span><span class="token punctuation">(</span><span class="token punctuation">.</span>uppercase<span class="token punctuation">)</span>            <span class="token comment">// 多视图组合</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"lock.circle"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                <span class="token class-name">TextField</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $t<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">submitLabel</span><span class="token punctuation">(</span><span class="token punctuation">.</span>done<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onSubmit <span class="token punctuation">&#123;</span>                        showT <span class="token operator">=</span> t                        isFocus <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                        t <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>newValue<span class="token punctuation">.</span><span class="token keyword">prefix</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 限制字数</span>                    <span class="token punctuation">&#125;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"eye.slash"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>showT<span class="token punctuation">)</span>            <span class="token comment">// 自定义 textFieldStyle 样式</span>            <span class="token class-name">TextField</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $t<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token class-name">PClearTextStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">focused</span><span class="token punctuation">(</span>$isFocus<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PClearTextStyle</span><span class="token punctuation">:</span> <span class="token class-name">TextFieldStyle</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@ViewBuilder</span>    <span class="token keyword">func</span> <span class="token function-definition function">_body</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token operator">&lt;</span>_Label<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> mirror <span class="token operator">=</span> <span class="token class-name">Mirror</span><span class="token punctuation">(</span>reflecting<span class="token punctuation">:</span> configuration<span class="token punctuation">)</span>        <span class="token keyword">let</span> bindingText<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> mirror<span class="token punctuation">.</span><span class="token function">descendant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"_text"</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span>        configuration            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>trailing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    bindingText<span class="token punctuation">.</span>wrappedValue <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"clear"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                <span class="token keyword">let</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> mirror<span class="token punctuation">.</span><span class="token function">descendant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"_text"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"_value"</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> <span class="token class-name">String</span>        configuration            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">strokeBorder</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token punctuation">.</span>pink <span class="token punctuation">:</span> <span class="token punctuation">.</span>gray<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end func</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前iOS 和 iPadOS上支持的键盘有：</p><ul><li>asciiCapable：能显示标准 ASCII 字符的键盘</li><li>asciiCapableNumberPad：只输出 ASCII 数字的数字键盘</li><li>numberPad：用于输入 PIN 码的数字键盘</li><li>numbersAndPunctuation：数字和标点符号的键盘</li><li>decimalPad：带有数字和小数点的键盘</li><li>phonePad：电话中使用的键盘</li><li>namePhonePad：用于输入人名或电话号码的小键盘</li><li>URL：用于输入URL的键盘</li><li>emailAddress：用于输入电子邮件地址的键盘</li><li>twitter：用于Twitter文本输入的键盘，支持@和#字符简便输入</li><li>webSearch：用于网络搜索词和URL输入的键盘</li></ul><p>可以通过 keyboardType 修改器来指定。</p><h4 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155062538-108a79b4-3e5c-417b-867a-3f7e58316664.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155062538-108a79b4-3e5c-417b-867a-3f7e58316664.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayButtonView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> asyncAction<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>nanoseconds<span class="token punctuation">:</span> <span class="token number">300_000_000</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isFollowed<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 常用方式</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Clicked"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"ladybug.fill"</span></span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Report Bug"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 图标</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>systemIconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"ladybug.fill"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bug"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span> <span class="token comment">// 无背景</span>            <span class="token punctuation">.</span><span class="token function">simultaneousGesture</span><span class="token punctuation">(</span><span class="token class-name">LongPressGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEnded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"长按"</span></span><span class="token punctuation">)</span> <span class="token comment">// macOS 暂不支持</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">simultaneousGesture</span><span class="token punctuation">(</span><span class="token class-name">TapGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEnded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"短按"</span></span><span class="token punctuation">)</span> <span class="token comment">// macOS 暂不支持</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token comment">// iOS 15 修改器的使用。role 在 macOS 上暂不支持</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"要删除了"</span></span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token punctuation">.</span>destructive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"删除"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>purple<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">controlSize</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span> <span class="token comment">// .regular 是默认大小</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderedProminent<span class="token punctuation">)</span> <span class="token comment">// borderedProminent 可显示 tint 的设置。还有 bordered、plain 和 borderless 可选。</span>            <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">accentColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buttonBorderShape</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token comment">// 会依据 controlSize 调整边框样式</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>ultraThinMaterial<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 添加材质就像在视图和背景间加了个透明层达到模糊的效果。效果由高到底分别是.ultraThinMaterial、.thinMaterial、.regularMaterial、.thickMaterial、.ultraThickMaterial。</span>                        <span class="token comment">// 风格化</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"风格化"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token class-name">PStarmingButtonStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token comment">// 自定义 Button</span>            <span class="token class-name">PCustomButton</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点一下触发"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Clicked!"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 自定义 ButtonStyle</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Double Clicked!"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点两下触发"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token class-name">PCustomPrimitiveButtonStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 将 Text 视图加上另一个 Text 视图中，类型仍还是 Text。</span>            <span class="token class-name">PCustomButton</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点我 "</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">underline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"别犹豫"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"🤫悄悄说声，有惊喜"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>footnote<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"多 Text 组合标题按钮点击！"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 异步按钮</span>            <span class="token class-name">ButtonAsync</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">await</span> <span class="token function">asyncAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                isFollowed <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> isFollowed <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"已关注"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"关注"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">disabled</span><span class="token punctuation">(</span>isFollowed<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token class-name">PCustomButtonStyle</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">:</span> isFollowed <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token punctuation">.</span>gray <span class="token punctuation">:</span> <span class="token punctuation">.</span>pink<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>skeumorphismBG<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 异步操作的按钮</span><span class="token keyword">struct</span> <span class="token class-name">ButtonAsync</span><span class="token operator">&lt;</span><span class="token class-name">Label</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> doAsync<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">var</span> label<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Label</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isRunning <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 避免连续点击造成重复执行事件</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>            isRunning <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">await</span> <span class="token function">doAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                isRunning <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span>isRunning <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> isRunning <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ProgressView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">disabled</span><span class="token punctuation">(</span>isRunning<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 扩展 Button</span><span class="token comment">// 使用 SFSymbol 做图标</span><span class="token keyword">extension</span> <span class="token class-name">Button</span> <span class="token keyword">where</span> <span class="token class-name">Label</span> <span class="token operator">==</span> <span class="token class-name">Image</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>systemIconName<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> systemIconName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 Button</span><span class="token keyword">struct</span> <span class="token class-name">PCustomButton</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> desTextView<span class="token punctuation">:</span> <span class="token class-name">Text</span>    <span class="token keyword">let</span> act<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> des<span class="token punctuation">:</span> <span class="token class-name">LocalizedStringKey</span><span class="token punctuation">,</span> act<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>desTextView <span class="token operator">=</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>act <span class="token operator">=</span> act    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>            <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            desTextView<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>starming<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">PCustomButton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> desTextView<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> act<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>desTextView <span class="token operator">=</span> desTextView        <span class="token keyword">self</span><span class="token punctuation">.</span>act <span class="token operator">=</span> act    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 点语法使用自定义样式</span><span class="token keyword">extension</span> <span class="token class-name">ButtonStyle</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">PCustomButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> starming<span class="token punctuation">:</span> <span class="token class-name">PCustomButtonStyle</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PCustomButtonStyle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - ButtonStyle</span><span class="token keyword">struct</span> <span class="token class-name">PCustomButtonStyle</span><span class="token punctuation">:</span> <span class="token class-name">ButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> cornerRadius<span class="token punctuation">:</span><span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token punctuation">.</span>pink    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            configuration<span class="token punctuation">.</span>label            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> cornerRadius<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token punctuation">.</span>white <span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">0.5</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">0.99</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - PrimitiveButtonStyle</span><span class="token keyword">struct</span> <span class="token class-name">PCustomPrimitiveButtonStyle</span><span class="token punctuation">:</span> <span class="token class-name">PrimitiveButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 双击触发</span>        configuration<span class="token punctuation">.</span>label            <span class="token punctuation">.</span><span class="token function">onTapGesture</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                configuration<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">// 手势识别</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">gesture</span><span class="token punctuation">(</span>                <span class="token class-name">LongPressGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">onEnded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                        configuration<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 风格化</span><span class="token keyword">struct</span> <span class="token class-name">PStarmingButtonStyle</span><span class="token punctuation">:</span> <span class="token class-name">ButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> backgroundColor <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>skeumorphismBG    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            configuration<span class="token punctuation">.</span>label            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>white<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">7</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">7</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">blendMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>overlay<span class="token punctuation">)</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">0.98</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> skeumorphismBG <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>hex<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"f0f0f3"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>hex<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> rgbValue<span class="token punctuation">:</span> <span class="token class-name">UInt64</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token class-name">Scanner</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> hex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scanHexInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rgbValue<span class="token punctuation">)</span>        <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token punctuation">(</span>rgbValue <span class="token operator">&amp;</span> <span class="token number">0xff0000</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span>        <span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token punctuation">(</span>rgbValue <span class="token operator">&amp;</span> <span class="token number">0xff00</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">8</span>        <span class="token keyword">let</span> b <span class="token operator">=</span> rgbValue <span class="token operator">&amp;</span> <span class="token number">0xff</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0xff</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0xff</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0xff</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ProgressView"><a href="#ProgressView" class="headerlink" title="ProgressView"></a>ProgressView</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155676571-726c15d1-e4a2-4493-8fb0-c37c1c61c88c.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155676571-726c15d1-e4a2-4493-8fb0-c37c1c61c88c.jpeg"></p><p>用 ProgressViewStyle 协议，可以创建自定义的进度条视图。在 WatchOS 上会多一个 Guage 视图。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayProgressView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> v<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 默认旋转</span>            <span class="token class-name">ProgressView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 有进度条</span>            <span class="token class-name">ProgressView</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> v <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>                        <span class="token class-name">ProgressView</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> v <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"music.note.tv"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">progressViewStyle</span><span class="token punctuation">(</span><span class="token class-name">CircularProgressViewStyle</span><span class="token punctuation">(</span>tint<span class="token punctuation">:</span> <span class="token punctuation">.</span>pink<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment">// 自定义样式</span>            <span class="token class-name">ProgressView</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> v <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">progressViewStyle</span><span class="token punctuation">(</span><span class="token class-name">PCProgressStyle1</span><span class="token punctuation">(</span>borderWidth<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token class-name">ProgressView</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> v <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">progressViewStyle</span><span class="token punctuation">(</span><span class="token class-name">PCProgressStyle2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">)</span>                        <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $v<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">,</span> step<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 自定义 Progress 样式</span><span class="token keyword">struct</span> <span class="token class-name">PCProgressStyle1</span><span class="token punctuation">:</span> <span class="token class-name">ProgressViewStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> lg <span class="token operator">=</span> <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>    <span class="token keyword">var</span> borderWidth<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> fc <span class="token operator">=</span> configuration<span class="token punctuation">.</span>fractionCompleted <span class="token operator">??</span> <span class="token number">0</span>                <span class="token keyword">return</span> <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>                    <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>lg<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token class-name">CGFloat</span><span class="token punctuation">(</span>fc<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>lg<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> borderWidth<span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token comment">// end ZStack</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCProgressStyle2</span><span class="token punctuation">:</span> <span class="token class-name">ProgressViewStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> lg <span class="token operator">=</span> <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>orange<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token punctuation">.</span>green<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>purple<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>        <span class="token keyword">var</span> borderWidth<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">20</span>        <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> fc <span class="token operator">=</span> configuration<span class="token punctuation">.</span>fractionCompleted <span class="token operator">??</span> <span class="token number">0</span>                <span class="token keyword">func</span> <span class="token function-definition function">strokeStyle</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> g<span class="token punctuation">:</span> <span class="token class-name">GeometryProxy</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">StrokeStyle</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StrokeStyle</span><span class="token punctuation">(</span>lineWidth<span class="token punctuation">:</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span> lineCap<span class="token punctuation">:</span> <span class="token punctuation">.</span>round<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>                <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>lg<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">strokeStyle</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>borderWidth<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>                        <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> fc<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>lg<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">strokeStyle</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>borderWidth<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token number">90</span> <span class="token operator">+</span> <span class="token number">360</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"读取 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">(</span>fc <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> %"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// end ZStack</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155683776-0f0acdee-c7c1-44e3-a68b-38f778863821.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155683776-0f0acdee-c7c1-44e3-a68b-38f778863821.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayImageView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cyan<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                <span class="token comment">// SF Symbols</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"scissors"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">imageScale</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>                <span class="token comment">// SF Symbols 多色时使用原色</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"thermometer.sun.fill"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">imageScale</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ControlGroup"><a href="#ControlGroup" class="headerlink" title="ControlGroup"></a>ControlGroup</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayControlGroupView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ControlGroup</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"plus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"plus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"minus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"minus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">controlGroupStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token comment">// .automatic 是默认样式，还有 .navigation</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GroupBox"><a href="#GroupBox" class="headerlink" title="GroupBox"></a>GroupBox</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155317172-dc137c38-64d0-415a-8412-e3f479f2bd91.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155317172-dc137c38-64d0-415a-8412-e3f479f2bd91.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayGroupBoxView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GroupBox</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这是 GroupBox 的内容"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"标题一"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"t.square.fill"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token class-name">GroupBox</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"还是 GroupBox 的内容"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"标题二"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"t.square.fill"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">groupBoxStyle</span><span class="token punctuation">(</span><span class="token class-name">PCGroupBoxStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCGroupBoxStyle</span><span class="token punctuation">:</span> <span class="token class-name">GroupBoxStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>label                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            configuration<span class="token punctuation">.</span>content        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><p>Stack View 有 VStack、HStack 和 ZStack</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155077158-f6efd3bb-4b82-48ac-b5e6-792dd833dfda.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155077158-f6efd3bb-4b82-48ac-b5e6-792dd833dfda.jpeg"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayStackView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 默认是 VStack 竖排</span>                <span class="token comment">// 横排</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"左"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"右"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// Z 轴排</span>        <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的开发小册子"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">Color</span><span class="token punctuation">.</span>cyan            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一段文字"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155517358-4e5d54b8-0284-4fde-bf09-4b5e22e0e9a5.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155517358-4e5d54b8-0284-4fde-bf09-4b5e22e0e9a5.jpeg"></p><p>对应代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayNavigationView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> lData <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span> <span class="token punctuation">.</span>orange<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token class-name">List</span><span class="token punctuation">(</span>lData<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">NavigationLink</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">PNavDetailView</span><span class="token punctuation">(</span>contentStr<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>mint<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一个 NavigationView 的示例"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>white<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">safeAreaInset</span><span class="token punctuation">(</span>edge<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bottom1"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bottom2"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bottom3"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"数字列表"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>            <span class="token comment">// placement 共有 keyboard、destructiveAction、cancellationAction、confirmationAction、status、primaryAction、navigation、principal、automatic 这些</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>primaryAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"primaryAction"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>ultraThinMaterial<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 通过 ToolbarItemGroup 可以简化相同位置 ToolbarItem 的编写。</span>            <span class="token class-name">ToolbarItemGroup</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>navigation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"返回"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"前进"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">PCToolbar</span><span class="token punctuation">(</span>doDestruct<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"删除了"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> doCancel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"取消了"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> doConfirm<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确认了"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"status"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>principal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"principal"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>keyboard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Touch Bar Button"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end toolbar</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - NavigationView 的目的页面</span><span class="token keyword">struct</span> <span class="token class-name">PNavDetailView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>presentationMode<span class="token punctuation">)</span> <span class="token keyword">var</span> pMode<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">PresentationMode</span><span class="token operator">></span>    <span class="token keyword">var</span> contentStr<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>contentStr<span class="token punctuation">)</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"返回"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    pMode<span class="token punctuation">.</span>wrappedValue<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end ZStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 toolbar</span><span class="token comment">// 通过 ToolbarContent 创建可重复使用的 toolbar 组</span><span class="token keyword">struct</span> <span class="token class-name">PCToolbar</span><span class="token punctuation">:</span> <span class="token class-name">ToolbarContent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> doDestruct<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token keyword">let</span> doCancel<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token keyword">let</span> doConfirm<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">ToolbarContent</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>destructiveAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"删除"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> doDestruct<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancellationAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"取消"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> doCancel<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>confirmationAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确定"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> doConfirm<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>toolbar 的位置设置可选项如下：</p><ul><li>primaryAction：放置到最主要位置，macOS 就是放在 toolbar 的最左边</li><li>automatic：根据平台不同放到默认位置</li><li>confirmationAction：一些确定的动作</li><li>cancellationAction：取消动作</li><li>destructiveAction：删除的动作</li><li>status：状态变化，比如检查更新等动作</li><li>navigation：导航动作，比如浏览器的前进后退</li><li>principal：突出的位置，iOS 和 macOS 会出现在中间的位置</li><li>keyboard：macOS 会出现在 Touch Bar 里。iOS 会出现在弹出的虚拟键盘上。</li></ul><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155293565-d85080c1-2304-491b-be72-20aa921f7067.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155293565-d85080c1-2304-491b-be72-20aa921f7067.jpeg"></p><p>List 除了能够展示数据外，还有下拉刷新、过滤搜索和侧滑 Swipe 动作提供更多 Cell 操作的能力。</p><p>通过 List 的可选子项参数提供数据模型的关键路径来制定子项路劲，还可以实现大纲视图，使用 DisclosureGroup 和 OutlineGroup  可以进一步定制大纲视图。</p><p>下面是 List 使用，包括了 DisclosureGroup 和 OutlineGroup 的演示代码：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayListView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> l<span class="token punctuation">:</span> <span class="token constant">PLVM</span> <span class="token operator">=</span> <span class="token function">PLVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>        <span class="token keyword">var</span> outlineModel <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"文件夹一"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"folder.fill"</span></span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"个人"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"person.crop.circle.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"群组"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"person.2.circle.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"加好友"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"person.badge.plus"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"文件夹二"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"folder.fill"</span></span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"晴天"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"sun.max.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"夜间"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"moon.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"雨天"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.rain.fill"</span></span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"雷加雨"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.bolt.rain.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"太阳雨"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.sun.rain.fill"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"文件夹三"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"folder.fill"</span></span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"电话"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"phone"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"拍照"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"camera.circle.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"提醒"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"bell"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// List 通过$语法可以将集合的元素转换成可绑定的值</span>            <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>$l<span class="token punctuation">.</span>ls<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> $d <span class="token keyword">in</span>                    <span class="token class-name">PRowView</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> d<span class="token punctuation">.</span>s<span class="token punctuation">,</span> i<span class="token punctuation">:</span> d<span class="token punctuation">.</span>i<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">listRowInsets</span><span class="token punctuation">(</span><span class="token class-name">EdgeInsets</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> leading<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> bottom<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> trailing<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">listRowBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span>refreshable <span class="token punctuation">&#123;</span>                <span class="token comment">// 下拉刷新</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $s<span class="token punctuation">)</span> <span class="token comment">// 搜索</span>            <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"搜索关键字：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 自定义 List</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">PCustomListView</span><span class="token punctuation">(</span>$l<span class="token punctuation">.</span>ls<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> $d <span class="token keyword">in</span>                    <span class="token class-name">PRowView</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> d<span class="token punctuation">.</span>s<span class="token punctuation">,</span> i<span class="token punctuation">:</span> d<span class="token punctuation">.</span>i<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 添加数据</span>                <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                    l<span class="token punctuation">.</span>ls<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">PLModel</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"More"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"添加"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 使用大纲</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>outlineModel<span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> i<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 自定义大纲视图</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"可点击标题展开"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                <span class="token class-name">PCOutlineListView</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> outlineModel<span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> i<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 使用 OutlineGroup 实现大纲视图</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"OutlineGroup 实现大纲"</span></span><span class="token punctuation">)</span>                                <span class="token class-name">OutlineGroup</span><span class="token punctuation">(</span>outlineModel<span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> i<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                                <span class="token comment">// OutlineGroup 和 List 结合</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"OutlineGroup 和 List 结合"</span></span><span class="token punctuation">)</span>                <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>outlineModel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                        <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">OutlineGroup</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>children <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                                <span class="token class-name">Label</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> i<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Label</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> s<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>                <span class="token punctuation">&#125;</span> <span class="token comment">// end List</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end HStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义大纲视图</span><span class="token keyword">struct</span> <span class="token class-name">PCOutlineListView</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">D</span><span class="token punctuation">:</span> <span class="token class-name">RandomAccessCollection</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> v<span class="token punctuation">:</span> <span class="token class-name">PCOutlineView</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">></span>        <span class="token keyword">init</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> <span class="token class-name">D</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token class-name">KeyPath</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token operator">?></span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token class-name">PCOutlineView</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> d<span class="token punctuation">,</span> c<span class="token punctuation">:</span> c<span class="token punctuation">,</span> content<span class="token punctuation">:</span> content<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>            v        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCOutlineView</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">D</span><span class="token punctuation">:</span> <span class="token class-name">RandomAccessCollection</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> d<span class="token punctuation">:</span> <span class="token class-name">D</span>    <span class="token keyword">let</span> c<span class="token punctuation">:</span> <span class="token class-name">KeyPath</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token operator">?></span>    <span class="token keyword">let</span> content<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> isExpanded <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 控制初始是否展开的状态</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> sub <span class="token operator">=</span> i<span class="token punctuation">[</span>keyPath<span class="token punctuation">:</span> c<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">PCDisclosureGroup</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">PCOutlineView</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> sub<span class="token punctuation">,</span> c<span class="token punctuation">:</span> c<span class="token punctuation">,</span> content<span class="token punctuation">:</span> content<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token function">content</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">content</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end if</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCDisclosureGroup</span><span class="token operator">&lt;</span><span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">C</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> isExpanded <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> content<span class="token punctuation">:</span> <span class="token class-name">C</span>    <span class="token keyword">var</span> label<span class="token punctuation">:</span> <span class="token class-name">L</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DisclosureGroup</span><span class="token punctuation">(</span>isExpanded<span class="token punctuation">:</span> $isExpanded<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            content        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                isExpanded<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                label            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 大纲模式数据模型</span><span class="token keyword">struct</span> <span class="token class-name">POutlineModel</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> iconName<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">POutlineModel</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - List 的抽象，数据兼容任何集合类型</span><span class="token keyword">struct</span> <span class="token class-name">PCustomListView</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">:</span> <span class="token class-name">RandomAccessCollection</span> <span class="token operator">&amp;</span> <span class="token class-name">MutableCollection</span> <span class="token operator">&amp;</span> <span class="token class-name">RangeReplaceableCollection</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> data<span class="token punctuation">:</span> <span class="token class-name">D</span>    <span class="token keyword">var</span> content<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> data<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token operator">></span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>_data <span class="token operator">=</span> data        <span class="token keyword">self</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>$data<span class="token punctuation">,</span> content<span class="token punctuation">:</span> content<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onMove <span class="token punctuation">&#123;</span> indexSet<span class="token punctuation">,</span> offset <span class="token keyword">in</span>                        data<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>fromOffsets<span class="token punctuation">:</span> indexSet<span class="token punctuation">,</span> toOffset<span class="token punctuation">:</span> offset<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span>onDelete <span class="token punctuation">&#123;</span> indexSet <span class="token keyword">in</span>                        data<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>atOffsets<span class="token punctuation">:</span> indexSet<span class="token punctuation">)</span> <span class="token comment">// macOS 暂不支持</span>                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第一栏，共 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">data<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 项"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> footer<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"The End"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">listStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span> <span class="token comment">// 有.automatic、.inset、.plain、sidebar，macOS 暂不支持的有.grouped 和 .insetGrouped</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - Cell 视图</span><span class="token keyword">struct</span> <span class="token class-name">PRowView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">："</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 数据模型设计</span><span class="token keyword">struct</span> <span class="token class-name">PLModel</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token constant">PLVM</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> ls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">PLModel</span><span class="token punctuation">]</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">PLModel</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">20</span> <span class="token punctuation">&#123;</span>            ls<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">PLModel</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="LazyVStack-和-LazyHStack"><a href="#LazyVStack-和-LazyHStack" class="headerlink" title="LazyVStack 和 LazyHStack"></a>LazyVStack 和 LazyHStack</h4><p>LazyVStack 和 LazyHStack 里的视图只有在滚到时才会被创建。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayLazyVStackAndLazyHStackView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LazyVStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">300</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">PLHSRowView</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> i<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PLHSRowView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 个"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 个初始化了"</span></span><span class="token punctuation">)</span> <span class="token comment">// 用来查看什么时候创建的。</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="LazyVGrid-和-LazyHGrid"><a href="#LazyVGrid-和-LazyHGrid" class="headerlink" title="LazyVGrid 和 LazyHGrid"></a>LazyVGrid 和 LazyHGrid</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155708552-35396dcd-f120-4498-a793-a65abd68c0a6.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155708552-35396dcd-f120-4498-a793-a65abd68c0a6.jpeg"></p><p>列的设置有三种，这三种也可以组合用。</p><ul><li>GridItem(.fixed(10)) 会固定设置有多少列。</li><li>GridItem(.flexible()) 会充满没有使用的空间。</li><li>GridItem(.adaptive(minimum: 10)) 表示会根据设置大小自动设置有多少列展示。</li></ul><p>示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayLazyVGridAndLazyHGridView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span><span class="token class-name">Color</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string-literal"><span class="token string">"red"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>red<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"orange"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>orange<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"yellow"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"green"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>green<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"mint"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>mint<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"teal"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>teal<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"cyan"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>cyan<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"blue"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"indigo"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>indigo<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"purple"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"pink"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>pink<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"brown"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>brown<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"gray"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>gray<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"black"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>black    <span class="token punctuation">]</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span> pinnedViews<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>sectionHeaders<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Section</span><span class="token punctuation">(</span>header<span class="token punctuation">:</span>                            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"🎨调色板"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> maxHeight<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                                                <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> k <span class="token keyword">in</span>                        colors<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token operator">...</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>                            <span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Section</span><span class="token punctuation">(</span>header<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"图标集"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h4><p>ScrollView 使用 scrollTo 可以直接滚动到指定的位置。ScrollView 还可以透出偏移量，利用偏移量可以定义自己的动态视图，比如向下向上滚动视图时有不同效果，到顶部显示标题视图等。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayScrollView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scrollOffset<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token punctuation">.</span>zero        <span class="token keyword">var</span> infoView<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>"移动了 <span class="token punctuation">\</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">(</span>scrollOffset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">precision</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">fractionLength</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rounded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>"<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 标准用法</span>        <span class="token class-name">ScrollViewReader</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>            <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"跳到150"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                withAnimation <span class="token punctuation">&#123;</span>                    s<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end Button</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end ScrollViewReader</span>                <span class="token comment">// 自定义的 ScrollView 透出 offset 供使用</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PCScrollView</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> whenMoved<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> d <span class="token keyword">in</span>                scrollOffset <span class="token operator">=</span> d            <span class="token punctuation">&#125;</span>            infoView                    <span class="token punctuation">&#125;</span> <span class="token comment">// end ZStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 ScrollView</span><span class="token keyword">struct</span> <span class="token class-name">PCScrollView</span><span class="token operator">&lt;</span><span class="token class-name">C</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> c<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">C</span>    <span class="token keyword">let</span> whenMoved<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token attribute atrule">@ViewBuilder</span> c<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">C</span><span class="token punctuation">,</span> whenMoved<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c        <span class="token keyword">self</span><span class="token punctuation">.</span>whenMoved <span class="token operator">=</span> whenMoved    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> offsetReader<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>            <span class="token class-name">Color</span><span class="token punctuation">.</span>clear                <span class="token punctuation">.</span><span class="token function">preference</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token class-name">OffsetPreferenceKey</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> g<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"frameLayer"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minY<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            offsetReader            <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">coordinateSpace</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"frameLayer"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">onPreferenceChange</span><span class="token punctuation">(</span><span class="token class-name">OffsetPreferenceKey</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> perform<span class="token punctuation">:</span> whenMoved<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">OffsetPreferenceKey</span><span class="token punctuation">:</span> <span class="token class-name">PreferenceKey</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">var</span> defaultValue<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token punctuation">.</span>zero  <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">reduce</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">CGFloat</span><span class="token punctuation">,</span> nextValue<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGFloat</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浮层"><a href="#浮层" class="headerlink" title="浮层"></a>浮层</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/156135869-7451bbc9-95b9-445f-8721-66f0aedbed70.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/156135869-7451bbc9-95b9-445f-8721-66f0aedbed70.png"></p><p>浮层有 HUD、ContextMenu、Sheet、Alert、ConfirmationDialog、Popover、ActionSheet 等几种方式。这些方式实现代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlaySuperposedLayerView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> hudVM <span class="token operator">=</span> <span class="token function">PHUDVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShow <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShowAlert <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShowConfirmationDialog <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShowPopover <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                                    <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span>contextMenu <span class="token punctuation">&#123;</span>                            <span class="token comment">// 在 macOS 上右键会出现的菜单</span>                            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is clicked"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Click </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"列表"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>                <span class="token class-name">ToolbarItemGroup</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 Sheet"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShow <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                                        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 Alert"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShowAlert <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                                        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 confirmationDialog"</span></span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token punctuation">.</span>destructive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShowConfirmationDialog <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                                        <span class="token comment">// Popover 样式默认是弹出窗口置于按钮上方，指向底部。</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 Popover"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShowPopover <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">popover</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isShowPopover<span class="token punctuation">,</span> attachmentAnchor<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token punctuation">.</span>trailing<span class="token punctuation">)</span><span class="token punctuation">,</span> arrowEdge<span class="token punctuation">:</span> <span class="token punctuation">.</span>trailing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Popover 的内容"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                                    <span class="token punctuation">&#125;</span> <span class="token comment">// end ToolbarItemGroup</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end toolbar</span>            <span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isShowAlert<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Alert</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"弹框标题"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"弹框内容"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isShow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"dismiss"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Sheet"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"brain.head.profile"</span></span><span class="token punctuation">)</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"关闭"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShow <span class="token operator">=</span> <span class="token boolean">false</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">confirmationDialog</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确定删除？"</span></span><span class="token punctuation">,</span> isPresented<span class="token punctuation">:</span> $isShowConfirmationDialog<span class="token punctuation">,</span> titleVisibility<span class="token punctuation">:</span> <span class="token punctuation">.</span>hidden<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确定"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// do good thing</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>defaultAction<span class="token punctuation">)</span> <span class="token comment">// 使用 keyboardShortcut 可以设置成为默认选项样式</span>                                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"不不"</span></span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// good choice</span>                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span> message<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这个东西还有点重要哦"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                hudVM<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"您有一条新的短消息"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"ellipsis.bubble"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 HUD"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"switch.2"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">environmentObject</span><span class="token punctuation">(</span>hudVM<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">hud</span><span class="token punctuation">(</span>isShow<span class="token punctuation">:</span> $hudVM<span class="token punctuation">.</span>isShow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span>hudVM<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> hudVM<span class="token punctuation">.</span>systemImage<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 供全局使用的 HUD</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token constant">PHUDVM</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> isShow<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> systemImage<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>        <span class="token keyword">func</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title        <span class="token keyword">self</span><span class="token punctuation">.</span>systemImage <span class="token operator">=</span> systemImage        withAnimation <span class="token punctuation">&#123;</span>            isShow <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 扩展 View 使其能够有 HUD 的能力</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">hud</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">(</span>        isShow<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">Bool</span><span class="token operator">></span><span class="token punctuation">,</span>        <span class="token attribute atrule">@ViewBuilder</span> v<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">V</span>    <span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">self</span>                        <span class="token keyword">if</span> isShow<span class="token punctuation">.</span>wrappedValue <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>                <span class="token function">PHUD</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> v<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token class-name">AnyTransition</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>edge<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">combined</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token punctuation">.</span>opacity<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>                        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            withAnimation <span class="token punctuation">&#123;</span>                                isShow<span class="token punctuation">.</span>wrappedValue <span class="token operator">=</span> <span class="token boolean">false</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">zIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 HUD</span><span class="token keyword">struct</span> <span class="token constant">PHUD</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">let</span> v<span class="token punctuation">:</span> <span class="token class-name">V</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        v            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                <span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TabView"><a href="#TabView" class="headerlink" title="TabView"></a>TabView</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayTabView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selection <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TabView</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"首页"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">hidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"二栏"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"三栏"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"four"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"five"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"six"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"seven"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"eight"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"nine"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"ten"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end TabView</span>                                    <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"上一页"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> selection <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                        selection <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cancelAction<span class="token punctuation">)</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"下一页"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> selection <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token punctuation">&#123;</span>                        selection <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>defaultAction<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end HStack</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.tabViewStyle(PageTabViewStyle(indexDisplayMode: .never)) 可以实现 UIPageViewController 的效果，如果要给小白点加上背景，可以多添加一个 .indexViewStyle(PageIndexViewStyle(backgroundDisplayMode: .always)) 修改器。</p><h4 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/156289124-bde3c73e-2a81-4043-8682-ae55a820f1aa.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/156289124-bde3c73e-2a81-4043-8682-ae55a820f1aa.png"></p><p>Toggle 可以设置 toggleStyle，可以自定义样式。使用示例如下</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayToggleView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isEnable <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 普通样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"开了"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"关了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 按钮样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"打开了"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"关闭了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.moon"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">controlSize</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>button<span class="token punctuation">)</span>                <span class="token comment">// Switch 样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"开了"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"关了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token class-name">SwitchToggleStyle</span><span class="token punctuation">(</span>tint<span class="token punctuation">:</span> <span class="token punctuation">.</span>orange<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 自定义样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"录音中"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"已静音"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token class-name">PCToggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义样式</span><span class="token keyword">struct</span> <span class="token class-name">PCToggleStyle</span><span class="token punctuation">:</span> <span class="token class-name">ToggleStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>label            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isOn <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"mic.square.fill"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"mic.slash.circle.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                    configuration<span class="token punctuation">.</span>isOn<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/156298284-2fb37b3e-55f0-4918-ba8e-74f747bf3171.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/156298284-2fb37b3e-55f0-4918-ba8e-74f747bf3171.jpeg"></p><p>有 Picker 视图，还有颜色和时间选择的 ColorPicker 和 DatePicker。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayPickerView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> select <span class="token operator">=</span> <span class="token number">1</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> dateFt<span class="token punctuation">:</span> <span class="token class-name">DateFormatter</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> ft <span class="token operator">=</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ft<span class="token punctuation">.</span>dateStyle <span class="token operator">=</span> <span class="token punctuation">.</span>long        <span class="token keyword">return</span> ft    <span class="token punctuation">&#125;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 默认是下拉的风格</span>        <span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选区"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $select<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"2"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// Segment 风格，</span>        <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $select<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token class-name">SegmentedPickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 颜色选择器</span>        <span class="token class-name">ColorPicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个颜色"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $color<span class="token punctuation">,</span> supportsOpacity<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token comment">// 时间选择器</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DatePicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $date<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">...</span><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> displayedComponents<span class="token punctuation">:</span> <span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选时间"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">DatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选时间"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $date<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">datePickerStyle</span><span class="token punctuation">(</span><span class="token class-name">GraphicalDatePickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxHeight<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">)</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"时间：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">,</span> formatter<span class="token punctuation">:</span> dateFt</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Slider"><a href="#Slider" class="headerlink" title="Slider"></a>Slider</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlaySliderView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $count<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Stepper"><a href="#Stepper" class="headerlink" title="Stepper"></a>Stepper</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayStepperView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stepper</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $count<span class="token punctuation">,</span> step<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"共</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> onEditingChanged<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> b <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end Stepper</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h4><p>键盘快捷键的使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayKeyboard</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span>systemIconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"camera.shutter.button"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"按了回车键"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>defaultAction<span class="token punctuation">)</span> <span class="token comment">// 回车</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"ESC"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"按了 ESC"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cancelAction<span class="token punctuation">)</span> <span class="token comment">// ESC 键</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"CMD + p"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"按了 CMD + p"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p"</span></span><span class="token punctuation">)</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"SHIFT + p"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"按了 SHIFT + p"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p"</span></span><span class="token punctuation">,</span> modifiers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>shift<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视觉"><a href="#视觉" class="headerlink" title="视觉"></a>视觉</h3><h4 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayColor</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">edgesIgnoringSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">)</span> <span class="token comment">// Color 也是一个 View</span>                        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这是一个适配了暗黑的文字颜色"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>light<span class="token punctuation">:</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span> dark<span class="token punctuation">:</span> <span class="token punctuation">.</span>pink<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token punctuation">.</span>quaternaryLabelColor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 使用以前 NSColor</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"自定义颜色"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 暗黑适配颜色</span><span class="token keyword">struct</span> <span class="token class-name">PCColorModifier</span><span class="token punctuation">:</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">var</span> colorScheme    <span class="token keyword">var</span> light<span class="token punctuation">:</span> <span class="token class-name">Color</span>    <span class="token keyword">var</span> dark<span class="token punctuation">:</span> <span class="token class-name">Color</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> adaptColor<span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> colorScheme <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>light<span class="token punctuation">:</span>            <span class="token keyword">return</span> light        <span class="token keyword">case</span> <span class="token punctuation">.</span>dark<span class="token punctuation">:</span>            <span class="token keyword">return</span> dark        <span class="token attribute atrule">@unknown</span> <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> light        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        content<span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>adaptColor<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">foregroundColor</span><span class="token punctuation">(</span>light<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">,</span> dark<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">PCColorModifier</span><span class="token punctuation">(</span>light<span class="token punctuation">:</span> light<span class="token punctuation">,</span> dark<span class="token punctuation">:</span> dark<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/156332122-66813e4e-851c-4207-8cb9-b41ea0365008.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/156332122-66813e4e-851c-4207-8cb9-b41ea0365008.jpeg"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayEffect</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isHover <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token comment">// 材质</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"材质效果"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>isHover <span class="token operator">?</span> <span class="token number">40</span> <span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>regularMaterial<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onHover <span class="token punctuation">&#123;</span> b <span class="token keyword">in</span>                        withAnimation <span class="token punctuation">&#123;</span>                            isHover <span class="token operator">=</span> b                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                                <span class="token comment">// 模糊</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"模糊效果"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>background <span class="token punctuation">&#123;</span>                        <span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> opaque<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                                <span class="token comment">// 选择</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"3D 旋转"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">rotation3DEffect</span><span class="token punctuation">(</span><span class="token class-name">Angle</span><span class="token punctuation">(</span>degrees<span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">blendMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>hardLight<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>材质厚度从低到高有：</p><ul><li>.regularMaterial</li><li>.thinMaterial</li><li>.ultraThinMaterial</li><li>.thickMaterial</li><li>.ultraThickMaterial</li></ul><h4 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h4><p>SwiftUI 里实现动画的方式包括有 .animation 隐式动画、withAnimation 和 withTransaction 显示动画、matchedGeometryEffect Hero 动画和 TimelineView 等。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayAnimation</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isChange <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> anis<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Animation</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p2"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">interpolatingSpring</span><span class="token punctuation">(</span>stiffness<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> damping<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p4"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p5"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeIn</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p6"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p7"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">interactiveSpring</span><span class="token punctuation">(</span>response<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> dampingFraction<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> blendDuration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p8"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p9"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">repeatCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selection <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// animation 隐式动画和 withAnimation 显示动画</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>isChange <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"另一种状态"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"一种状态"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span>easeInOut<span class="token punctuation">,</span> value<span class="token punctuation">:</span> isChange<span class="token punctuation">)</span> <span class="token comment">// 受限的隐式动画，只绑定某个值。</span>            <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                <span class="token comment">// 使用 withAnimation 就是显式动画，效果等同 withTransaction(Transaction(animation: .default))</span>                withAnimation <span class="token punctuation">&#123;</span>                    isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 设置 Transaction。和隐式动画共存时，优先执行 withAnimation 或 Transaction。</span>                <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>animation<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                t<span class="token punctuation">.</span>disablesAnimations <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 用来禁用隐式动画</span>                <span class="token function">withTransaction</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end onHover</span>                <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token number">60</span> <span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span>anis<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span>anis<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> isChange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>            isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"pause.fill"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"play.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// matchedGeometryEffect 的使用</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"后台"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            placeStayView            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"前台"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            placeShowView        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>                <span class="token comment">// 通过使用相同 matchedGeometryEffect 的 id，绑定两个元素变化。</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> isChange <span class="token punctuation">&#123;</span>                <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g1"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"转换"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">!</span>isChange <span class="token punctuation">&#123;</span>                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g1"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">!</span>isChange <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p19"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g1"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 使用 isSource，作为移动到相同 matchedGeometryEffect id 的方法。</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p19"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"g2"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">,</span> isSource<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p19"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g2"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                                <span class="token comment">// 点击跟随的效果</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> i <span class="token operator">==</span> selection <span class="token operator">?</span> <span class="token number">200</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"h</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                        withAnimation <span class="token punctuation">&#123;</span>                            selection <span class="token operator">=</span> i                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"h</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">selection</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">,</span> isSource<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>                <span class="token comment">// matchedGeometryEffect 还可以应用到 List 中，通过 Array enumerated 获得 index 作为 matchedGeometryEffect 的 id。右侧固定按钮可以直接让对应 id 的视图滚动到固定按钮的位置</span>                        <span class="token comment">// TimelineView</span>        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">periodic</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token punctuation">.</span>now<span class="token punctuation">,</span> by<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">t<span class="token punctuation">.</span>date</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token class-name">HStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">repeatCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> e<span class="token punctuation">)</span>                                <span class="token class-name">TimelineSubView</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> t<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token comment">// 需要传入 timeline 的时间给子视图才能够起作用。</span>                                <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// matchedGeometryEffect</span>        <span class="token comment">/// TimelineScheduler 的使用，TimelineScheduler 有以下类型</span>        <span class="token comment">/// .animation：制定更新的频率，可以控制暂停</span>        <span class="token comment">/// .everyMinute：每分钟更新一次</span>        <span class="token comment">/// .explicit：所有要更新的放到一个数组里</span>        <span class="token comment">/// .periodic：设置开始时间和更新频率</span>        <span class="token comment">/// 也可以自定义 TimelineScheduler</span>        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span>everySecond<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>            <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 自定义的 TimelineScheduler</span>        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">everyLoop</span><span class="token punctuation">(</span>timeOffsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>            <span class="token class-name">TimelineSubView</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> t<span class="token punctuation">.</span>date<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// MARK: - TimelineSubView</span>    <span class="token keyword">struct</span> <span class="token class-name">TimelineSubView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> date <span class="token punctuation">:</span> <span class="token class-name">Date</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"let's go"</span></span>        <span class="token comment">// 顺序从数组中取值，取完再重头开始</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> idx<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">func</span> <span class="token function-definition function">advanceIndex</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            idx <span class="token operator">=</span> <span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> count            <span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> idx <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">HStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">idx</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeIn</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> date<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                        <span class="token function">advanceIndex</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                        s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">.</span>hour</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">.</span>minute</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">.</span>second</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>                        <span class="token function">advanceIndex</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                                    <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// MARK: - 用 matchedGeometryEffect 做动画</span>    <span class="token comment">/// matchedGeometryEffect 可以无缝的将一个图像变成另外一个图像。</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> placeStayItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"p2"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"p4"</span></span><span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> placeShowItems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token attribute atrule">@Namespace</span> <span class="token keyword">private</span> <span class="token keyword">var</span> mgeStore        <span class="token keyword">private</span> <span class="token keyword">var</span> placeStayView<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>placeStayItems<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                        withAnimation <span class="token punctuation">&#123;</span>                            placeStayItems<span class="token punctuation">.</span>removeAll <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">==</span> s <span class="token punctuation">&#125;</span>                            placeShowItems<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end LazyVGrid</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// private var placeStayView</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> placeShowView<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>placeShowItems<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                        withAnimation <span class="token punctuation">&#123;</span>                            placeShowItems<span class="token punctuation">.</span>removeAll <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">==</span> s <span class="token punctuation">&#125;</span>                            placeStayItems<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>white<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end LazyVGrid</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end private var placeShowView</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end struct PlayAnimation</span><span class="token comment">// MARK: - 扩展 TimelineSchedule</span><span class="token keyword">extension</span> <span class="token class-name">TimelineSchedule</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">PeriodicTimelineSchedule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> everySecond<span class="token punctuation">:</span> <span class="token class-name">PeriodicTimelineSchedule</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token punctuation">.</span>now<span class="token punctuation">,</span> by<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义一个 TimelineSchedule</span><span class="token comment">// timeOffsets 用完，就会再重头重新再来一遍</span><span class="token keyword">struct</span> <span class="token class-name">PCLoopTimelineSchedule</span><span class="token punctuation">:</span> <span class="token class-name">TimelineSchedule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timeOffsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TimeInterval</span><span class="token punctuation">]</span>        <span class="token keyword">func</span> <span class="token function-definition function">entries</span><span class="token punctuation">(</span>from startDate<span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token punctuation">,</span> mode<span class="token punctuation">:</span> <span class="token class-name">TimelineScheduleMode</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Entries</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Entries</span><span class="token punctuation">(</span>last<span class="token punctuation">:</span> startDate<span class="token punctuation">,</span> offsets<span class="token punctuation">:</span> timeOffsets<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">struct</span> <span class="token class-name">Entries</span><span class="token punctuation">:</span> <span class="token class-name">Sequence</span><span class="token punctuation">,</span> <span class="token class-name">IteratorProtocol</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> last<span class="token punctuation">:</span> <span class="token class-name">Date</span>        <span class="token keyword">let</span> offsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TimeInterval</span><span class="token punctuation">]</span>        <span class="token keyword">var</span> idx<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Date</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>            idx <span class="token operator">=</span> <span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> offsets<span class="token punctuation">.</span>count            last <span class="token operator">=</span> last<span class="token punctuation">.</span><span class="token function">addingTimeInterval</span><span class="token punctuation">(</span>offsets<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> last        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end Struct Entries</span><span class="token punctuation">&#125;</span><span class="token comment">// 为自定义的 PCLoopTimelineSchedule 做一个 TimelineSchedule 的扩展函数，方便使用</span><span class="token keyword">extension</span> <span class="token class-name">TimelineSchedule</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">PCLoopTimelineSchedule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">everyLoop</span><span class="token punctuation">(</span>timeOffsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TimeInterval</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">PCLoopTimelineSchedule</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>timeOffsets<span class="token punctuation">:</span> timeOffsets<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h4><p>Canvas 可以画路径、图片和文字、Symbols、可变的图形上下文、使用 CoreGraphics 代码和做动画。</p><p>图形上下文可以被 addFilter、clip、clipToLayer、concatenate、rotate、scaleBy、translateBy 这些方法来进行改变。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayCanvas</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Color</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 画路径</span>        <span class="token class-name">PCCanvasPathView</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token punctuation">.</span>rounded<span class="token punctuation">)</span>        <span class="token class-name">PCCanvasPathView</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token punctuation">.</span>ellipse<span class="token punctuation">)</span>        <span class="token class-name">PCCanvasPathView</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token punctuation">.</span>circle<span class="token punctuation">)</span>        <span class="token comment">// 图片和文字</span>        <span class="token class-name">PCCanvasImageAndText</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Starming"</span></span><span class="token punctuation">,</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">// Symbol，在 Canvas 里引用 SwiftUI 视图</span>        <span class="token class-name">Canvas</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">,</span> s <span class="token keyword">in</span>            <span class="token keyword">let</span> c0 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">!</span>            <span class="token keyword">let</span> c1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span>            <span class="token keyword">let</span> c2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!</span>            <span class="token keyword">let</span> c3 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">!</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c0<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c3<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> symbols<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i<span class="token punctuation">,</span> c <span class="token keyword">in</span>                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Symbol 动画和 SwiftUI 视图一样，不会受影响</span>        <span class="token class-name">Canvas</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">,</span> s <span class="token keyword">in</span>            <span class="token keyword">let</span> sb <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">!</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> s<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> s<span class="token punctuation">.</span>height <span class="token operator">/</span>  <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> symbols<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PCForSymbolView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end var body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 给 Symbol 用的视图</span><span class="token keyword">struct</span> <span class="token class-name">PCForSymbolView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> change <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"star.fill"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span>change <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>                <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span>autoreverses<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    change<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 图片和文字</span><span class="token keyword">struct</span> <span class="token class-name">PCCanvasImageAndText</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Color</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> fontSize<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">42</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Canvas</span> <span class="token punctuation">&#123;</span> context<span class="token punctuation">,</span> size <span class="token keyword">in</span>            <span class="token keyword">let</span> midPoint <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> font <span class="token operator">=</span> <span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> fontSize<span class="token punctuation">)</span>            <span class="token keyword">var</span> resolved <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token punctuation">(</span>size<span class="token punctuation">.</span>width <span class="token operator">-</span> resolved<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width <span class="token operator">-</span> start<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                        resolved<span class="token punctuation">.</span>shading <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">linearGradient</span><span class="token punctuation">(</span><span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> colors<span class="token punctuation">)</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> start<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> end<span class="token punctuation">)</span>            context<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>resolved<span class="token punctuation">,</span> at<span class="token punctuation">:</span> midPoint<span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - Path</span><span class="token keyword">struct</span> <span class="token class-name">PCCanvasPathView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">enum</span> <span class="token class-name">PathType</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> rounded<span class="token punctuation">,</span> ellipse<span class="token punctuation">,</span> casual<span class="token punctuation">,</span> circle    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> t<span class="token punctuation">:</span> <span class="token class-name">PathType</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Canvas</span> <span class="token punctuation">&#123;</span> context<span class="token punctuation">,</span> size <span class="token keyword">in</span>                        <span class="token function">conf</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token operator">&amp;</span>context<span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">,</span> type<span class="token punctuation">:</span> t<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end Canvas</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">conf</span><span class="token punctuation">(</span> context<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">GraphicsContext</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token class-name">PathType</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>origin<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insetBy</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">switch</span> type <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>rounded<span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>roundedRect<span class="token punctuation">:</span> rect<span class="token punctuation">,</span> cornerRadius<span class="token punctuation">:</span> <span class="token number">35.0</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>ellipse<span class="token punctuation">:</span>            <span class="token keyword">let</span> cgPath <span class="token operator">=</span> <span class="token class-name">CGPath</span><span class="token punctuation">(</span>ellipseIn<span class="token punctuation">:</span> rect<span class="token punctuation">,</span> transform<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>            path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>cgPath<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>casual<span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token class-name">Path</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> points<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">CGPoint</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>                    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>                <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span>                <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">addLines</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>circle<span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> rect<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                        <span class="token keyword">let</span> gradient <span class="token operator">=</span> <span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> from <span class="token operator">=</span> rect<span class="token punctuation">.</span>origin        <span class="token keyword">let</span> to <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> rect<span class="token punctuation">.</span>width<span class="token punctuation">,</span> y<span class="token punctuation">:</span> rect<span class="token punctuation">.</span>height <span class="token operator">+</span> from<span class="token punctuation">.</span>y<span class="token punctuation">)</span>                <span class="token comment">// Stroke path</span>        context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">)</span>        context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">linearGradient</span><span class="token punctuation">(</span>gradient<span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> from<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> to<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开发者"><a href="#开发者" class="headerlink" title="开发者"></a>开发者</h2><h3 id="Swift官方"><a href="#Swift官方" class="headerlink" title="Swift官方"></a>Swift官方</h3><ul><li><a href="https://github.com/tkremenek">tkremenek</a>：Swift director</li><li><a href="https://github.com/DougGregor">DougGregor</a></li><li><a href="https://github.com/mikeash">mikeash</a>：Friday Q&amp;A</li></ul><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><ul><li><a href="https://github.com/onevcat">onevcat</a>：喵神</li><li><a href="https://github.com/DianQK">DianQK</a>：靛青 - SwiftGG翻译组</li><li><a href="https://github.com/kean">kean</a>：Nuke、Pulse</li><li><a href="https://github.com/stephencelis">stephencelis</a>：Point-Free &amp; SQLite.swift</li><li><a href="https://github.com/ibireme">ibireme</a>：YYDS</li><li><a href="https://github.com/mattt">mattt</a>：NSHipster</li><li><a href="https://github.com/ethanhuang13">ethanhuang13</a>：13 - [weak self]播客</li><li><a href="https://github.com/Kyle-Ye">Kyle-Ye</a></li><li><a href="https://github.com/ming1016">ming1016</a>：戴铭</li><li><a href="https://github.com/mxcl">mxcl</a></li><li><a href="https://github.com/lkzhao">lkzhao</a></li><li><a href="https://github.com/insidegui">insidegui</a></li><li><a href="https://github.com/johnno1962">johnno1962</a>：InjectionIII</li><li><a href="https://github.com/wigging">wigging</a>：Back to the Mac</li><li><a href="https://github.com/Dimillian">Dimillian</a>：MovieSwiftUI</li><li><a href="https://github.com/krzysztofzablocki">krzysztofzablocki</a>：元编程 Sourcery</li><li><a href="https://github.com/onmyway133">onmyway133</a></li><li><a href="https://github.com/pofat">pofat</a>：Pofat - [weak self]播客</li><li><a href="https://github.com/mecid">mecid</a>：Swift with Majid</li><li><a href="https://github.com/hebertialmeida">hebertialmeida</a></li><li><a href="https://github.com/kylef">kylef</a>：Commander</li><li><a href="https://github.com/joshaber">joshaber</a>：at GitHub</li><li><a href="https://github.com/ashfurrow">ashfurrow</a>：Moya</li><li><a href="https://github.com/jessesquires">jessesquires</a></li></ul><h2 id="探索库"><a href="#探索库" class="headerlink" title="探索库"></a>探索库</h2><h3 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h3><p><em><a href="https://github.com/SwiftOldDriver/iOS-Weekly">SwiftOldDriver&#x2F;iOS-Weekly</a></em><br>老司机 iOS 周报<br>Star：4115 Issue：11 开发语言：<br>🇨🇳 老司机 iOS 周报</p><p><em><a href="https://github.com/matteocrippa/awesome-swift">matteocrippa&#x2F;awesome-swift</a></em><br>Star：21759 Issue：0 开发语言：Swift<br>A collaborative list of awesome Swift libraries and resources. Feel free to contribute!</p><p><em><a href="https://github.com/ruanyf/weekly">ruanyf&#x2F;weekly</a></em><br>科技爱好者周刊<br>Star：21785 Issue：1758 开发语言：<br>科技爱好者周刊，每周五发布</p><p><em><a href="https://github.com/KwaiAppTeam/SwiftPamphletApp">KwaiAppTeam&#x2F;SwiftPamphletApp</a></em><br>戴铭的开发小册子<br>Star：1545 Issue：150 开发语言：Swift<br>戴铭的开发小册子，一本活的开发手册。使用 SwiftUI + Combine + Swift Concurrency Aysnc&#x2F;Await Actor + GitHub API 开发的 macOS 应用</p><h3 id="封装易用功能"><a href="#封装易用功能" class="headerlink" title="封装易用功能"></a>封装易用功能</h3><p><em><a href="https://github.com/SwifterSwift/SwifterSwift">SwifterSwift&#x2F;SwifterSwift</a></em><br>Handy Swift extensions<br>Star：11010 Issue：22 开发语言：Swift<br>A handy collection of more than 500 native Swift extensions to boost your productivity.</p><p><em><a href="https://github.com/JoanKing/JKSwiftExtension">JoanKing&#x2F;JKSwiftExtension</a></em><br>Swift常用扩展、组件、协议<br>Star：278 Issue：0 开发语言：Swift<br>Swift常用扩展、组件、协议，方便项目快速搭建，提供完整清晰的Demo示例，不断的完善中…… </p><p><em><a href="https://github.com/infinum/iOS-Nuts-And-Bolts">infinum&#x2F;iOS-Nuts-And-Bolts</a></em><br>Star：174 Issue：0 开发语言：Swift<br>iOS bits and pieces that you can include in your project to make your life a bit easier.</p><p><em><a href="https://github.com/gtokman/ExtensionKit">gtokman&#x2F;ExtensionKit</a></em><br>Star：92 Issue：0 开发语言：Swift<br>Helpful extensions for iOS app development 🚀 </p><h3 id="SwiftUI-扩展"><a href="#SwiftUI-扩展" class="headerlink" title="SwiftUI 扩展"></a>SwiftUI 扩展</h3><p><em><a href="https://github.com/SwiftUIX/SwiftUIX">SwiftUIX&#x2F;SwiftUIX</a></em><br>扩展 SwiftUI<br>Star：4455 Issue：6 开发语言：Swift<br>Extensions and additions to the standard SwiftUI library.</p><p><em><a href="https://github.com/SDWebImage/SDWebImageSwiftUI">SDWebImage&#x2F;SDWebImageSwiftUI</a></em><br>Star：1314 Issue：43 开发语言：Swift<br>SwiftUI Image loading and Animation framework powered by SDWebImage</p><p><em><a href="https://github.com/apptekstudios/ASCollectionView">apptekstudios&#x2F;ASCollectionView</a></em><br>SwiftUI collection<br>Star：1151 Issue：30 开发语言：Swift<br>A SwiftUI collection view with support for custom layouts, preloading, and more.</p><p><em><a href="https://github.com/siteline/SwiftUI-Introspect">siteline&#x2F;SwiftUI-Introspect</a></em><br>SwiftUI 引入 UIKit<br>Star：2890 Issue：48 开发语言：Swift<br>Introspect underlying UIKit components from SwiftUI</p><p><em><a href="https://github.com/AvdLee/SwiftUIKitView">AvdLee&#x2F;SwiftUIKitView</a></em><br>在 SwiftUI 中 使用 UIKit<br>Star：498 Issue：3 开发语言：Swift<br>Easily use UIKit views in your SwiftUI applications. Create Xcode Previews for UIView elements</p><p><em><a href="https://github.com/danielsaidi/SwiftUIKit">danielsaidi&#x2F;SwiftUIKit</a></em><br>给 SwiftUI 添加更多功能<br>Star：565 Issue：0 开发语言：Swift<br>SwiftUIKit contains additional functionality for SwiftUI.</p><p><em><a href="https://github.com/Toni77777/awesome-swiftui-libraries">Toni77777&#x2F;awesome-swiftui-libraries</a></em><br>SwiftUI 可使用的库<br>Star：161 Issue：0 开发语言：Swift<br>:rocket: Awesome SwiftUI Libraries </p><p><em><a href="https://github.com/rakutentech/AltSwiftUI">rakutentech&#x2F;AltSwiftUI</a></em><br>类 SwiftUI<br>Star：254 Issue：6 开发语言：Swift<br>Open Source UI framework based on SwiftUI syntax and features, adding backwards compatibility.</p><p><em><a href="https://github.com/gymshark/ios-stack-kit">gymshark&#x2F;ios-stack-kit</a></em><br>类 SwiftUI<br>Star：114 Issue：1 开发语言：Swift<br>The power of SwiftUI with UIKit</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><em><a href="https://github.com/onevcat/Kingfisher">onevcat&#x2F;Kingfisher</a></em><br>Star：19940 Issue：73 开发语言：Swift<br>A lightweight, pure-Swift library for downloading and caching images from the web.</p><p><em><a href="https://github.com/kean/Nuke">kean&#x2F;Nuke</a></em><br>Star：6557 Issue：9 开发语言：Swift<br>Image loading system</p><p><em><a href="https://github.com/suzuki-0000/SKPhotoBrowser">suzuki-0000&#x2F;SKPhotoBrowser</a></em><br>图片浏览<br>Star：2325 Issue：90 开发语言：Swift<br>Simple PhotoBrowser&#x2F;Viewer inspired by facebook, twitter photo browsers written by swift</p><h3 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h3><p><em><a href="https://github.com/gonzalezreal/MarkdownUI">gonzalezreal&#x2F;MarkdownUI</a></em><br>Star：680 Issue：6 开发语言：Swift<br>Render Markdown text in SwiftUI</p><p><em><a href="https://github.com/tophat/RichTextView">tophat&#x2F;RichTextView</a></em><br>Star：1059 Issue：27 开发语言：Swift<br>iOS Text View (UIView) that Properly Displays LaTeX, HTML, Markdown, and YouTube&#x2F;Vimeo Links</p><p><em><a href="https://github.com/keitaoouchi/MarkdownView">keitaoouchi&#x2F;MarkdownView</a></em><br>Star：1752 Issue：28 开发语言：Swift<br>Markdown View for iOS.</p><p><em><a href="https://github.com/johnxnguyen/Down">johnxnguyen&#x2F;Down</a></em><br>fast Markdown<br>Star：1934 Issue：17 开发语言：C<br>Blazing fast Markdown &#x2F; CommonMark rendering in Swift, built upon cmark.</p><p><em><a href="https://github.com/qeude/SwiftDown">qeude&#x2F;SwiftDown</a></em><br>Swift 写的可换主题的 Markdown 编辑器组件<br>Star：81 Issue：0 开发语言：Swift<br>📦 A themable markdown editor component for your SwiftUI apps.</p><p><em><a href="https://github.com/JohnSundell/Ink">JohnSundell&#x2F;Ink</a></em><br>Markdown 解析器<br>Star：2090 Issue：23 开发语言：Swift<br>A fast and flexible Markdown parser written in Swift.</p><p><em><a href="https://github.com/tnantoka/edhita">tnantoka&#x2F;edhita</a></em><br>Star：1186 Issue：16 开发语言：Swift<br>Fully open source text editor for iOS written in Swift.</p><p><em><a href="https://github.com/glushchenko/fsnotes">glushchenko&#x2F;fsnotes</a></em><br>Star：4799 Issue：230 开发语言：Swift<br>Notes manager for macOS&#x2F;iOS</p><p><em><a href="https://github.com/coteditor/CotEditor">coteditor&#x2F;CotEditor</a></em><br>Star：4336 Issue：118 开发语言：Swift<br>Lightweight Plain-Text Editor for macOS</p><p><em><a href="https://github.com/mchakravarty/CodeEditorView">mchakravarty&#x2F;CodeEditorView</a></em><br>SwiftUI 写的代码编辑器<br>Star：366 Issue：30 开发语言：Swift<br>SwiftUI code editor view for iOS and macOS</p><p><em><a href="https://github.com/CodeEditApp/CodeEdit">CodeEditApp&#x2F;CodeEdit</a></em><br>原生，性能好的代码编辑器<br>Star：0 Issue：0 开发语言：</p><p><em><a href="https://github.com/ZeeZide/CodeEditor">ZeeZide&#x2F;CodeEditor</a></em><br>使用 Highlight.js 的来做语法高亮的 SwiftUI 编辑器<br>Star：0 Issue：0 开发语言：</p><h3 id="动画-1"><a href="#动画-1" class="headerlink" title="动画"></a>动画</h3><p><em><a href="https://github.com/recherst/kavsoft-swiftui-animations">recherst&#x2F;kavsoft-swiftui-animations</a></em><br>Star：107 Issue：0 开发语言：Swift<br>SwiftUI animation tutorials, all of demos are consisted of youtube videos at website of kavsoft. 🔗 <a href="https://kavsoft.dev/">https://kavsoft.dev</a></p><p><em><a href="https://github.com/timdonnelly/Advance">timdonnelly&#x2F;Advance</a></em><br>Physics-based animations<br>Star：4448 Issue：4 开发语言：Swift<br>Physics-based animations for iOS, tvOS, and macOS.</p><p><em><a href="https://github.com/MengTo/Spring">MengTo&#x2F;Spring</a></em><br>动画<br>Star：13978 Issue：167 开发语言：Swift<br>A library to simplify iOS animations in Swift.</p><h3 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h3><p><em><a href="https://github.com/stephencelis/SQLite.swift">stephencelis&#x2F;SQLite.swift</a></em><br>Star：8144 Issue：87 开发语言：Swift<br>A type-safe, Swift-language layer over SQLite3.</p><p><em><a href="https://github.com/groue/GRDB.swift">groue&#x2F;GRDB.swift</a></em><br>Star：4932 Issue：3 开发语言：Swift<br>A toolkit for SQLite databases, with a focus on application development</p><p><em><a href="https://github.com/caiyue1993/IceCream">caiyue1993&#x2F;IceCream</a></em><br>CloudKit 同步 Realm 数据库<br>Star：1689 Issue：47 开发语言：Swift<br>Sync Realm Database with CloudKit</p><p><em><a href="https://github.com/realm/realm-cocoa">realm&#x2F;realm-cocoa</a></em><br>Star：14980 Issue：361 开发语言：Objective-C<br>Realm is a mobile database: a replacement for Core Data &amp; SQLite</p><p><em><a href="https://github.com/PostgresApp/PostgresApp">PostgresApp&#x2F;PostgresApp</a></em><br>PostgreSQL macOS 应用<br>Star：6239 Issue：121 开发语言：Makefile<br>The easiest way to get started with PostgreSQL on the Mac</p><h3 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h3><p><em><a href="https://github.com/ReactiveX/RxSwift">ReactiveX&#x2F;RxSwift</a></em><br>函数响应式编程<br>Star：21990 Issue：16 开发语言：Swift<br>Reactive Programming in Swift</p><p><em><a href="https://github.com/pointfreeco/swift-composable-architecture">pointfreeco&#x2F;swift-composable-architecture</a></em><br>Star：5790 Issue：13 开发语言：Swift<br>A library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind.</p><p><em><a href="https://github.com/onmyway133/awesome-ios-architecture">onmyway133&#x2F;awesome-ios-architecture</a></em><br>Star：4547 Issue：0 开发语言：<br>:japanese_castle: Better ways to structure iOS apps</p><p><em><a href="https://github.com/ReSwift/ReSwift">ReSwift&#x2F;ReSwift</a></em><br>单页面状态和数据管理<br>Star：7147 Issue：38 开发语言：Swift<br>Unidirectional Data Flow in Swift - Inspired by Redux</p><p><em><a href="https://github.com/gre4ixin/ReduxUI">gre4ixin&#x2F;ReduxUI</a></em><br>SwiftUI Redux 架构<br>Star：27 Issue：0 开发语言：Swift<br>💎 Redux like architecture for SwiftUI</p><p><em><a href="https://github.com/BohdanOrlov/iOS-Developer-Roadmap">BohdanOrlov&#x2F;iOS-Developer-Roadmap</a></em><br>Star：5670 Issue：7 开发语言：Swift<br>Roadmap to becoming an iOS developer in 2018.</p><p><em><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa&#x2F;ReactiveCocoa</a></em><br>Star：19987 Issue：3 开发语言：Swift<br>Cocoa framework and Obj-C dynamism bindings for ReactiveSwift.</p><p><em><a href="https://github.com/mehdihadeli/awesome-software-architecture">mehdihadeli&#x2F;awesome-software-architecture</a></em><br>软件架构<br>Star：7415 Issue：2 开发语言：<br>A curated list of awesome articles, videos, and other resources to learn and practice about software architecture, patterns, and principles.</p><p><em><a href="https://github.com/nalexn/clean-architecture-swiftui">nalexn&#x2F;clean-architecture-swiftui</a></em><br>干净完整的SwiftUI+Combine例子，包含网络和单元测试等<br>Star：3275 Issue：17 开发语言：Swift<br>SwiftUI sample app using Clean Architecture. Examples of working with CoreData persistence, networking, dependency injection, unit testing, and more.</p><p><em><a href="https://github.com/krzysztofzablocki/Sourcery">krzysztofzablocki&#x2F;Sourcery</a></em><br>Swift 元编程<br>Star：6434 Issue：52 开发语言：Swift<br>Meta-programming for Swift, stop writing boilerplate code.</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p><em><a href="https://github.com/pointfreeco/swiftui-navigation">pointfreeco&#x2F;swiftui-navigation</a></em><br>Star：775 Issue：1 开发语言：Swift<br>Tools for making SwiftUI navigation simpler, more ergonomic and more precise.</p><h3 id="静态检查"><a href="#静态检查" class="headerlink" title="静态检查"></a>静态检查</h3><p><em><a href="https://github.com/realm/SwiftLint">realm&#x2F;SwiftLint</a></em><br>Star：15867 Issue：300 开发语言：Swift<br>A tool to enforce Swift style and conventions.</p><h3 id="系统能力"><a href="#系统能力" class="headerlink" title="系统能力"></a>系统能力</h3><p><em><a href="https://github.com/devicekit/DeviceKit">devicekit&#x2F;DeviceKit</a></em><br>UIDevice 易用封装<br>Star：3628 Issue：43 开发语言：Swift<br>DeviceKit is a value-type replacement of UIDevice.</p><p><em><a href="https://github.com/kishikawakatsumi/KeychainAccess">kishikawakatsumi&#x2F;KeychainAccess</a></em><br>Star：6791 Issue：38 开发语言：Swift<br>Simple Swift wrapper for Keychain that works on iOS, watchOS, tvOS and macOS.</p><p><em><a href="https://github.com/nvzqz/FileKit">nvzqz&#x2F;FileKit</a></em><br>文件操作<br>Star：2203 Issue：11 开发语言：Swift<br>Simple and expressive file management in Swift</p><p><em><a href="https://github.com/JohnSundell/Files">JohnSundell&#x2F;Files</a></em><br>文件操作<br>Star：2255 Issue：23 开发语言：Swift<br>A nicer way to handle files &amp; folders in Swift</p><p><em><a href="https://github.com/kylef/PathKit">kylef&#x2F;PathKit</a></em><br>文件操作<br>Star：1333 Issue：12 开发语言：Swift<br>Effortless path operations in Swift</p><p><em><a href="https://github.com/rushisangani/BiometricAuthentication">rushisangani&#x2F;BiometricAuthentication</a></em><br>FaceID or TouchID authentication<br>Star：787 Issue：13 开发语言：Swift<br>Use Apple FaceID or TouchID authentication in your app using BiometricAuthentication.</p><p><em><a href="https://github.com/sunshinejr/SwiftyUserDefaults">sunshinejr&#x2F;SwiftyUserDefaults</a></em><br>Star：4626 Issue：46 开发语言：Swift<br>Modern Swift API for NSUserDefaults</p><p><em><a href="https://github.com/MonitorControl/MonitorControl">MonitorControl&#x2F;MonitorControl</a></em><br>亮度和声音控制<br>Star：14730 Issue：49 开发语言：Swift<br>🖥 Control your display’s brightness &amp; volume on your Mac as if it was a native Apple Display. Use Apple Keyboard keys or custom shortcuts. Shows the native macOS OSDs.</p><p><em><a href="https://github.com/carekit-apple/CareKit">carekit-apple&#x2F;CareKit</a></em><br>使用 SwiftUI 开发健康相关的库<br>Star：2177 Issue：66 开发语言：Swift<br>CareKit is an open source software framework for creating apps that help people better understand and manage their health.</p><p><em><a href="https://github.com/Cay-Zhang/SwiftSpeech">Cay-Zhang&#x2F;SwiftSpeech</a></em><br>苹果语言识别封装库，已适配 SwiftUI<br>Star：258 Issue：2 开发语言：Swift<br>A speech recognition framework designed for SwiftUI.</p><p><em><a href="https://github.com/malcommac/SwiftDate">malcommac&#x2F;SwiftDate</a></em><br>Swift编写的时间时区，时间比较等复杂处理的包装<br>Star：6815 Issue：67 开发语言：Swift<br>🐔 Toolkit to parse, validate, manipulate, compare and display dates, time &amp; timezones in Swift.</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><em><a href="https://github.com/OAuthSwift/OAuthSwift">OAuthSwift&#x2F;OAuthSwift</a></em><br>Star：2979 Issue：39 开发语言：Swift<br>Swift based OAuth library for iOS</p><p><em><a href="https://github.com/p2/OAuth2">p2&#x2F;OAuth2</a></em><br>Star：1057 Issue：68 开发语言：Swift<br>OAuth2 framework for macOS and iOS, written in Swift.</p><p><em><a href="https://github.com/public-apis/public-apis">public-apis&#x2F;public-apis</a></em><br>Star：186561 Issue：1 开发语言：Python<br>A collective list of free APIs</p><h3 id="接口应用"><a href="#接口应用" class="headerlink" title="接口应用"></a>接口应用</h3><p><em><a href="https://github.com/bpisano/Weather">bpisano&#x2F;Weather</a></em><br>天气应用<br>Star：275 Issue：2 开发语言：Swift<br>A Weather app in SwiftUI.</p><p><em><a href="https://github.com/Dimillian/MovieSwiftUI">Dimillian&#x2F;MovieSwiftUI</a></em><br>电影 MovieDB 应用<br>Star：5950 Issue：8 开发语言：Swift<br>SwiftUI &amp; Combine app using MovieDB API. With a custom Flux (Redux) implementation.</p><p><em><a href="https://github.com/chojnac/NotionSwift">chojnac&#x2F;NotionSwift</a></em><br>Star：22 Issue：3 开发语言：Swift<br>Unofficial Notion API SDK for iOS &amp; macOS</p><p><em><a href="https://github.com/Dimillian/RedditOS">Dimillian&#x2F;RedditOS</a></em><br>SwiftUI 写的 Reddit客户端<br>Star：3538 Issue：11 开发语言：Swift<br>The product name is Curiosity, a SwiftUI Reddit client for macOS Big Sur</p><p><em><a href="https://github.com/carson-katri/reddit-swiftui">carson-katri&#x2F;reddit-swiftui</a></em><br>SwiftUI 写的 Reddit客户端<br>Star：1105 Issue：7 开发语言：Swift<br>A cross-platform Reddit client built in SwiftUI</p><p><em><a href="https://github.com/Dimillian/SwiftHN">Dimillian&#x2F;SwiftHN</a></em><br>Hacker News 阅读<br>Star：1689 Issue：20 开发语言：Swift<br>A Hacker News reader in Swift</p><p><em><a href="https://github.com/tatsuz0u/EhPanda">tatsuz0u&#x2F;EhPanda</a></em><br>Star：1132 Issue：11 开发语言：Swift<br>An unofficial E-Hentai App for iOS built with SwiftUI &amp; TCA.</p><p><em><a href="https://github.com/Dimillian/MortyUI">Dimillian&#x2F;MortyUI</a></em><br>GraphQL + SwiftUI 开发的瑞克和莫蒂应用<br>Star：424 Issue：4 开发语言：Swift<br>A very simple Rick &amp; Morty app to demo GraphQL + SwiftUI</p><p><em><a href="https://github.com/Finb/V2ex-Swift">Finb&#x2F;V2ex-Swift</a></em><br>V2EX 客户端<br>Star：1505 Issue：10 开发语言：Swift<br>An iOS client written in Swift for V2EX</p><p><em><a href="https://github.com/v2er-app/iOS">v2er-app&#x2F;iOS</a></em><br>V2EX 客户端<br>Star：194 Issue：4 开发语言：Swift<br>The source of V2er.iOS</p><p><em><a href="https://github.com/sinaweibosdk/weibo_ios_sdk">sinaweibosdk&#x2F;weibo_ios_sdk</a></em><br>Star：1423 Issue：63 开发语言：Objective-C<br>新浪微博 IOS SDK</p><p><em><a href="https://github.com/miniLV/MNWeibo">miniLV&#x2F;MNWeibo</a></em><br>Swift5 + MVVM 微博客户端<br>Star：244 Issue：4 开发语言：Swift<br>Swift5 + MVVM + 文艺复兴微博(纯代码 + 纯Swift)，可作为第一个上手的Swift项目.</p><p><em><a href="https://github.com/nerdishbynature/octokit.swift">nerdishbynature&#x2F;octokit.swift</a></em><br>Swift API Client for GitHub<br>Star：391 Issue：9 开发语言：Swift<br>A Swift API Client for GitHub and GitHub Enterprise</p><p><em><a href="https://github.com/GitHawkApp/GitHawk">GitHawkApp&#x2F;GitHawk</a></em><br>iOS app for GitHub<br>Star：2822 Issue：455 开发语言：Swift<br>The (second) best iOS app for GitHub.</p><p><em><a href="https://github.com/fangzesheng/free-api">fangzesheng&#x2F;free-api</a></em><br>Star：11998 Issue：26 开发语言：<br>收集免费的接口服务,做一个api的搬运工</p><p><em><a href="https://github.com/nerdsupremacist/Graphaello">nerdsupremacist&#x2F;Graphaello</a></em><br>SwiftUI 中使用 GraphQL 的工具<br>Star：436 Issue：21 开发语言：Swift<br>A Tool for Writing Declarative, Type-Safe and Data-Driven Applications in SwiftUI using GraphQL</p><p><em><a href="https://github.com/nerdsupremacist/tmdb">nerdsupremacist&#x2F;tmdb</a></em><br>GraphQL 包装电影数据接口<br>Star：14 Issue：1 开发语言：Swift<br>A GraphQL Wrapper for The Movie Database</p><h3 id="macOS-1"><a href="#macOS-1" class="headerlink" title="macOS"></a>macOS</h3><p><em><a href="https://github.com/serhii-londar/open-source-mac-os-apps">serhii-londar&#x2F;open-source-mac-os-apps</a></em><br>开源 macOS 程序合集<br>Star：29820 Issue：52 开发语言：Swift<br>🚀 Awesome list of open source applications for macOS. <a href="https://t.me/s/opensourcemacosapps">https://t.me/s/opensourcemacosapps</a></p><p><em><a href="https://github.com/Ranchero-Software/NetNewsWire">Ranchero-Software&#x2F;NetNewsWire</a></em><br>Star：5374 Issue：535 开发语言：Swift<br>RSS reader for macOS and iOS.</p><p><em><a href="https://github.com/overtake/TelegramSwift">overtake&#x2F;TelegramSwift</a></em><br>Star：3729 Issue：452 开发语言：Swift<br>Source code of Telegram for macos on Swift 5.0</p><p><em><a href="https://github.com/eonist/FileWatcher">eonist&#x2F;FileWatcher</a></em><br>macOS 上监听文件变化<br>Star：157 Issue：5 开发语言：Swift<br>Monitoring file system changes in macOS</p><p><em><a href="https://github.com/waylybaye/XcodeCleaner-SwiftUI">waylybaye&#x2F;XcodeCleaner-SwiftUI</a></em><br>清理 Xcode<br>Star：1178 Issue：3 开发语言：Swift<br>Make Xcode Clean Again</p><p><em><a href="https://github.com/gao-sun/eul">gao-sun&#x2F;eul</a></em><br>SwiftUI 写的 macOS 状态监控工具<br>Star：7123 Issue：51 开发语言：Swift<br>🖥️ macOS status monitoring app written in SwiftUI.</p><p><em><a href="https://github.com/Dimillian/ACHNBrowserUI">Dimillian&#x2F;ACHNBrowserUI</a></em><br>SwiftUI 写的动物之森小助手程序<br>Star：1507 Issue：32 开发语言：Swift<br>Animal Crossing New Horizon companion app in SwiftUI</p><p><em><a href="https://github.com/lexrus/RegExPlus">lexrus&#x2F;RegExPlus</a></em><br>正则表达式<br>Star：185 Issue：0 开发语言：Swift<br>A nifty RegEx test tool built with SwiftUI</p><p><em><a href="https://github.com/v2ex/launcher">v2ex&#x2F;launcher</a></em><br>用来启动那些本地开发时需要的各种进程，及查看其输出<br>Star：167 Issue：3 开发语言：Swift</p><p><em><a href="https://github.com/lukakerr/Pine">lukakerr&#x2F;Pine</a></em><br>Markdown 编辑器<br>Star：2910 Issue：45 开发语言：Swift<br>A modern, native macOS markdown editor</p><p><em><a href="https://github.com/root3nl/SupportApp">root3nl&#x2F;SupportApp</a></em><br>企业支持 macOS 软件<br>Star：242 Issue：17 开发语言：Swift<br>The Support App is developed by Root3, specialized in managing Apple devices. Root3 offers consultancy and support for organizations to get the most out of their Apple devices and is based in The Netherlands (Haarlem).</p><p><em><a href="https://github.com/jaywcjlove/awesome-mac">jaywcjlove&#x2F;awesome-mac</a></em><br>macOS 软件大全<br>Star：48349 Issue：126 开发语言：JavaScript<br> Now we have become very big, Different from the original idea. Collect premium software in various categories.</p><p><em><a href="https://github.com/insidegui/WWDC">insidegui&#x2F;WWDC</a></em><br>Star：8163 Issue：33 开发语言：Swift<br>The unofficial WWDC app for macOS</p><p><em><a href="https://github.com/sindresorhus/Actions">sindresorhus&#x2F;Actions</a></em><br>Star：682 Issue：4 开发语言：Swift<br>⚙️ Supercharge your shortcuts</p><p><em><a href="https://github.com/ObuchiYuki/DevToysMac">ObuchiYuki&#x2F;DevToysMac</a></em><br>开发者工具合集<br>Star：5065 Issue：33 开发语言：Swift<br>DevToys For mac</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><em><a href="https://github.com/vinhnx/Clendar">vinhnx&#x2F;Clendar</a></em><br>SwiftUI 写的日历应用<br>Star：328 Issue：52 开发语言：Swift<br>Clendar - universal calendar app. Written in SwiftUI. Available on App Store. MIT License.</p><p><em><a href="https://github.com/SvenTiigi/WhatsNewKit">SvenTiigi&#x2F;WhatsNewKit</a></em><br>欢迎屏<br>Star：2464 Issue：0 开发语言：Swift<br>Showcase your awesome new app features 📱</p><p><em><a href="https://github.com/kickstarter/ios-oss">kickstarter&#x2F;ios-oss</a></em><br>Kickstarter 的 iOS 版本<br>Star：7923 Issue：1 开发语言：Swift<br>Kickstarter for iOS. Bring new ideas to life, anywhere.</p><p><em><a href="https://github.com/CoreOffice/CryptoOffice">CoreOffice&#x2F;CryptoOffice</a></em><br>Swift 解析 Office Open XML（OOXML）包括 xlsx, docx, pptx<br>Star：21 Issue：0 开发语言：Swift<br>Office Open XML (OOXML) formats (.xlsx, .docx, .pptx) decryption for Swift</p><p><em><a href="https://github.com/CoreOffice/CoreXLSX">CoreOffice&#x2F;CoreXLSX</a></em><br>Swift编写的Excel电子表格（XLSX）格式解析器<br>Star：619 Issue：11 开发语言：Swift<br>Excel spreadsheet (XLSX) format parser written in pure Swift</p><p><em><a href="https://github.com/analogcode/Swift-Radio-Pro">analogcode&#x2F;Swift-Radio-Pro</a></em><br>电台应用<br>Star：2663 Issue：13 开发语言：Swift<br>Professional Radio Station App for iOS!</p><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p><em><a href="https://github.com/pointfreeco/isowords">pointfreeco&#x2F;isowords</a></em><br>单词搜索游戏<br>Star：1674 Issue：4 开发语言：Swift<br>Open source game built in SwiftUI and the Composable Architecture.</p><p><em><a href="https://github.com/michelpereira/awesome-games-of-coding">michelpereira&#x2F;awesome-games-of-coding</a></em><br>教你学编程的游戏收集<br>Star：1395 Issue：1 开发语言：<br>A curated list of games that can teach you how to learn a programming language.</p><p><em><a href="https://github.com/OpenEmu/OpenEmu">OpenEmu&#x2F;OpenEmu</a></em><br>视频游戏模拟器<br>Star：13679 Issue：193 开发语言：Swift<br>🕹 Retro video game emulation for macOS</p><p><em><a href="https://github.com/jVirus/swiftui-2048">jVirus&#x2F;swiftui-2048</a></em><br>Star：141 Issue：0 开发语言：Swift<br>🎲 100% SwiftUI 3.0, classic 2048 game [iOS 15.0+, iPadOS 15.0+, macOS 12.0+, Swift 5.5].</p><p><em><a href="https://github.com/schellingb/dosbox-pure">schellingb&#x2F;dosbox-pure</a></em><br>DOS 游戏模拟器<br>Star：420 Issue：114 开发语言：C++<br>DOSBox Pure is a new fork of DOSBox built for RetroArch&#x2F;Libretro aiming for simplicity and ease of use.</p><p><em><a href="https://github.com/chrismaltby/gb-studio">chrismaltby&#x2F;gb-studio</a></em><br>拖放式复古游戏创建器<br>Star：5981 Issue：484 开发语言：C<br>A quick and easy to use drag and drop retro game creator for your favourite handheld video game system</p><p><em><a href="https://github.com/darrellroot/Netrek-SwiftUI">darrellroot&#x2F;Netrek-SwiftUI</a></em><br>SwiftUI 开发的1989年的 Netrek 游戏<br>Star：10 Issue：0 开发语言：Swift</p><p><em><a href="https://github.com/jynew/jynew">jynew&#x2F;jynew</a></em><br>Unity 引擎重制 DOS 金庸群侠传<br>Star：4382 Issue：30 开发语言：C#<br>金庸群侠传3D重制版</p><p><em><a href="https://github.com/CleverRaven/Cataclysm-DDA">CleverRaven&#x2F;Cataclysm-DDA</a></em><br>以世界末日为背景的生存游戏<br>Star：6672 Issue：2667 开发语言：C++<br>Cataclysm - Dark Days Ahead. A turn-based survival game set in a post-apocalyptic world.</p><p><em><a href="https://github.com/freeCodeCamp/LearnToCodeRPG">freeCodeCamp&#x2F;LearnToCodeRPG</a></em><br>学习编码的游戏<br>Star：784 Issue：11 开发语言：Ren’Py<br>A visual novel video game where you learn to code and get a dev job 🎯</p><p><em><a href="https://github.com/pmgl/microstudio">pmgl&#x2F;microstudio</a></em><br>游戏开发平台集搜索、开发、学习、体验、交流等功能于一身<br>Star：500 Issue：32 开发语言：JavaScript<br>Free, open source game engine online</p><p><em><a href="https://github.com/diasurgical/devilutionX">diasurgical&#x2F;devilutionX</a></em><br>可以运行在 macOS 上的 Diablo 1<br>Star：5191 Issue：342 开发语言：C++<br>Diablo build for modern operating systems</p><p><em><a href="https://github.com/InvadingOctopus/octopuskit">InvadingOctopus&#x2F;octopuskit</a></em><br>2D游戏引擎，用的 GameplayKit + SpriteKit + SwiftUI<br>Star：302 Issue：0 开发语言：Swift<br>2D ECS game engine in 100% Swift + SwiftUI for iOS, macOS, tvOS</p><h3 id="新技术展示"><a href="#新技术展示" class="headerlink" title="新技术展示"></a>新技术展示</h3><p><em><a href="https://github.com/JakeLin/Moments-SwiftUI">JakeLin&#x2F;Moments-SwiftUI</a></em><br>SwiftUI、Async、Actor<br>Star：37 Issue：0 开发语言：Swift<br>WeChat-like Moments App implemented using Swift 5.5 and SwiftUI</p><p><em><a href="https://github.com/twostraws/HackingWithSwift">twostraws&#x2F;HackingWithSwift</a></em><br>示例代码<br>Star：4345 Issue：11 开发语言：Swift<br>The project source code for hackingwithswift.com</p><p><em><a href="https://github.com/carson-katri/awesome-result-builders">carson-katri&#x2F;awesome-result-builders</a></em><br>Result Builders awesome<br>Star：754 Issue：1 开发语言：<br>A list of cool DSLs made with Swift 5.4’s @resultBuilder</p><p><em><a href="https://github.com/pointfreeco/episode-code-samples">pointfreeco&#x2F;episode-code-samples</a></em><br>Star：655 Issue：2 开发语言：Swift<br>💾 Point-Free episode code.</p><p><em><a href="https://github.com/SwiftGGTeam/the-swift-programming-language-in-chinese">SwiftGGTeam&#x2F;the-swift-programming-language-in-chinese</a></em><br>中文版 Apple 官方 Swift 教程<br>Star：20436 Issue：4 开发语言：CSS<br>中文版 Apple 官方 Swift 教程《The Swift Programming Language》</p><p><em><a href="https://github.com/jessesquires/TIL">jessesquires&#x2F;TIL</a></em><br>学习笔记<br>Star：252 Issue：0 开发语言：<br>Things I’ve learned and&#x2F;or things I want to remember. Notes, links, advice, example code, etc.</p><h3 id="Combine-扩展"><a href="#Combine-扩展" class="headerlink" title="Combine 扩展"></a>Combine 扩展</h3><p><em><a href="https://github.com/OpenCombine/OpenCombine">OpenCombine&#x2F;OpenCombine</a></em><br>Combine 的开源实现<br>Star：2122 Issue：11 开发语言：Swift<br>Open source implementation of Apple’s Combine framework for processing values over time.</p><p><em><a href="https://github.com/CombineCommunity/CombineExt">CombineCommunity&#x2F;CombineExt</a></em><br>对 Combine 的补充<br>Star：1089 Issue：22 开发语言：Swift<br>CombineExt provides a collection of operators, publishers and utilities for Combine, that are not provided by Apple themselves, but are common in other Reactive Frameworks and standards.</p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p><em><a href="https://github.com/dkhamsing/open-source-ios-apps">dkhamsing&#x2F;open-source-ios-apps</a></em><br>开源的完整 App 例子<br>Star：29703 Issue：0 开发语言：Swift<br>:iphone: Collaborative List of Open-Source iOS Apps</p><p><em><a href="https://github.com/timqian/chinese-independent-blogs">timqian&#x2F;chinese-independent-blogs</a></em><br>Star：8655 Issue：18 开发语言：JavaScript<br>中文独立博客列表</p><p><em><a href="https://github.com/vlondon/awesome-swiftui">vlondon&#x2F;awesome-swiftui</a></em><br>Star：1184 Issue：5 开发语言：<br>A collaborative list of awesome articles, talks, books, videos and code examples about SwiftUI.</p><p><em><a href="https://github.com/ivanvorobei/SwiftUI">ivanvorobei&#x2F;SwiftUI</a></em><br>Star：3726 Issue：5 开发语言：Swift<br>Examples projects using SwiftUI released by WWDC2019. Include Layout, UI, Animations, Gestures, Draw and Data.</p><p><em><a href="https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts">kon9chunkit&#x2F;GitHub-Chinese-Top-Charts</a></em><br>GitHub中文排行榜<br>Star：45272 Issue：83 开发语言：Java<br>:cn: GitHub中文排行榜，各语言分设「软件 | 资料」榜单，精准定位中文好项目。各取所需，高效学习。</p><p><em><a href="https://github.com/onmyway133/awesome-swiftui">onmyway133&#x2F;awesome-swiftui</a></em><br>Star：361 Issue：3 开发语言：<br>🌮 Awesome resources, articles, libraries about SwiftUI</p><p><em><a href="https://github.com/Juanpe/About-SwiftUI">Juanpe&#x2F;About-SwiftUI</a></em><br>汇总 SwiftUI 的资料<br>Star：6096 Issue：0 开发语言：Swift<br>Gathering all info published, both by Apple and by others, about new framework SwiftUI. </p><p><em><a href="https://github.com/sindresorhus/awesome">sindresorhus&#x2F;awesome</a></em><br>内容广<br>Star：194524 Issue：42 开发语言：<br>😎 Awesome lists about all kinds of interesting topics</p><p><em><a href="https://github.com/SwiftPackageIndex/PackageList">SwiftPackageIndex&#x2F;PackageList</a></em><br>Swift 开源库索引<br>Star：605 Issue：1 开发语言：Swift<br>The master list of repositories for the Swift Package Index.</p><p><em><a href="https://github.com/matteocrippa/awesome-swift">matteocrippa&#x2F;awesome-swift</a></em><br>Star：21759 Issue：0 开发语言：Swift<br>A collaborative list of awesome Swift libraries and resources. Feel free to contribute!</p><h3 id="性能、工程构建及自动化"><a href="#性能、工程构建及自动化" class="headerlink" title="性能、工程构建及自动化"></a>性能、工程构建及自动化</h3><p><em><a href="https://github.com/tuist/tuist">tuist&#x2F;tuist</a></em><br>创建和维护 Xcode projects 文件<br>Star：2474 Issue：148 开发语言：Swift<br>🚀 Create, maintain, and interact with Xcode projects at scale</p><p><em><a href="https://github.com/swift-server/vscode-swift">swift-server&#x2F;vscode-swift</a></em><br>VSCode 的 Swift 扩展<br>Star：262 Issue：30 开发语言：TypeScript<br>Visual Studio Code Extension for Swift</p><p><em><a href="https://github.com/peripheryapp/periphery">peripheryapp&#x2F;periphery</a></em><br>检测 Swift 无用代码<br>Star：3231 Issue：24 开发语言：Swift<br>A tool to identify unused code in Swift projects.</p><p><em><a href="https://github.com/nalexn/ViewInspector">nalexn&#x2F;ViewInspector</a></em><br>SwiftUI Runtime introspection 和 单元测试<br>Star：1115 Issue：17 开发语言：Swift<br>Runtime introspection and unit testing of SwiftUI views</p><p><em><a href="https://github.com/shibapm/Komondor">shibapm&#x2F;Komondor</a></em><br>Git Hooks for Swift projects<br>Star：503 Issue：20 开发语言：Swift<br>Git Hooks for Swift projects 🐩</p><p><em><a href="https://github.com/SwiftGen/SwiftGen">SwiftGen&#x2F;SwiftGen</a></em><br>代码生成<br>Star：7781 Issue：75 开发语言：Swift<br>The Swift code generator for your assets, storyboards, Localizable.strings, … — Get rid of all String-based APIs!</p><p><em><a href="https://github.com/hyperoslo/Cache">hyperoslo&#x2F;Cache</a></em><br>Star：2541 Issue：20 开发语言：Swift<br>:package: Nothing but Cache.</p><p><em><a href="https://github.com/kylef/Commander">kylef&#x2F;Commander</a></em><br>命令行<br>Star：1482 Issue：4 开发语言：Swift<br>Compose beautiful command line interfaces in Swift</p><p><em><a href="https://github.com/Carthage/Carthage">Carthage&#x2F;Carthage</a></em><br>Star：14546 Issue：232 开发语言：Swift<br>A simple, decentralized dependency manager for Cocoa</p><p><em><a href="https://github.com/NARKOZ/hacker-scripts">NARKOZ&#x2F;hacker-scripts</a></em><br>程序员的活都让机器干的脚本（真实故事）<br>Star：43582 Issue：66 开发语言：JavaScript<br>Based on a true story</p><p><em><a href="https://github.com/RobotsAndPencils/XcodesApp">RobotsAndPencils&#x2F;XcodesApp</a></em><br>Xcode 多版本安装<br>Star：2589 Issue：39 开发语言：Swift<br>The easiest way to install and switch between multiple versions of Xcode - with a mouse click. </p><p><em><a href="https://github.com/ZeeZide/5GUIs">ZeeZide&#x2F;5GUIs</a></em><br>可以分析程序用了哪些库，用了LLVM objdump<br>Star：180 Issue：8 开发语言：Swift<br>A tiny macOS app that can detect the GUI technologies used in other apps.</p><p><em><a href="https://github.com/faisalmemon/ios-crash-dump-analysis-book">faisalmemon&#x2F;ios-crash-dump-analysis-book</a></em><br>iOS Crash Dump Analysis Book<br>Star：461 Issue：1 开发语言：Objective-C<br>iOS Crash Dump Analysis Book</p><p><em><a href="https://github.com/majd/ipatool">majd&#x2F;ipatool</a></em><br>下载 ipa<br>Star：1897 Issue：4 开发语言：Swift<br>Command-line tool that allows searching and downloading app packages (known as ipa files) from the iOS App Store</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><em><a href="https://github.com/Quick/Quick">Quick&#x2F;Quick</a></em><br>测试框架<br>Star：9375 Issue：54 开发语言：Swift<br>The Swift (and Objective-C) testing framework.</p><h3 id="网络-1"><a href="#网络-1" class="headerlink" title="网络"></a>网络</h3><p><em><a href="https://github.com/Alamofire/Alamofire">Alamofire&#x2F;Alamofire</a></em><br>Star：37285 Issue：33 开发语言：Swift<br>Elegant HTTP Networking in Swift</p><p><em><a href="https://github.com/socketio/socket.io-client-swift">socketio&#x2F;socket.io-client-swift</a></em><br>Star：4740 Issue：184 开发语言：Swift</p><p><em><a href="https://github.com/Lojii/Knot">Lojii&#x2F;Knot</a></em><br>使用 SwiftNIO 实现 HTTPS 抓包<br>Star：1169 Issue：3 开发语言：C<br>一款iOS端基于MITM(中间人攻击技术)实现的HTTPS抓包工具，完整的App，核心代码使用SwiftNIO实现</p><p><em><a href="https://github.com/swift-server/async-http-client">swift-server&#x2F;async-http-client</a></em><br>使用 SwiftNIO 开发的 HTTP 客户端<br>Star：569 Issue：79 开发语言：Swift<br>HTTP client library built on SwiftNIO</p><p><em><a href="https://github.com/kean/Get">kean&#x2F;Get</a></em><br>Star：344 Issue：4 开发语言：Swift<br>Web API client built using async&#x2F;await</p><p><em><a href="https://github.com/awesome-selfhosted/awesome-selfhosted">awesome-selfhosted&#x2F;awesome-selfhosted</a></em><br>网络服务及上面的应用<br>Star：81497 Issue：173 开发语言：JavaScript<br>A list of Free Software network services and web applications which can be hosted on your own servers</p><p><em><a href="https://github.com/daltoniam/Starscream">daltoniam&#x2F;Starscream</a></em><br>WebSocket<br>Star：7249 Issue：144 开发语言：Swift<br>Websockets in swift for iOS and OSX</p><p><em><a href="https://github.com/shadowsocks/ShadowsocksX-NG">shadowsocks&#x2F;ShadowsocksX-NG</a></em><br>Star：30240 Issue：252 开发语言：Swift<br>Next Generation of ShadowsocksX</p><p><em><a href="https://github.com/carson-katri/swift-request">carson-katri&#x2F;swift-request</a></em><br>声明式的网络请求<br>Star：627 Issue：6 开发语言：Swift<br>Declarative HTTP networking, designed for SwiftUI</p><p><em><a href="https://github.com/cloudreve/Cloudreve">cloudreve&#x2F;Cloudreve</a></em><br>云存储部署<br>Star：13529 Issue：337 开发语言：Go<br>🌩支持多家云存储的云盘系统 (Self-hosted file management and sharing system, supports multiple storage providers)</p><p><em><a href="https://github.com/alibaba/xquic">alibaba&#x2F;xquic</a></em><br>阿里巴巴发布的 XQUIC 库<br>Star：987 Issue：8 开发语言：C<br>XQUIC Library released by Alibaba is a cross-platform implementation of QUIC and HTTP&#x2F;3 protocol.</p><p><em><a href="https://github.com/kasketis/netfox">kasketis&#x2F;netfox</a></em><br>获取所有网络请求<br>Star：3227 Issue：14 开发语言：Swift<br>A lightweight, one line setup, iOS &#x2F; OSX network debugging library! 🦊</p><p><em><a href="https://github.com/Moya/Moya">Moya&#x2F;Moya</a></em><br>Swift 编写的网络抽象层<br>Star：13842 Issue：119 开发语言：Swift<br>Network abstraction layer written in Swift.</p><p><em><a href="https://github.com/Kitura/BlueSocket">Kitura&#x2F;BlueSocket</a></em><br>Star：1296 Issue：28 开发语言：Swift<br>Socket framework for Swift using the Swift Package Manager. Works on iOS, macOS, and Linux.</p><p><em><a href="https://github.com/rhummelmose/BluetoothKit">rhummelmose&#x2F;BluetoothKit</a></em><br>蓝牙<br>Star：2063 Issue：33 开发语言：Swift<br>Easily communicate between iOS&#x2F;OSX devices using BLE</p><p><em><a href="https://github.com/WeTransfer/Mocker">WeTransfer&#x2F;Mocker</a></em><br>Mock Alamofire and URLSession<br>Star：770 Issue：1 开发语言：Swift<br>Mock Alamofire and URLSession requests without touching your code implementation</p><p><em><a href="https://github.com/bagder/everything-curl">bagder&#x2F;everything-curl</a></em><br>记录了 curl 的一切<br>Star：1410 Issue：2 开发语言：Perl<br>The book documenting the curl project, the curl tool, libcurl and more. Simply put: everything curl.</p><p><em><a href="https://github.com/LANDrop/LANDrop">LANDrop&#x2F;LANDrop</a></em><br>全平台局域网文件传输<br>Star：2370 Issue：75 开发语言：C++<br>Drop any files to any devices on your LAN.</p><h3 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h3><p><em><a href="https://github.com/willdale/SwiftUICharts">willdale&#x2F;SwiftUICharts</a></em><br>用于SwiftUI的图表绘图库<br>Star：445 Issue：28 开发语言：Swift<br>A charts &#x2F; plotting library for SwiftUI. Works on macOS, iOS, watchOS, and tvOS and has accessibility features built in.</p><p><em><a href="https://github.com/lludo/SwiftSunburstDiagram">lludo&#x2F;SwiftSunburstDiagram</a></em><br>SwiftUI 图表<br>Star：464 Issue：12 开发语言：Swift<br>SwiftUI library to easily render diagrams given a tree of objects. Similar to ring chart, sunburst chart, multilevel pie chart.</p><p><em><a href="https://github.com/ivanschuetz/SwiftCharts">ivanschuetz&#x2F;SwiftCharts</a></em><br>Star：2363 Issue：48 开发语言：Swift<br>Easy to use and highly customizable charts library for iOS</p><p><em><a href="https://github.com/danielgindi/Charts">danielgindi&#x2F;Charts</a></em><br>Star：25114 Issue：818 开发语言：Swift<br>Beautiful charts for iOS&#x2F;tvOS&#x2F;OSX! The Apple side of the crossplatform MPAndroidChart.</p><p><em><a href="https://github.com/imxieyi/waifu2x-ios">imxieyi&#x2F;waifu2x-ios</a></em><br>waifu2x Core ML 动漫风格图片的高清渲染<br>Star：415 Issue：1 开发语言：Swift<br>iOS Core ML implementation of waifu2x</p><p><em><a href="https://github.com/mecid/SwiftUICharts">mecid&#x2F;SwiftUICharts</a></em><br>支持 SwiftUI 的简单的线图和柱状图库<br>Star：1201 Issue：2 开发语言：Swift<br>A simple line and bar charting library that supports accessibility written using SwiftUI. </p><p><em><a href="https://github.com/Tencent/libpag">Tencent&#x2F;libpag</a></em><br>PAG（Portable Animated Graphics）实时渲染库，多个平台渲染AE动画。<br>Star：1543 Issue：2 开发语言：C++<br>The official rendering library for PAG (Portable Animated Graphics) files that renders After Effects animations natively across multiple platforms.</p><p><em><a href="https://github.com/jathu/UIImageColors">jathu&#x2F;UIImageColors</a></em><br>获取图片主次颜色<br>Star：3068 Issue：10 开发语言：Swift<br>Fetches the most dominant and prominent colors from an image.</p><p><em><a href="https://github.com/BradLarson/GPUImage3">BradLarson&#x2F;GPUImage3</a></em><br>Metal 实现<br>Star：2327 Issue：73 开发语言：Swift<br>GPUImage 3 is a BSD-licensed Swift framework for GPU-accelerated video and image processing using Metal.</p><p><em><a href="https://github.com/exyte/Macaw">exyte&#x2F;Macaw</a></em><br>SVG<br>Star：5810 Issue：126 开发语言：Swift<br>Powerful and easy-to-use vector graphics Swift library with SVG support</p><p><em><a href="https://github.com/exyte/SVGView">exyte&#x2F;SVGView</a></em><br>支持 SwiftUI 的 SVG 解析渲染视图<br>Star：141 Issue：2 开发语言：Swift<br>SVG parser and renderer written in SwiftUI</p><p><em><a href="https://github.com/efremidze/Magnetic">efremidze&#x2F;Magnetic</a></em><br>SpriteKit气泡支持SwiftUI<br>Star：1359 Issue：23 开发语言：Swift<br>SpriteKit Floating Bubble Picker (inspired by Apple Music) 🧲</p><p><em><a href="https://github.com/NextLevel/NextLevel">NextLevel&#x2F;NextLevel</a></em><br>相机<br>Star：1970 Issue：70 开发语言：Swift<br>⬆️ Rad Media Capture in Swift</p><p><em><a href="https://github.com/Harley-xk/MaLiang">Harley-xk&#x2F;MaLiang</a></em><br>基于 Metal 的涂鸦绘图库<br>Star：1242 Issue：40 开发语言：Swift<br>iOS painting and drawing library based on Metal. 神笔马良有一支神笔（基于 Metal 的涂鸦绘图库）</p><p><em><a href="https://github.com/frzi/Model3DView">frzi&#x2F;Model3DView</a></em><br>毫不费力的使用 SwiftUI 渲染 3d models<br>Star：27 Issue：0 开发语言：Swift<br>Render 3d models with SwiftUI effortlessly</p><h3 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h3><p><em><a href="https://github.com/iina/iina">iina&#x2F;iina</a></em><br>Star：29520 Issue：1319 开发语言：Swift<br>The modern video player for macOS.</p><p><em><a href="https://github.com/shogo4405/HaishinKit.swift">shogo4405&#x2F;HaishinKit.swift</a></em><br>RTMP, HLS<br>Star：2279 Issue：12 开发语言：Swift<br>Camera and Microphone streaming library via RTMP, HLS for iOS, macOS, tvOS.</p><p><em><a href="https://github.com/AudioKit/AudioKit">AudioKit&#x2F;AudioKit</a></em><br>Star：9028 Issue：13 开发语言：Swift<br>Swift audio synthesis, processing, &amp; analysis platform for iOS, macOS and tvOS</p><p><em><a href="https://github.com/josejuanqm/VersaPlayer">josejuanqm&#x2F;VersaPlayer</a></em><br>Star：685 Issue：4 开发语言：Swift<br>Versatile Video Player implementation for iOS, macOS, and tvOS</p><p><em><a href="https://github.com/bilibili/ijkplayer">bilibili&#x2F;ijkplayer</a></em><br>bilibili 播放器<br>Star：30123 Issue：2720 开发语言：C<br>Android&#x2F;iOS video player based on FFmpeg n3.4, with MediaCodec, VideoToolbox support.</p><p><em><a href="https://github.com/mpv-player/mpv">mpv-player&#x2F;mpv</a></em><br>命令行视频播放器<br>Star：18145 Issue：800 开发语言：C<br>🎥 Command line video player</p><p><em><a href="https://github.com/analogcode/Swift-Radio-Pro">analogcode&#x2F;Swift-Radio-Pro</a></em><br>广播电台<br>Star：2663 Issue：13 开发语言：Swift<br>Professional Radio Station App for iOS!</p><h3 id="安全-1"><a href="#安全-1" class="headerlink" title="安全"></a>安全</h3><p><em><a href="https://github.com/krzyzanowskim/CryptoSwift">krzyzanowskim&#x2F;CryptoSwift</a></em><br>Star：8966 Issue：40 开发语言：Swift<br>CryptoSwift is a growing collection of standard and secure cryptographic algorithms implemented in Swift</p><p><em><a href="https://github.com/rockbruno/SwiftInfo">rockbruno&#x2F;SwiftInfo</a></em><br>提取和分析一个iOS应用<br>Star：1068 Issue：17 开发语言：Swift<br>📊 Extract and analyze the evolution of an iOS app’s code.</p><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p><em><a href="https://github.com/Kitura/swift-html-entities">Kitura&#x2F;swift-html-entities</a></em><br>HTML5 规范字符编码&#x2F;解码器<br>Star：138 Issue：5 开发语言：Swift<br>HTML5 spec-compliant character encoder&#x2F;decoder for Swift</p><p><em><a href="https://github.com/TokamakUI/Tokamak">TokamakUI&#x2F;Tokamak</a></em><br>SwiftUI 兼容，WebAssembly 构建 HTML<br>Star：1587 Issue：98 开发语言：Swift<br>SwiftUI-compatible framework for building browser apps with WebAssembly and native apps for other platforms</p><p><em><a href="https://github.com/johnsundell/publish">johnsundell&#x2F;publish</a></em><br>用 swift 来写网站<br>Star：3851 Issue：28 开发语言：Swift<br>A static site generator for Swift developers</p><p><em><a href="https://github.com/highlightjs/highlight.js">highlightjs&#x2F;highlight.js</a></em><br>语法高亮<br>Star：19693 Issue：53 开发语言：JavaScript<br>JavaScript syntax highlighter with language auto-detection and zero dependencies.</p><p><em><a href="https://github.com/sivan/heti">sivan&#x2F;heti</a></em><br>赫蹏（hètí）中文排版<br>Star：4391 Issue：17 开发语言：SCSS<br>赫蹏（hètí）是专为中文内容展示设计的排版样式增强。它基于通行的中文排版规范而来，可以为网站的读者带来更好的文章阅读体验。</p><p><em><a href="https://github.com/kevquirk/simple.css">kevquirk&#x2F;simple.css</a></em><br>简单大方基础 CSS 样式<br>Star：2053 Issue：2 开发语言：CSS<br>Simple.css is a classless CSS template that allows you to make a good looking website really quickly.</p><p><em><a href="https://github.com/mozilla-mobile/firefox-ios">mozilla-mobile&#x2F;firefox-ios</a></em><br>Star：10772 Issue：1002 开发语言：Swift<br>Firefox for iOS</p><p><em><a href="https://github.com/liviuschera/noctis">liviuschera&#x2F;noctis</a></em><br>好看的代码编辑器配色主题<br>Star：0 Issue：0 开发语言：</p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p><em><a href="https://github.com/vapor/vapor">vapor&#x2F;vapor</a></em><br>Star：21499 Issue：93 开发语言：Swift<br>💧 A server-side Swift HTTP web framework.</p><p><em><a href="https://github.com/Lakr233/Rayon">Lakr233&#x2F;Rayon</a></em><br>SSH 机器管理，Swift 编写<br>Star：1884 Issue：18 开发语言：Swift<br>yet another SSH machine manager</p><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p><em><a href="https://github.com/spevans/swift-project1">spevans&#x2F;swift-project1</a></em><br>Swift编写内核，可在 Mac 和 PC 启动<br>Star：239 Issue：1 开发语言：Swift<br>A minimal bare metal kernel in Swift</p><h3 id="Web-3-0"><a href="#Web-3-0" class="headerlink" title="Web 3.0"></a>Web 3.0</h3><p><em><a href="https://github.com/chaozh/awesome-blockchain-cn">chaozh&#x2F;awesome-blockchain-cn</a></em><br>区块链 awesome<br>Star：16249 Issue：14 开发语言：JavaScript<br>收集所有区块链(BlockChain)技术开发相关资料，包括Fabric和Ethereum开发资料</p><h3 id="Apple"><a href="#Apple" class="headerlink" title="Apple"></a>Apple</h3><p><em><a href="https://github.com/apple/swift">apple&#x2F;swift</a></em><br>Star：59091 Issue：527 开发语言：C++<br>The Swift Programming Language</p><p><em><a href="https://github.com/apple/swift-evolution">apple&#x2F;swift-evolution</a></em><br>提案<br>Star：13171 Issue：38 开发语言：Markdown<br>This maintains proposals for changes and user-visible enhancements to the Swift Programming Language.</p><p><em><a href="https://github.com/apple/swift-corelibs-foundation">apple&#x2F;swift-corelibs-foundation</a></em><br>Star：4554 Issue：37 开发语言：Swift<br>The Foundation Project, providing core utilities, internationalization, and OS independence</p><p><em><a href="https://github.com/apple/swift-package-manager">apple&#x2F;swift-package-manager</a></em><br>Star：8705 Issue：31 开发语言：Swift<br>The Package Manager for the Swift Programming Language</p><p><em><a href="https://github.com/apple/swift-markdown">apple&#x2F;swift-markdown</a></em><br>Star：1682 Issue：6 开发语言：Swift<br>A Swift package for parsing, building, editing, and analyzing Markdown documents.</p><p><em><a href="https://github.com/apple/sourcekit-lsp">apple&#x2F;sourcekit-lsp</a></em><br>Star：2520 Issue：6 开发语言：Swift<br>Language Server Protocol implementation for Swift and C-based languages</p><p><em><a href="https://github.com/apple/swift-nio">apple&#x2F;swift-nio</a></em><br>Star：6901 Issue：152 开发语言：Swift<br>Event-driven network application framework for high performance protocol servers &amp; clients, non-blocking.</p><p><em><a href="https://github.com/apple/swift-syntax">apple&#x2F;swift-syntax</a></em><br>解析、生成、转换 Swift 代码<br>Star：1783 Issue：3 开发语言：Swift<br>SwiftPM package for SwiftSyntax library.</p><p><em><a href="https://github.com/apple/swift-crypto">apple&#x2F;swift-crypto</a></em><br>CryptoKit 的开源实现<br>Star：1182 Issue：10 开发语言：C<br>Open-source implementation of a substantial portion of the API of Apple CryptoKit suitable for use on Linux platforms.</p><p><em><a href="https://github.com/apple/swift-driver">apple&#x2F;swift-driver</a></em><br>用 Swift 语言重新实现的编译器的驱动程序库<br>Star：612 Issue：14 开发语言：Swift<br>Swift compiler driver reimplementation in Swift</p><p><em><a href="https://github.com/apple/swift-numerics">apple&#x2F;swift-numerics</a></em><br>用简单的方式用浮点型进行数值计算<br>Star：1362 Issue：45 开发语言：Swift<br>Advanced mathematical types and functions for Swift</p><p><em><a href="https://github.com/apple/swift-atomics">apple&#x2F;swift-atomics</a></em><br>Swift 的低级原子操作<br>Star：727 Issue：11 开发语言：Swift<br>Low-level atomic operations for Swift</p><h3 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h3><p><em><a href="https://github.com/raywenderlich/swift-algorithm-club">raywenderlich&#x2F;swift-algorithm-club</a></em><br>Star：26101 Issue：51 开发语言：Swift<br>Algorithms and data structures in Swift, with explanations!</p><h3 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h3><p><em><a href="https://github.com/trimstray/the-book-of-secret-knowledge">trimstray&#x2F;the-book-of-secret-knowledge</a></em><br>Star：63110 Issue：10 开发语言：<br>A collection of inspiring lists, manuals, cheatsheets, blogs, hacks, one-liners, cli&#x2F;web tools and more.</p><p><em><a href="https://github.com/rossant/awesome-math">rossant&#x2F;awesome-math</a></em><br>Star：5782 Issue：6 开发语言：Python<br>A curated list of awesome mathematics resources</p><h3 id="待分类"><a href="#待分类" class="headerlink" title="待分类"></a>待分类</h3><p><em><a href="https://github.com/krzysztofzablocki/KZFileWatchers">krzysztofzablocki&#x2F;KZFileWatchers</a></em><br>Swift编写的观察本地或者网络上，比如网盘和FTP的文件变化<br>Star：1011 Issue：2 开发语言：Swift<br>A micro-framework for observing file changes, both local and remote. Helpful in building developer tools.</p><h2 id="博客和资讯"><a href="#博客和资讯" class="headerlink" title="博客和资讯"></a>博客和资讯</h2><ul><li><a href="https://www.swift.org/">Swift.org</a>：Swift 官方博客</li><li><a href="https://github.com/SwiftOldDriver/iOS-Weekly/releases">Release notes from iOS-Weekly</a>：老司机 iOS 周报</li><li><a href="https://zhangferry.com/">iOS摸鱼周报</a>：iOS 摸鱼周报</li><li><a href="https://mjtsai.com/blog">Michael Tsai</a>：一名 macOS 开发者的博客</li><li><a href="https://sspai.com/">少数派</a>：少数派致力于更好地运用数字产品或科学方法，帮助用户提升工作效率和生活品质</li><li><a href="https://onevcat.com/">OneV’s Den</a>：上善若水，人淡如菊。这里是王巍 (onevcat) 的博客，用来记录一些技术和想法，主要专注于 Swift 和 iOS 开发。</li><li><a href="https://www.avanderlee.com/">SwiftLee</a>：A weekly blog about Swift, iOS and Xcode Tips and Tricks</li><li><a href="https://swiftwithmajid.com/">Swift with Majid</a>：Majid’s blog about Swift development</li><li><a href="https://www.fatbobman.com/">肘子的Swift记事本</a></li><li><a href="https://ming1016.github.io/">戴铭的博客 - 星光社</a>：一个人走得快，一群人走的远</li><li><a href="https://www.swiftbysundell.com/">Swift by Sundell</a>：Weekly Swift articles, podcasts and tips by John Sundell</li><li><a href="https://www.fivestars.blog/">FIVE STARS</a>：Exploring iOS, SwiftUI &amp; much more.</li><li><a href="http://weekly.swiftwithmajid.com/">SwiftUI Weekly</a>：The curated collection of links about SwiftUI. Delivered every Monday.</li><li><a href="https://www.getrevue.co/profile/peterfriese">Not Only Swift Weekly</a>：Xcode tips &amp; tricks, Swift, SwiftUI, Combine, Firebase, computing and internet history, and - of course - some fun stuff.</li><li><a href="https://swiftlyrush.curated.co/issues">SwiftlyRush Weekly</a>：SwiftlyRush Weekly is a weekly curated publication full of interesting, relevant links, alongside industry news and updates. Subscribe now and never miss an issue.</li><li><a href="https://iosdevweekly.com/issues">iOS Dev Weekly</a>：Subscribe to a hand-picked round-up of the best iOS development links every week. Curated by Dave Verwer and published every Friday. Free.</li><li><a href="https://www.ruanyifeng.com/blog/">阮一峰的网络日志</a>：Ruan YiFeng’s Blog 科技爱好者周刊</li><li><a href="https://theswiftdev.com/">The.Swift.Dev.</a>：Weekly Swift articles</li><li><a href="https://www.ifanr.com/">爱范儿</a>：让未来触手可及</li><li><a href="https://www.gcores.com/">机核</a>：不止是游戏</li></ul><h2 id="小册子动态"><a href="#小册子动态" class="headerlink" title="小册子动态"></a>小册子动态</h2><p>欢迎你的内容分享和留言，请发到 <a href="https://github.com/KwaiAppTeam/SwiftPamphletApp/issues">议题里</a>，也欢迎你的 PR :) 。</p><ul><li>22.02.10 发布<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp/releases/tag/4.1">4.1</a>：完善内容，补齐基础语法</li><li>22.02.08 发布<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp/releases/tag/4.0">4.0</a>：视觉更新。更新了小册子的icon。排版用了赫蹏（hètí），字体是霞鹜文楷，更新了代码高亮风格。</li><li>22.01.24 发布<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp/releases/tag/3.1">3.1</a>：可不设置 Github access token，生成 dmg</li><li>22.01.03 发布2.0：新动态支持提醒，包括博客RSS、开发者、好库和探索库</li><li>21.11.16 发布1.0：Swift 指南语法速查完成</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;update：内容已更新到 4.0 版本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新dyld源码透出近期苹果出新系统必然，依苹果 taste，势必要用好技术抛落后技术。漫漫长假我完善了Swift手册内容，字数达到十五万字，内容已压缩压缩再压缩，求全存简，more big,
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>我写技术文章的一点心得</title>
    <link href="http://ming1016.github.io/2021/07/24/my-little-idea-about-writing-technical-article/"/>
    <id>http://ming1016.github.io/2021/07/24/my-little-idea-about-writing-technical-article/</id>
    <published>2021-07-23T21:52:45.000Z</published>
    <updated>2022-06-14T06:34:51.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>非常感谢大家抽出生命中宝贵的一段时间来听我接下来的一大段关于写文章那些事的唠叨。写文章的好处看看<a href="https://movie.douban.com/subject/30228394/">《觉醒年代》</a>就知道了。</p><p>这篇文章我不会写一些常说的技巧，比如文章的内容前后要有逻辑关系，内容之间有关联。所讲知识前后的层次要平，不要在某个部分挖掘过深。写作过程中牢牢抓住要表达的内容，不要过于偏离主题。类似这样的技巧不会说。都说一流的人讨论思想、普通人讨论事情、三流的人讨论人，那么为了提高文章高度，除了说些事情，我还打算加些思想的内容。</p><p>大家都习惯去阅读他人人生体验来体验不一样的人生，这样的方式和评头论足一样简单舒服，轻松爽快。而主动去对自己思想进行研究和开发，通过写作输出自己独特的经历和思考却是困难且难受的，但这样从0到1和从0到10的创造过程获得的乐趣却是前者的百倍甚至更多，这背后所遵循的原则是怎样的呢？</p><p>每个心得都会基于某些原则，以至于思路不会散架，而所有的原则都无法违背物热力学第二定律，也就是熵增定律(强烈建议先看知乎<a href="https://zhuanlan.zhihu.com/p/72896309">这篇</a>介绍)。就连进化论都是遵循熵增定律。</p><p>对于写作的心得我提炼出独特性、真实感、故事性和新意四个点，其中的独特性和新意都是逆着熵增的过程，其过程是非常难受煎熬的，可能做了大量付出也没结果，因为逆熵增是非线性的，无法预测的，只有在偶然的机会才会有开挂的感觉。对于真实感和故事性属于线性积累，和阅读别人的文章一样，是很容易做到的事情，都是熵增过程，有必要，容易看到结果，但会有内耗，如果没有更多独特性的经历来逆熵，可输出的内容会越来越混乱，落后，渐渐无用。因此独特性、真实感、故事性和新意这四个点之间需要平衡与演进，才能够保持进化的活力。</p><p>接下来我就详细展开来跟你说说独特性、真实感、故事性和新意四个点，通过我以前写的一些文章来详细说明。如果你还不知道如何下笔，我还会介绍一个容易着手去做记录和分享输出的方法步骤，最后会从头到尾举个例子按照前面介绍的步骤演示如何写完一篇技术文章。特别是那些逆熵的过程，让你能够多些体感。</p><h2 id="四个点"><a href="#四个点" class="headerlink" title="四个点"></a>四个点</h2><p>先分别介绍下这四个点。</p><h3 id="独特性"><a href="#独特性" class="headerlink" title="独特性"></a>独特性</h3><p>独特性也就是自己的经历和体验，这个是独一无二的，文章的内容如果有更多的个人经历，作为读者也就能够体验到更多的生活。</p><p>行万里路，多去做不同事情，多尝试不同方法，也就能够获取到更多的经历。独特性是内容中最重要的部分，如果这四点重要性共分十层的话，我认为独特性就可以占到六层。</p><h3 id="真实感"><a href="#真实感" class="headerlink" title="真实感"></a>真实感</h3><p>记得一个美剧编剧分享过他写编剧的经验，其中提到要写的题材，他至少会花上一年以上的时间去收集和整理相关资料。他认为只有把题材相关细节都吃透了，编排到剧里，观众才会感觉更真实，代入感才会强，身同感受才会有共鸣。如果观众感到假，感觉不到用心，那他怎么会去了解你想表达的内容呢。</p><p>因此真实感是表达内容的基础，而且是最费时的。相较于独特的个人经历，真实感是需要花费大量时间去调研作者以前不了解的东西。而这个过程也是了解别人经历的过程，可以学习到很多以前不知道的事情。</p><p>真实感是对独特性的扩充，是丰富和挖掘沉淀独特性的，可以占到两层，后面的故事性和新意各占一层。</p><h3 id="故事性"><a href="#故事性" class="headerlink" title="故事性"></a>故事性</h3><p>我很喜欢金庸的小说，特别是射雕英雄传、神雕侠侣和倚天屠龙记这三部，起初对金庸其它小说兴趣不大，也可能拍的电视剧不是我的菜。后来抱着爱屋及乌的态度，我尝试着打开笑傲江湖小说的开头开始读，一下子就被吸引进去了。不得不佩服金庸写故事的能力，太强大了。故事一开始制造了一个令人无法解释的案件，你会非常好奇的一直看下去，很想知道到底发生了什么。小说都进行了很长的部分令狐冲才出现，主角出现前还能吸引你看下去，可见金庸讲故事能力有多厉害。</p><p>自从迷上金庸的小说后，我也会试着写些小故事，同样我会注重把一些自身独特的经历穿插到写的小故事里，这些故事我发到了我的博客上，有<a href="https://ming1016.github.io/2019/06/19/white-dragon-class/">白龙班</a>、<a href="https://ming1016.github.io/2016/04/04/tenth-middle-school/">十中</a>、<a href="https://ming1016.github.io/2018/01/04/baimi/">白芈</a>和<a href="https://ming1016.github.io/2018/01/04/huaye/">花野</a></p><p>故事性是一种技巧，是线性的，很容易通过大量积累掌握好，最终是好是差还是强依赖于独特性和真实感。</p><h3 id="新意"><a href="#新意" class="headerlink" title="新意"></a>新意</h3><p>新意这个点非常关键和重要，也是演进的重要因素，你仔细想想看，很多深度高的文章其实底层知识都是差不多的，能够真正有翻天覆地突进的技术演进不会很频繁，而且这些技术往往都在硬件厂商和实验室中产生出来。对于已有底层知识的输出区别只是应用场景和组合运用技巧上有区别，精彩的发掘和效果奇佳的收益也能够获得掌声。因此技术知识和经验输出的形式也非常重要和关键，如果没有新意，大家势必会对那些知识感觉到疲倦，没人看，写作也就没有了动力。</p><p>关于新意可以看到淘系公众号最近使用了视频的方式来讲他们的技术，看起来就很有趣。这方面只有你想不到，没有你做不到，打开脑壳，充分发挥想象吧。</p><p>新意之所以只占一层，因为新意获得成功的概率较低，是非线性的，因此需要不断去尝试不同的方式。需要依赖天时地利人和以及前三个点都做的足够好了，新意才会取得非常好的效果。</p><h2 id="我以前的文章"><a href="#我以前的文章" class="headerlink" title="我以前的文章"></a>我以前的文章</h2><p>前面讲了四个我觉得写技术文章最重要的点，只是说了下理论上的逻辑，体感还不够强，下面我结合我以前写的文章我们一起来看看这些文章背后那些独特的经历吧。</p><h3 id="A站-的-Swift-实践"><a href="#A站-的-Swift-实践" class="headerlink" title="A站 的 Swift 实践"></a>A站 的 Swift 实践</h3><p>《A站 的 Swift 实践》<a href="https://mp.weixin.qq.com/s/rUZ8RwhWf4DWAa5YHHynsQ">上</a>、<a href="https://mp.weixin.qq.com/s/EIPHLdxBMb5MiRDDfxzJtA">下</a>，当时发这篇文章时，关于 Swift 实践的文章也有很多，都是各厂自身实践经验，对于独特性这个点，开始想着把 A 站做过的事情说清楚就可以了，但是很多的经验和做的事情和其他厂做的差不多，这样写出来会没有什么特别的，所以需要着重说下做的和别人不一样的事情。A站比较有特色的是文章里提到的A站自研的声明式 UI Ysera 框架，这个是别人没有的，并且由于 Ysera 框架带来了和 SwiftUI 类似的优雅简洁，提升了整体开发的效率和体验。由于 A 站很早就进入了 Swift 开发模式，并且已有将近一半业务使用了 Swift 开发，所以 A 站相较其它厂走得更快些，对于 Swift 新特性运用的也更广，比如对于 Property Wrapper 的广泛应用，使得代码复杂度骤然降低。走得更远还表现在 Module 化上，A 站大半 Pod 都完成了 Module 化，这方面的经验也很多。</p><p>有了独特性，为了能够让阅读的人更有体感，需要对一些技术点进行进一步的描述，使得文章一方面能够让自己得到知识的总结沉淀，还能够对他人有用。这篇文章主要是在混编的内在原理上进行了剖析，这比只描述解决混编问题过程要更加通用些，同时也能起到授人以渔的目的。但掌握原理就需要去学习和提炼相关知识，所下的功夫也更大些。另外采用 Swift 的话，还有个绕不过去的担忧点需要面对，这就是 Swift 的动态性，Swift 这方面由于在 Swift 核心团队工作优先级中较低，相较于 OC 要弱和不成熟很多。所以关于动态化就要说清楚，说的全面点，最好是能够自己进行实验去验证，这个过程会往往枯燥漫长，需要较大的热情才能够完成。</p><p>关于故事性，故事性往往是用来引入读进去的一种办法，A 站的 Swift 实践这篇文章的开头通过讲述使用 Swift 的必要性、A 站为之付出的努力和收获、Swift 语言的演进的过程的方式尽量避开具体技术描述，而是使用通俗易懂的描述让读的人可以被轻松带入到文章中来。</p><h3 id="深入剖析Auto-Layout，分析iOS各版本新增特性"><a href="#深入剖析Auto-Layout，分析iOS各版本新增特性" class="headerlink" title="深入剖析Auto Layout，分析iOS各版本新增特性"></a>深入剖析Auto Layout，分析iOS各版本新增特性</h3><p><a href="https://ming1016.github.io/2015/11/03/deeply-analyse-autolayout/">《深入剖析Auto Layout，分析iOS各版本新增特性》</a>。写这个文章也是有着一段不同寻常的经历。那时刚到公司，所有布局都还是使用的 frame 方式，而 Auto Layout 苹果公司才推出不久，在另一位跟我一样新进公司熟悉 Auto Layout 同事的怂恿下，我打算在改版需求中使用 Auto Layout 来替换原有布局方式。但在需求开发刚开始时，那位熟悉 Auto Layout 的新同事突然离职了，我感觉失去了援手，但是我认可了这个技术，还是坚持使用它。期间碰到的苦难无数，布局思路带来了很多开发方式的改变，还有动画的结合会出现的各种效果不一致，其间公司老员工还不断劝我还是走老路比较稳妥。改版完后大部分主流程，包括首页发单、等待页、接单进行页都被改造成 Auto Layout。</p><p>更困难的事情还在后面呢，测试期间发现在 iOS6 上会出现各种崩溃、页面布局混乱、动画效果不一致等问题，我的 Bug 始终保持在 Bug 列表前十页。改 Bug 那些天，晚上调的眼发疼，深夜想的难入眠。线下 Bug 改完，上线后才是噩梦的开始，当时我们 App 的 iOS6 用户依旧很多，于是很多偶现崩溃被放大了，我的崩溃问题一直排在 Top1，虽然我很快找到了改好的办法，但是对于这几个偶现的问题还需要一个可靠可信服的解释，这样后面才能够让大家放心使用 Auto Layout。还记得当时周末坐在得实大厦窗户边的工位上，在查完和试完所有资料后依然无果时的无力感。本想着改回以前的 frame 布局算了，后又觉不甘。下几个周末跑到各大图书馆查看所有涉有 Auto Layout 的书，也是那个时候了解到了 VFL 语言。皇天不负有心人，WWDC 开始了，其中有个 Session 叫 Mysteries of Auto Layout，分为<a href="https://developer.apple.com/videos/play/wwdc2015-218/">上</a>、<a href="https://developer.apple.com/videos/play/wwdc2015-219/">下</a>两个部分，把 Auto Layout 的原理讲得非常透彻了，至此，透过原理我也找到了问题的根因，并把他们记录在了文章中。这部分内容我还在一个沙龙做了分享，下面是当时分享的 Auto Layout 的原理部分的内容：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/1.PNG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/1.PNG"></p><p>完整幻灯片参看<a href="https://ming1016.github.io/2021/07/13/deeply-analyse-autolayout-slides/">这里</a>。</p><p>这些经验的总结在当时是非常新的，因为官方也是刚公布出其内部的原理，没有人能够更早的知道这些信息，估计也很少有人会考究这么多。有了这些由于一直坚持下来去找根因的经历才使得文章有了独特性。</p><p>当然，深入剖析 Auto Layout 这篇文章也加了 Auto Layout 的历史、生命周期、VFL 语言的介绍用来丰富内容的广度，以提升真实感，但你会发现独特性在这里显得尤为重要。</p><p>另外，在查找崩溃问题根因时，没有放弃，一直坚持的去找答案的过程也让我难忘。经常会听说到要去找自己热爱的事情，遵循自己所想。而实际上是那件热爱的事情是你愿意花很久甚至很多年需要克服痛苦，还能够继续忍耐，能忍他人所不能忍，赢过他人不是靠的热爱和能力，而是在万般艰难，别人都放弃而你坚持下来才赢的。巴菲特21年资产5000亿美元，其中4997亿美元是50岁之后赚到的，如果49岁那年他就不继续做了，那么他就不会有今年这样巨大的财富，就不会显示巨大的复利效应。</p><p>后来我还发现，不断坚持的一个窍门就是去庆祝大目标方向上的每个小小的成功，把这个小小的成功当成最后的成就那样去庆祝。</p><h3 id="制作一个类似苹果VFL-Visual-Format-Language-的格式化语言来描述类似UIStackView那种布局思路，并解析生成页面"><a href="#制作一个类似苹果VFL-Visual-Format-Language-的格式化语言来描述类似UIStackView那种布局思路，并解析生成页面" class="headerlink" title="制作一个类似苹果VFL(Visual Format Language)的格式化语言来描述类似UIStackView那种布局思路，并解析生成页面"></a>制作一个类似苹果VFL(Visual Format Language)的格式化语言来描述类似UIStackView那种布局思路，并解析生成页面</h3><p><a href="https://ming1016.github.io/2016/07/21/assembleview/">这篇文章</a> 诞生的原因是我写了一个视图布局的库 AssembleView，通过这篇文章做了一个记录。这篇的独特性在于文章背后我特殊的经历。首先写 AssembleView 的起因在于之前大半年我使用自动布局写了大量的页面和一些动画，虽然有比系统更加简化的 Masonry 库可以使用，但是对于很早以前写过 H5 页面的我来说无论是从布局思路还有编写体验上，Masonry 依旧差的很远。苹果为自动布局发明的简洁 VFL 语言却没能用在更加先进的 UIStackView 布局思路上，于是在一次中午吃饭散步的过程中，我突然有了把 VFL 语言和 UIStackView 布局结合起来的想法，同时还想好了名字，叫做 AssembleView，也就是组装的视图的意思，心动不如行动，在接下来的一个需求周期中，我就着手一边开发 AssembleView 一边开发需求。每个需求只有一周的开发时间，当时需求只是更新评价的几个小页面部件，但为了将 AssembleView 运用进来，我把整个评价页面和功能进行了重写，包括标签云等复杂布局采用新库的重写。而这样的工作量仅在一周内完成了。</p><p>短时间完成 AssembleView 并应用到产品中，得益于 Deadline 的限制，设置时间节点，没有时间节点的目标那就是梦想，有了时间节点会让你保持一段时间专注，在限制的时间里，你没法去把事情做到方方面面都好，因此才会激发你，让你发挥自身的独特性，和别的不同，其实这种独特会让这件事情完成的更有价值。不要试着做最好的，而是力求做与众不同的。与众不同意味着创新，画草图和下笔写稿子都是创造的方式，这些过程不要去做雕琢、检查、取舍、反思这样的事情，而是释放自己的本能，去自由的发挥自己的积累和沉淀。艺术总是来自不完美，始于杂乱。</p><p>有了这样非同寻常的经历，使得这篇文章本身独特性的意义更大了。记录并分享，能够获得做着同样事情人的共鸣。</p><p>AssembleView 本身就是全新，因此从头到尾都是新意。</p><p>当时写这个库也是为了能够提高完成需求和维护需求的时间，有了精力才能够做更有趣有意义的事情嘛。五年后，苹果终于将 VFL 这种 DSL 语言运用 Swift 强大的 ResultBuilder 和不透明类型等特性进行了更好地完善，配合 Property Wrapper 和 Combine 还无缝衔接了先进的数据流架构，推出了 SwiftUI。</p><h3 id="深入剖析-JavaScriptCore"><a href="#深入剖析-JavaScriptCore" class="headerlink" title="深入剖析 JavaScriptCore"></a>深入剖析 JavaScriptCore</h3><p><a href="https://ming1016.github.io/2018/04/21/deeply-analyse-javascriptcore/">《深入剖析 JavaScriptCore》</a> 这篇文章要说独特性，那就是对 JavaScript 语言的好奇心。我很早就开始使用 JavaScript 来开发网站，工作和个人网站的前端都是依赖于这门语言，其实知情人都知道，选择 JavaScript 也是没有选择的选择。年轻时只顾着使用技术去做东西，也做了自己觉得非常有趣的程序，满足感十足，现在转向对其背后的机制技术好奇和感兴趣了。还有一个迫使自己去了解 JavaScript 引擎的原因是工作中做动态页面时需要用到对业务逻辑的解释执行处理。为了避免使用中出了问题会一脸懵，深入了解它显得很有必要。</p><p>光有想法是没有一点用的，JavaScriptCore 其实非常的庞大且复杂，当时能找到的大部分资料都是 Bridge 和 RN 的运用，好在开源了，了解内部的话还可以拉代码来看。但是直接埋进去看代码，代码量比较大，很容易 miss 掉其精妙之处。好在发现了 JavaScriptCore 项目核心开发者 Filip Pizlo，通过他的<a href="http://www.filpizlo.com/">个人网站</a>找到了大量 JavaScriptCore 的一手资料，没日没夜的啃内容，同时还试着动手去实现一些技术细节，最终了解和学习了很多解释器、虚机相关知识。获取一样东西带来的满足感是没有获取经验带来的满足感更深刻。我把学到的这些经验都记录在了这篇文章中，这使得文章的独特性更加深刻，真实感达到了满棚。</p><h3 id="深入剖析-JavaScript-编译器-x2F-解释器引擎-QuickJS-多了解些-JavaScript-语言"><a href="#深入剖析-JavaScript-编译器-x2F-解释器引擎-QuickJS-多了解些-JavaScript-语言" class="headerlink" title="深入剖析 JavaScript 编译器&#x2F;解释器引擎 QuickJS - 多了解些 JavaScript 语言"></a>深入剖析 JavaScript 编译器&#x2F;解释器引擎 QuickJS - 多了解些 JavaScript 语言</h3><p>对于 JavaScript 引擎，我先前就看了 JavaScriptCore，为啥还要再去看 QuickJS 这个轻量的 JavaScript 引擎呢。写<a href="https://ming1016.github.io/2021/02/21/deeply-analyse-quickjs/">这篇文章</a>动力主要还是对QuickJS如何使用精简高效的代码实现了那么复杂功能，还有极高的性能。QuickJS 基本是从头看到尾，一点一点的分析，整个过程也都记录了下来。但是我觉得记录源码的分析还不够，虽然这些分析使得文章的真实感很高，前提是读的人也会埋进代码里。为了提高文章的独特性和故事性，我在文章开头加入了一些 JavaScript 的一些背景内容，还有些当年使用前端技术的体会和经验。</p><p>只看代码不去修改和调试，往往会很枯燥，我在分析代码前，也写了些和 QuickJS 工程配置 makefile 相关的内容，并以 QuickJS 本身的 makefile 的用法进行举例说明。另外还手把手说明了怎么用 Xcode 来编译安装调试 QuickJS 代码，这些都是比较独特的内容。QuickJS 的核心代码基本都写在一个文件里，阅读分析时需要非常的专注，如果不专注，可能这篇文章也就没法写完。如果你花大量时间在家玩游戏、看电视剧和刷短视频，而不工作，那么就会有危机感和负罪感。但是如果会去工作，但是期间总会找着间隙去做其他事情，刷刷微博，看看朋友圈，瞅瞅新闻什么的，那就不会有负罪感，因为你会觉得你还是在工作着呢。没全力去工作，而在假装工作着，可比完全不工作的危害更大。一心一意的长时间去做工作外的事情，反而能够开眼界扩视野，从而反哺工作，工作的更好更开心。新时代就会有新机会，同时也会有新的要求，比如知识的获取从单一感官方式变成了动态的，多感官的方式。以前只是文字和图片的书和博客，新时代就是视频、直播和播客，新时代你有更多方式出现在大家面前，出现的更多就代表了成功。未来会有更多感官方式，而且更加的智能。获取知识的门槛低了，人群也就更广了，也可以理解为新的机会更大了，保持专注不设限去感受新时代，对自己不断做出新的要求，就会有新的机会。</p><h3 id="深入剖析-iOS-编译-Clang-x2F-LLVM"><a href="#深入剖析-iOS-编译-Clang-x2F-LLVM" class="headerlink" title="深入剖析 iOS 编译 Clang &#x2F; LLVM"></a>深入剖析 iOS 编译 Clang &#x2F; LLVM</h3><p>写<a href="https://ming1016.github.io/2017/03/01/deeply-analyse-llvm/">这篇文章</a>的原因主要来自在公司做的 App 安装包体积瘦身的事情，经过各种工具使用和分析后，总是找不到突破口。需求还在不断叠加，也没有好的思路。当你遇到困难时，做不成的人才会告诉你你也做不成，如果你真的想做成，有这个理想就要自己去守护他。遇到困难离成功才会更接近。那些困难来自于有限的资源，比如没人、没钱等，但是正是由于这些资源的限制，才会迫使你去创新，你会通过自己的热情还有毅力来寻找独特更有效的方法，所以由于有限资源带来的困难才会让你去突破、思变和进取。</p><p>就在百般无奈，各种资源条件受限的情况下。我想着看能不能把需要繁琐手动检查的动作试着写成程序自动完成。于是我用一个周末开发了查找无用方法工具，能够自动查找出工程中没有用到的方法，也兼顾了我们工程的一些运行时调用的方法检查。这样重复繁重的检查工作就变得轻松了很多。</p><p>工具开发完后，我发现这工具的实现并无相关成熟理论来进行支持，以后怎么完善和优化这个工具也没有一点思路。为此我还苦恼了蛮久的。</p><p>经过一位同事提醒，说大学有门编译原理的课里面就有讲怎么分析代码的，于是我就开始针对性的翻阅相关资料。于是乎，我发现了一片蓝海，这里面涉及到的技术不光是分析代码，还有很多以前不了解的程序怎么跑起来的细节，这里的知识就像可以无限递归的树，能够将你所有时间都吞没。这篇文章我更新添加内容的次数不下十次，每当get到了新的东西都忍不住记录下来。这期间动手去实践一些知识点，也遇到很多问题，解决这些问题的过程，对相关知识理解就更深入了。后来在17年的@Swift 大会上还做了 LLVM 相关内容的分享，下图是其中一张 Slide。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/2.png" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/2.png"></p><p>完整幻灯片参看<a href="https://ming1016.github.io/2017/05/27/slides-of-learn-what-interesting-things-you-can-do-with-iOS-compilation/">这里</a></p><h3 id="深入剖析-WebKit"><a href="#深入剖析-WebKit" class="headerlink" title="深入剖析 WebKit"></a>深入剖析 WebKit</h3><p>为了完成网页到原生代码的转换，我开始学习 Web 的标准，而 WebKit 是苹果公司对 Web 标准实现，V8和 Flutter 渲染技术的源头，WebKit 的学习能够让我更完整的了解网页从请求到布局再到渲染的流程和使用的相关技术。<a href="https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/">WebKit的这篇文章</a>我罗列了大量的 Web 规范资料，由于 WebKit 非常的庞大，架构也很复杂，文章里对架构也进行了详细的说明，对源码的结构做了详细的说明。全文按照一个页面从请求到最终渲染的流程顺序，依次对其关键环节里对应源代码和原理进行了详细的说明。完成这篇花费时间巨大，代码基本读了个遍。之后我对于前端技术有了更深的理解，特别是页面异步加载的流程和布局原理。</p><p>感觉这篇完全靠的是对前端技术的热情完成的。手冢治虫说过，那些投稿的人，都是热爱着漫画，把画出一部作品作为自己生命意义的人。所以他们才能获得成功，成为马拉松里跑到最后的人。热情可以增加25个 IQ 值。如果一个人仿佛开悟了的高僧，失去任何欲求、愿望、不甘、烦恨与伤痛，那么即使他去画漫画，即使基因再好，天赋再高，也只会画成佛教的禅画罢了。在比尔.布莱森在《人体简史》这本书中提到一个镜子相关的实验，实验来自一名防碎眼镜商人，在1980年创办了胚种精选择库（Repository for Germinal Choice），这个精子库只有诺贝尔获奖者和其他杰出知识权威的镜子。他想的是能够提供最好的精子生出天才婴儿，结果是在出生的200名儿童里，没有一个杰出天才，甚至连一个眼镜工程师都没能造出来，可见对做的事情有热情更加重要，而不仅仅只要基因好就行。</p><h3 id="深入剖析-iOS-性能优化"><a href="#深入剖析-iOS-性能优化" class="headerlink" title="深入剖析 iOS 性能优化"></a>深入剖析 iOS 性能优化</h3><p><a href="https://ming1016.github.io/2017/06/20/deeply-ios-performance-optimization/">性能这篇</a>最重要的是独特性，开始只是针对日常开发性能需要注意的一些点进行了归纳总结，后来需要对启动项进行分析，于是做了分析的工具，其间我无意多查看了下 thread_basic_info_t 这个结构体里的字段，发现了 cpu_usage，觉得日后必有用，于是留了个心眼。后来负责性能的同学看了我的这篇文章，跑来找我，跟我说 App 连续几个版本都有线上反馈耗电太大，他们自己也很容易复现出来。这几个版本调整了定位频率，排查了各种怀疑的点，电量消耗依然很大。起初我也没有思路，instruments 也看不出问题来，于是我使用分析启动项的方法，查看运行中方法调用次数，排序来看谁调用的频繁，后来发现调用频繁的方法数量太多很难排查定位。</p><p>这时先前留意的 cpu_usage 字段起来关键的作用，通过定时刷新获取线程中 CPU 使用情况，连续高使用就揪出详细线程堆栈，后来小范围灰度上线检测，直接定位到了问题的堆栈，很快的解决了这个大难题。而且有了这个手段，后面也有了底气，在遇到问题也不会慌了，而且线下也可以使用这个方法进行压力测试，以免把问题带到了线上。这个方案也更新记录到了文章中，有了这个不寻常的经历，文章也就有了很强的独特性。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>关于启动我写了两篇文章。第一篇是<a href="https://ming1016.github.io/2019/12/07/how-to-analyze-startup-time-cost-in-ios/">《如何对 iOS 启动阶段耗时进行分析》</a>，另一篇是<a href="https://ming1016.github.io/2020/12/18/thinking-in-how-to-speed-up-app/">《App 启动提速实践和一些想法》</a>。说起这两篇的独特性，那绝对是独一无二。我负责的这场血淋淋的战役真可以说是毕生难忘。项目起因不用猜也可以想到，启动速度持续劣化，导致用户体验变差，落后对手一倍，提速困难重重。临危受命，当时想到的只有一个字，那就是干。</p><p>开始最难的还是定方向和定策略以及决策。明确了整体的思路，所有任务就开始并行跑起来了。由于项目的重要性不言而喻，因此投入资源巨大，不光是我的人都参与了进来，还有很多其他团队也一起加入。停下所有手上低优事情，握紧拳头全力打赢关键战役。要的就是能够速战速决，一旦拖延，不光是士气没了，结果没达成，还会留下一堆烂摊子难有资源去清理。</p><p>由于初期谋划的方案全面、稠密以及有效，多个团队通力合作配合奇佳，使得在三周内超预期达成了目标，不光是领先了对手一倍，还比大部分头部 App 都要快。这三周说长不长，说短也不短，大量的开发、调试、工具设计开发、数据分析、检测和验证工作集中式的进行，对体力和脑力都是极大的挑战，且压力巨大。</p><p>第一篇记录了前期的策划内容以及一些提效工具的开发过程。对这三周干的事情进行了沉淀，沉淀的是一次独特的成功经验。第二篇是在一年后写的，更多的是记录了这一年我对启动这件事情的思考，一年时间的经历也很多，还主负责过包体积的项目，所以内容就显得更加丰富了些，有记录些对性能和调试工具的研究。</p><p>第二篇文章里我提到我发现了一个宝藏男孩<a href="https://eisel.me/">Michael Eisel</a>，发现了很多二手资料都是源自他的博客。另外由于这一年也发现了性能防劣化中，自动化分析工具和能力相关技术了解的不够深入。于是专门去探索了下这方面的情况。对于目前为了保持双端一直 libimobiledevice，我发现了 Facebook 专门针对苹果系统开发的 idb，idb 做法明显更聪明些。</p><p>这些探究的过程至少是独特的。更独特的地方是文中写的那个A库多线程问题的排查经历。痛苦的经历我已在文中清晰详细的记录了，历时三天三夜，当大家试完所有情况，士气全无时，才柳暗花明又一村。全因苹果的一个 bug。经历这么一遭，对于 GCD 的队列排查定位问题难这点，我看国外对 iOS 并发开发方式吐槽的声音也很大，于是我很想了解多线程问题苹果未来会怎么处理。这就有了文中 Swift 并发提案部分的分析。当时这份提案还未进入正式流程（现在已经在 Swift 5.5正式发布了），未来并不明朗，我也担心会遗漏关键信息，于是对涉及相关的提案都进行了阅读，包括那些提案下所有的评论也都看了。</p><p>这两篇文章跨越了整整一年时间，这一年期间我基本没有写其他的文章，但是却沉淀了很多，所以第二篇实际上可写的内容非常多，一口气挑着重点的说了一大篇后，还删减了大量内容。写完第二篇我感觉到化繁为简的巨大好处。自己做的记录、素材和资料往往都是大量的，深究下去都是无穷无尽的感觉。因此需要从中提炼出自己的观点。从那么多内容中提炼出观点是需要足够的休息和放松，让你的潜意识主动来帮助你。这些休息和放松也可以是在日常的行为中，比如洗澡、去超市买东西、骑自行车、走路、锻炼、吃饭和睡觉等，特别是走路和睡觉持续时间长，最容易进入深度思考。不断给自己提问题进而更大量的阅读找答案，思考内在逻辑和联系。发散的找，专注的收敛提取观点，这样的观点是用钱买不到的。</p><p>通过大白话讲清楚，分享出去，这样的观点在他人接收时是自然地，意识不到其背后所花的时间和功夫，这就跟优秀的 App 一样，用起来是那么简单有效，丝毫不拖泥带水，用户也意识不到开发 App 所付出的脑动。这种化繁为简的过程也是将无序杂乱的东西清理掉，让你宝贵精炼的思想能够有地方存放。</p><p>灌篮高手中流川枫打篮球行云流水，天赋异禀。背后的努力谁又能知晓。我印象最深的一段是樱木花道为了取得晴子芳心，但始终技不如流川枫，总以为是天赋不够。一天晚上樱木花道很晚来到篮球馆，发现流川枫还在苦练，才发现原来白天看起来懒散傲慢的流川枫原来比谁都要刻苦，简单轻松从来都不是廉价的。</p><p>对于分享，有智慧的人都懂得给予越多收获越大。友情比金钱价值更高，就好像有一个开电影公司的朋友比拥有一家电影公司要好。分享不是要得到他人的认可，如果你知道这点，你拥有的能量就是无穷的，力量也是无敌的。</p><h2 id="没怎么写过，那下一步怎么行动"><a href="#没怎么写过，那下一步怎么行动" class="headerlink" title="没怎么写过，那下一步怎么行动"></a>没怎么写过，那下一步怎么行动</h2><p>看到这里，你一定会想“看你说了那么多，但我双手放在键盘前，脑袋还是一片空白，无从下手”。</p><p>如果想帮其他人，让他真的动手去做些什么事情，其实更应该是要让做这件事情变得容易很多倍，但方向是一样的，这样下次他就更好接受些。互联网开始发布内容门槛高，后来有了微博和朋友圈这种能够一句话就快速发布出去的产品后，大家发内容就比以前更多了。去读资料和文章，可以懂更多的知识，自身能力还是需要通过练习才能够有提升。想把事情做好，还是需要去做。</p><p>因此你应该更重视动手写，如果你不知道如何写，可能就不知道如何思考。有叛逆和逆向思维的人常常是爱问问题的人，爱自问爱思考，对那些已经共识正在运作的事物提出疑问，寻找和关注答案，这样才会有打破现状的意识。一些人小时候就能看到有这样的特点，因此在别人教你怎样怎样做时，不要太当回事，相信自己实践出来的答案。多听你喜欢人说话，多倾听，不断问还有没想说的。</p><p>还要从各种类型人那学习，甚至是和你观点不同的人。因为在每个人坚持的思想里，都会有他自己独特的经历和实践总结来的结论。通过他们的结论，你也可以自己去实践和验证形成自己的观点，这样就会有复利效应。做的结果其实并不重要，重要的是在做的过程中，你自己有没有变得更好。</p><p>你说的话，你的观点，你的评论都不能代表你，而是你所做的事情，花了很多时间做的事情那才是你。改变一个人的行为来改变思维，比改变一个人的思维来改变行为要容易的多很多。</p><p>因此，光看光听不动手写是没用的。那行动起来的话，怎么做更好些呢？</p><h3 id="四个步骤"><a href="#四个步骤" class="headerlink" title="四个步骤"></a>四个步骤</h3><p>第一步，零散的想法、工作内容和看到的好的技术资料及时记录，先按照时间轴的方式记录。这一步是很容易操作的，几乎不用费脑，只需要机械的做记录就行，也不用考虑先前提到四个点里任何一个。</p><p>第二步，对于记录的内容进行分类，开始粒度可以粗一点，比如性能、架构、构建、编程语言、管理、成长、旅行和科技等，根据自身兴趣点和期望发展方向来就好。</p><p>第三步，做完一个项目，或者想对先前做的事情进行总结时，先一口气快速写出想表达的内容出来，这时写的内容体现出独特性，搭好骨架。然后针对写的内容中的一些技术点，进行真实感的完善。真实感的完善是需要很多素材和资料的，这时在第一步和第二步做的工作和积累就能够派上用场了。找到相关大分类进行细分来补充文章的血肉。</p><p>第四步，也是最后一步，可以充分发挥自己软实力和创造力，通过故事性和新意来披上文章的皮肤，让文章能够看起来更加完整和吸引人，提高阅读的体验。</p><p>完整完成这四个步骤并不容易，经常就会因为惰性半途而废。这时就需要 push 自己一把，方法的话，我这边的经验就是定目标，定时间节点。比如定好一个对外分享的时间，这样目标性更强，同时也有了约束和责任，自己的惰性在这一段时间内就能够得到很好的消减。</p><p>为了达成目的，彻底理清你想要啥，还需要清空干扰，方法很简单，除了当前最重要的事情，其它所有待做事情都记在备忘录里以便追踪防止遗漏。完成当前事情后，再去查看备忘录，然后定新目标新计划。</p><p>完成文章后可以通过下面八个问题来检查下文章的完成度。</p><ol><li>我为什么做这件事？</li><li>谁已经做了？他们都是怎么做的？效果怎样？</li><li>我和他们做的不一样在哪？怎么想到的？能详细具体说出涉及相关知识点吗？（⭐️重点，写好了的话，其他问题可有可无）</li><li>我碰到了什么困难？</li><li>我怎么解决的？</li><li>做的有亮点吗？为什么是亮点？</li><li>做完后效果是怎样的？超预期地方在哪？</li><li>以后还有计划打算吗？为什么？</li></ol><h3 id="所用软件"><a href="#所用软件" class="headerlink" title="所用软件"></a>所用软件</h3><p>下面是我写文章会用到的一些软件，以及我关注和用到的一些特性：</p><p>系统自带备忘录</p><ul><li>零散想法和灵感记录</li><li>待做事项记录（一个一个直接删掉的感觉不错）</li><li>聚焦想法思路，不用去考虑分类整理等</li></ul><p><a href="https://bear.app/cn/">熊掌记</a></p><ul><li>本地文档管理（多设备同步收费）</li><li>标签系统简化分类</li></ul><p><a href="https://www.notion.so/">Notion</a></p><ul><li>在线文档管理</li><li>数据库方式管理，分类、检索和排序</li><li>字段自定义添加，比如标签、类别、链接、标题等等都可以自定义</li><li>基于数据库和自定义字段可生成看板、时间轴、日历、列表、表格、网格等不同视图样式查看。</li><li>有chrome插件</li></ul><p><a href="https://code.visualstudio.com/">VS Code</a></p><ul><li>本地文档管理（文件夹，Git支持可多端同步）</li><li>Markdown 插件支持（Markdown All in One、Pangu-Markdown、Markdown Preview Enhanced、Word Count CJK）</li></ul><p><a href="https://obsidian.md/">Obsidian</a></p><ul><li>本地文档管理（文件夹）</li><li>Markdown原生支持</li><li>插件系统，比如有大纲和看板等插件可用</li><li>双向链接与关系图谱</li></ul><p><a href="https://procreate.art/cn">Procreate</a></p><ul><li>可以把在纸上的草图配上颜色</li></ul><p>软件使用上，我会通过备忘录或熊掌记快速记录一些素材和想法，定期挪到 Notion 里，我是把 Notion 当做一个大仓库，写作的第二阶段整理分类我就是在 Notion 中完成的，充分利用 Notion 的自定义字段能力，对所有资料进行各种维度划分和归档。开始写文章时，初期会用 VS Code 来写，如果文章写长了就会打开 Obsidian 来继续写，主要是 Obsidian 的大纲效果比较好些。最后文章的配图我会使用 Procreate 来画，里面有辅助线，打开后可以很方便做参照，写图中文字就不容易偏了。</p><p>工具只是工具，记录的内容和自己的思想才是核心。我现在读书还是喜欢在纸上写笔记，特别有感触的才会提炼一些观点敲到备忘录中，比如我看了网飞（Nexflix）的<a href="https://book.douban.com/subject/35102294/">《不拘一格》</a>后提炼了一些观点做了记录，笔记如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">制度都是围绕着怎么不阻碍所要的人发挥。比如假期自由安排、无审批、决策权非自上而下，而是在认识一致情况下松散耦合。要和不要什么样的人呢？不要的人：与人相处好，但能力平平工作狂，缺少判断力天资好，行动力强，但悲观、牢骚有才华的混蛋：特征听到赞美就自觉优秀对想法不明智的人，会进行嘲笑会侮辱天赋不如自己的人表现喜欢会上慷慨陈词，重复表达自己观点如没抓住他的要点，会打断别人的话别人发言，不赞同时会不听，做自己的事情别人啰嗦，没抓住要点，立刻打断总想着怎么做才能表现好，得奖金，缺少开放的认知空间为什么：管理花费精力多，讨论质量低，会排挤卓越员工。要的人：非凡创造力、工作出色（完成繁重任务）、合作好在放松状态下，会灵光乍现公司利益至上自觉追求成功，无论是否有奖金（已给予能力匹配市场最高价）当某一固定思维遇到瓶颈时，他总有办法摆脱瓶颈，或尝试不同角度看待问题在有才能，受爱戴的前提下，自己犯错大声说，成功小声说，让人感觉亲近、真诚和体贴。有良好的判断力为什么：优秀的人激励其他优秀的人，出色成果感染更多人才。只有公司里的员工都是上面提到的要的人时，公司的密度才高。这样的公司不是家庭而是专业运动队，运动队追求卓越，每个位置都是最佳人选；训练就是为了胜利，大家都能给予和接受反馈；成绩要好，不能只用努力就够了。书中详细介绍了网飞的制度由来，大量员工的实际案例，碰到了问题如何完善了制度。非常全面进行了制度介绍，甚至包含了进行创新的几个步骤的详细说明，还有网飞创始人里德是如何做到让大家认识一致的。最后是书中引用的小王子那段：如果你想造艘船，不要老催人去采木，忙着分配工作和发号施令。而是要激起他们对浩瀚无垠的大海的向往。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="举个例子，怎么写这次WWDC21的见闻文章"><a href="#举个例子，怎么写这次WWDC21的见闻文章" class="headerlink" title="举个例子，怎么写这次WWDC21的见闻文章"></a>举个例子，怎么写这次WWDC21的见闻文章</h2><p>光说不练，这样不好吧，那就现举个例子，看看怎么按照上面的四个步骤一步一步写一篇技术文章。那就以现在刚开完的 WWDC21 为主题，写个《WWDC21我的见闻》吧。</p><p>首先我们先做第一步，从 WWDC21 开始，我就将我看到的信息、还有看感兴趣 Session 中有用的点都记录了下来，只考虑是否要记，二不考虑其它任何事情。你可以看我<a href="https://ming1016.github.io/2021/06/08/wwdc2021-day1-note/">WWDC21第一天的记录</a>，我将其发到了我的博客和公众号上。后面几天我也不断的收集记录着零碎的信息。然后对这些记录进行分类。接下来再开始内容的撰写。</p><p>写 WWDC21 见闻录，你可以先想想着你想要什么内容，有没人提供，有的话可以直接链过来，没有的话可以自己去体会，去想，去经历，然后分享出来。</p><p>我会先写个总览，内容如下。</p><h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p>WWDC21 官方通过一个页面汇总了发布的新技术，详见<a href="https://developer.apple.com/documentation/new-technologies-wwdc21">这里</a>。WWDC21 里的代码范例官方都有提供和汇总，详见<a href="https://developer.apple.com/sample-code">这里</a>。WWDC21 期间苹果也<a href="https://developer.apple.com/wwdc21/beyond-wwdc/">列出了</a>苹果公司之外围绕 WWDC 其它组织的学习、交流和娱乐的活动。</p><p>如果没有太多时间看 Session 视频，也可以直接看其他人的笔记，国外有<a href="https://www.wwdcnotes.com/">WWDC NOTES</a>，国内有老司机技术周刊的<a href="https://xiaozhuanlan.com/wwdc21">WWDC21 内参</a>。往届内容也有人做了<a href="https://github.com/Juanpe/About-SwiftUI">汇总</a></p><p>简单笔记可以查缺补漏，Alejandro Martinez 在这篇文章<a href="https://alejandromp.com/blog/wwdc21-notes/">WWDC21 notes</a>中对各种主题做了简单的记录，列出了关键字方便检索。</p><h3 id="Session推荐"><a href="#Session推荐" class="headerlink" title="Session推荐"></a>Session推荐</h3><p>全部 Session，在<a href="https://developer.apple.com/videos/wwdc2021/">这里</a>查看。这里有份<a href="https://useyourloaf.com/blog/wwdc-2021-viewing-guide/">推荐清单</a>。我也列了下我关注的 Session。如下：</p><p>SwiftUI 相关 Session：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2021/10018/">What’s new in SwiftUI</a>：包括了所有SwiftUI这次的更新内容介绍。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10021/">Add rich graphics to your SwiftUI app</a>：内容包括安全区域、材质包、画布API等。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10176/">Craft search experiences in SwiftUI</a>：.searchable修饰符的使用。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10023/">Direct and reflect focus in SwiftUI</a>：关于移动焦点的使用。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10062/">SwiftUI on the Mac: Build the fundamentals</a>：内容是一步一步构建一个macOS应用。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10289/">SwiftUI on the Mac: The finishing touches</a>：展示如何通过设置让人们灵活定制一个应用程序。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10022/">Demystify SwiftUI</a>：介绍了SwiftUI的三个核心Identity、Lifetime和Dependencies。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10019/">Discover concurrency in SwiftUI</a>：展示并发工作流如何和SwiftUI数据流进行结合。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10349/">SF Symbols in SwiftUI</a>：定义Symbols的大小，显示不同变体以及Symbols着色。</li></ul><p>Swift Concurrency 相关 Session：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2021/10132/">Meet async&#x2F;await in Swift</a>：了解 async&#x2F;await 开发模式。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10134/">Explore structured concurrency in Swift</a>：内容包括创建不同类型并发任务，如何创建任务组，如何取消正在进行的任务。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10133/">Protect mutable state with Swift actors</a>：内容有如何使用Swift actors组织资源竞争，actors如何工作等。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10254/">Swift concurrency: Behind the scenes</a>：了解更多Swift并发的细节，更安全的数据竞争和处理线程爆炸，和GCD的不同，线程模型怎么工作等。值得看多遍。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10194/">Swift concurrency: Update a sample app</a>：介绍async&#x2F;await、actors和continuation在现实工作中的经验</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10058/">Meet AsyncSequence</a>：流式传输数据。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10095/">Use async&#x2F;await with URLSession</a>：URLSession中怎么使用async&#x2F;await和AsyncSequence。</li></ul><p>DocC：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2021/10166">Meet DocC documentation in Xcode</a>：了解如何使用DocC，如何生成DocC档案，并让他们显示在文档浏览器中。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10236">Host and automate your DocC documentation</a>：如何通过自己的服务器托管DocC，自动构建和分发DocC档案。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10167">Elevate your DocC documentation in Xcode</a>：介绍写文档的最佳实践。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10235">Build interactive tutorials using DocC</a>：编写交互教程。</li></ul><p>其它感兴趣的 Session：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2021/10253/">Write a DSL in Swift using result builders</a>：使用 result builders 来创建DSL，是代码更容易阅读和维护。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10076/">Create 3D models with Object Capture</a>：捕获现实对象，生成3D模型。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10097/">What’s new in SF Symbols</a>：SF Symbols的更新。介绍如何让自定义符号支持单色、分层、调色板和多色渲染模式。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10288/">Explore the SF Symbols 3 app</a>：SF Symbols应用程序的更新。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10250/">Create custom symbols</a>：创建自定义symbols。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10181/">Ultimate application performance survival guide</a>：关于性能优化的话题，内容包括性能相关工具、指标和范式。会涉及到Instruments、XCTest、MetricKit等等技术和工具。iOS 15的动态链接器做了优化能够启动提速并减少Swift二进制大小。可以参看<a href="https://medium.com/geekculture/how-ios-15-makes-your-app-launch-faster-51cf0aa6c520">这篇文章</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10211/">Symbolication: Beyond the basics</a>：介绍符号化的过程。</li><li><a href="https://developer.apple.com/videos/play/wwdc2021/10256/">Meet the Swift Algorithms and Collections packages</a>：讲的通俗易懂。</li></ul><h3 id="Swift-的一些更新"><a href="#Swift-的一些更新" class="headerlink" title="Swift 的一些更新"></a>Swift 的一些更新</h3><p>Paul Hudson 的这篇<a href="https://www.hackingwithswift.com/articles/233/whats-new-in-swift-5-5">What’s new in Swift 5.5?</a> 已经把这些更新说的非常详细了，每个更新点都有对应的例子可以试。今年苹果公司推出 AttributedString 用来替代 OC 时代的 NSAttributedString。AttributedString 是值类型，可以直接在 SwiftUI 的 Text 里使用。AttributedString 还支持简单的 Markdown 语法，Markdown 单行没问题，多行功能受限。</p><p>DocC 是通过 Xcode 编译后生成的文档，使用 Product -&gt; Build Documentation 就会生成DocC。在函数接口代码上使用 Shift+Cmd+A 快捷键就会创建文档模板，有参数和返回值的话也会将其提取出来，包括参数类型等，并生成标准文档格式，方便你进行内容编写。基本 Markdown 语法是支持的。详细的介绍可以看前面列出的官方 Session，或者看这篇文章<a href="https://www.hackingwithswift.com/articles/238/how-to-document-your-project-with-docc">How to document your project with DocC</a>。</p><h3 id="今年重头戏-Swift-Concurrency"><a href="#今年重头戏-Swift-Concurrency" class="headerlink" title="今年重头戏 Swift Concurrency"></a>今年重头戏 Swift Concurrency</h3><p>ABI 稳定后，Swift 的核心团队可以开始关注 Swift 语言一直缺失的原生并发能力了。最初是由<a href="https://twitter.com/clattner_llvm">Chris Lattner</a>在17年发的<a href="https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782">Swift并发宣言</a>，从此开阔了大家的眼界。后来 Swift Evolution 社区讨论了十几个提案，几十个方案，以及几百页的设计文件，做了大量的改进，社区中用户积极的参与反馈，Chris 也一直在 Evolution 中积极的参与设计。</p><p>Swift Concurrency 的实现用了<a href="https://llvm.org/docs/Coroutines.html">LLVM的协程</a>把 async&#x2F;await 函数转换为基于回调的代码，这个过程发生在编译后期，这个阶段你的代码都没法辨识了。异步的函数被实现为 coroutines，在每次异步调用时，函数被分割成可调用的函数部分和后面恢复的部分。coroutine 拆分的过程发生在生成LLVM IR阶段。Swift使用了哪些带有自定义调用约定的函数保证尾部调用，并专门为Swift进行了调整。</p><p>Swift Concurrency 不是建立在 GCD 上，而是使用的一个全新的线程池。GCD 中启动队列工作会很快在提起线程，一个队列阻塞了线程，就会生成一个新线程。基于这种机制 GCD 线程数很容易比 CPU 核心数量多，线程多了，线程就会有大量的调度开销，大量的上下文切换，会使 CPU 运行效率降低。而 Swift Concurrency 的线程数量不会超过 CPU 内核，将上下文切换放到同一个线程中去做。为了实现线程不被阻塞，需要通过语言特性来做。做法是，每个线程都有一个堆栈记录函数调用情况，一个函数占一个帧。函数返回后，这个函数所占的帧就会从堆栈弹出。await 的 async 函数被作为异步帧保存在堆上等待恢复，而不阻碍其它函数入栈执行。在 await 后运行的代码叫 continuation，continuation 会在要恢复时放回到线程的堆栈里。异步帧会根据需要放回栈上。在一个异步函数中调用同步代码将添加帧到线程的堆栈中。这样线程就能够一直向前跑，而不用创建更多线程减少调度。</p><p>Douglas 在 Swift 论坛里发的 Swift Concurrency 下个版本的规划贴 <a href="https://forums.swift.org/t/concurrency-in-swift-5-and-6/49337">Concurrency in Swift 5 and 6</a>，论坛里还有一个帖子是专门用来<a href="https://forums.swift.org/t/swift-concurrency-feedback-wanted/49336">征集Swift Concurrency意见</a>的，帖子本身列出了 Swift Concurrency 相关的所有提案，也提出欢迎有新提案发出来，除了这些提案可以看外，帖子回复目前已经过百，非常热闹，可以看出大家对 Swift Concurrency 的关注度相当的高。</p><p>非常多的人参与了 Swift Concurrency 才使其看起来和用起来那么简单。Doug Gregor 在参与 John Sundell 的播客后，发了很多条推聊 Swift Concurrency，可以看到参与的人非常多，可见背后付出的努力有多大。下面我汇总了 Doug Gregor 在推上发的一些信息，你通过这些信息也可以了解 Swift Concurrency 幕后信息，所做的事和负责的人。</p><p><a href="https://twitter.com/pathofshrines">@pathofshrines</a>是 Swift Concurrency 整体架构师，包括低级别运行时和编译器相关细节。<a href="https://twitter.com/illian">@illian</a>是 async sequences、stream 和 Fundation 的负责人。<a href="https://twitter.com/optshiftk">@optshiftk</a>对 UI 和并发交互的极好的洞察力带来了很棒的 async 接口，<a href="https://twitter.com/phausler">@phausler</a>带来了 async sequences。Arnold Schwaighofer、<a href="https://twitter.com/neightchan">@neightchan</a>、<a href="https://twitter.com/typesanitizer">@typesanitizer</a>还有 Tim Northover 实现了 async calling convention。</p><p><a href="https://twitter.com/ktosopl">@ktosopl</a>有很深厚的 actor、分布式计算和 Swift-on-Server 经验，带来了 actor 系统。Erik Eckstein 为 async 函数和actors建立了关键的优化和功能。</p><p>SwiftUI是<a href="https://twitter.com/ricketson_">@ricketson_</a>和<a href="https://twitter.com/luka_bernardi">@luka_bernardi</a>完成的async接口。async I&#x2F;O的接口是<a href="https://twitter.com/Catfish_Man">@Catfish_Man</a>完成的。<a href="https://twitter.com/slava_pestov">@slava_pestov</a>处理了 Swift 泛型问题，还指导其他人编译器实现的细节。async 重构工具是Ben Barham 做的。大量代码移植到 async 是由<a href="https://twitter.com/AirspeedSwift">@AirspeedSwift</a>领导，由 Angela Laar，Clack Cole，Nicole Jacques 和<a href="https://twitter.com/mishaldshah">@mishaldshah</a>共同完成的。</p><p><a href="https://twitter.com/lorentey">@lorentey</a>负责 Swift 接口的改进。<a href="https://twitter.com/jckarter">@jckarter</a>有着敏锐的语言设计洞察力，带来了语言设计经验和编译器及运行时实现技能。<a href="https://twitter.com/mikeash">@mikeash</a> 也参与了运行时开发中。操作系统的集成是<a href="https://twitter.com/rokhinip">@rokhinip</a>完成的，<a href="https://twitter.com/chimz">@chimz</a>提供了关于 Dispatch 和 OS 很好的建议，Pavel Yaskevich 和<br><a href="">@hollyborla</a>进行了并发所需要关键类型检查器的改进。<a href="https://twitter.com/kastiglione">@kastiglione</a>、Adrian Prantl和<a href="https://twitter.com/fred_riss">@fred_riss</a>实现了调试。<a href="https://twitter.com/etcwilde">@etcwilde</a>和<a href="https://twitter.com/call1cc">@call1cc</a>实现了语义模型中的重要部分。</p><p><a href="https://twitter.com/evonox">@evonox</a>负责了服务器Linux 的支持。<a href="https://twitter.com/compnerd">@compnerd</a>将 Swift Concurrency 移植到了 Windows。</p><p>Swift Concurrency 模型简单，细节都被隐藏了，比 Kotlin 和 C++的 Coroutine 接口要简洁很多。比如 Task 接口形式就很简洁。Swift Concurrency 大体可分为 async&#x2F;await、Async Sequences、结构化并发和  Actors。下面展开说下。</p><h4 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h4><p>通过类似 throws 语法的 async 来指定函数为异步函数，异步函数才能够使用 await，使用异步函数要用 await。await 修饰在 suspension point 时当前线程可以让给其它任务执行，而不用阻塞当前线程，等 await 后面的函数执行完成再回来继续执行，这里需要注意的是回来执行不一定是在离开时的线程上。async&#x2F;await 提案是<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296</a>。如果想把现有的异步开发带到 async&#x2F;await 世界，请使用 withCheckedThrowingContinuation。</p><p>async&#x2F;await 还有一个非常明显的好处，就是不会再有[weak self] dance 了。</p><h4 id="Async-Sequences"><a href="#Async-Sequences" class="headerlink" title="Async Sequences"></a>Async Sequences</h4><p>AsyncSequence 的使用方式是 for-await-in 和 for-try-await-in，系统提供了一些接口，如下：</p><ul><li>FileHandle.standardInput.bytes.lines</li><li>URL.lines </li><li>URLSession.shared.data(from: URL)</li><li>let (localURL, _ ) &#x3D; try await session.download(from: url) 下载和get请求数据区别是需要边请求边存储数据以减少内存占用</li><li>let (responseData, response) &#x3D; try await session.upload(for: request, from: data)</li><li>URLSession.shared.bytes(from: URL)</li><li>NotificationCenter.default.notifications</li></ul><h4 id="结构化并发"><a href="#结构化并发" class="headerlink" title="结构化并发"></a>结构化并发</h4><p>使用这些接口可以一边接收数据一边进行显示，AsyncSequence 的提案是<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298</a>（Swift 5.5可用）。AsyncStream 是创建自己异步序列的最简单的方法，处理迭代、取消和缓冲。AsyncStream 正在路上，提案是<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md">SE-0314</a>。</p><p>Task 为一组并发任务创建一个运行环境，async let 可以让任务并发执行，结构化并发（Structured concurrency，提案在路上<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304</a>）withTaskGroup 中 group.async 可以将并发任务进行分组。</p><h4 id="Actors"><a href="#Actors" class="headerlink" title="Actors"></a>Actors</h4><p>我们写的程序会在进程中被拆成一个一个小指令，这些指令会在某刻会一个接一个同步的或者并发的执行。系统会用多个线程执行并行的任务，执行顺序是调度器来管理的，现代多核可以同时处理多个线程，当一个资源在多个线程上同时被更改时就会出问题。并发任务对数据资源操作容易造成数据竞争，以前需要手动放到串行队列、使用锁、调度屏障或 Atomics 的方式来避免。以前处理容易导致昂贵的上下文切换，过多线程容易导致线程爆炸，容易意外阻断线程导致后面代码没法执行，多任务相互的等待造成了死锁，block 和内存引用容易出错等等问题。</p><p>现在 Swift Concurrency 可以通过 actor 来创建一个区域，在这个区域会自动进行数据安全保护，保证一定时间只有一个线程访问里面数据，防止数据竞争。actor 内部对成员访问是同步的，成员默认是隔离的，actor 外部对 actor 内成员的访问只能是异步的，隐式同步以防止数据竞争。MainActor 继承自能确保全局唯一实例的 GlobalActor，保证任务在主线程执行，这样你就可以抛弃掉在你的 ViewModel 里写 DispatchQueue.main.async 了。</p><p>Actors 的概念通常被用于分布式计算，Actor 模型参看<a href="https://en.wikipedia.org/wiki/Actor_model">Wikipedia</a>里的详细解释，Swift 中的实现效果也非常的理想。Actors 的提案<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306</a>已在 Swift 5.5落实。</p><p>很多语言都支持 actors 还有 async&#x2F;await，实现的方式也类似，actor 使用的不是锁，而是用的 async&#x2F;await 这样能够在一个线程中切换上下文来避免线程空闲的线程模型。actor 还利用编译器，提前做会引起并发问题的检查。</p><p>actor 是遵循 Sendable 协议的，只有结构体和 final 类才能够遵循 Sendable，继承于 Sendable 协议的 Excutor 协议表示方法本身，SerialExecutor 表示以串行方式执行。actor 使用 C++写的，源码在<a href="https://github.com/apple/swift/blob/main/stdlib/public/Concurrency/Actor.cpp">这里</a>，可以看到 actor 主要是通过控制各个 job 执行的状态的管理器。job 执行优先级来自 Task 对象，排队时需要确保高优 job 先被执行。全局 Executor 用来为 job 排队，通知 actor 拥有或者放弃线程，实现在<a href="https://github.com/apple/swift/blob/main/stdlib/public/Concurrency/GlobalExecutor.cpp">这里</a>。由于等待而放弃当前线程让其他 actor 执行的 actor，在收到全局 Executor 创建一个新的 job 的通知，使其可以进入一个可能不同线程，这个过程就是并发模型中描述的 Actor Reentrancy。</p><h4 id="Swift-Concurrency相关提案集合"><a href="#Swift-Concurrency相关提案集合" class="headerlink" title="Swift Concurrency相关提案集合"></a>Swift Concurrency相关提案集合</h4><p>所有相关提案清单如下：</p><ul><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296: Async&#x2F;await</a> <a href="https://kemchenj.github.io/2021-03-06/">【译】SE-0296 Async&#x2F;await</a></li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0317-async-let.md">SE-0317: async let</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">SE-0300: Continuations for interfacing async tasks with synchronous code</a> <a href="https://kemchenj.github.io/2021-03-31/">【译】SE-0300 Continuation – 执行同步代码的异步任务接口</a></li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0302-concurrent-value-and-concurrent-closures.md">SE-0302: Sendable and @Sendable closures</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298: Async&#x2F;Await: Sequences</a> <a href="https://kemchenj.github.io/2021-03-10/">【译】SE-0298 Async&#x2F;Await 序列</a></li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304: Structured concurrency</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306: Actors</a> <a href="https://kemchenj.github.io/2021-04-25/">【译】SE-0306 Actors</a></li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0313-actor-isolation-control.md">SE-0313: Improved control over actor isolation</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0297-concurrency-objc.md">SE-0297: Concurrency Interoperability with Objective-C</a> <a href="https://kemchenj.github.io/2021-03-07/">【译】SE-0297 Concurrency 与 Objective-C 的交互</a></li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md">SE-0314: AsyncStream and AsyncThrowingStream</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0316-global-actors.md">SE-0316: Global actors</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0310-effectful-readonly-properties.md">SE-0310: Effectful read-only properties</a> </li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0311-task-locals.md">SE-0311: Task Local Values</a> </li><li><a href="https://forums.swift.org/t/support-custom-executors-in-swift-concurrency/44425">Custom Executors</a></li></ul><h4 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h4><p>如果打算尝试 Swift Concurrency 的话，按照先后顺序，可以先看官方手册介绍文章<a href="https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html">Concurrency</a>。再看<a href="https://developer.apple.com/videos/play/wwdc2021/10132/">Meet async&#x2F;await in Swift</a>这个Session，了解背后原理看<a href="https://developer.apple.com/videos/play/wwdc2021/10134">Explore structured concurrency in Swift</a>。动手照着试示例代码，看Paul的<a href="https://www.hackingwithswift.com/quick-start/concurrency">Swift Concurrency by Example</a>这个系列。接着看<a href="https://developer.apple.com/videos/play/wwdc2021/10133">Protect mutable state with Swift actors</a>来了解 actors 怎么防止数据竞争。通过<a href="https://developer.apple.com/videos/play/wwdc2021/10019">Discover concurrency in SwiftUI</a>看 concurrency 如何在 SwiftUI 中使用，<a href="https://developer.apple.com/videos/play/wwdc2021/10095">Use async&#x2F;await with URLSession</a>来看怎么在 URLSession 中使用 async&#x2F;await。最后听听负责 Swift Concurrency 的 Doug Gregor 参加的一个<a href="https://www.swiftbysundell.com/podcast/99/">播客的访谈</a>，了解下 Swift Concurrency 背后的故事。</p><h4 id="Swift-Concurrency-和-Combine"><a href="#Swift-Concurrency-和-Combine" class="headerlink" title="Swift Concurrency 和 Combine"></a>Swift Concurrency 和 Combine</h4><p>由于 Swift Concurrency 的推出和大量的 Session 发布，特别是<a href="https://developer.apple.com/documentation/swift/asyncsequence/">AsyncSequence</a>的出现，以及正在路上的<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md">AsyncStream、AsyncThrowingStream</a>和<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">continuation</a>提案（在Xcode 13.0 beta 3 AsyncStream 正式<a href="https://developer.apple.com/documentation/swift/asyncstream?changes=latest_beta">release</a>），这些越来越多和 Combine 功能重叠的特性出现在 Swift Concurrency 蓝图里时，大家开始猜测是否 Combine 会被 Swift Concurrency 替代。关于未来是 Swift Concurrency 还是 Combine，我的感觉是，Combine 更侧重在响应式编程上，而响应式编程并不是所有开发人员都会接受的，而 Swift Concurrency 是所有人都愿意接受的开发方式，从 Swift Concurrency 推出后开发者使用的数量和社区反应火热程度来看都比 Combine 要大。在苹果对 Combine 有下一步动作之前，我还是更偏向 Swift Concurrency。</p><p>见闻写到这里，把独特性比作骨架，真实感比作血肉，故事性和新意比作皮肤，你会发现没有写出自己的经历的话，就像进击巨人里的那些小巨人，即使有了完整的皮肤，但骨头架子不大是不会有开头踢破大门的只有骨架和血肉的巨型大巨人那么强大且震撼有力。</p><p>那么接下来我就描写一些我在 WWDC21 期间独特的一些经历。</p><h3 id="WWDC-playground直播活动"><a href="#WWDC-playground直播活动" class="headerlink" title="WWDC.playground直播活动"></a>WWDC.playground直播活动</h3><p>想想 WWDC21 过程中我还是有些经历，比如参加了苹果官方推荐的外围活动<a href="https://swift.gg/wwdc/">WWDC.playgournd by SwiftGG</a>。<br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/3.png" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/3.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/4.png" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/4.png"></p><p>连续看了5天活动直播，还参加了一天的 Live Coding 介绍 SwiftUI 的新特性。直播 Live Coding 准备的时间很少，而且以前我还没有现场当着几千人面写代码的经历，直播前一天晚上赶着通宵达旦看完了相关 Session，写了些代码样例测试，当天白天还开了一个很长的会，回家前和同事讨论一个技术问题时，我发现我嗓子还哑了。到家坐在桌前脚还抽筋了，你可想象到我当时内心有多崩溃。</p><p>在直播前，我还专门的给思琦先演练了一遍，其中在介绍 AsyncImage 处理失败、空白、成功还有默认情况时，编译器报错提示无法找到原因，还提示让我提交 bug 的错误信息。直播开始前一直没有找到原因，重新敲了一遍才解决，所以心里没底，直播开始时还一直担心这个问题会重现。直播时在写到这段时果然编译器错误又出现了，当时我脑袋一片空白，心中大呼救我。好在没多一会我突然发现先前一段演示的 placeholder 接口没有删掉，原因真的就是这个，删掉后就正常了，别提有多开心了。后面就轻松了很多。由于只有一天时间准备，很多内容准备了，当时一边敲代码一边说也漏说了很多，比如 AsyncImage 使用的是 URLSession，用的是 URLCache，还不能自定义缓存。Refreshable 只能用在 List 里。SwiftUI 和数组绑定的代码是可以兼容前一个版本的。</p><p>另外还有个 WWDC 期间很火的老系统UI挑战赛让我印象深刻，其中有个18岁小伙用 SwiftUI 开发了经典 iPhone4可用版本最火爆，Github 地址<a href="https://github.com/zzanehip/The-OldOS-Project">在这里</a>。</p><p>SwitUI 新特性太多了，直播没提到的还有 task modifier、separator、macOS 上的 table、Canvas、preview in landscape、@FocusState、more button 等等。当时直播有回放，可以在<a href="https://www.bilibili.com/video/BV1H44y167b7">这里看</a>。更完整详细介绍建议看前面提到 SwiftUI 相关 Session。</p><p>WWDC.playgournd 最后一天直播有场 WWDC21 学生挑战赛获奖者张紫怡的分享，她分享了怎样准备挑战赛的过程，通过详细的过程介绍，心得体会，还有思考，让大家了解到了她的热情和才华，而且分享的形式和效果非常有新意。最后一场的回放<a href="https://www.bilibili.com/video/BV1Fq4y1L7od">看这里</a>。看完这场后，我打算在19号 SwiftGG 和快手中学合办的 WWDC<T> 沙龙活动中使用一种不同的方式进行分享。原先打算的是使用先前写好的一个示例展示使用 SwiftUI 开发复杂应用如何快捷，同时介绍背后的技术。几天想来想去，反复推敲推翻，一直没有新思路。最后到了前一天，我有了个主意，可以使用 SwiftUI 来编写一个幻灯片程序来分享 SwiftUI 的内容啊，同时还能够分享这个幻灯片开发过程心得，这样才有独特性和真实感嘛。于是把准备了一年的内容都删了，就像当时启动那篇删得只剩一万字的文章一样，那篇文章发布前共删掉了四万个字。</p><h3 id="WWDC沙龙活动"><a href="#WWDC沙龙活动" class="headerlink" title="WWDC沙龙活动"></a>WWDC<T>沙龙活动</h3><p>可想法总是很容易，实践起来却又是另一种情况。我对自制幻灯片的初步设想是第一能够前后翻页展示内容，第二能够支持和 Keynote 不一样的动画效果和页面美化，第三能够直接在幻灯片上进行一些 SwiftUI 功能的交互演示。</p><p>接下来就要开始实际去做了，我先拿出上周用铅笔在 A4 纸画的人草图加工来丰富展示，发现加工的时间来不及了，虽然现在加工速度比以前快了，但是时间太紧，还要写幻灯片程序呢。SwiftUI 开发确实快，每个页面我都写成一个 View，标题、大纲和示意图的组合我做成了通用 View，通过传入不同标题、大纲数组和图片数组来展示不同页面的内容，定义一个 ObservableObject 的类 GlobalStateInfo 作为 View Model 来存储需要的状态数据，比如当前在哪页，当前文字颜色，当前页背景颜色等，每个 View 里使用 @EnvironmentObject 就可以去获取和设置 GlobalStateInfo 了。</p><p>关于为了传递数据，是直接调用 EnvironmentObject，还是通过子视图传递 ObservedObject，两种方式哪个更好，在 WWDC21 的 Digital Lounges 里，苹果工程师的回答是两者用途不同。当大部分 View 都需要用到一些通用数据时，推荐使用 EnvironmentObject，因为没有实际使用 ObservableObject 的 View 不会被与之相关的代码搞乱。如果模型不是基于 View 层次结构的对象图，使用 ObservedObject。另外还有个 Digital Lounges 的问题，是问怎么从旧的 AppDelegate&#x2F;SceneDelegate 生命周期转换到新的 SwiftUI 2 生命周期。苹果工程师说可以使用 UIApplicationDelegateAdaptor 属性包装器，SwiftUI 将实例化你的 UIApplicationDelegate 的一个实例，并以正常方式调用它。更详细的解答和其他的话题可以参看这篇<a href="https://roblack.github.io/WWDC21Lounges/">SwiftUI Lounge QAs</a>，内容都是 roblack 从 Digital Lounges 里摘出来的，WWDC21 那几天我也在 Digital Lounges（报名早）看大家和苹果工程师的互动，后来看别人说 Digital Lounges 的 SwiftUI 那场爆满，已经超负荷运转了，感觉苹果最近变得更开放了，很多苹果工程师都开通了 Twitter 账号在 WWDC 期间积极和大家互动。</p><p>为了使页面不单调，我打算每页大纲的颜色做些区分，发现11页每个都配一遍看效果时间太紧，于是我选择了一些背景色通过随机读取，每次看到的颜色都是不同的，由于都是一个一个手动选出来的，所以不同组合效果也不会太差。</p><p>现在前后翻页展示内容这个想法是完成了，这也是 SwiftUI 开发的优势，能够快速构建页面架子和简单的数据页面同步设置。但是第二个想法，完成起来就非常费时费力且不那么顺利了。</p><p>首先说下字体，系统默认字体很正式，以往我都是直接用 iPad 手写，但是这次时间紧没法一个字一个字的写了，所以我打算选择其它字体，View 的 .font 修改器可以选择其它字体，方法是 .font(Font.custom(“font-name”, size: 110))。如果直接在Finder里查看字体没法得到可用的字体名，需要使用 NSFontManager.shared.availableMembers 来获取可用字体名。</p><p>接下来是标题，以往做幻灯，经常讲到具体内容时，特别是细节时，容易让看的人忘记当前页主题是啥。如果标题太大，可展示内容就少了，及时这样，观看的人也容易忽视主题。因此，我打算把标题做成一个循环的动画，这样就可以在我展开说内容的时候，看的人即使走神了还能够注意到当前页主题。标题的动画主要是控制好动画的时间，不能太快，不然会过于吸引注意。</p><p>以前 keynote 的转场动画我基本都试过，每次来回都是那些，很难和其他人做出差异来。只能靠图和配色作区分。这次我利用每页的内容大纲进入效果来作为转场动画。我先将大纲列表放到 VStack 里，ForEach 里获取到下标，通过下标获取列表数组里的 Text View。之所有要得到下标而不是直接获取列表数组里的 Text View，其原因是还会将这个下标用在转场动画效果上，我希望大纲列表的内容是一个接一个进来的，需要这个下标值来做时间间隔。Animation 的效果使用的是 interpolatingSpring，我将 damping 参数设置为0.3，这样弹性效果更佳。列表内容进入的是 GeometryEffect 协议，用来替代 AnimatableModifier，通过 AnimatablePair 来设置移动位置新旧值。直接一个方块滑入略显单调，使用 CGAffineTransform 里的 c 参数可以设置将矩形进行变形，会有一种被拉进来的感觉。变形过程配合滑入动画再加上 interpolatingSpring 设置的弹性效果，会让转场更有动感。</p><p>并行执行的动画越丰富，转场感觉就会更好，我想着每页都做个不同的效果，使用 Shape 绘制一些图形做背景动画，这样会有新鲜感。当第一页和第二页弄完后已经天亮了，经过一个上午，下午就要分享了。我还没有困意，因为后面还有那么多页面没有做完区分转场的动画和配色，更别说 SwiftUI 功能的交互演示了。而且具体分享的内容我还没有整体串一遍逻辑。一天一夜完成这个项目时间还是太紧，当时想着要再能多一天时间就好了。2点开始分享，1点我在旁边一个小会议室把整个内容自己在心里试着说了一遍。分享内容包括了自制低版本兼容 AsyncImage 演示、SwiftUI 那些版本兼容问题、SwiftUI 背后关键技术简介、SwiftUI 生命周期、布局、Modifier、不透明返回类型、属性包装、Result Builder、Geometry、Preview用的技术。</p><p>其中 SwiftUI 内部运作的机制是每个 View 都有自己的 Identity，SwiftUI 会将给 State 和 StateObject 分配内存空间的 Storage 和 View 的 Identity 绑定起来，共存亡。当相同 Identity 的状态数据发生变化了或者和 View 依赖关系改变了，就会重新建立 View 和 RenderNode 的依赖关系，他们之间的关系是图结构，图结构可以降低依赖关系检查复杂度。最后渲染出来。总的来说 SwiftUI 运行原理有三个点最重要，Identifier、生命周期和依赖。视图的生命周期是 Identifier 来决定的，state 生命周期和视图的生命周期是相同的。在生命周期中，state 有变化的时候会做diff，diff和渲染效率提升是使用图型依赖结构，只渲染状态依赖的视图，如果按照 UIKit 那样的树形结构做diff，效率会特别差。</p><p>现在很多常用开源库都已经对SwiftUI做了适配，苹果公司自己的App，比如天气、相册、快捷指令、地图和相册都有用到SwiftUI。以下是SwiftUI用到的语法特性：</p><ul><li>ResultBuilder</li><li>ViewBuilder</li><li>Trailing Closure</li><li>Opaque Type</li><li>Inline</li><li>PropertyWrapper</li><li>KeyPath</li><li>DynamicMemberLookup</li></ul><p>如果你使用这些特性也能够再造一个兼容低版本的类似 SwiftUI 的框架。SwiftUI 最显现的 DSL 技术使用的就是 ResultBuilder 语法特性，Result Builder的提案<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md">SE-0289</a> 里有详细的描述，通过 Result Builder 下面的方法可以自定义出一个简洁的 DSL 出来，提高特定业务开发效率。</p><ul><li>buildBlock：构建基本语句的block组合结果。</li><li>buildExpression：可选，给表达式提供上下文类型信息。</li><li>buildOptional：对没有else的if语句支持。</li><li>buildEither：构建选择语句不同结果。通过条件结果折叠成一个结果，实现对if-else和switch语句的支持。</li><li>buildArray：将所有迭代结果合并成一个结果的方式实现对for…in语句的支持。</li><li>buildFinalResult：可选，可以调用顶层函数体的结果进行处理，产生最终的返回结果。</li><li>buildLimitedAvailability：会在if #available的block部分结果上调用，使result builder可以擦除类型信息。</li></ul><p>这次的 WWDC 还专门有个 Session 讲解了怎么用 Result Builder 来做 DSL，这个 Session 是 <a href="https://developer.apple.com/videos/play/wwdc2021/10253/">Write a DSL in Swift using result builders</a>。</p><p>Swift 视图返回的类型是不固定的，因此使用了 Swift 的不透明类型语法特性来进行支持，支持其返回带有大量泛型参数的庞大类型，这个类型中还包括了 Result Builder 中的 if 条件类型值，支持多分支类型。Opaque Types的提案在这里<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md">SE-0244</a>。</p><p>跟着视图后面的点语法是 modifier，每个 modifier 都会在视图树中新建一个层，因此 modifier 的写的先后顺序不同，效果是不一样的。</p><p>对于数据的监听和响应使用的是 swift 里的属性包装语法特性，属性包装的提案是<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0258-property-wrappers.md">SE-0258</a>。包装后数据的使用就方便了很多，对于不同属性包装类别的选择可以按照数据类型和应用场景来，对于值类型，如果是只读的数据可以什么都不加，如果数据是可读写的，使用@State，如果数据是需要在其他视图进行读写并自己也同步响应的，使用@Binding进行声明。对于对象类型的数据，指向对象的引用能发生变化要用@ObservedObject来声明，引用不可改变，那么就用@StateObject，使用环境传递对象用@EnvironmentObject。</p><p>完整的 WWDC<T>沙龙活动回放可以扫下图中的二维码：<br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/5.jpeg" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/5.jpeg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/6.JPG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/6.JPG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/7.jpeg" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/7.jpeg"></p><p>下面是当时现场演示的部分幻灯片，动画的效果可以看上面的视频回放：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/8.PNG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/8.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/9.PNG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/9.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/10.PNG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/10.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/11.PNG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/11.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/12.PNG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/12.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/13.PNG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/13.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/14.PNG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/14.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/15.PNG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/15.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/16.PNG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/16.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/17.PNG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/17.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-little-idea-about-writing-technical-article/18.PNG" class="lozad post-image"src="/uploads/my-little-idea-about-writing-technical-article/18.PNG"></p><p>至此，这篇WWDC21见闻就写完了，详细描写自己WWDC21期间的一些独特经历和其中涉及相关技术，这样会让文章的独特性和真实感有很大的提升。</p><h2 id="对独特性和新意的思考"><a href="#对独特性和新意的思考" class="headerlink" title="对独特性和新意的思考"></a>对独特性和新意的思考</h2><p>通篇看下来，你是不是感觉到故事性和真实性其实是非常容易做到的。可以理解为只要努力些，时间再长些，这两点就能够完成，且能线性得到提高。只埋头做事情比较容易和舒适，但一直这么干，熵就会越来越多，不可逆的无用能量无法排除。而独特性意味着你会去体验适应新的环境，去获取实践新的认知，去结识新的朋友碰撞新的思路，使得自己体验到不同以往的经验。新意成功几率很低，非线性的，类似于基因突变产生的进化，这和努力无关。新意和独特性一样属于逆熵过程，不能忽视，大跨步的进步需要对传统的颠覆。新意会带来新的独特经历形成一个新的循环，不去尝试就不会有新的机会。</p><p>如果把本文当成一篇笔记，其间又融入了写作心得；如果把本文当做一篇写作心得，其间又穿插了大量笔记内容。你说这是不是也是一种新意呢。</p><p>对于新意，我印象最深的还是权力的游戏的血色婚礼，神来之笔，当Joffrey正最可气，少狼主正得势时，剧情完全打破传统，效果非常震撼。凡人皆有一死，凡事皆有可能，于是乎对后面剧情的推进更加期待了。而这个新意是建立在整个剧对真实感上的毫不含糊，包括了扎实的世界观构建，服饰道具高度的还原，完全把观众带入了故事中。另外作者对古历史的专研和记者经历的结合产生出的鲜明的人物刻画和独特的剧情设计也是本剧的骨架支撑，独特性的体现。</p><h2 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h2><p>今天我说的这些心得可以作为下笔“记录和分享”技术的一个契机，但是对于自己技术的成长，写文章并不是最终的目的，写作是你对自己思想的研究和开发。文章的上限是你的技术能力，文章只是让人了解你技术一种手段。因此更重要的是你做的技术是否有突破有演进，获得应用，并在产品中取得了好的效果。还有那些孤独着研究技术的时光，经历着一直努力着奋斗着却一直不被看见，得不到认同，也没有结果的岁月，还能够一直被自己的热情感动而不放弃去取得一点点进步带来的满足感。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;非常感谢大家抽出生命中宝贵的一段时间来听我接下来的一大段关于写文章那些事的唠叨。写文章的好处看看&lt;a href=&quot;https://movie
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>深入剖析Auto Layout的幻灯片</title>
    <link href="http://ming1016.github.io/2021/07/13/deeply-analyse-autolayout-slides/"/>
    <id>http://ming1016.github.io/2021/07/13/deeply-analyse-autolayout-slides/</id>
    <published>2021-07-13T06:01:22.000Z</published>
    <updated>2022-06-14T06:36:10.832Z</updated>
    
    <content type="html"><![CDATA[<p>在2015年SegmentFault D-Day活动上分享用的幻灯片，发现以前没有发到博客中，现在补上。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/1.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/1.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/2.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/2.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/3.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/3.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/4.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/4.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/5.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/5.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/6.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/6.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/7.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/7.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/8.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/8.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/9.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/9.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/10.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/10.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/11.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/11.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/12.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/12.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/deeply-analyse-autolayout-slides/13.png" class="lozad post-image"src="/uploads/deeply-analyse-autolayout-slides/13.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在2015年SegmentFault D-Day活动上分享用的幻灯片，发现以前没有发到博客中，现在补上。&lt;/p&gt;
&lt;p&gt;&lt;img  srcset=&quot;data:image/svg+xml,%3Csvg%20xmlns=&#39;http://www.w3.org/2000/svg&#39;%
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Autolayout" scheme="http://ming1016.github.io/tags/Autolayout/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2021 Day1 笔记</title>
    <link href="http://ming1016.github.io/2021/06/08/wwdc2021-day1-note/"/>
    <id>http://ming1016.github.io/2021/06/08/wwdc2021-day1-note/</id>
    <published>2021-06-08T08:54:01.000Z</published>
    <updated>2021-06-08T09:59:16.183Z</updated>
    
    <content type="html"><![CDATA[<p>WWDC开始了，一周时间会有大量Session可学习，这个页面<a href="https://github.com/twostraws/wwdc">https://github.com/twostraws/wwdc</a> 收集了来自社区的各种WWDC活动、新闻和教程的链接，随着WWDC的进行，页面内容会不断更新，去年2020年的汇总页在这里<a href="https://github.com/twostraws/wwdc/blob/3d3b093218af06465b6b268b23e13e2ad6e2d9f8/README.md">https://github.com/twostraws/wwdc/blob/3d3b093218af06465b6b268b23e13e2ad6e2d9f8/README.md</a> 。Apple官方收集的开发者组织活动页面是<a href="https://developer.apple.com/wwdc21/beyond-wwdc/">https://developer.apple.com/wwdc21/beyond-wwdc/</a> ，其中有SwiftGG翻译组组织的活动，介绍页<a href="https://swift.gg/wwdc/">https://swift.gg/wwdc/</a> ，会在本周每晚8点线上直播交流WWDC21中关注度高的话题以及live coding展示热点技术，嘉宾有喵神、故胤道长、mmoaay、61、钟颖、周楷雯等。</p><p><a href="https://www.wwdcnotes.com/">https://www.wwdcnotes.com/</a> 这是一些WWDC的笔记（比看视频快）汇总，可以订阅他的RSS，还在更新中</p><p>下载WWDC2021高清Session视频脚本：<a href="https://github.com/dmthomas/AppleVideoDownloadScripts">https://github.com/dmthomas/AppleVideoDownloadScripts</a></p><h2 id="一些关注点收集"><a href="#一些关注点收集" class="headerlink" title="一些关注点收集"></a>一些关注点收集</h2><ul><li><p>SharePlay（使用Group Activities框架）同步共享设备上App的操作和播放 </p></li><li><p>FaceTime on Web </p></li><li><p>Live Text（看讲座时可以直接拍照拷贝代码了，iPhoneX below not support） </p></li><li><p>iPadOS 多任务感觉更难用了 </p></li><li><p>Notes: Tag browser </p></li><li><p>Quick Note（方便） </p></li><li><p>Swift Playgrounds able to build apps（SwiftUI only）（Let’s try to build and upload App on iPad） </p></li><li><p>iCloud+ hides ip and location &#x3D;&#x3D;? VPN（VPN apps:”Shit”） </p></li><li><p>Craig drove Apple Car? </p></li><li><p>Universal Control （just support M1） </p></li><li><p>ShortCuts for Mac </p></li><li><p>Object Capture（Dream comes true） </p></li><li><p>Actor（Apple SDK会大量使用，<a href="/MainActor">@MainActor </a> 属性包装 in UIKit，BUT，Swift Concurrency requires a deployment target of macOS 12, iOS 15, tvOS 15, and watchOS 8 or newer. :( Damn that’s sad）  </p></li><li><p>A&#x2F;B testing in App Store </p></li><li><p>Xcode Cloud（not in 99$，Bitrise die?）多设备云测试（截图）。自建的构建流程可以从中借鉴。 </p></li><li><p>TestFlight for the Mac </p></li><li><p>Xcode 13 has Vim mode </p></li><li><p>Xcode 13 一些重要优化和新功能： </p><ul><li>Smarter Swift Code Completion</li><li>Faster Swift Builds</li><li>Swift Documentation Compiler</li></ul></li><li><p>To build documentation for your Swift framework or package, choose Product &gt; Build Documentation </p></li><li><p>SwiftUI gains more control over lower-level drawing primitives with the new Canvas API. </p></li><li><p>SwiftUI AsyncImage <a href="https://developer.apple.com/documentation/swiftui/asyncimage">https://developer.apple.com/documentation/swiftui/asyncimage</a> </p></li><li><p>List has gained a lot of new capabilities this year: </p><ul><li>Swipe Actions <a href="https://developer.apple.com/documentation/swiftui/texteditor/swipeactions(edge:allowsfullswipe:content:)?changes=latest_minor">https://developer.apple.com/documentation/swiftui/texteditor/swipeactions(edge:allowsfullswipe:content:)?changes=latest_minor</a></li><li>Pull-to-refresh (with .refreshable(action:)) （just work with List, not scroll view, bug?） <a href="https://developer.apple.com/documentation/swiftui/texteditor/refreshable(action:)?changes=latest_minor">https://developer.apple.com/documentation/swiftui/texteditor/refreshable(action:)?changes=latest_minor</a></li><li>Separator customization</li></ul></li><li><p>SwiftUI has a new, pretty cool, <strong>debugging</strong> utility to help you understand what is causing a view to be reevaluated. Call <code>Self._printChanges()</code> inside the body of a view to print out the changes that have triggered the view update. </p></li><li><p>SwiftUI：Map、Photo、ShortCuts、Weather、Apple Pay、Find Mine(WatchOS) </p></li><li><p>SF Symbols update <a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/">https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/</a> </p></li><li><p>AttributedString：support Markdown syntax，init(markdown:options:baseURL:) （you can delete your hand-rolled markdown parser） <a href="https://developer.apple.com/documentation/foundation/attributedstring">https://developer.apple.com/documentation/foundation/attributedstring</a> </p></li><li><p>HTTP analyzer in Instruments, intriguing（Charles？） </p></li><li><p>Surge works fine on the iOS 15 beta 1. </p></li><li><p>StoreKit 2 APIs Provide Customer Support </p></li><li><p>New ⌘+Shift+G in Finder </p></li><li><p>macOS 12 Beta 上微信会崩 </p></li><li><p>iOS 15 Beta 非常流畅，九宫格键盘好用了 </p></li><li><p>UIButton support multiple lines of text </p></li><li><p>Selective Shader Debugger </p></li><li><p>Screen Time API 家庭控制，做限制</p></li></ul><h2 id="一些SwiftUI相关Session"><a href="#一些SwiftUI相关Session" class="headerlink" title="一些SwiftUI相关Session"></a>一些SwiftUI相关Session</h2><ul><li>Write a DSL in Swift using result builders <a href="https://developer.apple.com/videos/play/wwdc2021/10253/">https://developer.apple.com/videos/play/wwdc2021/10253/</a></li><li>Demystify SwiftUI <a href="https://developer.apple.com/videos/play/wwdc2021/10022/">https://developer.apple.com/videos/play/wwdc2021/10022/</a></li><li>Discover concurrency in SwiftUI <a href="https://developer.apple.com/videos/play/wwdc2021/10019/">https://developer.apple.com/videos/play/wwdc2021/10019/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;WWDC开始了，一周时间会有大量Session可学习，这个页面&lt;a href=&quot;https://github.com/twostraws/wwdc&quot;&gt;https://github.com/twostraws/wwdc&lt;/a&gt; 收集了来自社区的各种WWDC活动、新闻和教程的链
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
  </entry>
  
</feed>
