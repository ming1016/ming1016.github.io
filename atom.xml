<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>戴铭的博客 - 星光社</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://starming.com/"/>
  <updated>2024-10-28T15:17:33.421Z</updated>
  <id>https://starming.com/</id>
  
  <author>
    <name>戴铭</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我在韩国首尔 KWDC24 做的技术分享</title>
    <link href="https://starming.com/2024/10/28/kwdc24-in-seoul/"/>
    <id>https://starming.com/2024/10/28/kwdc24-in-seoul/</id>
    <published>2024-10-28T02:58:45.000Z</published>
    <updated>2024-10-28T15:17:33.421Z</updated>
    
    <content type="html"><![CDATA[<p>韩国朋友真是太热情了。下面是这次分享的内容，文章后面我还会记录些这次首尔的见闻。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/01.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/01.png"></p><p>The topic I’ll be discussing is the evolution of iOS performance optimization. I hope you can take away some insights from my talk.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/02.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/02.png"></p><p>Let’s first talk about a few situations where an app becomes unusable, which can be simplified into app crashes or freezes. There are three main reasons, the first being OOM, meaning memory exhaustion.</p><p>When an app consumes too much memory, the system can no longer allocate more, leading to OOM. This issue doesn’t produce crash logs, making it tricky to trace.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/03.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/03.png"></p><p>The second reason is a null pointer, where the pointer points to an invalid memory address. The third common issue is accessing a nil element in an array, which is another frequent cause of crashes.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/04.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/04.png"></p><p>These are the three most common causes of crashes, with memory issues being the hardest to resolve. Next, I’ll focus on how to address memory issues.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/05.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/05.png"></p><p>In addition to crashes, performance issues can also affect the user experience, such as lagging or overheating.</p><ul><li>Lag can be identified through Runloop monitoring to locate the part of the stack where execution takes too long;</li><li>Overheating can be addressed by monitoring CPU usage in threads to find the threads or methods causing CPU overload.</li></ul><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/06.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/06.png"></p><p>Slow app startup and large package sizes also impact user experience. As projects grow in complexity, solving these problems becomes increasingly challenging.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/07.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/07.png"></p><p>The above four issues lead to a poor user experience.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/08.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/08.png"></p><p>Upon analysis, these three problems are the hardest to solve: memory issues, slow startup, and large package sizes. I will focus on sharing some of the latest solutions to these problems next.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/09.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/09.png"></p><p>Memory issues fundamentally stem from improper memory usage. Memory is a finite resource, and if we misuse it, problems will inevitably arise.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/10.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/10.png"></p><p>The most common memory issues are threefold: the first is memory leaks, where memory is not released after being used, leading to increasing memory consumption.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/11.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/11.png"></p><p>The second issue is high memory peaks. When memory usage suddenly spikes at a certain point, the system may trigger the Jetsam mechanism, killing the app directly.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/12.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/12.png"></p><p>The third issue is memory thrashing, which refers to frequent garbage collection, causing performance corruption.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/13.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/13.png"></p><p>So, memory leaks, high memory peaks, and memory thrashing are the most common memory issues.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/14.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/14.png"></p><p>To solve memory issues, the first step is to understand memory usage. We can retrieve this information using system APIs, such as mach_task_basic_info, the physicalMemory property of NSProcessInfo, and the vm_statistics_data_t structure.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/15.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/15.png"></p><p>In addition to APIs, Xcode’s Memory Graph feature is very intuitive, allowing you to view the app’s memory usage in real-time, making it a very handy tool.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/16.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/16.png"></p><p>There are also some open-source libraries, such as KSCrash, which provide freeMemory and usableMemory functions to retrieve information about the system’s free and available memory.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/17.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/17.png"></p><p>Using these methods, we can clearly monitor the app’s memory usage.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/18.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/18.png"></p><p>What may seem like a small memory leak can accumulate over time, eventually causing system performance worse or even triggering an OOM crash.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/19.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/19.png"></p><p>The most common cause of memory leaks is retain cycles. Here are two open-source tools that can help us detect retain cycles.</p><p>The first is MLeaksFinder. It hooks the dealloc method to check whether an object still exists after being released, thereby determining if there is a memory leak.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/20.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/20.png"></p><p>The second tool is FBRetainCycleDetector. It traverses strong references between objects and builds a reference graph. If it detects a cycle, it indicates a retain cycle issue.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/21.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/21.png"></p><p>Retain cycles are relatively easy to detect. In addition to these open-source tools, Xcode’s tools can also help us detect memory leaks in a visual way.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/22.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/22.png"></p><p>In contrast, memory peaks and memory thrashing are like hide “little monsters” and are harder to detect. So, how do we track down these problems like detectives?</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/23.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/23.png"></p><p>Here’s one method: by repeatedly sampling memory usage, we can calculate the differences and identify the objects with the fastest memory growth.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/24.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/24.png"></p><p>Rank the top 100 objects with the most significant growth. Specifically, this can be done by hooking the alloc and dealloc methods to track the allocation and release of objects.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/25.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/25.png"></p><p>Each time memory is allocated, we can maintain a counter—incrementing the counter on alloc and decrementing it on dealloc—this way, we can keep track of the number of currently active objects.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/26.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/26.png"></p><p>With this method, we can pinpoint the objects with the fastest memory growth, making it easier for further analysis.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/27.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/27.png"></p><p>Next, let’s introduce hook malloc, which allows us to capture every memory management operation. It’s like planting a “secret agent” to monitor each memory allocation action.</p><p>Below are some common methods to hook malloc, including macro definitions, symbol overriding, and function attributes. The most flexible method is using fishhook, which allows dynamic toggling.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/28.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/28.png"></p><p>fishhook is a technique that modifies Mach-O file symbols to achieve function replacement. We can use it to replace the malloc function.</p><p>In the code above, the purpose of rebind_symbol is to replace the malloc function with our custom-defined custom_malloc function. The second parameter, original_malloc, indicates that after replacing the function, the original function will continue to be executed.</p><p>This way, with each memory allocation, through the custom_malloc function, we can capture the size and address of every memory allocation.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/29.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/29.png"></p><p>Additionally, the system’s built-in malloc_logger tool can also comprehensively record the memory allocation process, offering a more straightforward solution.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/30.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/30.png"></p><p>malloc_logger is essentially a callback function. When memory is allocated or released, it will callback and log relevant information.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/31.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/31.png"></p><p>By tracking malloc and free operations, we can discover memory blocks that haven’t been correctly released.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/32.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/32.png"></p><p>After solving memory issues, remember to retest to ensure the problem is completely resolved.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/33.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/33.png"></p><p>Next, let’s look at how to customize this malloc_logger function to capture memory allocation and release information.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/34.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/34.png"></p><p>First, define a callback function with the same signature as malloc_logger, for example, custom_malloc_stack_logger.</p><p>The type indicates the type of memory operation, such as malloc, free, or realloc; arg1 represents the memory size, arg2 is the memory address, and result indicates the reallocated memory address.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/35.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/35.png"></p><p>Based on different type values, we can obtain this parameter information and record memory allocation details, especially for large memory allocations. We can also capture stack information to facilitate issue analysis.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/36.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/36.png"></p><p>Of course, a memory snapshot is also a comprehensive solution that captures complete memory information.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/37.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/37.png"></p><p>First, by traversing the process’s virtual memory space, we can identify all memory regions and log information like the start address and size of each region.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/38.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/38.png"></p><p>Using the malloc_get_all_zones function, we can retrieve all heap memory regions and analyze each region’s memory nodes one by one, ultimately identifying memory reference relationships.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/39.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/39.png"></p><p>With this more comprehensive information, we can resolve memory leaks, optimize memory usage, and prevent OOM crashes in one go.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/40.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/40.png"></p><p>Here is a code example for finding all memory regions. As you can see, the vm_region_recurse_64 function’s info parameter contains information like the memory region’s start address and size.</p><p>Using this information, we can construct a memory layout map to analyze the app’s memory state when issues occur, such as using the protection property to check if the app accessed unreadable or unwritable memory regions.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/41.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/41.png"></p><p>Compared to other methods, the benefit of malloc stack logging is that it automatically records data without needing to write code manually to capture memory information. You just need to enable it when necessary and disable it when not.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/42.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/42.png"></p><p>MallocStackLogging records every memory allocation, release, and reference count change. These logs can be analyzed with the system tool leaks to identify unreleased memory or with the malloc_history tool to translate stack IDs in the logs into readable stack trace information.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/43.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/43.png"></p><p>Here is an example code for using MallocStackLogging. We can use the enableStackLogging function to enable logging, disableStackLogging to disable logging, and getStackLoggingRecords to retrieve current memory operation details.</p><p>In the enableStackLogging function, turn_on_stack_logging is called to enable logging. disableStackLogging calls turn_off_stack_logging to disable logging. getStackLoggingRecords calls mach_stack_logging_enumerate_records and mach_stack_logging_frames_for_uniqued_stack to record the details of current memory operations.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/44.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/44.png"></p><p>The tools we used earlier, leak and malloc_history for analyzing MallocStackLogging logs, both come from the malloc library. The malloc library provides many tools for debugging memory.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/45.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/45.png"></p><p>In addition to MallocStackLogging, the system offers many tools for debugging memory, such as Guard Malloc and some environment variables and command-line tools.</p><p>The MallocScribble environment variable can detect memory corruption errors.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/46.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/46.png"></p><p>We’ve talked a lot about how to solve problems when they occur, but is there a way to optimize memory before problems even arise?</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/47.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/47.png"></p><p>In fact, iOS itself evolves to optimize memory management. Especially in iOS, which is designed for mobile devices without swap partitions like desktop systems, it uses the Jetsam mechanism to help developers manage memory proactively when resources are tight.</p><p>Additionally, the system provides tools like thread-local storage and mmap(), which are methods that can improve memory efficiency.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/48.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/48.png"></p><p>Here are a few tips to help reduce unnecessary memory overhead:</p><ul><li>Take advantage of the copy-on-write principle and avoid frequently modifying large strings.</li><li>Use value types as much as possible to avoid unnecessary object creation.</li><li>Make good use of caching and lazy loading.</li><li>Choose appropriate image formats and control image resolution and file size.</li></ul><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/49.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/49.png"></p><p>These are some of the optimizations the system does for you, but there are plenty of areas where we can optimize as well.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/50.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/50.png"></p><p>A slow app launch can be a frustrating experience. We all know that this is a big issue.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/51.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/51.png"></p><p>App launch actually happens in several stages. The first stage is called Pre-main, which refers to things the system does before the main() function executes, like loading app code, the dynamic linker working, Address Space Layout Randomization (ASLR), and some initialization operations.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/52.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/52.png"></p><p>After these preparations are done, the app truly starts running and enters the UI rendering stage, where tasks in didFinishLaunchingWithOptions begin executing. These tasks include both the main thread’s work and operations on other threads.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/53.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/53.png"></p><p>To summarize, app launch is a multi-stage process. From Pre-main to UI rendering, tasks must be properly arranged, and neither the main thread nor background threads should waste resources.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/54.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/54.png"></p><p>Next, let’s talk about factors affecting launch performance. In the Pre-main stage, the number of dynamic libraries, the number of ObjC classes, the number of C constructors, the number of C++ static objects, and ObjC’s +load methods all directly impact launch speed. Simply put, the fewer, the better.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/55.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/55.png"></p><p>After the main() function is executed, even more factors can affect the launch time, such as main() execution time, time spent in applicationWillFinishLaunching, view controller loading speed, business logic execution efficiency, the complexity of view hierarchy, number and speed of network requests, size of resource files, usage of locks, thread management, and time-consuming method calls—all of which can slow down the launch.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/56.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/56.png"></p><p>As you can see, many factors influence launch time, both before and after main(). However, this also means there are many opportunities for optimization.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/57.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/57.png"></p><p>For large apps, which are often developed by multiple teams, tasks executed at startup can change with each iteration. Therefore, we need an effective way to measure the time consumption of each task during startup to identify the “culprits” slowing down the launch, enabling targeted optimizations and checking the effectiveness of those optimizations.</p><p>Common measurement tools include Xcode Instruments’ Time Profiler, MetricKit’s os_signpost, hook initializers, hook objc_msgSend, and LLVM Pass.</p><p>Next, I’ll focus on hook objc_msgSend, which can record the execution time of each Objective-C method. For measuring the execution time of Swift functions, you can use LLVM Pass, which I’ll explain in detail when we discuss package size optimization.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/58.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/58.png"></p><p>By hooking objc_msgSend, we can record method call information, including method names, class names, and parameters. By inserting tracking code before and after method execution, we can calculate the execution time of each method.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/59.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/59.png"></p><p>The specific approach is to first allocate memory space for jumping, with the jump function being used to record the time. Then, save the register state: the x0 register can obtain the class name, the x1 register gets the method name, and the x2 to x7 registers can be used to get method parameters.</p><p>After completing the jump function call, restore the saved registers and use the br instruction to jump back to the original method and continue execution.</p><p>Although hook objc_msgSend uses assembly language, it’s not too complicated to write as long as you understand the roles of several registers and how the instructions work.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/60.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/60.png"></p><p>Next, I will introduce ten very useful startup optimization strategies:</p><ol><li>Reduce the use of +load methods.</li><li>Reduce static initialization.</li><li>Prefer static libraries over dynamic libraries to reduce the number of symbols.</li><li>Control the number of dynamic libraries.</li><li>Use the all_load compiler option.</li><li>Perform binary reordering.</li></ol><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/61.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/61.png"></p><p>After the main function, we can do a lot more optimization, such as:</p><ul><li>Optimizing business logic.</li><li>Using task scheduling frameworks to arrange tasks more efficiently.</li><li>Leveraging background mechanisms to handle non-essential tasks.</li><li>Refreshing regularly to fetch server data in a timely manner.</li></ul><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/62.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/62.png"></p><p>The final important topic is optimizing package size.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/63.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/63.png"></p><p>Optimizing package size has many benefits. For users, it improves download speed, saves device storage, and reduces resource consumption. For developers, it lowers development and maintenance costs while improving efficiency.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/64.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/64.png"></p><p>Through static analysis, we can identify some unused resources and code. Today, I will focus on how to discover unused code at runtime, starting with detecting unused classes.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/65.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/65.png"></p><p>In the meta-class, we can find the class_rw_t structure, which contains a flag that records the state of the class, including whether it has been initialized at runtime.</p><p>The code on the right shows how to access this flag and use it to determine whether a class has been initialized.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/66.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/66.png"></p><p>Next, let’s discuss how to determine which functions haven’t been executed at runtime.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/67.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/67.png"></p><p>This code shows how to customize an LLVM Pass to instrument each function and track whether they are called. The instrumentation code is written in the runOnFunction or runOnModule functions, where the former handles individual functions, and the latter handles the entire module.</p><p>Additionally, LLVM Pass can insert tracking code before and after function execution to record the execution time of each function.</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/68.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/68.png"></p><p>以上就是分享的内容。下面是一些见闻。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/01.jpeg" class="lozad post-image"src="/uploads/kwdc24-in-seoul/01.jpeg"></p><p>KWDC 这次是在一所大学举办的。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/022.png" class="lozad post-image"src="/uploads/kwdc24-in-seoul/022.png"></p><p>这是我、徐驰和 falanke 的合影，会场有个大头照机器，很多人都在这里合影。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/03.jpeg" class="lozad post-image"src="/uploads/kwdc24-in-seoul/03.jpeg"></p><p><a href="https://www.iosconf.sg/">iOSConfSG 2025</a> 组织团队负责人 Vina Melody 也来了，我分享结束后跟他们沟通了下明年我去新加坡 iOSConf 分享的内容。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/04.JPG" class="lozad post-image"src="/uploads/kwdc24-in-seoul/04.JPG"></p><p>第二天，KWDC团队组织我们在首尔 City walk，第一站是景福宫，我们玩起来 Cosplay。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/05.JPG" class="lozad post-image"src="/uploads/kwdc24-in-seoul/05.JPG"></p><p><a href="https://x.com/___freddi___">freddi</a> 是喵神的同事，在福岡。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/06.JPG" class="lozad post-image"src="/uploads/kwdc24-in-seoul/06.JPG"></p><p>River 是韩国的一名独立开发者，开发了很有品味的 APP Cherish。她不喜欢 KPOP，但她父母好像是从事表演的。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/07.JPG" class="lozad post-image"src="/uploads/kwdc24-in-seoul/07.JPG"></p><p>台湾最知名的 iOS Youtuber <a href="https://x.com/janechao_dev">Jane</a> 这次也来了。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/08.JPG" class="lozad post-image"src="/uploads/kwdc24-in-seoul/08.JPG"></p><p>中午我们吃了鸡肉火锅。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/09.JPG" class="lozad post-image"src="/uploads/kwdc24-in-seoul/09.JPG"></p><p>下午去了汉江野餐。晚上我们登上南山，看到了美丽的首尔夜景。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/10.JPG" class="lozad post-image"src="/uploads/kwdc24-in-seoul/10.JPG"></p><p>晚上，继续找地方喝酒。韩国晚上街上人依然很多。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/kwdc24-in-seoul/11.jpeg" class="lozad post-image"src="/uploads/kwdc24-in-seoul/11.jpeg"></p><p>和 <a href="https://x.com/giginet">giginet</a> 聊了点技术问题，他也是喵神的同事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;韩国朋友真是太热情了。下面是这次分享的内容，文章后面我还会记录些这次首尔的见闻。&lt;/p&gt;
&lt;p&gt;&lt;img  srcset=&quot;data:image/svg+xml,%3Csvg%20xmlns=&#39;http://www.w3.org/2000/svg&#39;%20viewBox=&#39;0
      
    
    </summary>
    
      <category term="Programming" scheme="https://starming.com/categories/Programming/"/>
    
    
      <category term="iOS" scheme="https://starming.com/tags/iOS/"/>
    
      <category term="Performance optimization" scheme="https://starming.com/tags/Performance-optimization/"/>
    
  </entry>
  
  <entry>
    <title>我是怎么做个人知识管理（PKM）的，从史前时代备忘录、Sublime，经历了Evernote，Markdown兴起，Bear的优雅，Notion革命，飞书语雀，Obsidian、Flomo，到最后使用卢曼卡片盒笔记法串起了流程</title>
    <link href="https://starming.com/2024/09/12/my-pkm/"/>
    <id>https://starming.com/2024/09/12/my-pkm/</id>
    <published>2024-09-12T11:43:08.000Z</published>
    <updated>2024-09-12T11:43:41.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间，我发布的几篇和动漫相关的公众号文章《<a href="https://starming.com/2024/08/10/dragonball-story/">鸟山明和他的龙珠</a>》、《<a href="https://starming.com/2024/07/20/saint-seiya-story/">圣斗士星矢的前世今生，车田正美的坚持，城户光政的阴谋</a>》得到很多阅读和关注。有些人感叹我涉猎广，其实是我平日爱收集各种奇奇怪怪的文章和资料。今天我就跟大家说说我知识管理的心路历程。</p><p>本文会从我所遇到知识管理的困境以及如何构建自己的知识管理流程说起，然后详细聊些知识管理各流程中的笔记工具和一些笔记记录的方法理论，比如卡片盒笔记法、P.A.R.A.、费曼学习法和 CODE 等。</p><p>在信息爆炸的时代，个人信息管理已经成为不可忽视的挑战。为了高效收集、整理、消化海量信息，也出现了很多工具。从史前的系统自带备忘录、Sublime、Word、Vim，Emacs orgmode，到 Evernote、Bear、Devonthink、Drafts、Ulysses，还有很多线上笔记管理平台比如语雀、飞书，最后时依赖各种高效笔记记录方法的 APP，Roam Research、Obsidian、Flomo、Craft。还有很多很多，这些工具提供了不同的管理方式和理念。</p><p>我最开始使用知识管理是 Evernote，开始尝试使用数字化工具来管理日常信息和笔记。然而，这并不是一次一劳永逸的解决方案。随着信息量的增长，Evernote 和 OneNote 等传统笔记工具逐渐显得力不从心。于是，我开始探索更多的工具，从 Bear、Noted，再到 Notion、Roam Research、Obsidian 等更具结构化思维和知识管理理念的工具，试图构建一个完整的信息管理系统。与此同时，我也引入了 NetNewsWire、Reeder、Readwise、Pocket、Hypothesis 等工具，将外部资料（如书籍标注、文章收藏）引入我的信息生态系统中。期间，我一度搭建了一个复杂的知识系统，囊括了项目管理、信息整理、笔记复盘、阅读记录等各个方面。然而，尽管工具愈发复杂和多样，我逐渐意识到，工具本身并不能解决一个问题，这个问题是如何高效消化这些海量信息并真正转化为可以使用的知识。</p><p>在长时间的实践过程中，我发现自己渐渐陷入了“信息囤积”的陷阱。无论是微信公众号文章、头条文章，还是深思好文，我收藏了大量内容，却很少有时间真正阅读和消化。同样的情况也出现在视频资源的消化上。不断下载、收藏，而这些内容大多只是躺在硬盘里。从教程、电子书到 PDF 文档，堆积的资料让我感到压力倍增，却又无法轻松地找到一个合适的时机来打开它们。</p><p>更糟糕的是，我在各种平台上收藏的笔记，如小红书、B站、RSS中的上千条收藏内容，已然变得难以追溯。每当需要查找某些信息时，我常常陷入找不到、看不见、用不上的窘境。尽管心知这些信息很可能再也不会有用，我依然继续收藏，仿佛只要“拥有”它们，就能够缓解对信息错失的焦虑。</p><p>在面对大量囤积的信息时，我逐渐意识到，真正的问题并不在于收集，而在于消化。收集信息的过程可能只需要短短几秒，但要真正理解并内化这些信息，则需要更多时间和精力。这种“藏品如山积，消化路漫漫”的现象说明了信息处理的关键并不在于收集多少，而在于如何高效地使用这些信息。</p><p>最早的时候，我的资料整理方式相对简单，按项目划分文件夹，将所有相关资料、需求和产出放在一个地方。当我遇到类似的项目时，会从旧的文件夹中查找资料。然而，随着项目增多，文件夹中的资料也越来越多，查找变得愈加困难。后来，我开始使用系统自带的备忘录，将日常遇到的可能有用的信息随手记录下来，但随着时间的推移，备忘录中的信息数量爆发式增长，最终变得难以管理和检索。</p><p>随着项目工作的减少，我更多地参与到已有项目的维护中，积累的信息越发显得冗余。尤其是长期在特定领域的深入学习，我不断发现许多新的、感兴趣的内容，但缺乏机会去实践和应用，于是这些信息就一直沉积在备忘录中。时间一长，这些信息变得难以追踪，也无法有效利用。</p><p>为了应对不断增长的信息压力，我决定将注意力从“收集信息”转移到“使用信息”上。我认识到，仅仅依赖工具本身是不够的，重要的是建立起一个高效的系统来帮助我处理这些信息。为此，我还开发了一款<a href="https://apps.apple.com/cn/app/%E6%88%B4%E9%93%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%B0%8F%E5%86%8C%E5%AD%90/id1609702529?mt=12">小册子 APP</a>，并在其中加入了资料整理的功能。这个系统让我能够更好地分类、归档、回顾和消化资料，且不再依赖多个工具来切换工作流程。</p><p>与此并行，我调整了信息管理的方式。与其简单地收集信息，我更加注重系统化的消化流程。通过设定清晰的目标和计划，我能够优先处理对当前工作或生活最有价值的内容。那些暂时无用的信息则被归档存储，并定期进行复盘和清理。这一优化使得我能够减少信息焦虑，从“拥有大量信息”的负担中解脱出来，真正做到高效利用和整合信息资源。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/my-pkm/01.png" class="lozad post-image"src="/uploads/my-pkm/01.png"></p><h2 id="我是怎么用小册子-APP-做知识管理的"><a href="#我是怎么用小册子-APP-做知识管理的" class="headerlink" title="我是怎么用小册子 APP 做知识管理的"></a>我是怎么用小册子 APP 做知识管理的</h2><p>我的知识管理流程分为两个并行的部分：日常收集和项目整理。</p><p>在日常的知识收集中，我的重点是快速、便捷地记录信息。无论是看到的文章、读到的书籍、自己的灵感，还是电影的感悟，我都会将它们整理成卡片并录入到我的知识管理工具中。我根据不同领域为这些卡片设置分类，比如有Apple技术、计算机科学、艺术、生活，还有当前项目。如果收集的信息和我正在进行的项目相关，我会为其打上一些粗力度的标签，以便日后整理。收集的过程非常高效：对于文章，我通常只需贴上 URL，程序会自动解析出标题；对于灵感，我直接在文本框中输入内容；书籍和电影则通过豆瓣链接快速录入。这样的操作使得整个录入过程简单而快捷，极大提升了我记录知识的效率。</p><p>与日常收集相对应，我在整理项目时会更为仔细。这一流程是对收集到的卡片进行进一步的分类和消化。我通常会从项目相关的标签入手，深入研究卡片的内容，并对其进行精细化分类。与日常收集阶段相比，在这个阶段我会为卡片设置更多、更细致的标签，并剔除重复或无用的信息。此外，已经消化并应用过的卡片会被归档，作为日后的参考。归档会沉到对应标签列表的最下面而不是移到另一处，方便以后的回顾。</p><p>标签管理是我知识整理中的核心要素之一。我采用纯文本的方式来管理标签，这与许多其他知识管理应用的标签管理方式不同。选择这种方式的原因在于文本标签具有极大的灵活性，特别是在标签数量众多的情况下。我可以通过简单的文本编辑，避免不相关领域的标签干扰到我当前的项目整理。当某个标签不再需要时，我可以直接从文本中删除，存入一个独立文档，待日后需要时再复制回来。这样的操作不仅简化了标签管理流程，也保证了标签系统的灵活性和可操作性。</p><p>标签的顺序管理同样依赖于文本编辑，这种方式虽然简单，但极为高效，特别是当需要对标签进行大规模调整时，文本编辑可以轻松完成。</p><p>在知识被消化和分类后，我会将其以树状结构呈现在我的知识手册中。这种结构清晰地展示了知识点的层次和相互关系，使得我在后续学习中能够快速定位到相关知识点。</p><p>在手册中的每个知识点右上角都有一个“相关资料管理”的按钮，点击该按钮，我可以将新的卡片与当前的知识点关联。这个功能不仅帮助我巩固已有的知识，还为未来的知识再生提供了条件。新的卡片在合适的时间会被重新整理并融入到现有知识体系中，进一步完善我的知识结构。这一过程形成了一个持续的知识再循环，确保了知识的更新与扩展。</p><p>在处理和管理个人知识时，我曾遇到一个常见但令人困扰的问题：很多资料的链接在我回顾时已经失效。尽管我尝试通过标题重新搜索这些内容，往往还是一无所获。这让我意识到，单靠链接保存是不够的。链接失效并不是个例，它反映了一个更广泛的互联网现象——“数字衰变”。皮尤研究中心（Pew Research Center）的一项最新研究揭示了互联网内容消失的严重性。研究表明，2013 年发布的网页中，有 38% 在十年后的今天已经无法访问。这些失效的链接覆盖了多个重要领域，包括政府网站、新闻平台、维基百科和社交媒体等，广泛而深远地影响了信息的持久性和可访问性。尤其值得注意的是，新闻网站的失效率达到了 23%。这些数据表明，即使是高流量、重要性较高的网站，也不能幸免于这一问题。这不仅限于普通的网络内容，连维基百科这样的全球最大在线百科全书中，也有 54% 的页面存在至少一个失效的引用链接。对于依赖这些引用来源的用户而言，失效的链接让信息的可靠性大打折扣，无法再追溯到原始的参考资料，这在知识传播和信息验证中是一个严重的问题。</p><p>为了应对这个问题我尝试了直接保存网页、转为 Markdown、保存为 PDF等方式，这些方式的痛点是保存和管理会耗费精力，最后我在小册子 APP 中实现了一键保存，这样内容会离线存在本地，无网情况也能看，避免了网页所属平台关闭后无法访问的问题。落得一个安心。</p><p>下面我会详细具体的说下我对个人知识管理的理解，各种工具以及一些方法论的介绍，讲讲我是怎么一步一步形成如今的的个人知识管理工作流的。</p><p>也不知道你现在处在什么样的时期，只是希望下面的内容能够引起你的共鸣。</p><h2 id="PKM-是什么，为什么要有它"><a href="#PKM-是什么，为什么要有它" class="headerlink" title="PKM 是什么，为什么要有它"></a>PKM 是什么，为什么要有它</h2><p>个人知识管理（Personal Knowledge Management，简称 PKM）是当今信息时代的热门话题。随着信息量的爆炸和数据的迅猛增长，如何有效管理、组织和利用这些知识成为每个人必须面对的问题。PKM 的核心不仅仅在于工具或系统，更在于思维方式和对信息的主动掌控。</p><p>工具无法决定输出，驱动力才是关键</p><p>工具本身并不能决定最终的输出效果。正如有人所言，即便只有纸和笔，依然能够达到想要的结果。工具的作用在于让你在输出的过程中减少痛苦，降低摩擦成本，从而让你更专注于核心的知识管理任务。然而，真正促使个人持续进行知识管理的并非工具本身，而是内心深处的兴趣和热爱。</p><p>例如，一位绘画爱好者可能在寒风中等待数小时，只为等待一张在夕阳照射下绝美的风景；一位跑步爱好者可能在跑步中，在风拂过面颊的瞬间不自觉地微笑。这些经历带来的内在反馈远比任何打卡、点赞等外部激励更能促使人坚持。</p><p>大脑擅长思考，但不擅长记忆</p><p>在个人知识管理的过程中，理解大脑的功能是关键。大脑擅长复杂的思考和逻辑推理，但并不擅长记忆大量的信息。这也是为什么建立一个有效的知识库如此重要。知识库擅长存储和记忆，让我们从记忆琐碎信息的负担中解脱出来，腾出更多精力进行创造性思考。</p><p>PKM 的目标是为大脑减轻负担，让知识和信息在需要的时候能够快速、准确地被调取，而不是依赖于记忆。通过构建一个系统化的知识库，我们可以将大脑从信息存储的压力中解放出来，专注于思考和创造。</p><p>PKM 中的常见争论：标签、文件夹与反向链接</p><p>在 PKM 的讨论中，关于工具和方法的选择也充满了争议。诸如“标签与文件夹之争”、“反向链接的价值”这类话题已是老生常谈，甚至已经进入了学术研究领域。而一些相对冷门的议题，如“笔记大小及其优缺点”则鲜有人提及，只有少数来自 Zettelkasten 用户的讨论。</p><p>事实上，PKM 领域内的大多数讨论都集中在如何组织和呈现知识这一点上。不同的知识组织方式适用于不同的使用场景和个人习惯。例如，反向链接可以增强知识的关联性，而文件夹和标签系统则更加适合线性思维的人群。然而，无论选择哪种方式，重要的是找到适合自己的组织方式，并坚持使用。</p><p>信息膨胀与管理挑战：数量是最大难点</p><p>PKM 面临的最大挑战之一是信息的数量。在我们日常生活中，信息膨胀的现象也随处可见。读者只需简单查看自己关注的公众号数量和近三个月的推文量，便能直观感受到信息的急速增长。虽然我们可以通过筛选优质信息源来精简管理，但随着时间的推移，信息依然会逐渐积累，形成庞大的知识库。现代社会中，每个人每天都会面对大量的信息涌入，如何筛选、存储并最终利用这些信息是一个巨大的挑战。一个简单的例子是，假如有一名喜好读书的人有一百本书时，可能通过简单的记忆便能轻松找到某本书的位置。然而，当这个数字扩大到万本时，如果没有一个有效的管理系统，几乎不可能在短时间内找到所需的书籍。</p><p>更多知识管理的研究可以参看这个 Github 上的仓库 <a href="https://github.com/brettkromkamp/awesome-knowledge-management#people">Awesome Knowledge Management</a>。</p><p>工欲善其事，必先利其器</p><p>下面我们继续说说这些适合知识管理的工具们。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>工具的使用我觉得没必要被一个工具的各种功能束缚了，一个工具可能只有一个比其他工具好用的，那么你就用那个最好的功能就可以了。工具是可以组合起来用的，因此多了解些工具也没啥坏处。</p><p>史前时代的 Windows的记事本、Mac的备忘录、Word等。因为我是做开发的，所以我还会用 SublimeText、CotEditor、Emacs orgmode 等开发用的编辑器来写笔记，这些软件对大文件的支持都很好。Evernote 的出现带来了笔记整体管理的风潮，随之诞生出 Onenote、有道云、为知笔记等笔记应用。Markdown 格式笔记的流行，出现了 Typora、Notable、Ulysses 和 Bear 等 App。最后我还是留下了 Bear。主要是 Bear 的一些特色我很喜欢，无需特别了解 Markdown，即可自然使用。折叠功能支持对象有各级标题、次级列表、待办清单。图片大小调整，图片本地存储。简约美观。</p><p>飞书、语雀、Confluence、Thoughts 这样的将内容放在云端的应用解决了笔记同步的问题，开始流行起来。<br>Craft、Wolai、FlowUS 等类 Notion 应用，将笔记更加数据库化了，而且自定义能力也很强。功能不断迭代丰富，感觉就跟 CMS 系统一样。这样吸引了很多对定制要求高的用户。后面还出现了白板类 APP，比如无边记。完成了石板、黑板、白板再到数字画布的进化。</p><p>笔记记录法的流行诞生了 Roam Research、Obsidian 和 Flomo 这些主打方法论的 APP，有主云端的也有主本地的。</p><p>下面是按照在特定场景下工具组合使用来看。</p><p>日常信息获取时，对于聚合信息，会使用 RSS 订阅软件还有网页收藏夹。热点事件通过知乎、微博、X 等平台。艺术我通常会通过订阅和关注一些账号来发现自己喜欢的作品。一些期刊文献使用 Zotero，Calibra 来管理，MarginNote 标注，然后 obsidian 整理笔记。杂志书籍用 Apple Books，漫画用可达漫画。图片管理用 Eagle。</p><p>一些会议笔记用 Notability 或 GoodNotes，研究型的用 Obsidian。知识回顾用 Anki。提纲用 MindNode</p><p>另外还有些精品 APP 也值得一试：</p><ul><li><strong>DEVONthink</strong> - <a href="https://www.devontechnologies.com/products/devonthink/overview">官网</a>（买断制，macOS &amp; iOS）老牌知识管理软件，支持储存文件、管理档案、撰写笔记与文章，具备AI功能。</li><li><strong>Heptabase</strong> - <a href="https://heptabase.io/">官网</a>（订阅制，macOS）由卡片、白板、文字编辑器组成的生产力工具，易于组织内容并建立关联性。</li><li><strong>OmniFocus</strong> - <a href="https://www.omnigroup.com/omnifocus">官网</a>（买断制&#x2F;订阅制，macOS &amp; iOS）老牌GTD软件，支持拆解复杂任务，设定不同情境下的任务显示。</li></ul><p><a href="https://github.com/eastlakeside/awesome-productivity-cn">绝妙的个人生产力（Awesome Productivity 中文版）</a> 里面很全面按分类的列出了各种工具。</p><p>接下来我打算按照输入、整理、消化、输出这个我使用的流程再详细说说。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>有效的信息输入不仅依赖于优质的信息源选择，更需要我们有意识地简化、系统化管理这些信息。通过借助合适的工具、培养良好的习惯，以及采用像卡片写作法这样的整理方式，我们可以在信息洪流中建立起属于自己的知识体系。这不仅能帮助我们在日常学习中游刃有余，还能为我们的长期成长打下坚实的基础。</p><p>二八原则（帕累托原则）告诉我们，80%的结果源自20%的输入。这一原理不仅适用于经济和管理，还可以延伸至学习和知识管理。当我们回顾积累的信息时，真正能够帮助我们成长的往往是少部分重要的内容。因此，做笔记时，要学会识别和提取关键信息，而不是事无巨细地记录一切。因此，<strong>选择优质的信息源，减少无效信息的输入</strong>，是优化信息输入的重要第一步。</p><p>优质的信息源不但能节约时间，还能提高信息的深度和可靠性。比如一些报纸杂志等传统媒体，此外，书籍、播客也是不可忽视的信息来源。<strong>了解信息的来源，并确保其权威性</strong>，不仅有助于提升知识质量，还能在引用时提高信息的可信度。</p><p>有效简化输入，提升思考深度。</p><p>过多的输入常常会稀释我们的注意力，使思考变得浅显。因此，简化输入变得尤为重要。我们需要有意识地控制信息的广度，从而为深度思考腾出空间。<strong>输入广度的减少，能帮助我们集中精力，深入思考</strong>。举例来说，在订阅新闻和学术论文时，关注核心主题的深度研究，而不是试图了解每一个细节。同时，保持思维的“留白”也是一个关键策略，为深入思考留下空间，而非被无尽的信息所淹没。</p><p>从不同渠道获取信息。</p><p>信息的输入并不仅限于文字或数据。<strong>灵感和想法</strong>有时会突然出现，或来源于日常生活中的对话与观察；我们还可以从社交媒体的信息流中获取某些时效性较强的观点。</p><p>播客资源近年来逐渐成为获取深度信息的热门选择，其中不少优质的中文播客资源都提供了非常多元的视角。下面是一些播客资源的整理：</p><ul><li><a href="https://xyzrank.com/#/">中文播客榜</a></li><li><a href="https://github.com/alaskasquirrel/Chinese-Podcasts">Chinese-Podcasts</a></li><li><a href="https://typlog.com/podlist/">中文独立播客</a></li><li><a href="https://github.com/fffx/awesome-chinese-podcasts">一些不错的中文播客</a></li><li><a href="https://github.com/theJian/Collection-of-Chinese-Podcasts">华语播客专辑</a></li></ul><p>还有一些 NewsLetter 资源的整理：</p><ul><li><a href="https://www.notion.so/kfang/Newsletter-68ee46c0a4574f659fb8a873ead438c6">中文 Newsletter 导航</a></li><li><a href="https://alleyread.com/">AlleyRead</a></li><li><a href="https://github.com/chasays/newsletter-list">Newsletter-list</a></li><li><a href="https://github.com/alaskasquirrel/Email-newsletter-RSS">Email-newsletter-RSS</a></li></ul><p><strong>RSS</strong> 订阅同样是不可忽视的工具，可以通过 <a href="https://rss-source.com/">RSS Source</a> 发现感兴趣的订阅源，并通过 Inoreader 等工具将其整合起来，进行高效的管理。</p><p>信息的有效管理需要借助工具。我使用了多个工具，结合它们的优势来实现系统化的收集与整理。例如：</p><ul><li><strong>Cubox</strong> 和 <strong>NetNewsWire</strong> 是我常用的 RSS 阅读工具，能帮助我快速筛选并收集有价值的信息；</li><li><strong>Readwise</strong> 用于同步和高亮阅读笔记，并可以将微信读书、Calibre、Apple Books 等平台的内容整合起来，方便跨平台管理；</li><li><strong>Drafts</strong> 和 <strong>The Archive</strong> 则是用来记录和存储灵感的利器，特别是当灵感突然出现时，可以随时记录下这些碎片化的想法。</li></ul><p>信息的收集只是第一步，吸收和整理才是信息输入的核心。无论是通过写作来总结，还是通过复盘来回顾，都可以帮助我们将碎片化的信息转化为系统化的知识。比如，卡片写作法对我来说是一种极其有效的方式。通过将思考过程拆解为一张张小卡片，每张卡片涵盖一个明确的主题或观点，降低了思维的门槛，使写作和总结变得更加轻松。原子笔记（Atomic Notes）的概念正是建立在这种写作方式之上，每个笔记单位仅涵盖一个明确的信息点，既独立又简洁，便于日后整理和复盘。</p><p>这种方法不仅适用于写作，还能帮助我们管理思维和时间。<strong>每次积累一点点，最后汇聚成千字的成果</strong>，这种日积月累的方式既高效又能产生实质性的进展。就像我们刷短视频时，总想着“再看几条”，结果一不小心，花的时间比看一部电影还多。因此，<strong>小步积累能带来长远的收获</strong>。</p><p>除了系统化的信息输入，我也培养了一些帮助维持效率的小习惯。例如，每天早上起床就喝水；步行时会戴上耳机开始听播客；坐地铁时打开读书 APP；到办公桌上第一件事是写下接下来要做的事项。这些小习惯不仅能帮助我保持良好的时间管理，还能使信息输入变得自然。</p><h2 id="笔记记录方法"><a href="#笔记记录方法" class="headerlink" title="笔记记录方法"></a>笔记记录方法</h2><p>对于想要长期保存的信息，笔记的撰写方式至关重要。一种极简的记录方法是只回答一个问题：「读了这篇文章，我最大的收获是什么？」这一方法看似简单，但实际上蕴含着深刻的洞察力。它通过提炼出文章的核心要点，既能帮助建立记录习惯，也要求对信息进行深入思考和概括。</p><p>笔记记录方法可以分为两大类：<strong>注重笔记静态结构</strong>和<strong>重视笔记动态结构</strong>。前者主要关注笔记的层次和内容的组织形式，后者则更强调笔记之间的联系和思维的流动性。常见的静态结构笔记法包括康奈尔笔记法、麦肯锡笔记法、大纲笔记法、子弹笔记法和一元笔记法。这些方法往往以明确的层次结构、分类条理为特点，适合用于总结、归纳和整理知识点。</p><p>近年来，随着知识管理需求的变化，越来越多的人开始探索更加灵活、动态的笔记方式，强调想法的关联和思维过程。这种笔记法侧重笔记内容之间的关联性，以构建知识网络为核心，代表方法包括<strong>渐进式归纳法</strong>和<strong>卢曼卡片盒笔记法</strong>。渐进式归纳法提倡逐步丰富笔记内容，确保笔记随着时间的推移不断演变和扩展，而卢曼的卡片盒笔记法则通过卡片之间的连接，构建出高度关联的知识网络。相比静态结构笔记法，这些方法更符合<strong>做笔记</strong>的理念，即在记录过程中不断推动思维深化和知识创新。</p><p>在这种动态笔记法的基础上，许多知识工作者也在进行个性化探索，发展出适合自身需求的系统。例如，<strong>Andy Matuschak</strong> 的长青笔记系统（<a href="https://notes.andymatuschak.org/About_these_notes?stackedNotes=z5E5QawiXCMbtNtupvxeoEX">Evergreen Notes</a>）强调信息的长期价值和持续更新，通过不断复盘和优化，保证知识的鲜活性；而<strong>Maggie Appleton</strong> 的数字花园（<a href="https://maggieappleton.com/garden">Digital Garden</a>）则通过图像化、模块化设计，鼓励思维的自由生长和创意的涌现。</p><p>下面我具体介绍下这些方法。</p><h3 id="卡片盒笔记法"><a href="#卡片盒笔记法" class="headerlink" title="卡片盒笔记法"></a>卡片盒笔记法</h3><p>卢曼卡片盒笔记法，由德国社会学家尼可拉斯·卢曼(Niklas Luhmann)首创，是一种旨在捕捉想法、促进思考和提升写作效率的笔记方法论。卢曼通过这种方法积累了大量的学术成果，出版了50本专著和600篇论文，而这一切的背后离不开他所依赖的笔记系统——卡片盒笔记法(Zettelkasten)。卢曼卡片盒笔记法不仅是一种笔记方法，更是一种思维方式。通过卡片之间的非线性关联，它帮助用户构建属于自己的知识网络，实现从知识积累到创造性输出的跃升。随着技术的发展，这一方法论已融入到现代知识管理工具中，为更多人所用。在当今信息爆炸的时代，Zettelkasten 系统无疑为那些渴望深度思考、持续创新的人提供了一条独特的路径。</p><p>卢曼卡片盒笔记法的核心概念。</p><p>卢曼笔记法的核心在于建立一个由相互关联的知识卡片组成的网络，即所谓的“思想之网”(Web of Thoughts)。每张卡片记录一个独立的想法，并通过超文本链接形式将不同的卡片联系在一起，形成非线性的知识结构。这一系统不仅帮助卢曼理清思路，更激发了新的创意，成为他与自己长期智性交流的重要工具。</p><p>卢曼笔记法包含以下几类笔记：</p><ol><li><p><strong>闪念笔记</strong>：任何突发的想法都应立即记录下来，形式不拘，记录方式灵活，但应在一两天内进行整理，以免遗忘或混乱。</p></li><li><p><strong>文献笔记</strong>：无论是读书还是阅读文献，随时记录下不想忘记的内容，尤其是那些可能对未来的思考或写作有用的知识点。这类笔记应尽量用自己的语言进行总结，并保留参考文献信息，以便后续引用。</p></li><li><p><strong>永久笔记</strong>：这是基于闪念笔记和文献笔记的深度思考和凝练。这类笔记力求简洁，并在卡片之间建立链接，以便于构建系统化的知识网络。</p></li></ol><p>通过这些笔记的链接和积累，卢曼的卡片盒系统能够自然生长，逐渐发展出完整的主题和观点。这种有机生长使得知识网络不仅在规模上扩展，还在深度和广度上不断完善。这种系统让笔记不再是孤立的存在，而是一张由想法交织而成的知识网络。它在促进创意生成、增强记忆和理解、以及支持长期项目管理方面，展现了独特的优势。</p><p>卡片盒是卢曼笔记法的基础工具。这一系统强调笔记的独立性和相互之间的连接性，而非传统的线性笔记方式。每条笔记被视为一个原子化的知识单元，能够随时被重新组合和调用。通过这些连接，知识逐步沉淀，并从下而上形成主题，帮助用户进行深度的思考和写作。</p><p>卡片盒系统的要素有下面几个要素：</p><ul><li><strong>原子性</strong>：每条笔记仅包含一个清晰的、独立的想法（thought）。这样的笔记结构便于信息的重新组合，并且能够灵活地应用于不同的主题。</li><li><strong>高可见性</strong>：通过笔记之间的相互连接，卡片盒系统能够迅速复现信息。每一个想法都嵌入了丰富的上下文，便于用户在需要时迅速找到相关信息。</li><li><strong>可传递性</strong>：卡片盒笔记系统中的每条笔记不仅是对信息的简单记录，它们经过深度加工，具备高度的实用性和复用性。通过打破传统笔记的“存完即弃”困境，它为未来的思考和写作提供了持续的支撑。</li></ul><p>卡片盒系统强调非线性的关联性，这使得看似不相关的想法能够通过笔记的连接生成新的见解和创意。每条笔记独立存在，要求用户在记录和关联过程中进行深度思考。这种思考有助于增强对信息的理解和记忆。卡片盒系统特别适合处理需要长期积累的项目。用户可以随着时间的推移不断补充和完善笔记，最终形成系统化的知识成果。</p><p>卡片盒系统通过这种有机的知识生长能够在解决具体问题时，自动调整规模和结构，逐步呈现出一个自洽的思想体系。</p><p>使用卡片盒系统的流程如下：</p><ol><li><p><strong>创建笔记</strong>：每条笔记应简洁明了，并且包含一个独立的想法。为每条笔记分配一个唯一的标识符，便于后续引用和关联。</p></li><li><p><strong>建立关联</strong>：将相关的笔记通过链接相互连接，形成网络结构。关联的方式可以是通过标识符引用，也可以是索引卡片。</p></li><li><p><strong>维护与扩展</strong>：定期复查笔记，更新或者删除不再相关的内容。随时添加新笔记，并在已有的知识网络中寻找新的关联。</p></li></ol><p>每条笔记都有其独特的结构：</p><ul><li><strong>唯一标识符</strong>：为每条笔记提供唯一的引用地址。</li><li><strong>笔记正文</strong>：简短而独立的思想记录。</li><li><strong>参考文献</strong>：如果笔记来源于外部，需在底部注明引用来源。</li></ul><p>卢曼在《How to take smart notes》一书中描述了他的笔记流程：<br>他首先记录下临时的闪念笔记，随后根据文献笔记进行深度思考，并最终撰写永久笔记。在撰写永久笔记前，卢曼会先回顾已有的相关笔记，判断是否需要撰写新的笔记或更新已有内容。这一过程本身就是信息的综合和创新的过程。</p><p>卢曼卡片盒笔记法的成功并不仅仅依赖于其系统本身，更重要的是长期的坚持与智性交流的投入。</p><p>随着 Roam Research 的发布，卢曼卡片盒笔记法在全球范围内再度引发关注。如今，Obsidian、Notion、Logseq 等众多笔记应用纷纷将卡片盒笔记法引入其中，并成为知识管理领域的重要工具。这些工具通过双向链接和图谱化笔记展示，延续并扩展了卢曼的思想之网。</p><p>尽管现代软件让笔记系统的操作更加便利，卢曼的成就依然更多源自他长期的智性投入，而非工具本身。卡片盒笔记法为他提供了持续智性交流的基础，但真正驱动这一切的是卢曼对知识的持续探索和真诚对话。</p><h3 id="P-A-R-A"><a href="#P-A-R-A" class="headerlink" title="P.A.R.A."></a>P.A.R.A.</h3><p>在《Building a Second Brain》一书中，Tiago Forte 提出了一个高效的笔记组织框架——P.A.R.A.，即 Projects（项目）、Areas（领域）、Resources（资源）和 Archives（档案）。P.A.R.A. 框架为笔记提供了一个清晰的组织结构，确保我们可以系统性地管理和利用自己的知识储备。通过将笔记分类到 Projects、Areas、Resources 和 Archives，我们不仅能够有效管理当前的工作，还能为未来的项目做好充分准备。这种方法让我们不仅着眼于眼前，还能在长远的时间跨度中，更高效地利用笔记资源。P.A.R.A. 也是指导我打标签的一个很好的理论依据。</p><p><strong>Projects：正在进行的项目</strong></p><p>Projects 是指当前正在进行的具体项目或任务。例如，你正在学习的一门课程，或是开发中的某个产品，甚至是工作中需要处理的某项任务。任何具有明确目标和时间限制的活动都可以被归为项目。它们是动态的，随时会有进展，也会在某个时间点结束。因此，将与项目相关的笔记进行专门整理，可以让我们时刻聚焦在当下的工作目标上，避免混乱。</p><p><strong>Areas：长期关注的领域</strong></p><p>与项目不同，Areas 是长期关注的领域或兴趣点，这些领域没有特定的终点，而是贯穿个人发展和生活的各个阶段。例如，理财、编程、职业规划、商业等，都可以视为 Areas。每个领域下可能会有多个项目，但它们共同的特点是长期存在且没有明确的时间限制。通过将笔记归类到不同的领域，我们可以更好地跟踪和维护个人的长期兴趣与发展，确保在这些方面的知识积累和成长。</p><p><strong>Resources：潜在的参考资料</strong></p><p>Resources 是指那些在未来可能会用到的参考资料。它们是为了长远的项目和兴趣领域做准备，具有较高的参考价值，但并不一定会立即用到。例如，虽然你目前不从事画画相关的工作，但你可能会意识到这是一个未来会从事的领域，因此可以将与画画相关的资料和笔记归类到 Resources 中，方便将来需要时快速查阅。</p><p>这种资源型笔记的核心价值在于为未来的工作和学习打下基础。尽管当前未必立刻能用到，但这些知识储备可以帮助你在将来更快速地找到所需的信息，避免被大量无关内容所淹没。</p><p><strong>Archives：已完成的项目</strong></p><p>Archives 是指那些已经完成或不再活跃的项目。这些笔记虽然不再是工作重点，但它们的价值在于历史记录和参考。如果未来某个新项目需要借鉴之前的经验或成果，我们可以迅速从 Archives 中提取出有用的信息。将完成的项目归档有助于清晰区分当前的任务和过去的成果，避免无关内容干扰当前工作。</p><p>P.A.R.A. 框架中有一个核心理念：笔记应保持独立性，不应过度依赖于特定项目。也就是说，尽管笔记可能源自某个项目，它们应该具备跨项目的适用性。这种独立性意味着每一条笔记都有可能在未来的不同情境下重新发挥价值，而不仅仅局限于当前的使用场景。</p><p>知识的挑战在于其跨时间的应用。我们记录笔记，不仅是为了当前的需求，更是为未来的自己铺路。通过精心的标签和分类，我们能够为未来的项目储备知识，并迅速从过往的笔记中提取信息，避免重复劳动。</p><p>笔记管理的目标，不仅是积累知识，更是为了在需要时迅速找到相关内容。通过 P.A.R.A. 的结构化管理，我们为笔记增加了跨时空的联系。即便某条笔记当前无法用于手头的工作，它也可能在未来某个项目中发挥重要作用。而得益于 P.A.R.A. 框架的有序分类，我们可以轻松地从相关领域或资源中找到这些笔记，从而提升工作效率和知识处理的深度。</p><h3 id="费曼学习法"><a href="#费曼学习法" class="headerlink" title="费曼学习法"></a>费曼学习法</h3><p>费曼学习法，又称为费曼技巧（Feynman Technique），起源于诺贝尔物理学奖得主理查德·费曼（Richard Feynman）的教学风格和学习方法。费曼以其通俗易懂、深入浅出的讲解风格闻名，被誉为“伟大的解释者”。费曼学习法的精髓在于简化复杂、输出内化。它并不是简单地重复记忆，而是通过解释和简化来发现知识中的盲点并弥补这些不足，最终达到真正掌握的目标。通过这种不断迭代的学习方法，学习者不仅可以在短期内取得良好的学习效果，还能够在长期项目中构建起更加深厚的知识基础。这种方法对任何学习领域都适用，帮助我们将所学知识融会贯通，真正掌握其核心内容。</p><p>费曼能够在多个领域取得显著成就，这与他独特的学习方法密不可分。费曼曾分享了他在学习和思考中的一个技巧：他会在心中存有十几个自己感兴趣的问题。尽管这些问题不会时刻占据他的思维，但每当他看到新的研究成果或发现时，都会主动将其与自己关心的问题联系起来，看看这些新的知识能否为自己已有的问题提供答案。此外，他会将学习过程中的笔记归类到这些问题中，日积月累地丰富自己的知识体系。随着时间的推移，他的问题下的笔记越来越多，不同的知识点之间也逐渐建立起联系，这大大加深了他对问题的理解。</p><p>费曼学习法的核心思想是通过简化和输出知识来促进深度理解，避免“假学习”带来的错觉。具体而言，这一方法可以分为以下四个步骤：</p><ol><li><strong>确定目标并开始学习</strong>：首先，明确要学习的知识点或概念，并将其写在纸的最上方。此时，学习者应该尽可能主动地获取相关信息，学习新知识，并将其记录下来。这里的记录不仅仅是机械地抄写，而是要通过自己的语言对知识进行总结和梳理，确保内容能够被自己清楚理解。</li><li><strong>教别人</strong>：费曼学习法的核心在于输出。为了检验自己是否真正掌握所学内容，学习者应该尝试将知识讲解给他人。最好选择一个知识储备较少的对象，比如一名小学生或者没有相关领域背景的人，确保讲解时使用简单的语言和易懂的表达。如果能让对方听懂并理解，说明自己对这部分知识的掌握已经相对深入。</li><li><strong>遇到问题，返回学习</strong>：在讲解的过程中，学习者可能会遇到无法清楚解释或讲解的问题。这通常意味着对该部分知识的理解并不透彻。此时需要返回第一步，重新学习这一部分内容，找到理解中的盲点，并弥补知识上的缺漏，直到能够顺畅地解释。</li><li><strong>不断简化</strong>：一旦能够顺畅讲解，学习者需要进行进一步的精简。目标是使用最简单的语言和最直观的表达方式来描述复杂的概念。通过不断简化和优化表达，学习者不仅能加深对知识的理解，还能内化这些知识，形成自己的认知框架。</li></ol><p>费曼技巧不仅适用于短期的学习项目，也可以应用于长期、深度学习的过程中。具体步骤如下：</p><ol><li><strong>目标设定</strong>：首先，确定学习对象和学习目标，明确自己想要掌握的知识领域，并通过设定目标来增强专注力。 </li><li><strong>知识理解与分类</strong>：在学习过程中，将所学知识进行归类、结构化，尝试对不同的知识点进行对比、筛选，找到其中的关联性和关键点。这个过程可以帮助学习者建立一个更加系统的知识结构，提升对学习材料的掌握程度。</li><li><strong>输出和解释</strong>：费曼特别强调了“输出”的重要性。在这里，学习者可以尝试用最简单的语言将复杂的概念解释给一个词汇量和认知水平较低的人，例如一个六年级的学生。六年级的学生只是一个象征，指的是讲解对象需要有基本的理解能力，但不能过于复杂。通过简化语言来解释知识，有助于学习者发现自己对概念的掌握是否足够深刻。</li><li><strong>回顾和反思</strong>：在解释的过程中，学习者可能会发现一些自己没有理解透彻的地方。这时，需要对这些问题进行回顾和反思，进一步深入学习，确保对所有知识点都有透彻的理解。</li><li><strong>内化知识</strong>：简化和反思的最终目标是内化知识，形成自己的知识体系。内化不仅仅是记住知识点，而是能够自如地运用这些知识，并灵活应对不同的情境。通过不断迭代和优化，学习者可以将复杂的概念融入自己的认知框架，达到深度掌握的状态。</li></ol><h3 id="CODE-外脑扩展的有效方法论"><a href="#CODE-外脑扩展的有效方法论" class="headerlink" title="CODE 外脑扩展的有效方法论"></a>CODE 外脑扩展的有效方法论</h3><p>CODE（Capture, Organize, Distill, Express）方法论通过四个步骤帮助我们构建外脑（ExoBrain），将海量的外部信息转化为有价值的内部知识。</p><p>这些步骤是帮助我们管理、整理和应用外部信息的关键工具。</p><ol><li><p><strong>捕获（Capture）</strong><br>捕获阶段的核心目标是收集一切引发共鸣、激发灵感的信息。无论是阅读的文章、听到的播客、看到的有趣图片，还是日常生活中的随想，这些信息都值得被记录和保留。通过有效的捕获，我们可以避免有价值的信息流失，建立起一个丰富的知识库，随时准备后续的进一步处理。</p></li><li><p><strong>组织（Organize）</strong><br>捕获的信息一旦过多，如果不加以整理，就会形成混乱的信息堆积。组织步骤正是为了将这些杂乱的信息进行分类、存储和管理。<strong>PARA</strong> 模型（Projects, Areas, Resources, Archives）是这一阶段的重要工具，它将信息按照项目、职责领域、参考资料和档案等四个类别进行归类。通过这种方式，知识库变得有条理，便于日后检索和使用。</p></li><li><p><strong>提炼（Distill）</strong><br>捕获和组织后的信息并非最终形态。提炼阶段的目标是将这些信息进一步筛选、精简，提取其中最有价值的部分，形成知识的核心。提炼并不仅仅是简单地总结，而是通过对信息的深度理解，找到最为精华的内容，以便未来在不同的应用场景中高效使用。</p></li><li><p><strong>表达（Express）</strong><br>知识的真正价值不仅在于被吸收，更在于被运用。表达步骤是整个流程的最后一个环节，也是至关重要的一步。如果我们仅仅停留在被动的输入阶段，而没有主动去使用这些知识，捕获、组织和提炼的工作都将是徒劳。表达可以通过写作、教学、项目实践等形式实现，只有在实际应用中，知识才能在大脑中内化，真正转化为自己的认知体系。</p></li></ol><p>CODE方法的核心目标是增强创造力。</p><p>CODE 帮助我们通过结构化的捕获和组织，避免无序的信息输入，减轻信息过载的压力。这样，我们能够在有条理的环境中，逐步消化和处理信息，而不是被无用信息淹没。我们不需要记住每一个细节，CODE 允许我们保存所有接触到的有价值的资源，如文章、播客、书籍等，并能够在需要时快速检索这些信息。这不仅节省了我们大脑的记忆容量，也提高了信息获取的效率。通过组织和提炼，我们可以快速找到之前阅读、学习或思考过的内容。这使得信息的重复利用变得更加高效，无需浪费时间在无止境的搜索和重复整理上。CODE 的逻辑化结构不仅使信息存储更加高效，同时也支持我们进行创意工作。因为我们将更多的时间花在了想法的连接和发散上，而不是信息的整理和寻找上，这就为创新提供了更多的空间。通过表达环节不断实践，这些外部信息会逐渐内化，形成我们独特的洞见。这一过程也是费曼技巧中强调的“通过教学强化学习”的重要体现。</p><h2 id="按网状和树状整理笔记"><a href="#按网状和树状整理笔记" class="headerlink" title="按网状和树状整理笔记"></a>按网状和树状整理笔记</h2><p>如何有效地组织和分类笔记内容一直是一个重要的课题。不同工具提供了不同的解决方案，从传统的文件夹结构到更加灵活的标签和链接连接方式，各自都有其优势与适用场景。</p><p>目前，笔记的连接主要有三种方式：</p><ol><li><strong>文件夹连接</strong>：通过树状结构将笔记放入预定义的文件夹中，适合用于管理层次清晰的内容。</li><li><strong>标签连接</strong>：通过为笔记添加标签，将相关的内容进行分类。<strong>Bear</strong> 和 <strong>Obsidian</strong> 等工具都依赖这种方式来组织笔记。</li><li><strong>链接连接</strong>：通过双向链接建立笔记之间的直接关联，网状结构中这种连接方式尤其常见，<strong>Roam Research</strong> 等工具对此提供了强大的支持。</li></ol><p>传统的笔记管理工具大多依赖文件夹系统，将笔记按照预设的类别和层级进行组织。然而，这种“树状结构”在面对动态、未确定的内容时往往显得过于僵化。许多用户在初期使用这类工具时会陷入这样的困境：为了将信息放置在“正确”的位置，他们不得不花费大量时间去思考如何分类，而这种预设的分类标准往往会随着知识的增加而变得不再适用。正如“即兴挥毫卡片乐，后续整理泪成河，整理之时心焦灼，犹如置身火中燎。”，过早地进行结构化可能会导致后期的整理变得困难且低效。</p><p>以 <strong>Roam Research</strong> 为代表的工具取消了传统的文件夹体系，允许用户在记录初期不必考虑如何归类，直接创建笔记并通过“链接”在笔记之间建立联系。这种网状结构的设计让用户在不确定分类标准的情况下也能高效地记录想法，随着时间的推移，笔记之间的关联和结构自然浮现。这种灵活性极大地提高了知识积累的效率，特别是在应对碎片化信息时显得尤为突出。</p><p>工具如 <strong>The Archive</strong> 也遵循相似的理念，主张通过建立笔记之间的相互联系来代替传统的文件夹分类。<strong>Bear</strong> 更是完全放弃了文件夹系统，转而依赖标签来组织内容。</p><p>尽管网状结构适合存储那些零散、非线性的思维碎片，例如阅读论文或文章时产生的想法，然而对于某些特定学科的系统化学习，如学习一门编程语言或阅读某本书时所产生的笔记，树状结构仍然具有重要的作用。树状结构提供了更清晰的层级和逻辑顺序，能够帮助用户按主题或学科对知识进行归类。这种结构对于那些需要线性逻辑的知识管理尤其适用，例如教程、课程笔记或研究项目等。</p><p>通过结合网状结构和树状结构，用户可以根据内容的特点选择适当的组织方式。碎片化的知识可以通过链接或标签形成灵活的网络，而系统化的知识则可以通过文件夹或目录形成层次分明的树状结构。</p><p><strong>Craft</strong> 和 <strong>Obsidian</strong> 依然保留了文件夹体系，以帮助用户按照传统方式组织内容。<strong>Craft</strong> 甚至支持将整个文件夹导出，并将附件单独储存在对应的文件夹中，便于离线访问。</p><p>为了在网状和树状结构之间实现平衡，维护子级目录和索引是一个有效的策略。用户可以自下而上建立目录，随着笔记数量的增加，不断更新目录，确保内容的逻辑性和条理性。同时，可以通过整理相同主题下的笔记链接，建立专题索引，便于后期的高效查阅。通过这种方法，网状结构和树状结构可以有机结合，帮助用户既保留灵活的笔记结构，又能够确保内容的系统化管理。</p><h2 id="消化"><a href="#消化" class="headerlink" title="消化"></a>消化</h2><p>收藏是信息管理的起点，但许多人却将其误认为终点。我们习惯于囤积信息，却很少真正去消化和利用它。好比看到美食时，我们不会只将其拍照收藏，而是选择食用。而对于信息，我们却常常囤积，而不是将其内化为知识。这样的行为，像是画饼充饥，最终只能带来焦虑和无用的负担。</p><p>现代人越来越依赖于快速信息消费，如短视频、播客解说等，试图在有限时间内处理更多内容。然而，这种方式并未真正提升信息的有效处理，反而带来了更多纷扰和焦虑。大量信息快速流过，反而让我们感到空虚与不满足。信息的快速获取并不等于知识的积累。人类大脑有遗忘机制，唯有通过理解和重复，才能将信息真正转化为知识。尝试通过工具和方法论快速清理信息，只会加剧内心的焦虑感，真正的解决之道在于<strong>深度学习和反思</strong>，而非追求广度和数量。通过深入思考和识别真正的需求，才能突破信息积压。思考的过程需要时间，一周、一个月甚至一年，都是值得的。一旦想清楚了，不仅可以解决信息囤积，还可以释放心理负担，带来身心的轻松和通透。</p><p>真正的难题并不是将想法写出来或做笔记，而是如何有效地思考。思考是一种能力，需要通过控制思维形式和内容来加以锻炼。人类大脑有过滤机制，自动忽略与我们现有观念相悖的信息。这种选择性过滤是大脑的局限性，然而，它也阻碍了认知的扩展。因此，真正有效的知识管理，不只是收集信息，而是通过思考来内化新的认知。</p><p>心理学家科特勒提出，大脑的认知系统可以分为三大网络：</p><ol><li><strong>注意网络（Central Executive Network）</strong>：专注于当前任务，帮助锁定思考的焦点，如同聚光灯一样引导我们的注意力。</li><li><strong>想象网络（Default Mode Network）</strong>：负责发散思维，产生创造力的来源。这一网络允许我们随机浮现想法，将分散的概念连接在一起。</li><li><strong>突显网络（Salience Network）</strong>：监控和评估各种想法，决定哪些值得进一步深入思考。强大的突显网络能帮助发现其他人未注意到的灵感。</li></ol><p>这些网络的协同工作，决定了我们的创造力和思维质量。</p><p>法国社会学家布鲁诺·拉图尔指出，“不加质疑地相信或使用某个事实，会强化其合理性。”这与心理学家丹尼尔·卡尼曼的观点一致：人类大脑会将熟悉度等同于合理性，重复的观点更容易被大脑认同。商家利用这一特性进行广告营销，而我们可以通过反复引用和巩固记忆来更好地内化知识。</p><p>20世纪50年代，芝加哥大学教授布鲁姆提出的<strong>教育目标分类理论</strong>，将知识的认知过程分为六个层次：记忆、理解、应用、分析、评价和创造。学习的最终目标在于达到最高层次的“创造”，即通过对已有知识的重组，产生新的想法和模式。</p><p>第二大脑的概念，可以理解为一个外置的存储系统，帮助大脑减少负担。大脑就像计算机的CPU，而第二大脑则类似于内存和硬盘。它存储那些我们暂时不需要处理的内容，从而让第一大脑专注于当前任务。有效使用第二大脑，能让我们更高效地管理知识，提升思维的深度和广度。</p><p>有效的记忆策略，如<strong>间隔重复</strong>（Spaced Repetition），能够显著提升记忆效果。基于艾宾浩斯遗忘曲线的理念，使用如SuperMemo和Anki等工具进行渐进式阅读，能够帮助信息的有效吸收和转化。</p><p>位置记忆法（也称为记忆宫殿法）是一种古老且有效的记忆技巧。通过将记忆对象与特定空间位置进行关联，能够大幅提升记忆效果。这种方法可以追溯到古希腊时期，现如今被广泛应用于各种学习和知识管理场景中。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>在我们日常学习中，做笔记的根本目的，是为了提升产出力。而写作作为一种极其重要的产出形式，必须遵循一套清晰且结构化的流程。这个流程并不仅仅局限于文字的创作，它还包括了如何将生活中的灵感、阅读中的思考转化为最终的成果。</p><p>写作是一项有条不紊的工作，通常可以分为六个关键步骤：</p><ol><li><p><strong>灵感捕捉</strong>：随时随地收集日常生活中的写作灵感。这是写作的源头，灵感往往来自我们对周围环境的观察、对问题的思考，甚至是一些闪念。</p></li><li><p><strong>阅读与内化</strong>：通过阅读他人的作品，获取知识，并将其转化为属于自己的永久笔记。这些笔记并非简单地记下原始信息，而是经过自己的思考和理解之后的产物。</p></li><li><p><strong>思想碰撞</strong>：将新获得的知识与已有的认知相结合，在思考过程中产生新的想法。这种思想的碰撞有助于形成新的主题或独特的观点。</p></li><li><p><strong>选题与规划</strong>：从众多灵感中筛选出可行的主题，并根据主题构思大纲，整合可以使用的素材和信息。</p></li><li><p><strong>起草初稿</strong>：开始写作时，要允许灵感在过程中随时出现并调整原有的大纲。这是创作的灵活性所在。写作是动态的过程，初稿的产生往往伴随着对原有思路的修改和丰富。</p></li><li><p><strong>校对与定稿</strong>：以读者和批评家的视角审视作品，修改错别字、调整不通顺的句子，并对不合理的地方进行修正和补充，最终形成定稿。</p></li></ol><p>预写：从构想到初稿。</p><p>写作不只是动笔的瞬间，它的准备工作——<strong>预写</strong>，同样至关重要。Donald M. Murray 在其著作《Write before Writing》中提出，预写是正式写作之前的思维积累过程，虽然这种准备工作常常被忽视，但它实际上占据了作家大量的时间和精力。预写阶段的思考可以发生在脑海中，也可以记录在各种手稿和笔记中，这为正式写作打下了基础。</p><p>常见的预写策略包括：</p><ul><li><strong>头脑风暴（brainstorming）</strong>：快速列出可能的写作主题或思路。</li><li><strong>列提纲（outlining）</strong>：框定文章的整体结构。</li><li><strong>自由写作（focused free-writing）</strong>：不拘形式地写下与主题相关的想法。</li><li><strong>日志写作（journaling）</strong>：通过记录日常的感悟，为未来的写作提供素材。</li><li><strong>思维导图（clustering&#x2F;mapping）</strong>：以图表形式呈现主题和关联内容，便于梳理逻辑。</li><li><strong>5W1H 分析法</strong>：通过“谁、什么、何时、何地、为什么、如何”来分析主题。</li></ul><p>这些预写策略帮助作家将零散的灵感和笔记转化为连贯的写作思路，它们是从想法到初稿的桥梁。</p><p>重写：雕琢作品的过程。</p><p>写作并不只是一次性的输出，重写是其中不可或缺的部分。米开朗琪罗曾形容他雕刻《大卫》像的过程是“去掉多余的石头”，写作的重写过程亦然。重写意味着在已有的草稿基础上，进行内容的修改、优化和精炼。这是一个从粗糙到精细的过程，通过不断打磨，最终形成符合预期的成品。</p><p>写作并没有固定的模式，不同的写作方法适用于不同的创作需求。比如：</p><ul><li><strong>雪花写作法</strong>：从一个简单的概念开始，逐步扩展和细化。</li><li><strong>分轨写作法</strong>：将不同内容模块分开处理，再合并为一个整体。</li><li><strong>细胞写作法</strong>：将文章拆分为若干个独立的细胞，再将这些细胞组织成文章。</li><li><strong>九宫格写作法</strong>：通过图表形式列出不同主题或想法，并在其中找到最具潜力的部分展开写作。</li><li><strong>卡片写作法</strong>：利用卡片记录灵感和笔记，并通过组合和重新排列形成新的写作思路。</li><li><strong>渐进式写作</strong>：逐步完善文章，从初稿到定稿，逐层递进。</li></ul><p>无论采用哪种写作方法，最重要的理念是“写在当下”：立即写、随时写、多写。通过这种不断的输出，灵感才能真正转化为文字，积累为知识，最终实现有价值的产出。</p><p>现代科技提供了多种强大的工具来辅助写作和组织想法。其中常见的有：</p><ul><li><strong>Workflowy</strong>：这是一款列出和整理想法的工具，支持双向链接和镜像功能，非常适合处理灵感和构思阶段的内容。</li><li><strong>OmniOutliner</strong>：稳定且功能强大的大纲编辑软件，尤其适用于构建工作相关的文件或复杂的文档结构。</li><li><strong>iA Writer</strong> &amp; <strong>Ulysses</strong>：这两款文字处理器适合撰写复杂的项目文件，iA Writer 因其对 Markdown 格式的完美支持、打字机滚动和专注模式，成为众多作家的首选工具。</li><li><strong>PDF Expert</strong>：一款功能强大的 PDF 处理软件，支持阅读、注释、重点标记及文件处理功能，适合在写作过程中处理文档和参考资料。</li></ul><p>特别是 iA Writer 的稳定性、开放性以及对 Markdown 格式的支持，使其在众多候选者中脱颖而出。通过直接在 Obsidian 的库路径中建立写作文件夹，并在 iA Writer 中打开，可以轻松实现写作和文件管理的统一。</p><h2 id="以最终目的为导向的工作流"><a href="#以最终目的为导向的工作流" class="headerlink" title="以最终目的为导向的工作流"></a>以最终目的为导向的工作流</h2><p>由于每个人的目标不同，所需的工作流模式也会有所区别。学生、研究者和职场人士的目标各不相同，因此他们的工作流系统对笔记和信息管理的需求也截然不同。</p><p>学生以考试为目标，强调记忆系统和概念结构的构建。他们更关注如何将信息分门别类地整理，以便在短时间内高效记忆。研究者以发表论文为目标，重点在于文献引用和观点交互，确保能够基于已有的理论框架创新和推进学术讨论。职场人士以推进工作进展为目标，重视的是决策过程中的思考和项目行动的有效推进，他们需要快速将信息转化为可执行的项目方案。</p><p>在知识管理领域，不断有新的概念和工具被创造出来，诸如常青笔记、PARA体系、卡片笔记法、双链系统、MOC等。然而，真正有效的方案并非盲目追随这些技术名词，而是在更高的层面上，独立思考自己的需求，创建一个稳定可靠的个人工作流。</p><p>笔记方法和工具都是锦上添花的辅助工具，真正重要的是我们内心对于目标的驱动力，即对自己的<strong>incentive</strong>和<strong>passion</strong>的认知。这是任何外在工具都无法给予的核心动力。正因为如此，很多人对工具的无用论产生共鸣：当一个人内心目标明确坚定时，无论使用何种工具或方法，他们都会找到实现目标的途径。对我而言，正是在明确了自己未来职业发展的目标之后，才真正有了针对性地创造自己的工作方法。这就是独立的意义所在。</p><p>因此，当你陷入迷茫，不确定工具或方法是否对你有帮助时，不妨停下来问问自己：<strong>我究竟想要做什么？</strong> 一旦你明确了这个问题，工具和方法的选择将会变得清晰无比。它们将自然而然地围绕你的目标，帮助你在各个环节实现最优效果。卢曼的卡片笔记法是一个典型的例子。在他的体系中，卡片笔记充当了项目和原始材料之间的中间层。如果没有具体的项目作为目标，笔记本身也就没有意义。笔记只有在与现实中的问题和目标相关联时，才会发挥出它的价值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间，我发布的几篇和动漫相关的公众号文章《&lt;a href=&quot;https://starming.com/2024/08/10/dragon
      
    
    </summary>
    
      <category term="App" scheme="https://starming.com/categories/App/"/>
    
    
      <category term="App" scheme="https://starming.com/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>二刷 iOS 性能与编译，简单点说</title>
    <link href="https://starming.com/2024/09/05/iOS-performance-optimization-second-time/"/>
    <id>https://starming.com/2024/09/05/iOS-performance-optimization-second-time/</id>
    <published>2024-09-05T08:36:12.000Z</published>
    <updated>2024-09-05T08:08:35.254Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要想说说 iOS 的性能问题的原因，如何监控发现问题，以及如何预防和解决这些问题。</p><p>为啥要说是二刷呢，因为以前我也写过好几篇性能相关的文章。有性能优化的<a href="https://starming.com/2017/06/20/deeply-ios-performance-optimization/">深入剖析 iOS 性能优化</a>，包体积相关的<a href="https://starming.com/2017/06/12/gmtc-ios-slimming-practice/">GMTC 上分享滴滴出行 iOS 端瘦身实践的 Slides</a>、<a href="https://starming.com/2017/04/01/build-static-analysis-program-smck-use-swift/">用 Swift 编写的工程代码静态分析命令行工具 smck</a>、<a href="https://starming.com/2016/11/17/use-swift3-build-macos-program-to-clear-unuse-method/">使用Swift3开发了个macOS的程序可以检测出objc项目中无用方法，然后一键全部清理</a>、<a href="https://starming.com/2022/06/10/use-llvm/">使用 LLVM</a>、<a href="https://starming.com/2022/07/08/slides-of-use-llvm/">使用 LLVM 分享的幻灯片</a>。还有启动速度相关的<a href="https://starming.com/2020/12/18/thinking-in-how-to-speed-up-app/">App 启动提速实践和一些想法</a>和<a href="https://starming.com/2019/12/07/how-to-analyze-startup-time-cost-in-ios/">如何对 iOS 启动阶段耗时进行分析</a>。编译相关的<a href="https://starming.com/2017/03/01/deeply-analyse-llvm/">深入剖析 iOS 编译 Clang &#x2F; LLVM</a></p><p>这次我尽量绕开以前谈的，只简单提提，着重说些以前没提或者说的少的。来个互补吧。也加了些前段时间去深圳给平安做分享的内容。</p><p>这次内容也整理进了<a href="https://apps.apple.com/cn/app/%E6%88%B4%E9%93%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%B0%8F%E5%86%8C%E5%AD%90/id1609702529?mt=12">小册子</a>方便下载后按目录日常查阅，小册子程序本身也是开源的，欢迎 <a href="https://github.com/ming1016/SwiftPamphletApp">Clone</a> 查看。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/iOS-performance-optimization-second-time/01.png" class="lozad post-image"src="/uploads/iOS-performance-optimization-second-time/01.png"></p><p>由于 iOS 性能问题涉及面很多，我先做个分类，这样好一个一个的说。大概顺序是会先从造成用户体验损失最大的卡顿、内存爆掉来开头，然后说下启动和安装包体积怎么优化，说说性能分析的工具和方案，最后讲讲怎么使用 Bazel 提速编译。</p><h2 id="卡顿"><a href="#卡顿" class="headerlink" title="卡顿"></a>卡顿</h2><p>先了解下 iOS 视图和图像的显示原理。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>我们了解的 UIKit 和 SwiftUI 都是提供了高层次的管理界面元素的 API。另外还有 ImageView 是专门用来显示图像的类。底层是 Core Graphics，也可以叫做 Quartz，这是 iOS 的 2D 绘图引擎，直接和硬件交互。Core Animation 是处理动画和图像渲染的框架，将图层内容提交到屏幕，并处理图层之间的动画。</p><p>底层图形渲染管线 iOS 用的是 Metal。Core Animation 会将要渲染的图层内容转换成 GPU 可以理解的命令，然后让 Metal 渲染到屏幕上。</p><h3 id="大图"><a href="#大图" class="headerlink" title="大图"></a>大图</h3><p>最容易造成掉帧的原因就是大图。由于大图数据量较大，对应渲染指令就比较多，会影响渲染的时间，造成卡顿。可以在显示大图前，先加载并显示较小尺寸的缩略图，等用户确实需要查看高清版本时，再加载完整图片。</p><p>举个例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">struct</span> <span class="token class-name">ThumbnailImageView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> thumbnailImage<span class="token punctuation">:</span> <span class="token class-name">UIImage</span>    <span class="token keyword">let</span> fullSizeImageURL<span class="token punctuation">:</span> <span class="token constant">URL</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> fullSizeImage<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> fullSizeImage <span class="token operator">=</span> fullSizeImage <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>uiImage<span class="token punctuation">:</span> fullSizeImage<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>uiImage<span class="token punctuation">:</span> thumbnailImage<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">onAppear</span><span class="token punctuation">(</span>perform<span class="token punctuation">:</span> loadFullSizeImage<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">loadFullSizeImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> fullSizeImageURL<span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">self</span><span class="token punctuation">.</span>fullSizeImage <span class="token operator">=</span> image                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在加载大图时使用 <code>CGImageSource</code> 逐步解码图片，在低分辨率时减少内存占用。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">UIKit</span><span class="token keyword">func</span> <span class="token function-definition function">loadImageWithLowMemoryUsage</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">UIImage</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">guard</span> <span class="token keyword">let</span> source <span class="token operator">=</span> <span class="token class-name">CGImageSourceCreateWithURL</span><span class="token punctuation">(</span>url <span class="token keyword">as</span> <span class="token constant">CFURL</span><span class="token punctuation">,</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token nil constant">nil</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> options<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">NSString</span><span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token constant">kCGImageSourceShouldCache</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 避免直接缓存到内存</span>        <span class="token constant">kCGImageSourceShouldAllowFloat</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token class-name">CGImageSourceCreateImageAtIndex</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> options <span class="token keyword">as</span> <span class="token class-name">CFDictionary</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap <span class="token punctuation">&#123;</span>        <span class="token class-name">UIImage</span><span class="token punctuation">(</span>cgImage<span class="token punctuation">:</span> <span class="token short-argument">$0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步绘制"><a href="#异步绘制" class="headerlink" title="异步绘制"></a>异步绘制</h3><p>系统资源方面，CPU 主要是计算视图层次结构，布局、文本的绘制、图像解码以及 Core Graphics 绘制。GPU 是处理图层合并、图像渲染、动画和 Metal 绘制。CPU 负责准备数据，GPU 负责渲染这些数据。</p><p>因此，CPU 方面需要注意过多的子视图会让 CPU 很累，需要简化视图层次。setNeedsDisplay 或 layoutSubviews 也不易过多调用，这样会让重新绘制不断发生。图像解码也不要放主线程。GPU 方面就是图片不要过大，主要是要合适，保持图片在一定分辨率下清晰就好，另外就是可以采用上面提到的大图优化方式让界面更流畅。</p><p>UIView 是界面元素的基础，用于响应用户输入，绘制流程是当视图内容或大小变化时会调用 setNeedsDisplay 或 setNeedsLayout 标记为要更新状态，下个循环会调用 <code>drawRect:</code> 进行绘制。绘制是 Core Graphics，也就是 CPU，显示靠的是 Core Animation，用的是 GPU。异步绘制就是将 Core Graphics 的动作放到主线程外，这样主线程就不会收到绘制计算量的影响。</p><p>Core Graphics 的异步绘制是使用 UIGraphicsBeginImageContextWithOptions 函数在后台线程中创建一个 CGContext。使用 GCD 或 NSOperationQueue 来在后台线程中进行绘制操作。完成绘制后，将结果返回主线程以更新 UI。</p><p>下面是一个异步绘制的示例代码：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">UIKit</span><span class="token keyword">class</span> <span class="token class-name">AsyncDrawingView</span><span class="token punctuation">:</span> <span class="token class-name">UIView</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> asyncImage<span class="token punctuation">:</span> <span class="token class-name">UIImage</span><span class="token operator">?</span>        <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> rect<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span>                <span class="token comment">// 如果有异步绘制的图片，直接绘制它</span>        asyncImage<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> rect<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">drawAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建图形上下文</span>            <span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size            <span class="token class-name">UIGraphicsBeginImageContextWithOptions</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token class-name">UIGraphicsGetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span>                        <span class="token comment">// 进行绘制操作</span>            context<span class="token punctuation">.</span><span class="token function">setFillColor</span><span class="token punctuation">(</span><span class="token class-name">UIColor</span><span class="token punctuation">.</span>blue<span class="token punctuation">.</span>cgColor<span class="token punctuation">)</span>            context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment">// 获取绘制结果</span>            <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token class-name">UIGraphicsGetImageFromCurrentImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">UIGraphicsEndImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 更新 UI，回到主线程</span>            <span class="token keyword">await</span> <span class="token class-name">MainActor</span><span class="token punctuation">.</span>run <span class="token punctuation">&#123;</span>                <span class="token keyword">self</span><span class="token punctuation">.</span>asyncImage <span class="token operator">=</span> image                <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">setNeedsDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 触发 draw(_:) 方法重新绘制</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于复杂的异步绘制，特别是涉及 UIView 的情况下，可以考虑这两个方法。首先是自定义 CALayer 并实现其 draw(in:) 方法来进行异步绘制。其次是使用 UIView 的 draw(<em>:) 方法，在子类中重写 draw(</em>:) 方法，并结合异步操作来更新绘制内容。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">UIKit</span><span class="token keyword">class</span> <span class="token class-name">AsyncDrawingLayer</span><span class="token punctuation">:</span> <span class="token class-name">CALayer</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span><span class="token keyword">in</span> ctx<span class="token punctuation">:</span> <span class="token class-name">CGContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> ctx<span class="token punctuation">)</span>                <span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 在子线程中执行绘制操作</span>            <span class="token keyword">await</span> withCheckedContinuation <span class="token punctuation">&#123;</span> continuation <span class="token keyword">in</span>                <span class="token class-name">Task</span><span class="token punctuation">.</span>detached <span class="token punctuation">&#123;</span>                    <span class="token comment">// 执行绘制操作</span>                    ctx<span class="token punctuation">.</span><span class="token function">setFillColor</span><span class="token punctuation">(</span><span class="token class-name">UIColor</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span>cgColor<span class="token punctuation">)</span>                    ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>bounds<span class="token punctuation">)</span>                                        <span class="token comment">// 完成绘制操作后继续</span>                    continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 回到主线程更新 UI</span>            <span class="token keyword">await</span> <span class="token class-name">MainActor</span><span class="token punctuation">.</span>run <span class="token punctuation">&#123;</span>                <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">setNeedsDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 触发 draw(in:) 重新绘制</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>离屏渲染也容易掉帧，应该尽量的避免复杂的圆角、阴影效果，或者使用更简单的图形操作。如可能，减少对 layer 的属性设置，尤其是那些可能引起离屏渲染的属性。</p><h3 id="运算转移到-GPU"><a href="#运算转移到-GPU" class="headerlink" title="运算转移到 GPU"></a>运算转移到 GPU</h3><p>CPU主要负责用户交互的处理，如果能够将运算转移到 GPU 上，就可以给 CPU 减压了。</p><p>以下是一些常见的方法和技术，可以在iOS中将计算任务从CPU转移到GPU：</p><p>通过Metal的计算管线（Compute Pipeline），可以编写计算着色器（Compute Shaders）在GPU上执行大量并行计算任务，如物理模拟、数据分析等。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 使用Metal进行简单的计算操作</span><span class="token keyword">let</span> device <span class="token operator">=</span> <span class="token class-name">MTLCreateSystemDefaultDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> commandQueue <span class="token operator">=</span> device<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">makeCommandQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> shaderLibrary <span class="token operator">=</span> device<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">makeDefaultLibrary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> computeFunction <span class="token operator">=</span> shaderLibrary<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">makeFunction</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"computeShader"</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> computePipelineState <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> device<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">makeComputePipelineState</span><span class="token punctuation">(</span>function<span class="token punctuation">:</span> computeFunction<span class="token operator">!</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Core Image 是一个强大的图像处理框架，内置了许多优化的滤镜（Filters），并能够自动将图像处理任务分配到GPU上执行。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> ciImage <span class="token operator">=</span> <span class="token class-name">CIImage</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> inputImage<span class="token punctuation">)</span><span class="token keyword">let</span> filter <span class="token operator">=</span> <span class="token class-name">CIFilter</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"CISepiaTone"</span></span><span class="token punctuation">)</span>filter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>ciImage<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token constant">kCIInputImageKey</span><span class="token punctuation">)</span>filter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token constant">kCIInputIntensityKey</span><span class="token punctuation">)</span><span class="token keyword">let</span> outputImage <span class="token operator">=</span> filter<span class="token operator">?</span><span class="token punctuation">.</span>outputImage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Core Animation 是iOS的高效动画框架，它会将大部分动画的执行过程自动转移到GPU上。这包括视图的平移、缩放、旋转、淡入淡出等基本动画效果。通过使用CALayer和各种动画属性（如position、transform等），你可以创建平滑的动画，这些动画将在GPU上硬件加速执行。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> layer <span class="token operator">=</span> <span class="token class-name">CALayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>layer<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">let</span> animation <span class="token operator">=</span> <span class="token class-name">CABasicAnimation</span><span class="token punctuation">(</span>keyPath<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"position"</span></span><span class="token punctuation">)</span>animation<span class="token punctuation">.</span>toValue <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span>animation<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">1.0</span>layer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>animation<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"positionAnimation"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SpriteKit 和 SceneKit 是两个高层次的框架，分别用于2D和3D游戏开发。它们内部利用GPU进行图形渲染和物理模拟，极大地减少了CPU的负担。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> scene <span class="token operator">=</span> <span class="token class-name">SKScene</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">1024</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">768</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">let</span> spriteNode <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Spaceship"</span></span><span class="token punctuation">)</span>spriteNode<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> scene<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> scene<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>scene<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>spriteNode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h3><p>线程操作稍不留神就会让主线程卡死，比如dispatch_once中同步访问主线程导致的死锁。子线程占用锁资源导致主线程卡死。dyld lock、selector lock和OC runtime lock互相等待。</p><p>同步原语（synchronization primitive）会阻塞读写任务执行。iOS 中常用的会阻塞读写任务执行的同步原语有 NSLock、NSRecursiveLock、NSCondition、NSConditionLock、信号量（Dispatch Semaphore）、屏障（Dispatch Barrier）、读写锁（pthread_rwlock_t）、互斥锁（pthread_mutex_t）、<code>@synchronized 指令</code>、<code>os_unfair_lock</code>、原子性属性（Atomic Properties）、NSOperationQueue 和 操作依赖（Dependencies）、Actors。</p><p>这些同步原语各有优缺点，选择合适的同步机制取决于具体的应用场景。例如，pthread_rwlock_t适用于读多写少的情况，而NSLock或@synchronized则适用于简单的互斥需求。GCD的信号量和屏障则提供了更高层次的并发控制手段。因此在使用同步原语时要特别注意了。检测卡死情况也要重点从同步原语来入手。</p><h3 id="IO-过密"><a href="#IO-过密" class="headerlink" title="IO 过密"></a>IO 过密</h3><p>磁盘操作通常是阻塞性的，可以将磁盘 IO 操作放到后台线程中执行。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> data<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Loading..."</span></span> <span class="token comment">// `data` 用于存储从磁盘读取的数据，并在 UI 中显示。</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Load Data"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 通过 `Task` 创建一个并发上下文来运行异步代码块。在这个代码块中执行耗时的磁盘 IO 操作。</span>        <span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 在后台执行磁盘 IO 操作</span>            <span class="token keyword">let</span> loadedData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">performDiskIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 在主线程更新 UI</span>            <span class="token keyword">await</span> <span class="token class-name">MainActor</span><span class="token punctuation">.</span>run <span class="token punctuation">&#123;</span>                data <span class="token operator">=</span> loadedData            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 模拟一个磁盘 IO 操作，可能是从文件中读取大数据</span>    <span class="token keyword">func</span> <span class="token function-definition function">performDiskIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 模拟磁盘操作耗时</span>        <span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>nanoseconds<span class="token punctuation">:</span> <span class="token number">2_000_000_000</span><span class="token punctuation">)</span> <span class="token comment">// 2 seconds delay</span>                <span class="token comment">// 这里可以进行实际的磁盘读取操作</span>        <span class="token comment">// 例如读取文件内容：</span>        <span class="token comment">// let fileURL = ...</span>        <span class="token comment">// let data = try? String(contentsOf: fileURL)</span>                <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"Data Loaded Successfully!"</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute atrule">@main</span><span class="token keyword">struct</span> <span class="token class-name">DiskIOApp</span><span class="token punctuation">:</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Scene</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WindowGroup</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="跨进程通信导致卡顿"><a href="#跨进程通信导致卡顿" class="headerlink" title="跨进程通信导致卡顿"></a>跨进程通信导致卡顿</h3><p>进程间通信（IPC）是一种重要的机制，它允许不同的进程或应用程序之间交换信息。然而，某些系统API的调用可能会导致卡顿或性能问题，特别是在以下几种情况下：</p><ul><li>CNCopyCurrentNetworkInfo 获取 WiFi 信息</li><li>设置系统钥匙串 (Keychain) 中的值</li><li>NSUserDefaults 调用写操作</li><li>CLLocationManager 获取当前位置权限状态</li><li>UIPasteboard 设置和获取值</li><li>UIApplication 通过 openURL 打开其他应用</li></ul><p>在执行以上操作时，心理上是要有预期的。能有替代方案的话那是最好的了。</p><h3 id="卡顿监控"><a href="#卡顿监控" class="headerlink" title="卡顿监控"></a>卡顿监控</h3><p>监控原理是注册runloop观察者，检测耗时，记录调用栈，上报后台分析。长时间卡顿后，若未进入下一个活跃状态，则标记为卡死崩溃上报。</p><p>以下是一个 iOS 卡死监控的代码示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>Foundation<span class="token operator">/</span>Foundation<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>UIKit<span class="token operator">/</span>UIKit<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>execinfo<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>sys<span class="token operator">/</span>time<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token comment">// 定义 Runloop 模式的枚举</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>    eRunloopDefaultMode<span class="token punctuation">,</span>  <span class="token comment">// 默认模式</span>    eRunloopTrackingMode  <span class="token comment">// 追踪模式</span><span class="token punctuation">&#125;</span> RunloopMode<span class="token punctuation">;</span><span class="token comment">// 全局变量，用于记录 Runloop 的活动状态和模式</span><span class="token keyword">static</span> CFRunLoopActivity g_runLoopActivity<span class="token punctuation">;</span><span class="token keyword">static</span> RunloopMode g_runLoopMode<span class="token punctuation">;</span><span class="token keyword">static</span> BOOL g_bRun <span class="token operator">=</span> NO<span class="token punctuation">;</span>  <span class="token comment">// 标记 Runloop 是否在运行</span><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span> g_tvRun<span class="token punctuation">;</span>  <span class="token comment">// 记录 Runloop 开始运行的时间</span><span class="token comment">// HangMonitor 类，用于监控卡死情况</span>@interface HangMonitor <span class="token operator">:</span> NSObject@<span class="token function">property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> assign<span class="token punctuation">)</span> CFRunLoopObserverRef runLoopBeginObserver<span class="token punctuation">;</span>  <span class="token comment">// Runloop 开始观察者</span>@<span class="token function">property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> assign<span class="token punctuation">)</span> CFRunLoopObserverRef runLoopEndObserver<span class="token punctuation">;</span>    <span class="token comment">// Runloop 结束观察者</span>@<span class="token function">property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> <span class="token class-name">dispatch_semaphore_t</span> semaphore<span class="token punctuation">;</span>  <span class="token comment">// 信号量，用于同步</span>@<span class="token function">property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> assign<span class="token punctuation">)</span> NSTimeInterval timeoutInterval<span class="token punctuation">;</span>  <span class="token comment">// 超时时间</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>addRunLoopObserver<span class="token punctuation">;</span>  <span class="token comment">// 添加 Runloop 观察者的方法</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>startMonitor<span class="token punctuation">;</span>  <span class="token comment">// 启动监控的方法</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>logStackTrace<span class="token punctuation">;</span>  <span class="token comment">// 记录调用栈的方法</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>reportHang<span class="token punctuation">;</span>  <span class="token comment">// 上报卡死的方法</span>@end@implementation HangMonitor<span class="token comment">// 单例模式，确保 HangMonitor 只有一个实例</span><span class="token operator">+</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>sharedInstance <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> HangMonitor <span class="token operator">*</span>instance<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">dispatch_once_t</span> onceToken<span class="token punctuation">;</span>    <span class="token function">dispatch_once</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>onceToken<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">&#123;</span>        instance <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>HangMonitor alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化方法</span><span class="token operator">-</span> <span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>init <span class="token punctuation">&#123;</span>    self <span class="token operator">=</span> <span class="token punctuation">[</span>super init<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        _timeoutInterval <span class="token operator">=</span> <span class="token number">6.0</span><span class="token punctuation">;</span>  <span class="token comment">// 设置超时时间为6秒</span>        _semaphore <span class="token operator">=</span> <span class="token function">dispatch_semaphore_create</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建信号量</span>        <span class="token punctuation">[</span>self addRunLoopObserver<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 添加 Runloop 观察者</span>        <span class="token punctuation">[</span>self startMonitor<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 启动监控</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> self<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 添加 Runloop 观察者的方法</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>addRunLoopObserver <span class="token punctuation">&#123;</span>    NSRunLoop <span class="token operator">*</span>curRunLoop <span class="token operator">=</span> <span class="token punctuation">[</span>NSRunLoop currentRunLoop<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 获取当前 Runloop</span>    <span class="token comment">// 创建第一个观察者，监控 Runloop 是否处于运行状态</span>    CFRunLoopObserverContext context <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__bridge <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    CFRunLoopObserverRef beginObserver <span class="token operator">=</span> <span class="token function">CFRunLoopObserverCreate</span><span class="token punctuation">(</span>kCFAllocatorDefault<span class="token punctuation">,</span> kCFRunLoopAllActivities<span class="token punctuation">,</span> YES<span class="token punctuation">,</span> LONG_MIN<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myRunLoopBeginCallback<span class="token punctuation">,</span> <span class="token operator">&amp;</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CFRetain</span><span class="token punctuation">(</span>beginObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 保留观察者，防止被释放</span>    self<span class="token punctuation">.</span>runLoopBeginObserver <span class="token operator">=</span> beginObserver<span class="token punctuation">;</span>    <span class="token comment">// 创建第二个观察者，监控 Runloop 是否处于睡眠状态</span>    CFRunLoopObserverRef endObserver <span class="token operator">=</span> <span class="token function">CFRunLoopObserverCreate</span><span class="token punctuation">(</span>kCFAllocatorDefault<span class="token punctuation">,</span> kCFRunLoopAllActivities<span class="token punctuation">,</span> YES<span class="token punctuation">,</span> LONG_MAX<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myRunLoopEndCallback<span class="token punctuation">,</span> <span class="token operator">&amp;</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CFRetain</span><span class="token punctuation">(</span>endObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 保留观察者，防止被释放</span>    self<span class="token punctuation">.</span>runLoopEndObserver <span class="token operator">=</span> endObserver<span class="token punctuation">;</span>    <span class="token comment">// 将观察者添加到当前 Runloop 中</span>    CFRunLoopRef runloop <span class="token operator">=</span> <span class="token punctuation">[</span>curRunLoop getCFRunLoop<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">CFRunLoopAddObserver</span><span class="token punctuation">(</span>runloop<span class="token punctuation">,</span> beginObserver<span class="token punctuation">,</span> kCFRunLoopCommonModes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CFRunLoopAddObserver</span><span class="token punctuation">(</span>runloop<span class="token punctuation">,</span> endObserver<span class="token punctuation">,</span> kCFRunLoopCommonModes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 第一个观察者的回调函数，监控 Runloop 是否处于运行状态</span><span class="token keyword">void</span> <span class="token function">myRunLoopBeginCallback</span><span class="token punctuation">(</span>CFRunLoopObserverRef observer<span class="token punctuation">,</span> CFRunLoopActivity activity<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    HangMonitor <span class="token operator">*</span>monitor <span class="token operator">=</span> <span class="token punctuation">(</span>__bridge HangMonitor <span class="token operator">*</span><span class="token punctuation">)</span>info<span class="token punctuation">;</span>    g_runLoopActivity <span class="token operator">=</span> activity<span class="token punctuation">;</span>  <span class="token comment">// 更新全局变量，记录当前的 Runloop 活动状态</span>    g_runLoopMode <span class="token operator">=</span> eRunloopDefaultMode<span class="token punctuation">;</span>  <span class="token comment">// 更新全局变量，记录当前的 Runloop 模式</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>activity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> kCFRunLoopEntry<span class="token operator">:</span>            g_bRun <span class="token operator">=</span> YES<span class="token punctuation">;</span>  <span class="token comment">// 标记 Runloop 进入运行状态</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> kCFRunLoopBeforeTimers<span class="token operator">:</span>        <span class="token keyword">case</span> kCFRunLoopBeforeSources<span class="token operator">:</span>        <span class="token keyword">case</span> kCFRunLoopAfterWaiting<span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g_bRun <span class="token operator">==</span> NO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_tvRun<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 记录 Runloop 开始运行的时间</span>            <span class="token punctuation">&#125;</span>            g_bRun <span class="token operator">=</span> YES<span class="token punctuation">;</span>  <span class="token comment">// 标记 Runloop 处于运行状态</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> kCFRunLoopAllActivities<span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dispatch_semaphore_signal</span><span class="token punctuation">(</span>monitor<span class="token punctuation">.</span>semaphore<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 发送信号量</span><span class="token punctuation">&#125;</span><span class="token comment">// 第二个观察者的回调函数，监控 Runloop 是否处于睡眠状态</span><span class="token keyword">void</span> <span class="token function">myRunLoopEndCallback</span><span class="token punctuation">(</span>CFRunLoopObserverRef observer<span class="token punctuation">,</span> CFRunLoopActivity activity<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    HangMonitor <span class="token operator">*</span>monitor <span class="token operator">=</span> <span class="token punctuation">(</span>__bridge HangMonitor <span class="token operator">*</span><span class="token punctuation">)</span>info<span class="token punctuation">;</span>    g_runLoopActivity <span class="token operator">=</span> activity<span class="token punctuation">;</span>  <span class="token comment">// 更新全局变量，记录当前的 Runloop 活动状态</span>    g_runLoopMode <span class="token operator">=</span> eRunloopDefaultMode<span class="token punctuation">;</span>  <span class="token comment">// 更新全局变量，记录当前的 Runloop 模式</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>activity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> kCFRunLoopBeforeWaiting<span class="token operator">:</span>            <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_tvRun<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 记录 Runloop 进入睡眠状态的时间</span>            g_bRun <span class="token operator">=</span> NO<span class="token punctuation">;</span>  <span class="token comment">// 标记 Runloop 进入睡眠状态</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> kCFRunLoopExit<span class="token operator">:</span>            g_bRun <span class="token operator">=</span> NO<span class="token punctuation">;</span>  <span class="token comment">// 标记 Runloop 退出运行状态</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> kCFRunLoopAllActivities<span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dispatch_semaphore_signal</span><span class="token punctuation">(</span>monitor<span class="token punctuation">.</span>semaphore<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 发送信号量</span><span class="token punctuation">&#125;</span><span class="token comment">// 启动监控的方法</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>startMonitor <span class="token punctuation">&#123;</span>    <span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span>DISPATCH_QUEUE_PRIORITY_HIGH<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>YES<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token function">dispatch_semaphore_wait</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>semaphore<span class="token punctuation">,</span> <span class="token function">dispatch_time</span><span class="token punctuation">(</span>DISPATCH_TIME_NOW<span class="token punctuation">,</span> self<span class="token punctuation">.</span>timeoutInterval <span class="token operator">*</span> NSEC_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>g_runLoopActivity <span class="token operator">==</span> kCFRunLoopBeforeSources <span class="token operator">||</span> g_runLoopActivity <span class="token operator">==</span> kCFRunLoopAfterWaiting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token punctuation">[</span>self logStackTrace<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 记录调用栈</span>                    <span class="token punctuation">[</span>self reportHang<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 上报卡死</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 记录调用栈的方法</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>logStackTrace <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>callstack<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> frames <span class="token operator">=</span> <span class="token function">backtrace</span><span class="token punctuation">(</span>callstack<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>strs <span class="token operator">=</span> <span class="token function">backtrace_symbols</span><span class="token punctuation">(</span>callstack<span class="token punctuation">,</span> frames<span class="token punctuation">)</span><span class="token punctuation">;</span>    NSMutableString <span class="token operator">*</span>stackTrace <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableString stringWithString<span class="token operator">:</span>@<span class="token string">"\n"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> frames<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">[</span>stackTrace appendFormat<span class="token operator">:</span>@<span class="token string">"%s\n"</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span>@<span class="token string">"%@"</span><span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 上报卡死的方法</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>reportHang <span class="token punctuation">&#123;</span>    <span class="token comment">// 在这里实现上报后台分析的逻辑</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span>@<span class="token string">"检测到卡死崩溃，进行上报"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@end<span class="token comment">// 主函数，程序入口</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    @autoreleasepool <span class="token punctuation">&#123;</span>        HangMonitor <span class="token operator">*</span>monitor <span class="token operator">=</span> <span class="token punctuation">[</span>HangMonitor sharedInstance<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 获取 HangMonitor 单例</span>        <span class="token keyword">return</span> <span class="token function">UIApplicationMain</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> nil<span class="token punctuation">,</span> <span class="token function">NSStringFromClass</span><span class="token punctuation">(</span><span class="token punctuation">[</span>AppDelegate class<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 启动应用程序</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中 HangMonitor 类会在主线程的 RunLoop 活动中检测是否有长时间的卡顿，并在检测到卡顿时记录调用栈并上报后台进行分析。超时时间设定为 6 秒，以覆盖大部分用户感知场景并减少性能损耗。</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>iOS 中用引用计数（ARC）来管理对象的生命周期。在ARC之前，开发者需要手动管理对象的内存，通过retain、release、autorelease等方法来控制对象的生命周期。SideTables 是一个包含8个 SideTable 的哈希数组，用于存储对象的引用计数和弱引用信息。每个 SideTable 对应多个对象。SideTable 包含三个主要成员：自旋锁（<code>spinlock_t</code>）、引用计数表（<code>RefcountMap</code>）、弱引用表（<code>weak_table_t</code>）。自旋锁用于防止多线程访问冲突，引用计数表存储对象的引用计数，弱引用表存储对象的弱引用信息。<code>weak_table_t</code> 是一个存储弱引用信息的哈希表，其元素是 <code>weak_entry_t</code> 类型。<code>weak_entry_t</code> 存储了弱引用该对象的指针的指针，即<code>objc_object</code> <code>new_referrer</code>。当对象被销毁时，weak引用的指针会被自动置为nil，防止野指针的出现。</p><p>当两个类互相持有对方的强引用时，会导致循环引用问题，导致内存无法正确释放，这会造成内存不断的增多。这类问题通常发生在闭包与类实例之间。为了打破这种循环引用，可以在闭包中使用捕获列表（capture list）将闭包中的引用声明为弱引用或无主引用。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">class</span> <span class="token class-name">Element</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>        <span class="token keyword">lazy</span> <span class="token keyword">var</span> convertToWeb<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token keyword">unowned</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> description <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>description <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"&lt;div class='line'>&lt;h2></span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token keyword">self</span><span class="token punctuation">.</span>title</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&lt;/h2>&lt;p></span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">description</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&lt;/p>&lt;/div>"</span></span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"&lt;div class='line'>&lt;h2></span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token keyword">self</span><span class="token punctuation">.</span>title</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&lt;/h2>&lt;/div>"</span></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">init</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title        <span class="token keyword">self</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description    <span class="token punctuation">&#125;</span>        <span class="token keyword">deinit</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">title</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is being deinitialized"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> elm<span class="token punctuation">:</span> <span class="token class-name">Element</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token class-name">Element</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Inception"</span></span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"A mind-bending thriller by Christopher Nolan."</span></span><span class="token punctuation">)</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> html <span class="token operator">=</span> elm<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">convertToWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Clear"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                elm <span class="token operator">=</span> <span class="token nil constant">nil</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，convertToWeb 是一个闭包，使用了 [unowned self] 捕获列表，以避免闭包与 Element 实例之间的强引用循环。</p><p>Swift 通常通过引用计数和内存自动管理来保证内存安全，然而在某些高性能或特定底层操作中，开发者可能需要直接操作内存。这时就需要使用到 Swift 的 Unsafe 系列指针类型，例如 <code>UnsafeMutablePointer</code> 和 <code>UnsafePointer</code>。<code>UnsafePointer</code> 是一个指向某种类型的指针，它允许只读访问内存地址上的数据。这意味着你可以读取该地址的数据但不能修改它。相反，UnsafeMutablePointer 允许你修改指针指向的内存区域内的数据。使用 <code>UnsafeMutablePointer</code> 修改内存时，必须确保内存已经正确地分配且不会被其他代码同时访问。否则，可能会导致程序崩溃或出现难以调试的问题。Swift 提供的一些辅助工具 <code>withUnsafePointer(to:_:)</code> 和 <code>withUnsafeMutablePointer(to:_:)</code>，它们可以在有限的范围内确保内存操作的安全性。这些函数的使用可以帮助开发者避免一些常见的错误，确保指针的生命周期和作用域受到控制。</p><h3 id="OOM"><a href="#OOM" class="headerlink" title="OOM"></a>OOM</h3><p>内存泄漏，难以监控。内存泄漏是指程序在运行过程中，由于设计错误或者代码实现不当，导致程序未能释放已经不再使用的内存，从而造成系统内存的浪费，严重的会导致程序崩溃。内存泄漏是一个非常严重的问题，因为它会导致程序运行速度变慢，甚至会导致程序崩溃。因此，我们在开发过程中，一定要注意内存泄漏的问题。</p><p>OOM（Out Of Memory）指的是iOS设备上应用因内存占用过高被系统强制终止的现象。iOS通过Jetsam机制管理内存资源，当设备内存紧张时，会终止优先级低或内存占用大的进程。分为FOOM（前台OOM）和BOOM（后台OOM），FOOM对用户体验影响更大。</p><h3 id="Jetsam日志"><a href="#Jetsam日志" class="headerlink" title="Jetsam日志"></a>Jetsam日志</h3><p>包括pageSize（内存页大小）、states（应用状态）、rpages（占用的内存页数）、reason（终止原因）。通过pageSize和rpages可计算出应用崩溃时占用的内存大小。</p><p>在现代操作系统中，内存管理是一项关键任务。随着移动设备和桌面系统的复杂性增加，内存资源的高效使用变得更加重要。iOS和macOS通过引入“内存压力”（Memory Pressure）机制来优化内存管理，取代了传统的基于虚拟内存分页的管理方法。</p><p>虚拟内存系统允许操作系统将物理内存（RAM）和磁盘存储结合使用，以便在内存不足时将不常用的数据移至磁盘。分页（paging）是虚拟内存管理中的一种技术，它将内存划分为小块（页面），并根据需要将它们从物理内存交换到磁盘。然而，分页存在性能瓶颈，尤其是在存储访问速度远低于内存的情况下。</p><p>随着设备硬件的变化和用户体验要求的提高，苹果公司在iOS和macOS中引入了“内存压力”机制。内存压力是一种动态监测内存使用情况的技术，它能够实时评估系统内存的使用状态，并根据不同的压力级别采取相应的措施。</p><p>内存压力机制通过系统级别的反馈来管理内存。系统会监测内存的使用情况，并将压力分为四个级别：无压力（No Pressure）、轻度压力（Moderate Pressure）、重度压力（Critical Pressure）和紧急压力（Jetsam）。</p><p>压力级别的定义与响应：</p><ul><li><strong>无压力（No Pressure）</strong>：系统内存充足，没有特别的内存管理措施。</li><li><strong>轻度压力（Moderate Pressure）</strong>：系统内存开始紧张，操作系统会建议应用程序释放缓存或非必要的资源。</li><li><strong>重度压力（Critical Pressure）</strong>：系统内存非常紧张，操作系统可能会暂停后台任务或终止不活跃的应用程序。</li><li><strong>紧急压力（Jetsam）</strong>：这是最严重的内存压力状态，系统可能会直接强制关闭占用大量内存的应用程序，以释放资源确保系统的稳定性。</li></ul><p>系统对内存压力的应对措施</p><p>为了应对不同的内存压力，iOS和macOS系统采取了多种策略，包括：</p><ul><li><strong>缓存管理</strong>：系统会首先清除可丢弃的缓存数据，以减轻内存负担。</li><li><strong>后台任务管理</strong>：在压力增加时，操作系统会优先暂停或终止低优先级的后台任务。</li><li><strong>应用程序终止</strong>：在紧急情况下，系统会选择性地关闭那些占用大量内存且当前不活跃的应用程序，这一过程被称为“Jetsam”。</li></ul><p>使用系统提供的工具（如<code>vm_stat</code>、<code>memory_pressure</code>等）监测应用程序的内存使用情况。这些工具可以帮助开发者识别内存泄漏、过度的缓存使用等问题。开发者可以通过这些机制感知内存压力的变化。例如，当系统发出<code>UIApplicationDidReceiveMemoryWarningNotification</code>通知时，应用程序应立即释放不必要的资源。</p><h3 id="查看内存使用情况"><a href="#查看内存使用情况" class="headerlink" title="查看内存使用情况"></a>查看内存使用情况</h3><p>在 iOS 中，可以使用 <code>mach_task_basic_info</code> 结构体来查看应用的实际内存使用情况。<code>mach_task_basic_info</code> 是一个 <code>task_info</code> 结构体的子集，它提供了关于任务（进程）的基本信息，包括内存使用情况。特别地，你可以通过 <code>phys_footprint</code> 字段来获取应用程序实际占用的物理内存量。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Foundation</span><span class="token keyword">func</span> <span class="token function-definition function">getMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">UInt64</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token function">mach_task_basic_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token function">mach_msg_type_number_t</span><span class="token punctuation">(</span><span class="token class-name">MemoryLayout</span><span class="token operator">&lt;</span>mach_task_basic_info<span class="token operator">></span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>        <span class="token keyword">let</span> kret <span class="token operator">=</span> <span class="token function">withUnsafeMutablePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token operator">&amp;</span>info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> infoPtr <span class="token keyword">in</span>        infoPtr<span class="token punctuation">.</span><span class="token function">withMemoryRebound</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> integer_t<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> capacity<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> intPtr <span class="token keyword">in</span>            <span class="token function">task_info</span><span class="token punctuation">(</span>mach_task_self_<span class="token punctuation">,</span> <span class="token function">task_flavor_t</span><span class="token punctuation">(</span><span class="token constant">MACH_TASK_BASIC_INFO</span><span class="token punctuation">)</span><span class="token punctuation">,</span> intPtr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>count<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> kret <span class="token operator">==</span> <span class="token constant">KERN_SUCCESS</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> info<span class="token punctuation">.</span>phys_footprint    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Failed to get task info with error code </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">kret</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token nil constant">nil</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Usage</span><span class="token keyword">if</span> <span class="token keyword">let</span> memoryUsage <span class="token operator">=</span> <span class="token function">getMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Memory usage: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">memoryUsage <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> MB"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>mach_task_basic_info</code> 结构体用于存储基本信息，<code>task_info()</code> 函数用来填充这些信息，<code>phys_footprint</code> 字段提供了物理内存占用的实际数据。使用这些底层 API 需要适当的权限，有时可能无法在应用程序的沙盒环境中访问所有内存信息。</p><p>在 iOS 中，<code>NSProcessInfo</code> 的 <code>physicalMemory</code> 属性可以用来获取设备的总物理内存大小。这个属性返回一个 <code>NSUInteger</code> 类型的值，表示物理内存的大小（以字节为单位）。这个方法在 iOS 9 及更高版本中可用。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Foundation</span><span class="token keyword">func</span> <span class="token function-definition function">getPhysicalMemorySize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">UInt64</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> physicalMemory <span class="token operator">=</span> <span class="token class-name">ProcessInfo</span><span class="token punctuation">.</span>processInfo<span class="token punctuation">.</span>physicalMemory    <span class="token keyword">return</span> physicalMemory<span class="token punctuation">&#125;</span><span class="token comment">// Usage</span><span class="token keyword">let</span> memorySize <span class="token operator">=</span> <span class="token function">getPhysicalMemorySize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Total physical memory: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">memorySize <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> MB"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vm_statistics_data_t</code> 是一个与虚拟内存相关的数据结构，它提供了关于虚拟内存的统计信息，包括系统的内存使用情况。虽然它不能直接提供应用程序使用的内存，但它可以提供有关整个系统的虚拟内存状态的信息。使用 <code>vm_statistics_data_t</code> 可以获取有关系统内存的更详细的统计数据。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Foundation</span><span class="token keyword">import</span> <span class="token class-name">MachO</span><span class="token keyword">func</span> <span class="token function-definition function">getVMStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">(</span>freeMemory<span class="token punctuation">:</span> <span class="token class-name">UInt64</span><span class="token punctuation">,</span> usedMemory<span class="token punctuation">:</span> <span class="token class-name">UInt64</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> vmStats <span class="token operator">=</span> <span class="token function">vm_statistics_data_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token function">mach_msg_type_number_t</span><span class="token punctuation">(</span><span class="token class-name">MemoryLayout</span><span class="token operator">&lt;</span>vm_statistics_data_t<span class="token operator">></span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>    <span class="token keyword">var</span> hostPort<span class="token punctuation">:</span> mach_port_t <span class="token operator">=</span> <span class="token function">mach_host_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">withUnsafeMutablePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token operator">&amp;</span>vmStats<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> vmStatsPtr <span class="token keyword">in</span>        vmStatsPtr<span class="token punctuation">.</span><span class="token function">withMemoryRebound</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> integer_t<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> capacity<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> intPtr <span class="token keyword">in</span>            <span class="token comment">// 用于获取主机的统计信息。通过指定 `HOST_VM_INFO`，可以获取虚拟内存相关的数据。</span>            <span class="token function">host_statistics</span><span class="token punctuation">(</span>hostPort<span class="token punctuation">,</span> <span class="token constant">HOST_VM_INFO</span><span class="token punctuation">,</span> intPtr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>count<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token constant">KERN_SUCCESS</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> pageSize <span class="token operator">=</span> vm_kernel_page_size <span class="token comment">// 系统的页面大小（通常为 4096 字节）。</span>        <span class="token keyword">let</span> freeMemory <span class="token operator">=</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span>vmStats<span class="token punctuation">.</span>free_count<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span>        <span class="token keyword">let</span> usedMemory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UInt64</span><span class="token punctuation">(</span>vmStats<span class="token punctuation">.</span>active_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span>vmStats<span class="token punctuation">.</span>inactive_count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span>vmStats<span class="token punctuation">.</span>wire_count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>freeMemory<span class="token punctuation">,</span> usedMemory<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Failed to get VM statistics with error code </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">result</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token nil constant">nil</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Usage</span><span class="token keyword">if</span> <span class="token keyword">let</span> vmStats <span class="token operator">=</span> <span class="token function">getVMStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Free memory: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vmStats<span class="token punctuation">.</span>freeMemory <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> MB"</span></span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Used memory: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vmStats<span class="token punctuation">.</span>usedMemory <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> MB"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vm_statistics_data_t</code> 数据结构包含了有关虚拟内存的统计信息，如 <code>free_count</code>（自由页数）、<code>active_count</code>（活跃页数）、<code>inactive_count</code>（非活跃页数）和 <code>wire_count</code>（被锁定的页数）。</p><p>获取可用内存的方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Foundation</span><span class="token keyword">import</span> <span class="token class-name">MachO</span><span class="token keyword">func</span> <span class="token function-definition function">getAvailableMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">UInt64</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> vmStats <span class="token operator">=</span> <span class="token function">vm_statistics_data_t</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token function">mach_msg_type_number_t</span><span class="token punctuation">(</span><span class="token class-name">MemoryLayout</span><span class="token operator">&lt;</span>vm_statistics_data_t<span class="token operator">></span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>    <span class="token keyword">var</span> hostPort<span class="token punctuation">:</span> mach_port_t <span class="token operator">=</span> <span class="token function">mach_host_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">withUnsafeMutablePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token operator">&amp;</span>vmStats<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> vmStatsPtr <span class="token keyword">in</span>        vmStatsPtr<span class="token punctuation">.</span><span class="token function">withMemoryRebound</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> integer_t<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> capacity<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> intPtr <span class="token keyword">in</span>            <span class="token function">host_statistics</span><span class="token punctuation">(</span>hostPort<span class="token punctuation">,</span> <span class="token constant">HOST_VM_INFO</span><span class="token punctuation">,</span> intPtr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>count<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token constant">KERN_SUCCESS</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> pageSize <span class="token operator">=</span> vm_kernel_page_size        <span class="token keyword">let</span> freeMemory <span class="token operator">=</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span>vmStats<span class="token punctuation">.</span>free_count<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span>        <span class="token keyword">let</span> inactiveMemory <span class="token operator">=</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span>vmStats<span class="token punctuation">.</span>inactive_count<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span>        <span class="token keyword">return</span> freeMemory <span class="token operator">+</span> inactiveMemory    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Failed to get VM statistics with error code </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">result</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token nil constant">nil</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Usage</span><span class="token keyword">if</span> <span class="token keyword">let</span> availableMemory <span class="token operator">=</span> <span class="token function">getAvailableMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Available memory: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">availableMemory <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> MB"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>free_count</code> 表示系统中未使用的空闲内存页数。<code>inactive_count</code> 表示系统中未使用但可能会重新使用的内存页数。可用内存可以通过将空闲内存和非活跃内存的页数乘以页面大小来计算得到。</p><h3 id="造成内存泄漏的常见原因"><a href="#造成内存泄漏的常见原因" class="headerlink" title="造成内存泄漏的常见原因"></a>造成内存泄漏的常见原因</h3><p>内存泄漏指的是程序中已动态分配的堆内存由于某些原因未能释放或无法释放，导致系统内存浪费，程序运行速度变慢甚至系统崩溃。</p><ul><li>循环引用：对象A强引用对象B，对象B又强引用对象A，或多个对象互相强引用形成闭环。使用Weak-Strong Dance、断开持有关系（如使用__block关键字、将self作为参数传入block）。</li><li>Block导致的内存泄漏：Block会对其内部的对象强引用，容易形成循环引用。使用Weak-Strong Dance、断开持有关系（如将self作为参数传入block）。</li><li>NSTimer导致的内存泄漏：NSTimer的target-action机制容易导致self与timer之间的循环引用。在合适的时机销毁NSTimer、使用GCD的定时器、借助中介者（如NSObject对象或NSProxy子类）断开循环引用、使用iOS 10后提供的block方式创建timer。</li><li>委托模式中的内存泄漏：UITableView的delegate和dataSource、NSURLSession的delegate。根据具体场景选择使用weak或strong修饰delegate属性，或在请求结束时手动销毁session对象。</li><li>非OC对象的内存管理：CoreFoundation框架下的对象（如CI、CG、CF开头的对象）和C语言中的malloc分配的内存。使用完毕后需手动释放（如CFRelease、free）。</li></ul><h3 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h3><p>Metrics 和 XCTest 中的 memgraph 了解和诊断 Xcode 的内存性能问题。</p><h3 id="内存泄漏检测工具原理"><a href="#内存泄漏检测工具原理" class="headerlink" title="内存泄漏检测工具原理"></a>内存泄漏检测工具原理</h3><p>内存泄漏指的是程序在运行过程中，分配的内存未能及时释放，导致程序占用的内存持续增加。内存泄漏检测工具的基本原理是监控和管理对象的生命周期，检测那些在生命周期结束后仍未被释放的对象。</p><h3 id="FBRetainCycleDetector"><a href="#FBRetainCycleDetector" class="headerlink" title="FBRetainCycleDetector"></a>FBRetainCycleDetector</h3><p><code>FBRetainCycleDetector</code> 是由 Facebook 开源的一个用于检测 iOS 应用中的内存泄漏的工具。内存泄漏通常是由于对象之间的强引用循环导致的，<code>FBRetainCycleDetector</code> 的工作原理就是检测对象图中的强引用循环，进而帮助开发者识别和修复这些泄漏。</p><p><code>FBRetainCycleDetector</code> 的核心思想是通过分析对象之间的引用关系来识别可能的循环引用。它通过以下步骤实现这一点：</p><ul><li><strong>对象图构建</strong>：<code>FBRetainCycleDetector</code> 首先会从一个指定的对象开始，递归地遍历该对象的所有属性和关联对象，构建一个引用图。这个图的节点是对象，边是对象之间的强引用。</li><li>**深度优先搜索 (DFS)**：在构建完对象图之后，<code>FBRetainCycleDetector</code> 会对图进行深度优先搜索，寻找从起始对象到自身的循环路径。换句话说，它会查找路径起始和终止于同一个对象的闭环。</li><li><strong>循环检测</strong>：当找到一个循环路径时，<code>FBRetainCycleDetector</code> 就会将其标记为潜在的内存泄漏。检测到的循环会以易于理解的方式输出，帮助开发者定位和解决问题。</li></ul><p>为了避免不必要的检测，<code>FBRetainCycleDetector</code> 允许开发者定义一些属性过滤规则，忽略一些不会导致泄漏的引用。例如，可以跳过一些不可见的系统属性或自定义的非持有性引用。工具能够识别并忽略弱引用（<code>weak</code>或<code>unowned</code>），因为这些引用不会导致内存泄漏。<code>FBRetainCycleDetector</code> 具有较高的灵活性，开发者可以通过扩展和定制对象图的遍历规则，使其适应不同的应用场景和复杂对象结构。由于对象图的遍历和循环检测可能会带来性能开销，<code>FBRetainCycleDetector</code> 主要用于开发和调试阶段，而不建议在生产环境中长期使用。</p><p>通常，<code>FBRetainCycleDetector</code> 会在调试时被使用。开发者可以通过简单的代码调用，检测指定对象是否存在循环引用。例如：</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">FBRetainCycleDetector *detector &#x3D; [FBRetainCycleDetector new];[detector addCandidate:someObject];NSSet *retainCycles &#x3D; [detector findRetainCycles];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过以上代码，可以查找<code>someObject</code> 是否存在循环引用，并返回检测到的循环路径。</p><p>在实际应用中，<code>FBRetainCycleDetector</code> 被广泛用于检测复杂的对象之间的引用关系，特别是在自定义控件、大型视图控制器、网络回调等场景下，容易产生强引用循环的问题。通过早期检测和解决这些循环引用，可以大大提高应用的内存管理效率，减少内存泄漏带来的问题。</p><h3 id="MLeaksFinder"><a href="#MLeaksFinder" class="headerlink" title="MLeaksFinder"></a>MLeaksFinder</h3><p><a href="https://github.com/Tencent/MLeaksFinder">MLeaksFinder</a> 是一款由腾讯 WeRead 团队开源的 iOS 内存泄漏检测工具，其原理主要基于对象生命周期的监控和延迟检测机制。</p><p>MLeaksFinder 通过为基类 NSObject 添加一个 <code>-willDealloc</code> 方法来监控对象的生命周期。当对象应该被释放时（例如，ViewController 被 pop 或 dismiss 后），该方法被调用。在 <code>-willDealloc</code> 方法中，MLeaksFinder 使用一个弱指针（weak pointer）指向待检测的对象，以避免因为对象已经被释放而导致的野指针访问问题。MLeaksFinder 通过检查视图控制器的生命周期来检测内存泄漏。每个 <code>UIViewController</code> 都有一个 <code>viewDidDisappear</code> 方法，这个方法会在视图控制器从屏幕上消失时被调用。MLeaksFinder 通过在 <code>viewDidDisappear</code> 被调用时，检测该视图控制器是否已经被释放，如果没有被释放则认为存在内存泄漏。对于视图 (<code>UIView</code>)，MLeaksFinder 会在视图被从其父视图中移除时（即 <code>removeFromSuperview</code> 调用后）检查视图是否已经被释放。如果视图没有被释放，则认为存在内存泄漏。MLeaksFinder 通过扩展 <code>NSObject</code> 的功能（即为 <code>NSObject</code> 添加一个 Category）来追踪对象的生命周期。当对象的 <code>dealloc</code> 方法没有在预期的时间内被调用时，就可以判断该对象是否泄漏。</p><p>在 <code>-willDealloc</code> 方法中，MLeaksFinder 使用 <code>dispatch_after</code> 函数在 GCD（Grand Central Dispatch）的主队列上设置一个延迟（通常是2到3秒）执行的 block。这个 block 在延迟时间后执行，尝试通过之前设置的弱指针访问对象。如果对象已经被释放（即弱指针为 nil），则认为没有内存泄漏；如果对象仍然存活，则认为存在内存泄漏。MLeaksFinder 通过将对象的检测任务加入到下一个 Runloop 中执行，从而避免在当前线程中直接执行检测操作。这种方式确保了不会影响主线程的性能，同时能在适当的时间进行内存泄漏的检测。</p><p>如果在延迟时间后对象仍然存活，MLeaksFinder 会执行相应的检测逻辑，并可能通过断言（assertion）中断应用（具体行为可能根据配置和版本有所不同）。MLeaksFinder 会在应用运行时自动检测内存泄漏，不需要开发者手动触发。检测到内存泄漏后，MLeaksFinder 通常会弹出警告框（alert）或通过日志（log）输出相关信息，帮助开发者定位和解决内存泄漏问题。</p><p>MLeaksFinder 使用了方法交换技术替换如<code>dismissViewControllerAnimated:completion:</code>等方法，确保释放时触发检测。调用<code>willDealloc</code>方法，设置延时检查对象是否已释放。若未释放，则进入<code>assertNotDealloc</code>方法，中断言提醒开发者。</p><p>当 MLeaksFinder 检测到潜在的内存泄漏时，它还可以打印堆栈信息，帮助开发者找出导致对象无法释放的具体代码路径。通过<code>willReleaseChild</code>、<code>willReleaseChildren</code>方法构建子对象的释放堆栈信息。这通常通过递归遍历子对象，并将父对象和子对象的类名组合成视图堆栈（view stack）来实现。</p><p>MLeaksFinder 还可能集成了循环引用检测功能，使用如 Facebook 的 FBRetainCycleDetector 这样的工具来找出由 block 等造成的循环引用问题。MLeaksFinder 提供了一种白名单机制，允许开发者将一些特定的对象排除在泄漏检测之外。这在某些对象确实需要持久存在的场景下非常有用。MLeaksFinder 非常轻量，不会显著影响应用的性能。集成简单，自动化检测，极大地方便了开发者发现内存泄漏问题。在某些复杂的情况下，可能会有误报（即认为对象泄漏了，但实际上没有）。</p><h3 id="PLeakSniffer"><a href="#PLeakSniffer" class="headerlink" title="PLeakSniffer"></a>PLeakSniffer</h3><p><a href="https://github.com/music4kid/PLeakSniffer">PLeakSniffer</a>是一个用于检测iOS应用程序中内存泄漏的工具。PLeakSniffer的基本工作原理：通过对控制器和视图对象设置弱引用，并使用单例对象周期性地发送ping通知，如果对象在控制器已释放的情况下仍然响应通知，则可能存在内存泄漏。</p><p><code>PLeakSnifferCitizen</code>协议的设计及其在<code>NSObject</code>、<code>UIViewController</code>、<code>UINavigationController</code>和<code>UIView</code>中的实现。每个类都通过实现<code>prepareForSniffer</code>方法来挂钩适当的生命周期方法（如<code>viewDidAppear</code>、<code>pushViewController</code>等），在适当的时机调用<code>markAlive</code>方法，将代理对象附加到被监测的对象上，以便后续的ping操作能够检测到对象的存活状态。</p><p>代理对象<code>PObjectProxy</code>的功能，它主要负责接收ping通知并检查宿主对象是否应当被释放，如果检测到可能的内存泄漏，就会触发警报或打印日志。通过这种方式，<code>PLeakSniffer</code>能够在运行时检测到iOS应用中可能存在的内存泄漏问题。</p><h3 id="其他内存泄漏检测工具"><a href="#其他内存泄漏检测工具" class="headerlink" title="其他内存泄漏检测工具"></a>其他内存泄漏检测工具</h3><ul><li><a href="https://github.com/krzysztofzablocki/LifetimeTracker">LifetimeTracker</a></li></ul><h3 id="hook-malloc方法"><a href="#hook-malloc方法" class="headerlink" title="hook malloc方法"></a>hook malloc方法</h3><p>要在 iOS 上 hook malloc 方法可以监控内存分配。可以使用函数拦截技术。以下是一个示例，展示如何使用 Fishhook 库来 hook malloc 方法。</p><p>将 Fishhook 库添加到你的项目中。你可以通过 CocoaPods 或手动添加 Fishhook 源代码。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token other-directive property">#import</span> <span class="token operator">&lt;</span><span class="token class-name">Foundation</span><span class="token operator">/</span><span class="token class-name">Foundation</span><span class="token punctuation">.</span>h<span class="token operator">></span><span class="token other-directive property">#import</span> <span class="token operator">&lt;</span>malloc<span class="token operator">/</span>malloc<span class="token punctuation">.</span>h<span class="token operator">></span><span class="token other-directive property">#import</span> <span class="token string-literal"><span class="token string">"fishhook.h"</span></span><span class="token comment">// 原始 malloc 函数指针</span><span class="token keyword">static</span> void<span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>original_malloc<span class="token punctuation">)</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自定义 malloc 函数</span>void<span class="token operator">*</span> <span class="token function">custom_malloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    void <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token function">original_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">NSLog</span><span class="token punctuation">(</span>@<span class="token string-literal"><span class="token string">"Allocated %zu bytes at %p"</span></span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Hook 函数</span>void <span class="token function">hookMalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 重新绑定 malloc 函数</span>    <span class="token function">rebind_symbols</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rebinding<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">"malloc"</span></span><span class="token punctuation">,</span> custom_malloc<span class="token punctuation">,</span> <span class="token punctuation">(</span>void <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>original_malloc<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>int <span class="token function">main</span><span class="token punctuation">(</span>int argc<span class="token punctuation">,</span> const char <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@autoreleasepool</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Hook malloc</span>        <span class="token function">hookMalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 测试 malloc 和 free</span>        void <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实际项目中使用时，注意性能开销和日志记录的影响。</p><h3 id="malloc-logger"><a href="#malloc-logger" class="headerlink" title="malloc logger"></a>malloc logger</h3><p><code>malloc_logger</code> 是 iOS 和 macOS 中用于内存分配调试的一个工具。它允许开发者设置一个自定义的日志记录器函数，以便在内存分配和释放操作发生时记录相关信息。通过使用 <code>malloc_logger</code>，开发者可以更容易地检测和诊断内存问题，如内存泄漏、过度分配等。</p><p>以下是一个使用 Objective-C 实现的示例，展示如何设置和使用 <code>malloc_logger</code>：</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">#import &lt;Foundation&#x2F;Foundation.h&gt;#import &lt;malloc&#x2F;malloc.h&gt;&#x2F;&#x2F; 定义自定义的 malloc logger 函数void custom_malloc_logger(uint32_t type, uintptr_t arg1, uintptr_t arg2, uintptr_t result, uintptr_t num_bytes) &#123;    switch (type) &#123;        case MALLOC_LOG_TYPE_ALLOCATE:            NSLog(@&quot;Allocated %lu bytes at %p&quot;, (unsigned long)num_bytes, (void *)result);            break;        case MALLOC_LOG_TYPE_DEALLOCATE:            NSLog(@&quot;Deallocated memory at %p&quot;, (void *)arg1);            break;        case MALLOC_LOG_TYPE_HAS_ZONE:            NSLog(@&quot;Memory operation with zone at %p&quot;, (void *)arg1);            break;        default:            break;    &#125;&#125;&#x2F;&#x2F; 设置自定义的 malloc loggervoid setCustomMallocLogger() &#123;    malloc_logger &#x3D; custom_malloc_logger;&#125;int main(int argc, const char * argv[]) &#123;    @autoreleasepool &#123;        &#x2F;&#x2F; 设置自定义 malloc logger        setCustomMallocLogger();                &#x2F;&#x2F; 测试 malloc 和 free        void *ptr &#x3D; malloc(1024);        free(ptr);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们定义了一个自定义的 <code>malloc_logger</code> 函数 <code>custom_malloc_logger</code>，并在 <code>setCustomMallocLogger</code> 函数中将其设置为当前的 <code>malloc_logger</code>。然后，在 <code>main</code> 函数中，我们测试了内存的分配和释放操作，并通过日志记录器记录这些操作的信息。</p><p>通过这种方式，开发者可以在内存分配和释放时记录相关信息，从而更好地理解和优化应用程序的内存使用情况。</p><h3 id="内存快照检测方案"><a href="#内存快照检测方案" class="headerlink" title="内存快照检测方案"></a>内存快照检测方案</h3><p>扫描进程中所有Dirty内存，建立内存节点之间的引用关系有向图，用于内存问题的分析定位。</p><p>在 iOS 中，可以使用 vm_region_recurse_64 函数来获取所有内存区域的信息。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mach/mach.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mach/vm_map.h></span>  </span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">mach_port_t</span> task <span class="token operator">=</span> <span class="token function">mach_task_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">vm_address_t</span> address <span class="token operator">=</span> VM_MIN_ADDRESS<span class="token punctuation">;</span>      <span class="token class-name">vm_size_t</span> size <span class="token operator">=</span> VM_MAX_ADDRESS <span class="token operator">-</span> VM_MIN_ADDRESS<span class="token punctuation">;</span>      <span class="token class-name">vm_region_basic_info_data_64_t</span> info<span class="token punctuation">;</span>      <span class="token class-name">mach_msg_type_number_t</span> info_count <span class="token operator">=</span> VM_REGION_BASIC_INFO_COUNT_64<span class="token punctuation">;</span>      <span class="token class-name">memory_object_name_t</span> object_name<span class="token punctuation">;</span>      <span class="token class-name">mach_port_t</span> object_handle<span class="token punctuation">;</span>        <span class="token class-name">kern_return_t</span> kr<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          kr <span class="token operator">=</span> <span class="token function">vm_region_recurse_64</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">,</span> VM_REGION_BASIC_INFO<span class="token punctuation">,</span>                                    <span class="token punctuation">(</span><span class="token class-name">vm_region_info_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>info_count<span class="token punctuation">,</span> <span class="token operator">&amp;</span>object_name<span class="token punctuation">,</span>                                    <span class="token operator">&amp;</span>object_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>kr <span class="token operator">!=</span> KERN_SUCCESS<span class="token punctuation">)</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Address: 0x%llx, Size: 0x%llx, Protection: 0x%x, In Use: %s\n"</span><span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>info<span class="token punctuation">.</span>protection<span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>info<span class="token punctuation">.</span>size<span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>info<span class="token punctuation">.</span>protection<span class="token punctuation">,</span>                 info<span class="token punctuation">.</span>is_submap <span class="token operator">?</span> <span class="token string">"Yes"</span> <span class="token operator">:</span> <span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            address <span class="token operator">+=</span> info<span class="token punctuation">.</span>size<span class="token punctuation">;</span>          size <span class="token operator">-=</span> info<span class="token punctuation">.</span>size<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>kr <span class="token operator">!=</span> KERN_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">char</span> <span class="token operator">*</span>err <span class="token operator">=</span> <span class="token function">mach_error_string</span><span class="token punctuation">(</span>kr<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"vm_region_recurse_64 failed: %s\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">free</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在iOS中，可以使用<code>libmalloc</code>库提供的<code>malloc_get_all_zones</code>函数来获取所有内存区域（zone）的信息。<code>malloc_get_all_zones</code>可以遍历所有的内存区域，并为每个区域执行一个回调函数，从而获取详细的内存分配信息。</p><p>以下是一个简单的代码示例，展示如何使用<code>malloc_get_all_zones</code>来获取并打印内存区域的信息：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>malloc<span class="token operator">/</span>malloc<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>mach<span class="token operator">/</span>mach<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token comment">// 自定义的回调函数，用于处理每个内存区域的块。该函数用于处理每个zone中的内存块，在这个例子中，它简单地打印出每个内存块的地址和大小。</span><span class="token keyword">void</span> <span class="token function">my_zone_enumerator</span><span class="token punctuation">(</span><span class="token class-name">task_t</span> task<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>context<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> type_mask<span class="token punctuation">,</span> <span class="token class-name">vm_range_t</span> <span class="token operator">*</span>ranges<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> range_count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> range_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Memory range: 0x%llx, Size: %llu\n"</span><span class="token punctuation">,</span> ranges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token punctuation">,</span> ranges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print_all_zones</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取当前任务的mach port。用于获取当前任务的Mach端口，这对于与Mach内核通信是必需的。</span>    <span class="token class-name">task_t</span> task <span class="token operator">=</span> <span class="token function">mach_task_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token comment">// 这是`libmalloc`库中的一个结构体，表示内存区域。通过调用其`introspect`属性下的`enumerator`函数，可以遍历该zone中的所有内存块。</span>    <span class="token class-name">malloc_zone_t</span> <span class="token operator">*</span><span class="token operator">*</span>zones <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">// 获取所有的内存区域。这个函数返回当前任务的所有内存区域（zone），这些zone通常对应于不同的分配器或内存池。</span>    <span class="token class-name">kern_return_t</span> kr <span class="token operator">=</span> <span class="token function">malloc_get_all_zones</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>zones<span class="token punctuation">,</span> <span class="token operator">&amp;</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>kr <span class="token operator">!=</span> KERN_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Error: Unable to get all zones\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 遍历所有的zone</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">malloc_zone_t</span> <span class="token operator">*</span>zone <span class="token operator">=</span> zones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>zone <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Zone name: %s\n"</span><span class="token punctuation">,</span> zone<span class="token operator">-></span>zone_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 枚举zone中的内存块</span>            zone<span class="token operator">-></span>introspect<span class="token operator">-></span><span class="token function">enumerator</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> MALLOC_PTR_IN_USE_RANGE_TYPE<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">vm_address_t</span><span class="token punctuation">)</span>zone<span class="token punctuation">,</span> my_zone_enumerator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print_all_zones</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用单独的 <code>malloc_zone</code> 管理采集模块的内存使用，减少非法内存访问。遍历进程内所有VM Region（虚拟内存区域），获取Dirty和Swapped内存页数。重点关注libmalloc管理的堆内存，获取存活内存节点的指针和大小。</p><p>为内存节点赋予详细的类型名称，如<code>Objective-C/Swift/C++</code>实例类名等。通过运行时信息和mach-o、C++ ABI文档获取C++对象的类型信息。遍历内存节点，搜索并确认节点间的引用关系。对栈内存和<code>Objective-C/Swift</code>堆内存进行特殊处理，获取更详细的引用信息。</p><p>后台线程定时检测内存占用，超过设定的危险阈值后触发内存分析。内存分析过程中，对内存节点进行引用关系分析，生成内存节点之间的引用关系有向图。通过图算法，找到内存泄漏的根原因。</p><h3 id="libmalloc-内存日志分析"><a href="#libmalloc-内存日志分析" class="headerlink" title="libmalloc 内存日志分析"></a>libmalloc 内存日志分析</h3><p>通过代码控制内存日志开关，可以在内存泄漏发生时，输出内存日志。内存日志包括内存分配、释放、引用计数变化等信息，用于分析内存泄漏的原因。</p><p>在 iOS 开发中，<code>libmalloc</code> 提供了 <code>turn_on_stack_logging</code> 和 <code>turn_off_stack_logging</code> 方法，用于启用和禁用堆栈日志记录。这些方法可以帮助开发者在调试和分析内存问题时记录内存分配的堆栈信息。以下是一个使用这些方法的代码示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>Foundation<span class="token operator">/</span>Foundation<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>malloc<span class="token operator">/</span>malloc<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>mach<span class="token operator">/</span>mach<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>mach<span class="token operator">/</span>mach_init<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>mach<span class="token operator">/</span>mach_vm<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token comment">// 启用堆栈日志记录</span><span class="token keyword">void</span> <span class="token function">enableStackLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">turn_on_stack_logging</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span>@<span class="token string">"Stack logging turned on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 禁用堆栈日志记录</span><span class="token keyword">void</span> <span class="token function">disableStackLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">turn_off_stack_logging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span>@<span class="token string">"Stack logging turned off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取堆栈日志记录</span><span class="token keyword">void</span> <span class="token function">getStackLoggingRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取当前任务</span>    <span class="token class-name">task_t</span> task <span class="token operator">=</span> <span class="token function">mach_task_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取所有堆栈日志记录</span>    <span class="token class-name">mach_vm_address_t</span> <span class="token operator">*</span>records<span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span> count<span class="token punctuation">;</span>    <span class="token class-name">kern_return_t</span> kr <span class="token operator">=</span> <span class="token function">__mach_stack_logging_enumerate_records</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token operator">&amp;</span>records<span class="token punctuation">,</span> <span class="token operator">&amp;</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>kr <span class="token operator">!=</span> KERN_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">NSLog</span><span class="token punctuation">(</span>@<span class="token string">"Failed to enumerate stack logging records: %s"</span><span class="token punctuation">,</span> <span class="token function">mach_error_string</span><span class="token punctuation">(</span>kr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">mach_vm_address_t</span> record <span class="token operator">=</span> records<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">NSLog</span><span class="token punctuation">(</span>@<span class="token string">"Record %u: %p"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 定义堆栈帧数组</span>        <span class="token class-name">uint64_t</span> frames<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 获取堆栈帧信息</span>        <span class="token class-name">uint32_t</span> frameCount <span class="token operator">=</span> <span class="token function">__mach_stack_logging_frames_for_uniqued_stack</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> record<span class="token punctuation">,</span> frames<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 遍历堆栈帧，每次循环中，获取当前堆栈帧地址并打印地址信息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> frameCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">NSLog</span><span class="token punctuation">(</span>@<span class="token string">"Frame %u: %p"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>frames<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 释放记录数组</span>    <span class="token function">vm_deallocate</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">vm_address_t</span><span class="token punctuation">)</span>records<span class="token punctuation">,</span> count <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">mach_vm_address_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 示例函数，分配一些内存</span><span class="token keyword">void</span> <span class="token function">allocateMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 主函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    @autoreleasepool <span class="token punctuation">&#123;</span>        <span class="token comment">// 启用堆栈日志记录</span>        <span class="token function">enableStackLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 分配内存</span>        <span class="token function">allocateMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取堆栈日志记录</span>        <span class="token function">getStackLoggingRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 禁用堆栈日志记录</span>        <span class="token function">disableStackLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们首先调用 turn_on_stack_logging 方法来启用堆栈日志记录，然后进行一些内存分配和释放操作。接着，我们调用 <code>__mach_stack_logging_enumerate_records</code> 方法获取所有堆栈日志记录，并使用 <code>__mach_stack_logging_frames_for_uniqued_stack</code> 方法解析每个日志记录以获取堆栈帧信息。最后，我们调用 <code>turn_off_stack_logging</code> 方法来禁用堆栈日志记录。</p><p>通过这种方式，开发者可以在需要时启用和禁用堆栈日志记录，并解析这些日志记录以获取详细的堆栈信息。需要注意的是，这些函数在实际项目中使用时，需要确保在合适的时机启用和禁用堆栈日志记录，以避免性能开销和不必要的日志记录。</p><h2 id="IO-性能"><a href="#IO-性能" class="headerlink" title="IO 性能"></a>IO 性能</h2><p>文件写操作常见但易出错。常见问题包括数据不一致、数据丢失、性能波动等。</p><h3 id="读写的-API"><a href="#读写的-API" class="headerlink" title="读写的 API"></a>读写的 API</h3><p>文件读写系统调用的 API 有 <code>read()</code> 和 <code>write()</code>。<code>read()</code>从文件读取数据到应用内存。<code>write()</code>将数据从应用内存写入文件到内核缓存，但不保证立即写入磁盘。<code>mmap()</code>将文件映射到应用内存，直接访问，但写操作同样先进入内核缓存。<code>fsync()</code> 和 <code>fcntl(F_FULLSYNC)</code> 会强制将文件写入磁盘。c标准库提供的文件读写 API 是 <code>fwrite(buffer, sizeof(char), size, file_pointer)</code> 和 <code>fflush(file_pointer)</code>。</p><p>iOS 提供了 <code>NSFileManager</code> 的 <code>replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:</code> 方法，可以实现原子性操作。</p><p><code>flock</code> 或 <code>fcntl</code> 使用文件锁防止多个进程或线程同时写入同一个文件，避免产生竞争条件，保证数据一致性。</p><p>iOS 提供了 <code>NSFileManager</code> 和 <code>NSData</code> 的封装方法，通常比直接使用 POSIX API 更安全和高效。</p><p>测试文件I&#x2F;O性能时，应通过 <code>fcntl(fd, F_NOCACHE, 1)</code> 禁用统一缓冲缓存（UBC），以避免缓存影响测试结果。</p><h3 id="文件缓存"><a href="#文件缓存" class="headerlink" title="文件缓存"></a>文件缓存</h3><p>文件缓存可以帮助优化应用性能、减少网络请求和延长电池续航。</p><p>iOS 提供了多个文件存储目录，选择合适的目录有助于管理缓存文件的生命周期。包括Caches 目录和tmp 目录。Caches 目录适合存储缓存文件。系统可能会在磁盘空间紧张时清除这个目录下的文件，因此不应存储重要数据。可以通过 <code>NSSearchPathForDirectoriesInDomains(.cachesDirectory, .userDomainMask, true)</code> 获取路径。tmp 目录适用于临时文件。系统重启或应用未运行时，可能会清除这个目录下的文件。可以通过 <code>NSTemporaryDirectory()</code> 获取路径。</p><p>根据数据的重要性和更新频率，制定缓存策略。为缓存数据设置时间戳或过期时间。每次读取缓存时检查数据是否过期，及时更新。实现 LRU 算法，定期清理最久未使用的缓存文件。</p><p>为缓存文件生成唯一标识符（如使用哈希值），避免文件名冲突。可以将 URL 的 MD5 或 SHA1 哈希值作为缓存文件名。将缓存文件按类别或特定属性进行分类存储，方便管理。例如，将图片和JSON数据分别存储在不同的子目录中。</p><p>对于大型缓存数据，可以在写入文件时使用 GZIP 等压缩技术，减少存储空间占用。iOS 的 <code>NSData</code> 和 <code>NSFileManager</code> 支持数据的压缩和解压缩。避免在主线程上执行缓存读写操作，使用 Swift Concurrency 将缓存操作移到后台，保持 UI 的流畅性。减少频繁的写入操作，可以将多次写入合并为一次批量操作。</p><p>对于敏感数据（如用户信息），应在缓存时进行加密处理。iOS 提供了 <code>Keychain</code> 进行安全存储，也可以使用 <code>CommonCrypto</code> 框架进行自定义加密。</p><p>定期清理过期或不再使用的缓存文件，避免占用过多磁盘空间。可以使用 iOS 的 <code>NSURLCache</code> 设置缓存大小限制，自动管理缓存清理。提供手动清理缓存的选项，允许用户在应用内清理缓存数据。根据数据更新频率设置缓存失效时间，确保用户获得最新数据。可以通过 ETag 或 Last-Modified HTTP 头实现增量更新，避免每次都下载完整数据。尽量利用 iOS 自带的缓存机制，例如 <code>NSURLCache</code>，它自动管理 HTTP 请求的缓存，支持内存和磁盘缓存。对于图片缓存，使用 <code>NSCache</code> 或者第三方库，可以在内存和磁盘之间自动管理图片的缓存。</p><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p><code>mmap</code> 是一种内存映射文件的机制，允许用户态的程序像操作内存一样直接操作磁盘文件。通过 <code>mmap</code>，文件的内容被映射到进程的地址空间中，程序可以直接读写这段地址空间，操作系统会在背后处理实际的磁盘读写操作。标准IO（如read&#x2F;write）涉及系统调用和内存拷贝开销，数据需要在内核态和用户态之间来回拷贝。<code>mmap</code> 避免了这些开销，因为它直接在用户态的内存中操作，操作系统只在需要时（如缺页中断）介入处理磁盘读写。</p><p>对于超过物理内存大小的大文件，<code>mmap</code> 可以利用虚拟内存的特性，在有限的物理内存中处理大文件。多个进程可以映射同一个文件到各自的地址空间，实现内存共享，这在动态链接库等场景中非常有用。在某些场景下，<code>mmap</code> 可以提供更好的性能，因为它减少了系统调用和内存拷贝的次数。但具体性能取决于应用场景和操作系统实现。在处理大文件时，<code>mmap</code> 可以避免频繁的内存拷贝和磁盘I&#x2F;O操作。多个进程可以共享同一个动态链接库，节省内存和磁盘空间。可用于实现高效的内存文件交换，如数据库中的内存映射文件。</p><p><code>mmap</code> 也有些问题需要注意。当访问的页面不在物理内存中时，会发生缺页中断，这会有一定的性能开销。为了维护地址空间与文件的映射关系，内核需要额外的数据结构，这也会带来一定的性能开销。</p><p>我们使用 mmap 将文件映射到内存中，并读取文件内容。示例如下：</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">#import &lt;Foundation&#x2F;Foundation.h&gt;#import &lt;sys&#x2F;mman.h&gt;#import &lt;fcntl.h&gt;#import &lt;unistd.h&gt;void mmapExample() &#123;    &#x2F;&#x2F; 文件路径    NSString *filePath &#x3D; @&quot;&#x2F;path&#x2F;to&#x2F;your&#x2F;file.txt&quot;;        &#x2F;&#x2F; 打开文件    int fd &#x3D; open([filePath UTF8String], O_RDONLY);    if (fd &#x3D;&#x3D; -1) &#123;        NSLog(@&quot;Failed to open file&quot;);        return;    &#125;        &#x2F;&#x2F; 获取文件大小    off_t fileSize &#x3D; lseek(fd, 0, SEEK_END);    if (fileSize &#x3D;&#x3D; -1) &#123;        NSLog(@&quot;Failed to get file size&quot;);        close(fd);        return;    &#125;        &#x2F;&#x2F; 将文件映射到内存    void *mappedFile &#x3D; mmap(NULL, fileSize, PROT_READ, MAP_PRIVATE, fd, 0);    if (mappedFile &#x3D;&#x3D; MAP_FAILED) &#123;        NSLog(@&quot;Failed to map file&quot;);        close(fd);        return;    &#125;        &#x2F;&#x2F; 关闭文件描述符    close(fd);        &#x2F;&#x2F; 读取文件内容    NSData *fileData &#x3D; [NSData dataWithBytes:mappedFile length:fileSize];    NSString *fileContent &#x3D; [[NSString alloc] initWithData:fileData encoding:NSUTF8StringEncoding];    NSLog(@&quot;File content: %@&quot;, fileContent);        &#x2F;&#x2F; 解除文件映射    if (munmap(mappedFile, fileSize) &#x3D;&#x3D; -1) &#123;        NSLog(@&quot;Failed to unmap file&quot;);    &#125;&#125;int main(int argc, const char * argv[]) &#123;    @autoreleasepool &#123;        mmapExample();    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MMKV 是腾讯开源的一个高性能通用键值对存储库，基于 mmap 内存映射机制，它提供了简单易用的接口，支持高效的读写操作，并且支持数据加密。</p><p>以下是一个在 iOS 项目中使用 MMKV 的示例代码：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">UIKit</span><span class="token keyword">import</span> <span class="token constant">MMKV</span><span class="token attribute atrule">@UIApplicationMain</span><span class="token keyword">class</span> <span class="token class-name">AppDelegate</span><span class="token punctuation">:</span> <span class="token class-name">UIResponder</span><span class="token punctuation">,</span> <span class="token class-name">UIApplicationDelegate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> window<span class="token punctuation">:</span> <span class="token class-name">UIWindow</span><span class="token operator">?</span>    <span class="token keyword">func</span> <span class="token function-definition function">application</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> application<span class="token punctuation">:</span> <span class="token class-name">UIApplication</span><span class="token punctuation">,</span> didFinishLaunchingWithOptions launchOptions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">UIApplication</span><span class="token punctuation">.</span><span class="token class-name">LaunchOptionsKey</span><span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Bool</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化 MMKV</span>        <span class="token constant">MMKV</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>rootDir<span class="token punctuation">:</span> <span class="token constant">MMKV</span><span class="token punctuation">.</span>defaultMMKVPath<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 MMKV 存储和读取数据</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token constant">MMKV</span><span class="token keyword">func</span> <span class="token function-definition function">mmkvExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取默认的 MMKV 实例</span>    <span class="token keyword">let</span> mmkv <span class="token operator">=</span> <span class="token constant">MMKV</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 存储数据</span>    mmkv<span class="token operator">?</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Inception"</span></span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"movieTitle"</span></span><span class="token punctuation">)</span>    mmkv<span class="token operator">?</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token number">8.8</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"movieRating"</span></span><span class="token punctuation">)</span>    <span class="token comment">// 读取数据</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> movieTitle <span class="token operator">=</span> mmkv<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"movieTitle"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Movie Title: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">movieTitle</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> movieRating <span class="token operator">=</span> mmkv<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"movieRating"</span></span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Movie Rating: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">movieRating <span class="token operator">??</span> <span class="token number">0.0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">mmkvExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NSData</code> 提供了三个与 mmap 相关的读取选项，它们分别是：</p><ul><li><code>NSDataReadingUncached</code>：这个选项表示不要缓存数据，如果文件只需要读取一次，使用这个选项可以提高性能。这个选项与 mmap 没有直接关系，因为它不涉及内存映射。</li><li><code>NSDataReadingMappedIfSafe</code>：这个选项表示在保证安全的前提下，如果条件允许，则使用 mmap 进行内存映射。这意味着如果文件位于固定磁盘（非可移动磁盘或网络磁盘），则可能会使用 mmap 来优化读取性能。</li><li><code>NSDataReadingMappedAlways</code>：这个选项表示总是使用 mmap 进行内存映射，不考虑文件的具体存储位置。但是，在 iOS 上，由于所有应用都运行在沙盒中，对 iOS 而言，<code>NSDataReadingMappedIfSafe</code> 和 <code>NSDataReadingMappedAlways</code> 通常是等价的，因为 iOS 设备上的文件存储通常都是在固定磁盘上。</li></ul><p>当你需要读取一个较大的文件，但又不想一次性将整个文件加载到内存中时，可以使用 <code>NSData</code> 的 <code>dataWithContentsOfFile:options:error:</code> 方法，并传入上述与 mmap 相关的选项之一。以下是一个示例代码，展示了如何使用 <code>NSDataReadingMappedIfSafe</code> 选项来读取文件：</p><pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">NSError <span class="token operator">*</span>error <span class="token operator">=</span> nil<span class="token punctuation">;</span>NSData <span class="token operator">*</span>data <span class="token operator">=</span> <span class="token punctuation">[</span>NSData dataWithContentsOfFile<span class="token punctuation">:</span>filePath options<span class="token punctuation">:</span>NSDataReadingMappedIfSafe error<span class="token punctuation">:</span><span class="token operator">&amp;</span>error<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> nil<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理错误</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@"Error reading file: %@"</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>localizedDescription<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 成功读取文件，可以处理 data</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>filePath</code> 是你想要读取的文件的路径。通过使用 <code>NSDataReadingMappedIfSafe</code>，系统会在可能的情况下使用 mmap 来映射文件，这样就不需要在内存中为整个文件分配空间，从而减少了内存的使用。然而，需要注意的是，虽然 mmap 减少了物理内存的使用，但它仍然需要消耗虚拟内存地址空间。</p><p>在用 mmap 时要注意如果使用 mmap 映射了文件，那么在 <code>NSData</code> 的生命周期内，你不能删除或修改对应的文件，因为这可能会导致内存映射失效，进而引发不可预见的错误。mmap 适用于那些需要频繁读取、但不需要同时读取整个文件内容的场景，如视频加载、大日志文件读取等。mmap 映射的区域大小会占用相应大小的虚拟内存地址空间，因此对于非常大的文件，可能不适合将整个文件映射到内存中。</p><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>CPU 的高占用，会让手机耗电变快。</p><p><code>[NSProcessInfo processInfo].activeProcessorCount</code> 可以获取 CPU 核数。获取 CPU 类型的方法有 sysctl、uname、<code>hw.machine</code> 和 NXArchInfo 几种方法。</p><p>怎么获取 CPU 使用率呢？</p><p>在 iOS 的 Mach 层中，<code>thread_basic_info</code> 结构体用于提供有关线程的一些基本信息，其中就有线程CPU使用率。这个结构体定义在 <code>&lt;mach/thread_info.h&gt;</code> 头文件中，其包含的字段提供了关于线程运行状态、执行时间和其他统计信息的基本数据。以下是 <code>thread_basic_info</code> 结构体的详细定义及其各字段的解释：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">thread_basic_info</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">time_value_t</span>    user_time<span class="token punctuation">;</span>       <span class="token comment">// 用户模式下线程运行的总时间</span>    <span class="token class-name">time_value_t</span>    system_time<span class="token punctuation">;</span>     <span class="token comment">// 内核模式下线程运行的总时间</span>    <span class="token class-name">integer_t</span>       cpu_usage<span class="token punctuation">;</span>       <span class="token comment">// CPU 使用率，以百分之一为单位</span>    <span class="token class-name">policy_t</span>        policy<span class="token punctuation">;</span>          <span class="token comment">// 调度策略（例如FIFO、Round Robin等）</span>    <span class="token class-name">integer_t</span>       run_state<span class="token punctuation">;</span>       <span class="token comment">// 线程的运行状态</span>    <span class="token class-name">integer_t</span>       flags<span class="token punctuation">;</span>           <span class="token comment">// 线程的标志位（例如是否正在被调度）</span>    <span class="token class-name">integer_t</span>       suspend_count<span class="token punctuation">;</span>   <span class="token comment">// 线程被挂起的次数</span>    <span class="token class-name">integer_t</span>       sleep_time<span class="token punctuation">;</span>      <span class="token comment">// 线程的睡眠时间</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字段解释</p><ul><li><strong><code>user_time</code></strong>: 该字段表示线程在用户模式下（即执行用户空间的代码）运行的总时间。<code>time_value_t</code> 是一个结构体，通常表示为秒和微秒。</li><li><strong><code>system_time</code></strong>: 该字段表示线程在系统模式下（即执行内核空间的代码）运行的总时间。</li><li><strong><code>cpu_usage</code></strong>: 该字段表示线程的 CPU 使用率，以百分之一为单位。例如，如果值为 100，表示线程使用了 1% 的 CPU 时间。</li><li><strong><code>policy</code></strong>: 该字段表示线程的调度策略，如固定优先级调度（FIFO）或轮转调度（Round Robin）等。</li><li><strong><code>run_state</code></strong>: 该字段表示线程当前的运行状态。可能的值包括：<ul><li><code>TH_STATE_RUNNING</code>: 正在运行</li><li><code>TH_STATE_STOPPED</code>: 已停止</li><li><code>TH_STATE_WAITING</code>: 正在等待资源</li><li><code>TH_STATE_UNINTERRUPTIBLE</code>: 不可中断的等待</li><li><code>TH_STATE_HALTED</code>: 已终止</li></ul></li><li><strong><code>flags</code></strong>: 该字段包含一些线程的标志位，用来表示线程的某些状态特性。例如，线程是否正在被调度等。</li><li><strong><code>suspend_count</code></strong>: 该字段表示线程当前被挂起的次数。挂起次数大于 0 时，线程不会被调度执行。</li><li><strong><code>sleep_time</code></strong>: 该字段表示线程处于睡眠状态的时间。</li></ul><p>这些信息对于性能分析、调试以及获取系统中线程的运行状况非常有用。通过使用 <code>thread_info</code> 函数，可以获取到某个特定线程的 <code>thread_basic_info</code> 结构体实例。</p><p>要获取当前应用的 CPU 占用率，可以通过遍历当前应用的所有线程，利用 <code>thread_info</code> 函数获取每个线程的 CPU 使用情况。然后，将所有线程的 CPU 使用率汇总，就能得到整个应用的 CPU 占用率。</p><p>下面是一个使用 Objective-C 编写的示例代码，展示了如何获取当前应用的 CPU 占用率：</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">#import &lt;mach&#x2F;mach.h&gt;#import &lt;assert.h&gt;float cpu_usage() &#123;    kern_return_t kr;    thread_array_t thread_list;    mach_msg_type_number_t thread_count;    thread_info_data_t thread_info_data;    mach_msg_type_number_t thread_info_count;        &#x2F;&#x2F; 获取当前任务    task_t task &#x3D; mach_task_self();        &#x2F;&#x2F; task_threads 这个函数用于获取当前任务的所有线程。&#96;thread_list&#96; 包含了所有线程的 ID，&#96;thread_count&#96; 是线程的数量。    kr &#x3D; task_threads(task, &amp;thread_list, &amp;thread_count);    if (kr !&#x3D; KERN_SUCCESS) &#123;        return -1;    &#125;        float total_cpu &#x3D; 0;        &#x2F;&#x2F; 遍历所有线程    for (int i &#x3D; 0; i &lt; thread_count; i++) &#123;        thread_info_count &#x3D; THREAD_INFO_MAX;                &#x2F;&#x2F; 通过 thread_info 获取每个线程的 &#96;thread_basic_info&#96;，其中包含了线程的 CPU 使用信息。        kr &#x3D; thread_info(thread_list[i], THREAD_BASIC_INFO, (thread_info_t)thread_info_data, &amp;thread_info_count);        if (kr !&#x3D; KERN_SUCCESS) &#123;            return -1;        &#125;                thread_basic_info_t thread_info &#x3D; (thread_basic_info_t)thread_info_data;                if (!(thread_info-&gt;flags &amp; TH_FLAGS_IDLE)) &#123;            &#x2F;&#x2F; 通过 &#96;thread_basic_info&#96; 结构体中的 &#96;cpu_usage&#96; 字段获取每个线程的 CPU 使用率，并将它们相加以得到整个应用的 CPU 使用率。            total_cpu +&#x3D; thread_info-&gt;cpu_usage &#x2F; (float)TH_USAGE_SCALE * 100.0;        &#125;    &#125;        &#x2F;&#x2F; 用于释放之前分配的线程列表内存。    kr &#x3D; vm_deallocate(task, (vm_address_t)thread_list, thread_count * sizeof(thread_t));    assert(kr &#x3D;&#x3D; KERN_SUCCESS);        return total_cpu;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CPU 占用率是一个瞬时值，通常会波动，因此在实际应用中，可能需要多次采样并取平均值来得到更稳定的结果。这个方法会占用一定的 CPU 资源，尤其是在应用包含大量线程时，所以建议在非主线程或低优先级任务中执行这类操作。</p><p>对于总 CPU 占用率，使用 <code>host_statistics</code> 函数获取 <code>host_cpu_load_info</code> 结构体中的 <code>cpu_ticks</code> 值来计算总的 CPU 占用率。<code>cpu_ticks</code> 是一个数组，包含了 CPU 在各种状态（如用户模式、系统模式、空闲、Nice 等）下运行的时钟脉冲数量。通过计算这些脉冲数量的变化，可以得出总的 CPU 占用率。</p><p>以下是一个完整的示例代码，展示了如何使用 <code>host_statistics</code> 函数来计算总的 CPU 占用率：</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">#import &lt;mach&#x2F;mach.h&gt;#import &lt;stdio.h&gt;float cpu_usage() &#123;    &#x2F;&#x2F; 获取 host 的 CPU load 信息    host_cpu_load_info_data_t cpuInfo;    mach_msg_type_number_t count &#x3D; HOST_CPU_LOAD_INFO_COUNT;    &#x2F;&#x2F; &#96;host_statistics&#96; 这是一个用于获取主机统计信息的函数。通过传递 &#96;HOST_CPU_LOAD_INFO&#96; 作为参数，可以获取 &#96;host_cpu_load_info_data_t&#96; 结构体，该结构体包含了 CPU 在不同状态下的时钟脉冲数。    kern_return_t kr &#x3D; host_statistics(mach_host_self(), HOST_CPU_LOAD_INFO, (host_info_t)&amp;cpuInfo, &amp;count);        if (kr !&#x3D; KERN_SUCCESS) &#123;        return -1;    &#125;    &#x2F;&#x2F; 获取各个状态下的 CPU 时钟脉冲数。通过将 &#96;cpu_ticks&#96; 数组中的所有值相加，得到 CPU 所有状态下运行的总时钟脉冲数。    unsigned long long totalTicks &#x3D; 0;    for (int i &#x3D; 0; i &lt; CPU_STATE_MAX; i++) &#123;        totalTicks +&#x3D; cpuInfo.cpu_ticks[i];    &#125;    &#x2F;&#x2F; 计算 CPU 占用率    unsigned long long idleTicks &#x3D; cpuInfo.cpu_ticks[CPU_STATE_IDLE]; &#x2F;&#x2F; &#96;cpu_ticks[CPU_STATE_IDLE]&#96; 表示 CPU 在空闲状态下的时钟脉冲数。    float cpuUsage &#x3D; (1.0 - ((float)idleTicks &#x2F; (float)totalTicks)) * 100.0;    return cpuUsage;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法计算的是整个系统的 CPU 占用率，而不是某个具体应用的 CPU 占用率。如果需要获取具体应用的 CPU 使用情况，应该使用 <code>thread_info</code> 等方法。</p><h2 id="启动优化"><a href="#启动优化" class="headerlink" title="启动优化"></a>启动优化</h2><p>移动应用的启动时间是影响用户体验的重要方面。</p><h3 id="启动时间"><a href="#启动时间" class="headerlink" title="启动时间"></a>启动时间</h3><p>识别启动阶段各个步骤的耗时情况。</p><p>启动分为以下三种：</p><ul><li>Cold Launch：应用完全从零开始加载，最耗时。</li><li>Warm Launch：应用仍在内存中，但由于系统资源紧张，部分内容可能被清理，需要重新加载。</li><li>Hot Launch：应用仍在后台，只需快速恢复。</li></ul><p>治理主要是针对 Cold Landch。</p><p>示例：</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">import UIKitclass AppDelegate: UIResponder, UIApplicationDelegate &#123;    var window: UIWindow?    var launchTime: CFAbsoluteTime?    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool &#123;        &#x2F;&#x2F; 记录应用启动的时间        launchTime &#x3D; CFAbsoluteTimeGetCurrent()                &#x2F;&#x2F; 在主线程完成所有启动任务后，计算应用启动时间        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) &#123;            if let launchTime &#x3D; self.launchTime &#123;                let launchDuration &#x3D; CFAbsoluteTimeGetCurrent() - launchTime                print(&quot;App launch time: \(launchDuration) seconds&quot;)            &#125;        &#125;                return true    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外也可获取完整加载使用时间。使用 <code>DispatchQueue.main.asyncAfter</code> 延迟执行，以确保所有启动任务（如 UI 渲染、网络请求等）已经完成。然后再使用 <code>CFAbsoluteTimeGetCurrent()</code> 获取当前时间，与记录的启动时间相减，得到启动耗时。</p><p>使用 mach_absolute_time() 来计算时间：</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">static uint64_t startTime;static uint64_t endTime &#x3D; -1;static mach_timebase_info_data_t timebaseInfo;static inline NSTimeInterval MachTimeToSeconds(uint64_t machTime) &#123;    return ((machTime &#x2F; 1e9) * timebaseInfo.numer) &#x2F; timebaseInfo.denom;&#125;@implementation DurationTracker+ (void)load &#123;    startTime &#x3D; mach_absolute_time();    mach_timebase_info(&amp;timebaseInfo);        @autoreleasepool &#123;        __block id&lt;NSObject&gt; observer;        observer &#x3D; [[NSNotificationCenter defaultCenter] addObserverForName:UIApplicationDidFinishLaunchingNotification                                                                object:nil queue:nil                                                            usingBlock:^(NSNotification *note) &#123;            dispatch_async(dispatch_get_main_queue(), ^&#123;                endTime &#x3D; mach_absolute_time();                NSLog(@&quot;StartupMeasurer: it took %f seconds until the app could respond to user interaction.&quot;, MachTimeToSeconds(endTime - startTime));            &#125;);            [[NSNotificationCenter defaultCenter] removeObserver:observer];        &#125;];    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动治理思路"><a href="#启动治理思路" class="headerlink" title="启动治理思路"></a>启动治理思路</h3><p>减少初始加载的工作量主要有延迟初始化、按需加载数据和优化依赖注入。减少不必要的资源加载的方式有移除未使用的资源和使用延迟加载。减少动态库的数量，避免在启动时过度使用复杂的泛型或协议扩展，因为这些特性可能会增加编译器在运行时的解析开销。使用 Swift Concurrency 将耗时操作异步化，以并行处理更多任务，减少主线程的压力。减少初始界面上的复杂视图层次结构，优先加载并显示关键内容，延迟非关键内容的加载。在启动时尽量减少复杂的动画过渡，以提升首屏的渲染速度。</p><p>打法上：</p><ul><li>删：出最小集，减任务</li><li>延：按需，延到首页后</li><li>并：统一管理，编排，充分利用多核</li><li>快：减 I&#x2F;O，少并发，少计算（缓存）</li></ul><p>经验：</p><ul><li>动态库转静态库</li><li>不链用不到的系统库</li><li>懒加载动态库，动态取类，dlopen 动态库</li><li><code>+load</code> 里任务挪地</li><li>减少视图数，少层级，懒加载</li><li>主线程等待的子线程设高优先级</li><li>子线程预加载</li><li>文件大拆小，碎合并</li><li>统计高频调用方法</li><li>警惕隐藏的全局锁</li></ul><h2 id="包体积"><a href="#包体积" class="headerlink" title="包体积"></a>包体积</h2><h3 id="影响和手段"><a href="#影响和手段" class="headerlink" title="影响和手段"></a>影响和手段</h3><p>包体积优化的必要性：</p><ul><li><strong>下载转化率下降</strong>：每增加6M，应用下载转化率下降1%。</li><li><strong>App Store限制</strong>：超过200MB的包，iOS 13以下用户无法通过蜂窝数据下载，iOS 13及以上用户需手动设置。</li><li><strong>磁盘占用</strong>：大包体积占用更多存储空间，影响低存储用户。</li><li><strong>用户下载意愿</strong>：大包体积减少用户下载意愿，尤其在蜂窝数据低数据模式下。</li><li><strong>性能影响</strong>：包体积大增加启动时间和SIGKILL风险，降低基础体验。</li></ul><p>技术方案主要是以下几种：</p><ul><li><strong>资源优化</strong>：优化大块资源、无用配置文件和重复资源。</li><li><strong>工程架构优化</strong>：建立体积检测流水线，控制体积增长。</li><li><strong>图片优化</strong>：无用图片优化、Asset Catalog优化、HEIC和WebP压缩优化、TinyPng压缩。</li><li><strong>编译器优化</strong>：使用LLVM编译选项，进行OC、C++、Swift等语言的编译优化。</li><li><strong>代码优化</strong>：无用类、方法、模块瘦身，精简重复代码，AB实验固化。</li></ul><p>效果上讲，工程方向优化大于资源优化，资源优化大于代码优化。</p><p>系统提供的方式有</p><ul><li><strong>App Thinning</strong>：利用Apple提供的App Thinning功能，根据用户的设备自动下载适合该设备的资源包，有助于减少初装包的大小。</li><li><strong>按需下载资源</strong>：使用On-Demand Resources来按需下载资源，只下载用户实际需要的部分，从而减小初始安装包的大小。</li></ul><h3 id="包分析"><a href="#包分析" class="headerlink" title="包分析"></a>包分析</h3><p>iOS端安装包组成部分有：</p><ul><li><strong>Mach-O文件</strong>：iOS系统上的可执行文件。</li><li><strong>Watch APP</strong>：带有小组件功能的WatchApp。</li><li><strong>自定义动态库</strong>：动态库推迟到运行时加载，节省代码段空间。</li><li><strong>Swift系统库</strong>：高版本iOS系统自带，低版本需iPA包中自带。</li><li><strong>Assets资源</strong>：Assets.car文件，包含图片资源。</li><li><strong>根目录下图片资源</strong>：直接添加进工程的图片文件。</li><li><strong>bundle资源</strong>：管理图片和其他配置文件。</li><li><strong>其他配置文件</strong>：如plist、js、css、json等。</li></ul><p>Mach-O是Mach Object文件格式的缩写，用于记录Mac及iOS系统上的可执行文件、目标代码、动态库和内存转储。使用MachOView和otool命令查看Mach-O文件信息，以及通过file和lipo命令查看文件格式和架构。Mach-O文件有Header、LoadCommands和Data部分，特别是LoadCommands中的关键cmd类型如LC_SEGMENT_64，及其段<code>(__PAGEZERO、__TEXT、__DATA、__LINKEDIT)</code>。</p><p><a href="https://github.com/helele90/APPAnalyze">APPAnalyze</a> 是一款用于分析iOS ipa包的脚本工具，能够自动扫描并发现可修复的包体积问题，同时生成包体积数据用于查看。</p><h3 id="资源优化"><a href="#资源优化" class="headerlink" title="资源优化"></a>资源优化</h3><p>资源优化方案有图片压缩、资源清理、动态加载资源、使用 <code>Assets.xcassets</code> 等。</p><p>Asset Catalog是Xcode提供的资源管理工具，用于集中管理项目中的图片等资源。通过Xcode自带工具actool生成Assets.car文件，可使用assetutil工具分析文件内容。开发者在图片放入Asset Catalog前不要做无损压缩，因为actool会重新进行压缩处理。</p><p>Asset Catalog 的优点有：</p><ul><li><strong>包体积瘦身</strong>：根据不同设备下载匹配的图片资源，减少下载包大小。</li><li><strong>统一的图片无损压缩</strong>：采用Apple Deep Pixel Image Compression技术，提高压缩比。</li><li><strong>便利的资源管理</strong>：将图片资源统一压缩成Assets.car文件，便于管理。</li><li><strong>高效的I&#x2F;O操作</strong>：图片加载耗时减少两个数量级，提升应用性能。</li></ul><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p>方案有：</p><ul><li><strong>移除未使用的代码</strong>：查找并删除未使用的类、方法、变量等。审查业务逻辑，删除不再使用或已被废弃的代码模块。</li><li><strong>重构代码</strong>：对重复的代码进行重构，使用函数、类等方法来减少代码冗余。优化数据结构，减少内存占用和CPU消耗。</li><li><strong>编译策略调整</strong>：修改编译策略，如启用LTO（链接时优化）来优化跨模块调用代码。剥离符号表（Strip Linked Product），删除未引用的C&#x2F;C++&#x2F;Swift代码。精简编译产物，只保留必要的符号和导出信息。</li><li><strong>代码组件化</strong>：将常用代码文件打包成静态库，切断不同业务代码之间的依赖，减少每次编译的代码量。</li><li><strong>减少文件引用</strong>：能使用<code>@class</code>就使用<code>@class</code>，尽量减少文件之间的直接引用关系。</li><li><strong>减少Storyboard和XIB文件的使用</strong>：尽量使用代码布局，减少Storyboard和XIB文件的使用，这些文件在编译时会增加包体积。</li><li><strong>清理未使用的资源</strong>：清理项目中未使用的图片、音频等资源文件，以及未使用的类和合并重复功能的类。</li></ul><ul><li><strong>模块化设计</strong>：将App拆分成多个模块，每个模块独立编译和打包，可以根据需要动态加载或更新模块，减少主包的体积。</li><li><strong>依赖管理</strong>：合理使用CocoaPods、Carthage等依赖管理工具，管理项目的第三方库依赖，避免不必要的库被包含进最终的包中。</li></ul><p><a href="https://github.com/peripheryapp/periphery">Periphery</a> 是一个用于识别 Swift 项目中未使用代码的工具。Periphery 能够清除的无用代码种类有未使用的函数和方法，变量和常量，类或结构体，协议，枚举，全局和静态变量，导入语句和扩展。</p><p>需要注意的是，Periphery  可能会因为项目的特殊配置或动态特性（如反射、运行时类型检查等）而错过一些实际上在使用中的代码。</p><p>Periphery 不能自动清除或处理的代码有被间接引用的代码，未来可能使用的代码，跨项目共享的代码，特定构建配置下的使用，编译器特性或优化相关的代码。</p><p>Periphery 主要使用静态代码分析技术来识别 Swift 项目中未使用的代码。这种技术允许它在不实际运行代码的情况下，通过扫描代码库来查找潜在的问题，如未使用的变量、废弃的函数等。</p><p>Periphery 首先使用 xcodebuild 构建指定的 Xcode 工作区或项目，并通过 <code>--schemes</code> 和 <code>--targets</code> 选项指定要构建的方案和目标。它索引这些目标中所有文件的声明和引用，生成一个包含这些信息的图形。在图形构建完成后，Periphery 对其执行大量的变异操作，并通过分析这些变异来识别未使用的声明。这些声明可能包括类、结构体、协议、函数、属性、构造函数、枚举、类型别名或关联类型等。Periphery 能够执行更高级的分析，例如识别协议函数中未使用的参数，但这需要在所有实现中也未使用时才会报告。类似地，重写函数的参数也只有在基函数和所有重写函数中也未使用时才会被报告为未使用。允许用户通过 YAML 配置文件来自定义排除规则，以避免误报。用户可以根据项目的需求，设置特定的排除路径或模式。可以与各种 CI&#x2F;CD 工具集成，如 GitHub Actions、Jenkins 和 GitLab CI&#x2F;CD，实现持续集成中的静态代码分析。通过自动运行代码扫描，Periphery 可以帮助团队在每次提交或拉取请求时发现和解决潜在的问题。Periphery 提供了两种扫描命令：<code>scan</code> 和 <code>scan-syntax</code>。<code>scan-syntax</code> 命令只执行语法分析，因此速度更快，但可能无法提供与 <code>scan</code> 命令相同水平的准确性。用户可以根据项目的具体需求选择合适的命令。</p><p>Swift 代码静态分析的开源项目还有 SwiftLint 和 SourceKitten。</p><p>接下来具体说下运行时无用类检测方案。</p><p>静态检测，通过分析Mach-O文件中的<code>__DATA __objc_classlist</code>和<code>__DATA __objc_</code>classrefs段，获取未使用的类信息。但存在无法检测反射调用类及方法的缺点。</p><p>动态检测的方法。在Objective-C（OC）中，每个类结构体内部都含有一个名为isa的指针，这个指针非常关键，因为它指向了该类对应的元类（meta-class）。元类本身也是一个类，用于存储类方法的实现等信息。</p><p>通过对元类（meta-class）的结构体进行深入分析，我们可以找到class_rw_t这样一个结构体，它是元类内部结构的一部分。在class_rw_t中，存在一个flag标志位，这个标志位用于记录类的各种状态信息。</p><p>通过检查这个flag标志位，我们可以进行一系列的计算或判断，从而得知当前类在运行时（runtime）环境中是否已经被初始化过。这种机制是Objective-C运行时系统的一个重要特性，它允许开发者在运行时动态地获取类的信息，包括类的初始化状态等。</p><p>也就是通过isa指针找到元类，再分析元类中的class_rw_t结构体中的flag标志位，我们可以得知OC中某个类是否已被初始化。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; class is initialized#define RW_INITIALIZED        (1&lt;&lt;29)struct objc_class : objc_object &#123;    bool isInitialized() &#123;    return getMeta()-&gt;data()-&gt;flags &amp; RW_INITIALIZED;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Objective-C的运行时（runtime）机制中，类的内部结构和状态通常是由Objective-C运行时库管理的，而不是直接暴露给开发者在应用程序代码中调用的。不过，你可以通过Objective-C的runtime API来间接地获取这些信息。</p><p>关于类是否已被初始化的问题，通常不是直接通过<code>objc_class</code>结构体中的某个函数来判断的，因为<code>objc_class</code>结构体（及其元类）的细节和具体实现是私有的，并且不推荐开发者直接操作。然而，Objective-C运行时确实提供了一些工具和API来检查类的状态和行为。</p><p>为了检查一个类是否在当前应用程序的生命周期中被使用过（即“被初始化过”），开发者可能会采用一些间接的方法，而不是直接操作类结构体的内部函数。以下是一个简化的说明：</p><p>由于不能直接访问类的内部结构，开发者可能会通过其他方式来跟踪类的使用情况。例如，可以在类的初始化方法中设置一个静态标志位或计数器，以记录类是否已被初始化或实例化的次数。虽然不能直接调用<code>objc_class</code>结构体中的函数，但开发者可以使用Objective-C的runtime API（如<code>objc_getClass</code>、<code>class_getInstanceSize</code>等）来获取类的元信息和执行其他操作。然而，对于直接检查类是否“被初始化过”的需求，这些API可能并不直接提供所需的功能。在实际应用中，可能并不需要直接检查类是否“被初始化过”，而是可以通过检查该类的实例是否存在、类的某个特定方法是否被调用过等间接方式来判断。自定义与系统类相同的结构体并实现<code>isInitialized()</code>函数可能是一种模拟或抽象的方式。然而，在实际Objective-C开发中，这样的做法是不必要的，因为直接操作类的内部结构是违反封装原则且容易出错的。相反，开发者应该利用Objective-C提供的runtime API和其他设计模式来达成目标。提到通过赋值转换获取meta-class中的数据，这通常指的是利用Objective-C的runtime机制来查询类的元类信息。然而，直接“判断指定类是否在当前生命周期中是否被初始化过”并不是通过简单地查询元类数据就能实现的，因为这需要跟踪类的实例化过程，而不是仅仅查看元类的结构。</p><p>获取类结构体里面的数据</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct mock_objc_class : lazyFake_objc_object &#123;    mock_objc_class* metaClass() &#123;        #if __LP64__            return (mock_objc_class *)((long long)isa &amp; ISA_MASK);        #else            return (mock_objc_class *)((long long)isa);        #endif    &#125;    bool isInitialized() &#123;        return metaClass()-&gt;data()-&gt;flags &amp; RW_INITIALIZED;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有 OC 自定义类</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Dl_info info;dladdr(&amp;_mh_execute_header, &amp;info);classes &#x3D; objc_copyClassNamesForImage(info.dli_fname, &amp;classCount);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>是否初始化</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct mock_objc_class *objectClass &#x3D; (__bridge struct mock_objc_class *)cls;BOOL isInitial &#x3D; objectClass-&gt;isInitialized();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后通过无用类占比指标（<code>无用类数量/总类数量*100%</code>）快速识别不再被使用的模块。对于无用类占比高的模块，进行下线或迁移处理，减少组件数量。</p><p>更细粒度无用方法检测方案有：</p><ul><li>结合Mach-O和LinkMap文件分析获取无用方法，但准确率低。</li><li><a href="https://starming.com/2017/04/01/build-static-analysis-program-smck-use-swift/">用 Swift 编写的工程代码静态分析命令行工具 smck</a>、<a href="https://starming.com/2016/11/17/use-swift3-build-macos-program-to-clear-unuse-method/">使用Swift3开发了个macOS的程序可以检测出objc项目中无用方法，然后一键全部清理</a></li><li>LLVM插桩获得所有方法及其调用关系。通过分析调用关系，找出未被调用的方法。详见<a href="https://starming.com/2022/06/10/use-llvm/">使用 LLVM</a></li></ul><h3 id="编译器优化"><a href="#编译器优化" class="headerlink" title="编译器优化"></a>编译器优化</h3><p>Xcode 14的编译器可能通过更智能的分析，识别并消除不必要的Retain和Release调用。这些调用在内存管理中是必要的，但在某些情况下，它们可能是多余的，因为对象的生命周期管理可以通过其他方式更有效地实现。在Objective-C的运行时层面，Xcode 14可能引入了更高效的内存管理策略。这些策略可能包括更快的对象引用计数更新、更智能的对象生命周期预测等，从而减少了Retain和Release操作的执行次数和开销。剥离了未使用的代码和库，包括那些与Retain和Release操作相关的部分。这种优化可以减少最终生成的二进制文件的大小。</p><p>一些配置对包体积的优化：</p><ul><li><strong>Generate Debug Symbols</strong>：在Levels选项内，将Generate Debug Symbols设置为NO，这可以减小安装包体积，但需要注意，这样设置后无法在断点处停下。</li><li><strong>舍弃老旧架构</strong>：舍弃不再支持的架构，如armv7，以减小安装包体积。</li><li><strong>编译优化选项</strong>：在Build Settings中，将Optimization Level设置为Fastest, Smallest [-Os]，这个选项会开启那些不增加代码大小的全部优化，并让可执行文件尽可能小。同时，将Strip Debug Symbols During Copy和Symbols Hidden by Default在release版本设为yes，可以去除不必要的调试符号。</li><li><strong>预编译头文件</strong>：将Precompile Prefix Header设置为YES，预编译头文件可以加快编译速度，但需要注意，一旦PCH文件和引用的头文件内容发生变化，所有引用到PCH的源文件都需要重新编译。</li><li><strong>仅编译当前架构</strong>：在Debug模式下，将Build Active Architecture Only设置为YES，这样只编译当前架构的版本，可以加快编译速度。但在Release模式下，需要设置为NO以确保兼容性。</li><li><strong>Debug Information Format</strong>：设置为DWARF，减少dSYM文件的生成，从而减少包体积。</li><li><strong>Enable Index-While-Building Functionality</strong>：设置为NO，关闭Xcode在编译时建立代码索引的功能，以加快编译速度。</li></ul><p>另外</p><p>还可以使用 -why_load 链接器标志来减少 iOS 应用程序的二进制文件大小， -why_load 标志的作用：它可以帮助开发者识别最终二进制文件中包含的不必要符号。</p><p>在 iOS 开发中，链接器负责将代码、库和资源结合成一个最终的可执行文件。在此过程中，可能会有一些不必要的代码被包含进去，例如未使用的库、重复的符号或模块。这些多余的代码会导致应用程序的二进制文件增大，进而影响应用的下载速度、安装时间以及设备的存储空间。</p><p>-ObjC 标志，它通常用于强制链接所有 Objective-C 代码到最终的二进制文件中。这在某些情况下是必要的，例如使用了某些需要反射的 Objective-C 代码时，但是它也会导致未使用的代码被包含进去。通过 -why_load，开发者可以识别出哪些代码是多余的，并通过删除 -ObjC 标志来减少文件大小。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>有些开源的工具可以直接用于性能分析。</p><ul><li><a href="https://github.com/apple/swift-corelibs-xctest">XCTest</a> XCTest 是 Apple 官方的单元测试框架，支持性能测试。开发者可以通过 <code>measure</code> 方法来衡量代码块的执行时间，从而发现性能瓶颈。适合需要在单元测试中添加性能测试的场景。</li><li><a href="https://github.com/kstenerud/KSCrash">KSCrash</a> KSCrash 是一个强大的崩溃报告框架，它不仅能够捕获崩溃信息，还能提供应用程序的性能数据，例如内存使用和 CPU 使用情况。适合需要深入了解崩溃原因并监控相关性能数据的场景。</li><li><a href="https://github.com/zixun/GodEye">GT (GDT, GodEye)</a> GodEye 是一个开源的 iOS 性能监控工具包，提供了多种监控功能，包括 FPS、内存使用、CPU 使用率、网络请求、崩溃日志等。它有一个方便的 UI，可以实时显示性能数据。适合在开发过程中嵌入应用进行实时性能监控。</li><li><a href="https://github.com/libimobiledevice/libimobiledevice">libimobiledevice</a> libimobiledevice 是一个开源的库，提供了与 iOS 设备交互的 API，可以用来监控设备状态和性能，特别是对非越狱设备进行操作。</li></ul><p>常用的 In-app Debug 工具有：</p><ul><li><a href="https://github.com/FLEXTool/FLEX">Flex</a> 是一个功能强大的 In-app Debug 工具，允许开发者在应用内实时查看和修改视图层次结构、网络请求、用户默认设置等。它还支持动态调整 UI 以及调试其他 app 内部逻辑。无需重新编译代码即可直接调试；可以修改内存中的值来观察变化。</li><li><a href="https://github.com/facebook/chisel">Chisel</a> 是 Facebook 开发的一组 LLDB 命令集，专门用于在调试时提供更方便的操作。它能帮助开发者快速检查视图层次结构、查看控件信息等。与 Xcode LLDB 无缝集成，通过命令行调试视图、打印出布局相关信息等。</li><li><a href="https://revealapp.com/">Reveal</a> 是一个图形化的 In-app Debug 工具，它允许开发者在运行中的应用中实时查看和编辑视图层次结构，支持 2D 和 3D 的视图展示。提供直观的 UI 调试界面，可以轻松地查看和修改视图属性；支持 iOS 和 tvOS。</li><li><a href="https://github.com/hughkli/Lookin">Lookin</a> 是一个开源的 iOS 视觉调试工具，专门用于分析和检查 iOS 应用的界面结构。它提供类似于 Xcode 的 View Debugging 功能，但更加灵活和强大，尤其是在复杂 UI 布局的分析上。通过 Lookin，你可以轻松地获取 iOS 应用中的界面层级、布局信息，并进行实时的 UI 调试和调整。可以称之为开源版的 Reveal。</li></ul><h2 id="Bazel"><a href="#Bazel" class="headerlink" title="Bazel"></a>Bazel</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>Polyrepo（多仓库）在代码量不断增加，开发团队扩大后，会觉得不合适，比如配置 CI 工具的繁琐，容易出现冗余代码，构建出现问题滞后等。Monorepo 指的是将多个模块化的 package 或 library 放在一个高度模块化且可管理的单一代码仓库中。谷歌的 Blaze、Bazel，以及微软的 Lage 和 Rush 等工具都是典型的 Monorepo 工具。Bazel 是一个现代化的多语言构建和测试工具。</p><p>你可以理解为是现代化的 Make 工具，但更加强大。</p><p>Bazel 通过缓存和增量构建机制，可以有效减少重复构建时间。支持并行构建，能够利用多核处理器提高构建速度。这两个点应该就是最吸引人的地方了。</p><p>另外它还允许用户定义自己的构建规则。因此，Bazel 是很适合大型的项目，还有容器化的应用。</p><p>接下来我就详细的说下 Bazel 是怎么使用的。</p><p>Bazel 组织 iOS 工程结构的方式具有高度的模块化和可管理性。</p><ul><li>WORKSPACE 文件：根目录的核心文件。每个使用 Bazel 的项目都会在项目根目录中包含一个 <code>WORKSPACE</code> 文件，这个文件定义了项目的整体环境和依赖项。它类似于项目的“入口点”，Bazel 通过它知道如何构建整个项目。</li><li>BUILD 文件：模块的定义。在 Bazel 中，每个独立的模块（如一个应用、库、测试等）都需要一个 <code>BUILD</code> 文件，这个文件定义了该模块的构建规则。通过 <code>BUILD</code> 文件，开发者可以指定模块的依赖项、构建方式（如编译源代码、生成静态库等），以及测试配置。</li><li>Targets（目标）：构建单元。<code>BUILD</code> 文件中定义的每个构建任务被称为“Target”（目标），可以是一个 iOS 应用程序、一个静态库、或单元测试等。目标可以依赖其他目标，这样可以构建出复杂的依赖图，确保模块间的依赖关系被正确处理。</li><li>模块化组织：模块隔离与复用。Bazel 鼓励将代码分解成多个模块，每个模块都可以独立构建和测试。这种模块化结构提高了代码的可复用性，也简化了依赖管理。</li><li>依赖管理：声明式依赖。Bazel 使用声明式依赖管理，即通过 <code>BUILD</code> 文件明确指定每个模块依赖哪些其他模块。这种方式有助于避免传统 iOS 项目中常见的依赖冲突和版本管理问题。</li><li>跨语言支持：对于使用多种编程语言的项目，Bazel 提供了原生支持。对于 iOS 工程，Bazel 既支持 Objective-C 和 Swift 的构建，也支持与其他语言（如 C++、Java）的集成。</li><li>并行构建与缓存：增量构建和缓存。Bazel 的构建系统支持并行构建和缓存。它能够有效地重用已经构建的模块，避免重复构建，从而大幅缩短构建时间。</li><li>Xcode 集成：与 Xcode 协作。虽然 Bazel 可以独立执行构建任务，但它也提供了与 Xcode 的集成，开发者可以在 Xcode 中进行代码编辑和调试，同时使用 Bazel 进行构建和测试。</li></ul><h3 id="WORKSPACE-文件"><a href="#WORKSPACE-文件" class="headerlink" title="WORKSPACE 文件"></a>WORKSPACE 文件</h3><p><code>WORKSPACE</code> 文件是定义项目根目录的关键文件，它告诉 Bazel 项目依赖了哪些外部库和资源，并为整个构建过程提供了基础配置。下面是一个典型的 <code>WORKSPACE</code> 文件的结构和示例代码：</p><p>一个典型的 <code>WORKSPACE</code> 文件包括以下部分：</p><ul><li>加载 Bazel 提供的 iOS 相关规则集，如 <code>rules_apple</code> 和 <code>rules_swift</code>。</li><li>声明项目中使用的第三方库，通常使用 <code>http_archive</code> 或 <code>git_repository</code> 来加载外部依赖。</li><li>配置目标平台、构建工具链等。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># WORKSPACE 文件的开头，定义需要加载的规则集</span><span class="token comment"># 引入苹果生态系统的 Bazel 规则</span>load<span class="token punctuation">(</span><span class="token string">"@bazel_tools//tools/build_defs/repo:http.bzl"</span><span class="token punctuation">,</span> <span class="token string">"http_archive"</span><span class="token punctuation">)</span><span class="token comment"># 加载苹果的构建规则 (rules_apple)</span>http_archive<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"build_bazel_rules_apple"</span><span class="token punctuation">,</span>    url <span class="token operator">=</span> <span class="token string">"https://github.com/bazelbuild/rules_apple/releases/download/1.0.0/rules_apple.1.0.0.tar.gz"</span><span class="token punctuation">,</span>    strip_prefix <span class="token operator">=</span> <span class="token string">"rules_apple-1.0.0"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment"># 加载 Swift 的构建规则 (rules_swift)</span>http_archive<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"build_bazel_rules_swift"</span><span class="token punctuation">,</span>    url <span class="token operator">=</span> <span class="token string">"https://github.com/bazelbuild/rules_swift/releases/download/0.24.0/rules_swift.0.24.0.tar.gz"</span><span class="token punctuation">,</span>    strip_prefix <span class="token operator">=</span> <span class="token string">"rules_swift-0.24.0"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment"># 使用 rules_apple 提供的默认设置</span>load<span class="token punctuation">(</span><span class="token string">"@build_bazel_rules_apple//apple:repositories.bzl"</span><span class="token punctuation">,</span> <span class="token string">"apple_rules_dependencies"</span><span class="token punctuation">)</span>apple_rules_dependencies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 使用 rules_swift 提供的默认设置</span>load<span class="token punctuation">(</span><span class="token string">"@build_bazel_rules_swift//swift:repositories.bzl"</span><span class="token punctuation">,</span> <span class="token string">"swift_rules_dependencies"</span><span class="token punctuation">)</span>swift_rules_dependencies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 加载 CocoaPods 规则（如果项目中使用了 CocoaPods）</span>http_archive<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"bazel_pod_rules"</span><span class="token punctuation">,</span>    url <span class="token operator">=</span> <span class="token string">"https://github.com/pinterest/PodToBUILD/releases/download/0.1.0/PodToBUILD.tar.gz"</span><span class="token punctuation">,</span>    strip_prefix <span class="token operator">=</span> <span class="token string">"PodToBUILD-0.1.0"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment"># 声明 Xcode 版本和 SDK 的目标设置（可选）</span>load<span class="token punctuation">(</span><span class="token string">"@build_bazel_rules_apple//apple:config.bzl"</span><span class="token punctuation">,</span> <span class="token string">"apple_common"</span><span class="token punctuation">)</span>apple_common<span class="token punctuation">.</span>xcode_config<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"xcode_config"</span><span class="token punctuation">,</span>    default_ios_sdk_version <span class="token operator">=</span> <span class="token string">"14.5"</span><span class="token punctuation">,</span>    default_macos_sdk_version <span class="token operator">=</span> <span class="token string">"11.3"</span><span class="token punctuation">,</span>    default_watchos_sdk_version <span class="token operator">=</span> <span class="token string">"7.4"</span><span class="token punctuation">,</span>    default_tvos_sdk_version <span class="token operator">=</span> <span class="token string">"14.5"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment"># 声明项目中使用的第三方库（例如使用 gRPC 或其他库）</span>load<span class="token punctuation">(</span><span class="token string">"@bazel_tools//tools/build_defs/repo:git.bzl"</span><span class="token punctuation">,</span> <span class="token string">"git_repository"</span><span class="token punctuation">)</span>git_repository<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"com_github_grpc_grpc"</span><span class="token punctuation">,</span>    commit <span class="token operator">=</span> <span class="token string">"your_commit_hash"</span><span class="token punctuation">,</span>    remote <span class="token operator">=</span> <span class="token string">"https://github.com/grpc/grpc.git"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment"># 声明额外的外部依赖（例如 Swift Package Manager 包）</span>load<span class="token punctuation">(</span><span class="token string">"@build_bazel_rules_swift//swift:repositories.bzl"</span><span class="token punctuation">,</span> <span class="token string">"swift_package"</span><span class="token punctuation">)</span>swift_package<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"swift_lib_example"</span><span class="token punctuation">,</span>    repository <span class="token operator">=</span> <span class="token string">"https://github.com/apple/swift-argument-parser"</span><span class="token punctuation">,</span>    revision <span class="token operator">=</span> <span class="token string">"0.4.4"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment"># 配置 BUILD.bazel 文件所在目录中的第三方依赖</span>load<span class="token punctuation">(</span><span class="token string">"@bazel_pod_rules//:defs.bzl"</span><span class="token punctuation">,</span> <span class="token string">"new_pod_repository"</span><span class="token punctuation">)</span>new_pod_repository<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"AFNetworking"</span><span class="token punctuation">,</span>    url <span class="token operator">=</span> <span class="token string">"https://github.com/AFNetworking/AFNetworking.git"</span><span class="token punctuation">,</span>    tag <span class="token operator">=</span> <span class="token string">"4.0.1"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>rules_apple</code> 和 <code>rules_swift</code> 是 Bazel 提供的官方规则集，用于构建 iOS 和 Swift 项目。通过 <code>http_archive</code> 你可以指定需要的规则集版本。<code>http_archive</code> 和 <code>git_repository</code> 用于加载第三方库或工具集成。<code>new_pod_repository</code> 是专门为 CocoaPods 提供的规则，用于管理 iOS 项目中的 CocoaPods 依赖。<code>apple_common.xcode_config</code> 用于指定 iOS SDK 版本、Xcode 版本等，可以确保项目在正确的环境下构建。</p><h3 id="BUILD-文件"><a href="#BUILD-文件" class="headerlink" title="BUILD 文件"></a>BUILD 文件</h3><p>编写 iOS 程序的 <code>BUILD</code> 文件时，需要使用 Bazel 提供的专门规则来构建 iOS 应用、库和测试。这些规则可以帮助你定义目标、依赖项和其他构建配置。</p><p>基本概念</p><ul><li><code>ios_application</code>: 用于定义一个 iOS 应用的目标。</li><li><code>objc_library</code>: 用于定义一个 Objective-C 或 Swift 库。</li><li><code>ios_unit_test</code> 和 <code>ios_ui_test</code>: 用于定义 iOS 的单元测试和 UI 测试目标。</li><li><code>apple_binary</code>: 用于定义一个包含所有依赖的 iOS 可执行文件，通常与 <code>ios_application</code> 一起使用。</li></ul><p>假设我们有一个简单的 iOS 项目，它包含一个应用和一个静态库，项目结构如下：</p><p>项目结构</p><pre class="line-numbers language-none"><code class="language-none">my_ios_project&#x2F;├── WORKSPACE├── BUILD├── App&#x2F;│   ├── BUILD│   ├── AppDelegate.swift│   ├── ViewController.swift│   ├── Assets.xcassets│   └── Main.storyboard└── Libs&#x2F;    ├── BUILD    ├── MyLib.swift    └── MyLib.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Libs/BUILD</code> 文件</p><p>首先，定义一个 <code>Objective-C/Swift</code> 库，这个库将在应用中使用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 用于定义一个 Objective-C 或 Swift 的库。</span>objc_library<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"MyLib"</span><span class="token punctuation">,</span> <span class="token comment"># 库目标的名称。</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MyLib.swift"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 源文件列表（包括 Swift 和 Objective-C 文件）。</span>    hdrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MyLib.h"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">//</span> 头文件列表（如果有 Objective<span class="token operator">-</span>C 文件）。    visibility <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"//visibility:public"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 公开可见，以供其他目标使用</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，定义 iOS 应用目标，并指定它依赖于上面定义的库：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 用于定义一个 iOS 应用目标。</span>ios_application<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"MyApp"</span><span class="token punctuation">,</span> <span class="token comment"># 应用目标的名称。</span>    bundle_id <span class="token operator">=</span> <span class="token string">"com.example.MyApp"</span><span class="token punctuation">,</span> <span class="token comment"># 应用的唯一标识符。</span>    families <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"iphone"</span><span class="token punctuation">,</span> <span class="token string">"ipad"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 目标设备类型（如 iPhone 和 iPad）。</span>    infoplists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Info.plist"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 应用的 `Info.plist` 文件。</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"AppDelegate.swift"</span><span class="token punctuation">,</span> <span class="token string">"ViewController.swift"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 应用的源文件列表（Swift 和 Objective-C）。</span>    storyboards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Main.storyboard"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     resources <span class="token operator">=</span> glob<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Assets.xcassets/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 应用的资源文件，如图像、音效等，使用 `glob` 语法可以方便地将多个资源文件包含在 `BUILD` 文件中。</span>    deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"//Libs:MyLib"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 依赖于 MyLib 库。 `deps` 参数用来定义该目标依赖的其他库或目标，Bazel 会自动处理这些依赖关系并确保它们的构建顺序正确。</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常在项目的根目录也会有一个 <code>BUILD</code> 文件来聚合或定义一些全局目标，或仅作为入口文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 设置包的默认可见性，这里设置为对所有目标公开可见。</span>package<span class="token punctuation">(</span>default_visibility <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"//visibility:public"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 创建别名，方便从顶层访问应用目标。</span>alias<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"app"</span><span class="token punctuation">,</span>    actual <span class="token operator">=</span> <span class="token string">"//App:MyApp"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Starlark-语言"><a href="#Starlark-语言" class="headerlink" title="Starlark 语言"></a>Starlark 语言</h3><p>Starlark 是一种由 Bazel 使用的嵌入式编程语言，用于定义构建规则和操作构建文件。它类似于 Python，专门设计用于 Bazel 的构建系统，允许用户扩展 Bazel 的功能。在 iOS 工程构建中，Starlark 主要用于编写自定义的规则、宏和函数。</p><p>Starlark 基础语法</p><p>Starlark 的语法类似 Python，包括变量、函数、条件、循环等基本结构。</p><p>变量与函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义变量</span>message <span class="token operator">=</span> <span class="token string">"Hello, Starlark!"</span><span class="token comment"># 定义函数</span><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>条件与循环</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 条件语句</span><span class="token keyword">def</span> <span class="token function">is_even</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment"># 循环语句</span><span class="token keyword">def</span> <span class="token function">sum_of_evens</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> is_even<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> i    <span class="token keyword">return</span> <span class="token builtin">sum</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 Starlark 自定义 iOS 构建</p><p>假设你想要定义一个自定义的 iOS 静态库规则，它能够简化库的定义并统一管理依赖。</p><p>项目结构</p><pre class="line-numbers language-none"><code class="language-none">my_ios_project&#x2F;├── WORKSPACE├── BUILD├── app&#x2F;│   ├── BUILD│   ├── AppDelegate.swift│   └── ViewController.swift└── libs&#x2F;    ├── BUILD    ├── mylib.swift    └── lib.bzl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写 <code>lib.bzl</code> 文件</p><p>在 <code>libs/</code> 目录下创建一个 <code>lib.bzl</code> 文件，定义自定义的 iOS 静态库规则。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这是一个宏，用于简化 `objc_library` 规则的定义。通过这种方式，你可以统一管理 ARC 选项、依赖等设置。</span><span class="token keyword">def</span> <span class="token function">ios_static_library</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> srcs<span class="token punctuation">,</span> hdrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    objc_library<span class="token punctuation">(</span>        name <span class="token operator">=</span> name<span class="token punctuation">,</span>        srcs <span class="token operator">=</span> srcs<span class="token punctuation">,</span>        hdrs <span class="token operator">=</span> hdrs<span class="token punctuation">,</span>        deps <span class="token operator">=</span> deps<span class="token punctuation">,</span>        copts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"-fobjc-arc"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># 指定编译选项，如在此处启用 ARC。</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>lib.bzl</code> 文件中的宏</p><p>在 <code>libs/BUILD</code> 文件中使用上面定义的宏来创建一个 iOS 静态库。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 用于加载 Starlark 文件中的宏或函数。在此例中，`//libs:lib.bzl` 表示加载 `libs` 目录中的 `lib.bzl` 文件。</span>load<span class="token punctuation">(</span><span class="token string">"//libs:lib.bzl"</span><span class="token punctuation">,</span> <span class="token string">"ios_static_library"</span><span class="token punctuation">)</span><span class="token comment"># `ios_static_library` 宏会被调用来定义一个名为 `mylib` 的 iOS 静态库。</span>ios_static_library<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"mylib"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"mylib.swift"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>app/BUILD</code> 文件中，定义一个 iOS 应用目标，并依赖于上述的静态库：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ios_application<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"MyApp"</span><span class="token punctuation">,</span>    bundle_id <span class="token operator">=</span> <span class="token string">"com.example.MyApp"</span><span class="token punctuation">,</span>    families <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"iphone"</span><span class="token punctuation">,</span> <span class="token string">"ipad"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    infoplists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Info.plist"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"AppDelegate.swift"</span><span class="token punctuation">,</span> <span class="token string">"ViewController.swift"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"//libs:mylib"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义 iOS Framework 构建的示例</p><p>你可以使用 Starlark 编写更复杂的规则，例如为 iOS 定制一个 Framework 的构建规则：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这是一个 Bazel 的内置规则，用于创建 iOS Framework。自定义的 `ios_framework` 宏将静态库打包成一个 Framework，简化了应用与库之间的集成。</span><span class="token keyword">def</span> <span class="token function">ios_framework</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> srcs<span class="token punctuation">,</span> hdrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bundle_id <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    objc_library<span class="token punctuation">(</span>        name <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"_lib"</span><span class="token punctuation">,</span>        srcs <span class="token operator">=</span> srcs<span class="token punctuation">,</span>        hdrs <span class="token operator">=</span> hdrs<span class="token punctuation">,</span>        deps <span class="token operator">=</span> deps<span class="token punctuation">,</span>    <span class="token punctuation">)</span>    apple_framework<span class="token punctuation">(</span>        name <span class="token operator">=</span> name<span class="token punctuation">,</span>        bundle_id <span class="token operator">=</span> bundle_id<span class="token punctuation">,</span>        infoplists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Info.plist"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">":"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"_lib"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>在终端中运行以下命令来构建 iOS 应用。</p><p>构建应用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel build //App:MyApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行应用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel run //App:MyApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试应用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel <span class="token builtin class-name">test</span> //App:MyAppTests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="rules-xcodeproj-生成-Xcode-工程"><a href="#rules-xcodeproj-生成-Xcode-工程" class="headerlink" title="rules_xcodeproj 生成 Xcode 工程"></a>rules_xcodeproj 生成 Xcode 工程</h3><p><a href="https://github.com/MobileNativeFoundation/rules_xcodeproj">rules_xcodeproj</a> 是一个用于生成 Xcode 工程文件 (<code>.xcodeproj</code>) 的 Bazel 插件。它允许你在使用 Bazel 构建系统的同时，仍然能够使用 Xcode 进行开发和调试。它目前支持两种主要的构建模式：<strong>BwB (Build with Bazel)</strong> 和 **BwX (Build with Xcode)**。<br>BwB 模式是将 Bazel 作为主要的构建工具，Xcode 项目仅用于 IDE 支持，而实际的构建过程完全由 Bazel 管理。BwX 模式官方后续支持会变弱，不建议使用。</p><p>首先，在你的 <code>WORKSPACE</code> 文件中添加 <code>rules_xcodeproj</code> 规则的依赖项。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">load<span class="token punctuation">(</span><span class="token string">"@bazel_tools//tools/build_defs/repo:http.bzl"</span><span class="token punctuation">,</span> <span class="token string">"http_archive"</span><span class="token punctuation">)</span>http_archive<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"build_bazel_rules_xcodeproj"</span><span class="token punctuation">,</span>    sha256 <span class="token operator">=</span> <span class="token string">"&lt;SHA256>"</span><span class="token punctuation">,</span>    url <span class="token operator">=</span> <span class="token string">"https://github.com/buildbuddy-io/rules_xcodeproj/releases/download/&lt;version>/rules_xcodeproj-&lt;version>.tar.gz"</span><span class="token punctuation">,</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token string">"@build_bazel_rules_xcodeproj//:workspace_setup.bzl"</span><span class="token punctuation">,</span> <span class="token string">"rules_xcodeproj_workspace_setup"</span><span class="token punctuation">)</span>rules_xcodeproj_workspace_setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你需要替换 <code>&lt;SHA256&gt;</code> 和 <code>&lt;version&gt;</code> 为相应的值，可以从 <a href="https://github.com/buildbuddy-io/rules_xcodeproj/releases">rules_xcodeproj 的发布页面</a> 获取。</p><p>在项目的 <code>BUILD.bazel</code> 文件中，使用 <code>xcodeproj</code> 规则生成 <code>.xcodeproj</code> 文件。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">load<span class="token punctuation">(</span><span class="token string">"@build_bazel_rules_xcodeproj//:defs.bzl"</span><span class="token punctuation">,</span> <span class="token string">"xcodeproj"</span><span class="token punctuation">)</span>xcodeproj<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"MyApp_xcodeproj"</span><span class="token punctuation">,</span> <span class="token comment"># 定义生成的 `.xcodeproj` 的目标名称。</span>    project_name <span class="token operator">=</span> <span class="token string">"MyApp"</span><span class="token punctuation">,</span> <span class="token comment"># 定义 Xcode 工程的名称。</span>    targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"//app:MyApp"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 指定 Bazel 中需要包含在 Xcode 工程中的目标。</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在命令行中，运行以下命令生成 Xcode 工程文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel run //:MyApp_xcodeproj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将生成一个名为 <code>MyApp.xcodeproj</code> 的文件，位于你运行命令的目录中。你可以用 Xcode 打开这个工程文件，并在 Xcode 中调试和开发你的应用。</p><p><code>rules_xcodeproj</code> 提供了多种配置选项，你可以根据需要进行自定义。例如，可以配置生成的 Xcode 工程中的编译设置、构建配置等。以下是一些常用的配置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">xcodeproj<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"MyApp_xcodeproj"</span><span class="token punctuation">,</span>    project_name <span class="token operator">=</span> <span class="token string">"MyApp"</span><span class="token punctuation">,</span>    targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"//app:MyApp"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    build_settings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"SWIFT_VERSION"</span><span class="token punctuation">:</span> <span class="token string">"5.0"</span><span class="token punctuation">,</span>        <span class="token string">"CODE_SIGN_IDENTITY"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment"># 指定 Xcode 工程的编译设置，例如 Swift 版本、代码签名等。</span>    extra_generated_files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"//path/to/resource"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">#指定额外的生成文件，可能包括资源文件等。</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Build-with-Proxy-模式"><a href="#Build-with-Proxy-模式" class="headerlink" title="Build with Proxy 模式"></a>Build with Proxy 模式</h3><p><code>rules_xcodeproj</code> 新推出的 <code>Build with Proxy</code> 模式，是一种新的构建模式。在 “Build with Proxy” 模式下，Bazel 通过 XCBBuildServiceProxy 完全接管了整个构建过程。Xcode 在这个模式下只作为一个前端界面，所有的构建逻辑和执行都由 Bazel 来完成。在 “Build with Bazel” 模式下，Xcode 依然是主导构建过程的工具，但它在构建的关键步骤（如编译和链接）上调用 Bazel 来完成实际的工作。Xcode 会生成编译任务并将其委托给 Bazel，同时保持对构建过程的部分控制权。</p><p>流程是，当开发者在 Xcode 中触发构建时，XCBBuildServiceProxy 拦截 Xcode 的构建请求。构建请求被重定向到 Bazel，由 Bazel 完全控制构建过程，包括依赖管理、编译、链接等。构建结果通过 XCBBuildServiceProxy 返回给 Xcode，Xcode 仅作为显示界面。</p><p>Bazel 完全控制构建过程，提供更高效的构建性能和更一致的结果。由于 Xcode 不再控制构建过程，调试和查看构建日志可能需要适应 Bazel 的方式，还有更高的初始配置成本。</p><p>首先，你需要在 Bazel 的 <code>WORKSPACE</code> 文件中引入 <code>rules_xcodeproj</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">http_archive<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"build_bazel_rules_xcodeproj"</span><span class="token punctuation">,</span>    url <span class="token operator">=</span> <span class="token string">"https://github.com/buildbuddy-io/rules_xcodeproj/releases/download/&#123;version&#125;/release.tar.gz"</span><span class="token punctuation">,</span>    sha256 <span class="token operator">=</span> <span class="token string">"&#123;sha256&#125;"</span><span class="token punctuation">,</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token string">"@build_bazel_rules_xcodeproj//xcodeproj:workspace.bzl"</span><span class="token punctuation">,</span> <span class="token string">"xcodeproj_dependencies"</span><span class="token punctuation">)</span>xcodeproj_dependencies<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，在你的 BUILD 文件中配置 Xcode 项目生成规则，并启用 “Build with Proxy” 模式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">load<span class="token punctuation">(</span><span class="token string">"@build_bazel_rules_xcodeproj//xcodeproj:xcodeproj.bzl"</span><span class="token punctuation">,</span> <span class="token string">"xcodeproj"</span><span class="token punctuation">)</span>xcodeproj<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"MyAppProject"</span><span class="token punctuation">,</span>    targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"//App:MyApp"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    build_mode <span class="token operator">=</span> <span class="token string">"build_with_proxy"</span><span class="token punctuation">,</span>  <span class="token comment"># 启用 "Build with Proxy" 模式</span>    minimum_xcode_version <span class="token operator">=</span> <span class="token string">"14.0"</span><span class="token punctuation">,</span>    <span class="token comment"># 其他配置...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 Xcode 项目文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel run //:MyAppProject<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的 <code>.xcodeproj</code> 文件将会配置为使用 Bazel 进行构建。</p><p><code>XCBBuildServiceProxy</code> 是核心代理组件，它通过拦截 Xcode 的构建请求并将其转发给 Bazel 进行处理。在 “Build with Proxy” 模式下，Xcode 的构建流程大致如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 当你在 Xcode 中点击“构建”时，Xcode 会调用 XCBBuildServiceProxy。</span><span class="token comment"># XCBBuildServiceProxy 会将构建请求转发给 Bazel。</span>bazel build //App:MyApp<span class="token comment"># Bazel 处理所有构建任务，包括编译、链接等。</span><span class="token comment"># 构建完成后，Bazel 将结果返回给 XCBBuildServiceProxy。</span><span class="token comment"># XCBBuildServiceProxy 将结果反馈给 Xcode，Xcode 显示构建输出。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了确保 Xcode 在构建时使用 Bazel，你需要配置项目的 Scheme。在生成的 <code>.xcodeproj</code> 文件中，确保构建 Scheme 设置为使用 <code>XCBBuildServiceProxy</code> 调用 Bazel。</p><h2 id="生成-IPA-包的过程"><a href="#生成-IPA-包的过程" class="headerlink" title="生成 IPA 包的过程"></a>生成 IPA 包的过程</h2><p>当你运行 <code>bazel build //App:MyApp</code> 这条命令时，Bazel 会从指定的目标 <code>//App:MyApp</code> 开始，递归解析其依赖树，执行构建过程，最终生成一个 IPA 文件。</p><p><code>//App:MyApp</code> 是一个 Bazel 目标，它指向一个定义在 <code>App/BUILD.bazel</code> 文件中的构建规则。Bazel 首先会解析这个目标并确定其直接依赖项。</p><p>假设在 <code>App/BUILD.bazel</code> 文件中定义了一个 <code>ios_application</code> 规则：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ios_application<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"MyApp"</span><span class="token punctuation">,</span>    bundle_id <span class="token operator">=</span> <span class="token string">"com.example.myapp"</span><span class="token punctuation">,</span>    families <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"iphone"</span><span class="token punctuation">,</span> <span class="token string">"ipad"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    infoplists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Info.plist"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    entitlements <span class="token operator">=</span> <span class="token string">"MyApp.entitlements"</span><span class="token punctuation">,</span>    provisioning_profile <span class="token operator">=</span> <span class="token string">"//:MyAppProfile"</span><span class="token punctuation">,</span>    app_icon <span class="token operator">=</span> <span class="token string">"AppIcon"</span><span class="token punctuation">,</span>    launch_images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"LaunchImage"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    deps <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"//App/Core:core_lib"</span><span class="token punctuation">,</span>        <span class="token string">"//App/UI:ui_lib"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>MyApp</code> 依赖于两个库 <code>core_lib</code> 和 <code>ui_lib</code>。</p><p>Bazel 会递归地解析 <code>deps</code> 字段中的依赖项，从而构建整个依赖树。在上面的例子中，Bazel 会进一步解析 <code>//App/Core:core_lib</code> 和 <code>//App/UI:ui_lib</code> 的 <code>BUILD.bazel</code> 文件。</p><p>假设 <code>core_lib</code> 和 <code>ui_lib</code> 是通过 <code>objc_library</code> 规则定义的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># App/Core/BUILD.bazel</span>objc_library<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"core_lib"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"CoreLib.m"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    hdrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"CoreLib.h"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    deps <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"//third_party/some_lib:some_lib"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># App/UI/BUILD.bazel</span>objc_library<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"ui_lib"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"UILib.m"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    hdrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"UILib.h"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    deps <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"//App/Core:core_lib"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，<code>ui_lib</code> 依赖于 <code>core_lib</code>，而 <code>core_lib</code> 依赖于一个第三方库 <code>some_lib</code>。</p><p>在解析完依赖树后，Bazel 开始实际的构建过程。这包括编译源文件、链接目标文件、处理资源文件，并最终打包为一个 IPA 文件。</p><p>Bazel 会首先编译 <code>objc_library</code> 目标。比如，将 <code>CoreLib.m</code> 和 <code>UILib.m</code> 文件编译为 <code>.o</code> 对象文件，并处理相应的头文件。之后，Bazel 将链接这些编译后的对象文件，生成静态库或可执行文件。Bazel 将所有编译结果（如可执行文件、静态库）、资源文件（如 <code>Info.plist</code>、图标）打包为一个 <code>.app</code> 目录。最后，Bazel 使用 <code>ios_application</code> 规则的配置，将 <code>.app</code> 目录压缩并签名为一个 IPA 文件。</p><p>Bazel 通过其强大的缓存和增量构建机制，只重新构建那些发生变化的目标。例如，如果只修改了 <code>UILib.m</code> 文件，那么 Bazel 只会重新编译 <code>ui_lib</code> 相关的目标，而不需要重新构建整个应用。</p><p>生成的 IPA 文件通常会保存在 <code>bazel-bin</code> 目录中，路径类似于 <code>bazel-bin/App/MyApp.ipa</code>。</p><h3 id="依赖分析"><a href="#依赖分析" class="headerlink" title="依赖分析"></a>依赖分析</h3><p>Bazel 的依赖分析（dependency analysis）是其构建系统中关键的一部分，用于决定哪些文件或目标需要重新构建，以及哪些可以重用之前的构建结果。这一过程高度依赖于 Bazel 的增量构建和缓存机制。</p><p>Bazel 依赖分析的核心步骤</p><ul><li>目标（Target）定义与依赖图：Bazel 使用 <code>BUILD</code> 文件定义构建目标（如库、应用、测试等）以及这些目标之间的依赖关系。这些依赖关系形成了一个有向无环图（DAG），用于描述项目的依赖结构。</li><li>文件和目标的输入输出（Input&#x2F;Output）追踪：Bazel 追踪每个目标的输入（源文件、依赖项）和输出（编译后的二进制文件、对象文件等）。任何影响输入的更改都会触发相应目标的重新构建。</li><li>哈希校验与缓存：Bazel 对每个目标的输入文件进行哈希校验（如 MD5 或 SHA-256），并将其存储在缓存中。如果同一目标的输入哈希值未发生变化，则 Bazel 直接使用缓存中的构建结果，而不需要重新构建。</li><li>增量构建：当 Bazel 发现输入文件发生了变化，它会自动标记该目标以及依赖于该目标的所有下游目标为“脏”（dirty），这些目标将在下一次构建时重新编译。</li><li>依赖分析的递归性：Bazel 的依赖分析是递归进行的。如果一个目标的依赖发生变化，Bazel 将递归地检查其所有上游目标是否需要重建。</li></ul><p>以下是一个简单的 Bazel 项目结构示例，展示了 Bazel 的依赖分析过程：</p><p>项目结构</p><pre class="line-numbers language-none"><code class="language-none">my_project&#x2F;├── WORKSPACE├── BUILD├── main&#x2F;│   ├── BUILD│   ├── main.m│   └── AppDelegate.m└── libs&#x2F;    ├── BUILD    ├── libA.m    ├── libA.h    ├── libB.m    └── libB.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目根目录的 <code>BUILD</code> 文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 根目录下的 BUILD 文件</span>ios_application<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"MyApp"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"main/main.m"</span><span class="token punctuation">,</span> <span class="token string">"main/AppDelegate.m"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    deps <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"//libs:libA"</span><span class="token punctuation">,</span>        <span class="token string">"//libs:libB"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>libs/</code> 目录的 <code>BUILD</code> 文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># libs 目录下的 BUILD 文件</span>objc_library<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"libA"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"libA.m"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    hdrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"libA.h"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>objc_library<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"libB"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"libB.m"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    hdrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"libB.h"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">":libA"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># libB 依赖于 libA</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bazel 的依赖分析过程</p><ul><li>依赖图的生成：<code>MyApp</code> 依赖于 <code>libA</code> 和 <code>libB</code>，而 <code>libB</code> 又依赖于 <code>libA</code>。Bazel 会根据这些依赖关系生成一个依赖图。</li><li>输入输出追踪与哈希校验：在每次构建时，Bazel 会对 <code>libA.m</code>、<code>libB.m</code>、<code>main.m</code> 等输入文件进行哈希校验，并将结果与上次构建时的哈希值进行比较。例如，如果 <code>libA.m</code> 发生了变化，Bazel 会检测到其哈希值发生了变化，从而标记 <code>libA</code> 及依赖于它的 <code>libB</code> 和 <code>MyApp</code> 为“脏”。</li><li>增量构建：由于 <code>libA.m</code> 发生了变化，Bazel 将重新构建 <code>libA</code>，然后递归地重新构建依赖它的 <code>libB</code>，最终重新构建 <code>MyApp</code>。</li><li>缓存与重用：如果 <code>libB.m</code> 和 <code>main.m</code> 没有变化，Bazel 可以重用它们之前的编译结果（缓存），只需要重新构建那些受影响的目标。</li><li>输出结果：最终，Bazel 生成一个新的 <code>MyApp</code> 二进制文件，包含了最新的代码改动，并保证所有依赖关系都得到了正确的处理。</li></ul><p>Bazel 使用哈希校验来精确判断哪些输入文件发生了变化。只有当输入文件的哈希值变化时，才会触发相应目标的重新构建，这样可以最大程度地重用已有的构建结果，减少不必要的编译时间。Bazel 的依赖分析是递归的，这意味着任何下游依赖的变化都会向上递归地影响依赖它的所有目标。这确保了每次构建的结果都是一致且正确的。由于 Bazel 精确地追踪了目标的依赖关系和输入输出变化，它能够有效地执行增量构建，只重新编译那些受影响的模块。</p><p>不会影响依赖分析缓存的代码改动有哪些呢？</p><p>在 Bazel 中，构建系统的性能很大程度上依赖于其增量构建和缓存机制。Bazel 使用依赖分析（dependency analysis）来决定哪些部分的代码需要重新构建，哪些部分可以使用缓存结果。</p><p>以下是一些不会影响依赖分析缓存的代码改动类型，这些改动不会导致 Bazel 重新构建依赖的目标，因为它们不会改变编译输出或依赖图：</p><ul><li>注释的更改：添加、删除或修改代码中的注释不会影响构建输出，因为注释不参与代码编译。</li><li>代码格式化：仅涉及代码格式（如缩进、空格、换行）的改动不会影响构建结果，格式化不会改变编译后的二进制文件。</li><li>无实际影响的变量命名更改：在局部范围内（如函数内部）修改变量名称（而不影响函数签名）不会影响依赖分析缓存。</li><li>无效或未使用代码的添加：添加从未使用的代码（如未调用的函数）在某些情况下不会触发 Bazel 的重构建，特别是在这些代码片段与已构建目标无关时。</li><li>函数内部的逻辑更改：在某些情况下，对函数内部进行的改动可能不会影响其他模块的构建，具体取决于目标间的依赖关系和可见性（例如，私有函数内部的更改）。</li></ul><p>以下是一个具体的代码示例，展示了不会影响 Bazel 依赖分析缓存的几种改动：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 示例 BUILD 文件</span><span class="token comment"># 定义一个简单的 iOS 应用程序目标</span>ios_application<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"MyApp"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"main.m"</span><span class="token punctuation">,</span> <span class="token string">"AppDelegate.m"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">":MyLibrary"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span>objc_library<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"MyLibrary"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MyLibrary.m"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    hdrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MyLibrary.h"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设我们有以下 Objective-C 代码：</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">&#x2F;&#x2F; MyLibrary.m#import &quot;MyLibrary.h&quot;&#x2F;&#x2F; 1. 注释的改动&#x2F;&#x2F; 添加一些注释，不会影响 Bazel 的依赖分析缓存&#x2F;&#x2F; 例如：以下注释不会触发重新构建&#x2F;&#x2F; This is a utility function@implementation MyLibrary&#x2F;&#x2F; 2. 变量名更改（局部范围）。在函数内部修改变量名称不会影响其他目标或模块的编译结果，只要变量名的改变不影响接口或其他模块的依赖。- (void)performTask &#123;    int localVar &#x3D; 5;  &#x2F;&#x2F; 如果将 localVar 改为 anotherVar，这不会触发重新构建    NSLog(@&quot;Task performed&quot;);&#125;&#x2F;&#x2F; 3. 代码格式改动。如添加空行、调整缩进或更改代码对齐方式等纯粹的格式改动，不会改变源代码的语义，因此不会触发重新编译。- (void)doSomething &#123;    int a &#x3D; 10;    int b &#x3D; 20;  &#x2F;&#x2F; 对齐方式或空格的改变不会触发重新构建    NSLog(@&quot;Sum: %d&quot;, a + b);&#125;&#x2F;&#x2F; 4. 添加未使用的代码。如果添加的代码从未被调用或引用，Bazel 可能不会重新构建该模块，尤其是在该代码片段没有影响编译输出时。- (void)unusedFunction &#123;    NSLog(@&quot;This function is never called.&quot;);&#125;@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Bazel 的构建过程中，操作图（Action Graph）是一个关键的概念，它定义了构建任务之间的依赖关系，并确保这些任务能够按照正确的顺序并行执行。Baziel 使用操作图来确定哪些任务可以并行执行，哪些任务需要依赖其他任务的结果。</p><p>操作图是一个有向无环图（DAG），其中每个节点代表一个操作（Action），每个边代表操作之间的依赖关系。操作可能包括编译源文件、链接对象文件、打包资源文件等。</p><p>操作图中的节点和边的关系如下：</p><ul><li>节点（Action）：一个构建任务，如编译、链接或打包。</li><li>边（Dependency）： 表示一个操作依赖于另一个操作的输出。</li></ul><p>Bazel 从指定的构建目标（如 <code>bazel build //App:MyApp</code>）开始，递归地解析 <code>BUILD</code> 文件中定义的目标和依赖关系，生成操作图。具体步骤如下：</p><ol><li>Bazel 解析 <code>BUILD</code> 文件，找到指定目标和其依赖项。</li><li>每个构建规则（如 <code>objc_library</code>, <code>ios_application</code>）会生成一组操作。这些操作可能包括编译源文件、链接目标文件等。</li><li>Bazel 将生成的操作按照依赖关系连接起来，形成操作图。</li></ol><p>Bazel 确保操作图中的操作按正确的顺序并行运行，遵循以下原则：</p><ul><li>一个操作只能在它所有的依赖操作完成后才能运行。</li><li>Bazel 会并行执行那些没有依赖关系或者依赖已经满足的操作。</li></ul><p>假设我们有一个简单的项目，其中包含两个库和一个应用程序。每个库都有自己的源文件和头文件，应用程序依赖于这两个库。以下是 <code>BUILD</code> 文件的定义：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># App/Core/BUILD.bazel</span>objc_library<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"core_lib"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"CoreLib.m"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    hdrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"CoreLib.h"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment"># App/UI/BUILD.bazel</span>objc_library<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"ui_lib"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"UILib.m"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    hdrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"UILib.h"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    deps <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"//App/Core:core_lib"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment"># App/BUILD.bazel</span>ios_application<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"MyApp"</span><span class="token punctuation">,</span>    bundle_id <span class="token operator">=</span> <span class="token string">"com.example.myapp"</span><span class="token punctuation">,</span>    families <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"iphone"</span><span class="token punctuation">,</span> <span class="token string">"ipad"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    infoplists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Info.plist"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    deps <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"//App/Core:core_lib"</span><span class="token punctuation">,</span>        <span class="token string">"//App/UI:ui_lib"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于上述项目，Bazel 会生成如下操作图：</p><ol><li><p><strong>编译操作：</strong></p><ul><li><code>CoreLib.m -&gt; CoreLib.o</code>（<code>core_lib</code> 的编译操作）</li><li><code>UILib.m -&gt; UILib.o</code>（<code>ui_lib</code> 的编译操作）</li></ul></li><li><p><strong>链接操作：</strong></p><ul><li><code>core_lib</code> 编译完成后，可以立即编译 <code>ui_lib</code>，因为 <code>ui_lib</code> 依赖于 <code>core_lib</code>。</li><li>当 <code>core_lib</code> 和 <code>ui_lib</code> 都编译完成后，可以将它们链接到一起，生成 <code>MyApp</code> 的可执行文件。</li></ul></li><li><p><strong>打包操作：</strong></p><ul><li>在所有链接操作完成后，将生成的二进制文件与资源文件（如 <code>Info.plist</code>）打包为 <code>.app</code> 目录，然后进一步打包为 IPA 文件。</li></ul></li></ol><p>在这个操作图中，<code>CoreLib.o</code> 和 <code>UILib.o</code> 的编译操作可以并行执行，因为它们没有依赖关系。链接操作则需要等待所有编译操作完成后才能执行。</p><p>Bazel 在内部使用操作图来调度这些任务。通过分析操作图，Bazel 能够确定哪些任务可以并行执行，哪些任务需要等待依赖完成，从而最大化利用多核 CPU 的能力，加速构建过程。</p><h3 id="query指令找依赖关系"><a href="#query指令找依赖关系" class="headerlink" title="query指令找依赖关系"></a>query指令找依赖关系</h3><p>Bazel 的 <code>query</code> 命令是一种强大的工具，用于在 Monorepo（单体代码库）中查找和分析目标之间的依赖关系。通过 <code>query</code>，你可以获取关于构建目标的详细信息，包括它们的依赖关系、反向依赖、测试等。</p><p><code>bazel query</code> 命令的一般语法如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'&lt;expression>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;expression&gt;</code> 是你想要查询的表达式。Bazel 提供了一系列表达式来帮助你查找所需的信息。</p><p>以下是常见的 Bazel Query 表达式</p><p>列出工作区中所有可用的构建目标：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'//...'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>//...</code> 表示从当前工作区的根目录开始递归查找所有目标。</p><p>查找某个目标的所有直接和间接依赖：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'deps(&lt;target>)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，查找 <code>//app:main</code> 目标的所有依赖：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'deps(//app:main)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查找哪些目标依赖于某个特定目标（即反向依赖）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'rdeps(&lt;scope>, &lt;target>)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，查找工作区中哪些目标依赖于 <code>//lib:my_library</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'rdeps(//..., //lib:my_library)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，列出所有的测试目标：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'kind(test, //...)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>kind(test, //...)</code> 将查找工作区中的所有测试目标。</p><p>如果只想查找目标的直接依赖而非递归依赖，可以使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'deps(&lt;target>, 1)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'deps(//app:main, 1)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <code>attr</code> 过滤带有特定属性的目标。例如，查找所有带有特定标签的目标：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'attr(tags, "my_tag", //...)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设你有以下项目结构：</p><pre class="line-numbers language-none"><code class="language-none">workspace&#x2F;├── app&#x2F;│   ├── BUILD│   ├── main.swift│   └── AppDelegate.swift├── lib&#x2F;│   ├── BUILD│   ├── util.swift│   └── helper.swift└── third_party&#x2F;    ├── BUILD    └── external_lib.swift<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>app/BUILD</code> 文件中，你定义了一个 <code>ios_application</code> 目标：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ios_application<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"MyApp"</span><span class="token punctuation">,</span>    bundle_id <span class="token operator">=</span> <span class="token string">"com.example.MyApp"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"main.swift"</span><span class="token punctuation">,</span> <span class="token string">"AppDelegate.swift"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"//lib:util"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>lib/BUILD</code> 文件中定义了一个 <code>swift_library</code> 目标：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">swift_library<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"util"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"util.swift"</span><span class="token punctuation">,</span> <span class="token string">"helper.swift"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"//third_party:external_lib"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以运行以下命令来查找 <code>MyApp</code> 的所有直接和间接依赖：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'deps(//app:MyApp)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将输出：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;app:MyApp&#x2F;&#x2F;lib:util&#x2F;&#x2F;third_party:external_lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查找依赖于 <code>external_lib</code> 的所有目标</p><p>你可以使用以下命令来查找反向依赖：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'rdeps(//..., //third_party:external_lib)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将列出所有依赖于 <code>external_lib</code> 的目标，比如 <code>//lib:util</code>。</p><p>你还可以生成图形化的依赖关系图，使用 <code>dot</code> 格式输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel query <span class="token string">'deps(//app:MyApp)'</span> --output graph <span class="token operator">></span> graph.dot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用 <code>Graphviz</code> 等工具将 <code>graph.dot</code> 文件转换为图形文件。</p><p><code>query</code> 指令是理解和管理 Monorepo 中依赖关系的关键工具。它提供了多种强大的表达式，帮助你轻松地查找目标的依赖关系、反向依赖、过滤目标等。在大型代码库中，使用 <code>query</code> 可以大大简化依赖关系的管理，并且可以帮助你识别不必要的依赖或者循环依赖。</p><h3 id="远程缓存"><a href="#远程缓存" class="headerlink" title="远程缓存"></a>远程缓存</h3><p>Bazel 的远程缓存功能允许你在不同的开发环境、构建机器或 CI 系统之间共享构建产物。这可以显著加快构建速度，因为已经构建好的产物可以被重复使用，而不需要重新编译。</p><p>Bazel 的远程缓存功能可以将构建产物（如编译后的二进制文件、对象文件等）存储在一个远程存储系统中。当你在不同环境或机器上构建同一个项目时，Bazel 会检查远程缓存，并下载已存在的构建产物，而不必重新构建。</p><p>Bazel 支持多种远程缓存后端，包括：</p><ul><li>HTTP&#x2F;HTTPS 服务器：可以使用支持 HTTP 的远程服务器作为缓存。</li><li>云存储：如 Google Cloud Storage (GCS) 或 Amazon S3。</li><li>gRPC 缓存服务：可以通过 gRPC 接口进行缓存和检索。</li></ul><p>在你的项目中，可以通过 <code>~/.bazelrc</code> 文件或项目级别的 <code>.bazelrc</code> 文件来配置远程缓存。以下是如何配置不同类型远程缓存的示例。</p><p>配置 HTTP 远程缓存</p><pre class="line-numbers language-none"><code class="language-none">build --remote_cache&#x3D;http:&#x2F;&#x2F;my-cache-server.com&#x2F;cache&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你使用 Google Cloud Storage (GCS) 作为远程缓存，你可以这样配置：</p><pre class="line-numbers language-none"><code class="language-none">build --remote_cache&#x3D;grpc:&#x2F;&#x2F;gcs.example.com&#x2F;bucket-namebuild --google_credentials&#x3D;&#x2F;path&#x2F;to&#x2F;credentials.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在这个例子中，<code>grpc://gcs.example.com/bucket-name</code> 是 GCS 的地址，<code>/path/to/credentials.json</code> 是你的 GCS 凭证文件。</p><p>配置 gRPC 远程缓存</p><pre class="line-numbers language-none"><code class="language-none">build --remote_cache&#x3D;grpc:&#x2F;&#x2F;my-grpc-cache-server.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以使用 gRPC 缓存服务器，如 BuildBarn 或 BuildGrid 来搭建自己的 gRPC 远程缓存服务。</p><p>有些远程缓存服务需要身份认证，如 GCS 或 Amazon S3。对于 GCS，你可以配置 <code>google_credentials</code> 选项，或者使用 <code>gcloud auth</code> 命令登录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcloud auth application-default login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于需要 AWS 认证的服务，你可以配置 AWS CLI，然后通过环境变量传递认证信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">AWS_ACCESS_KEY_ID</span><span class="token operator">=</span><span class="token string">"your-access-key-id"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">AWS_SECRET_ACCESS_KEY</span><span class="token operator">=</span><span class="token string">"your-secret-access-key"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置完成后，Bazel 会自动使用远程缓存。在运行构建命令时，如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel build //App:MyApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Bazel 会：</p><ol><li>首先检查远程缓存，是否有匹配当前源代码和构建配置的缓存。</li><li>如果找到匹配的缓存，直接下载使用，而不重新编译。</li><li>如果没有找到匹配的缓存，正常编译并将结果上传到远程缓存，以便下次使用。</li></ol><p>注意远程缓存和远程执行是不同的概念。远程缓存仅共享构建产物，而远程执行允许你在远程机器上执行整个构建过程。你可以根据需要选择合适的方案。</p><p>以下是一个项目级别的 <code>.bazelrc</code> 文件示例，它配置了远程缓存到一个 HTTP 服务器：</p><pre class="line-numbers language-none"><code class="language-none"># .bazelrcbuild --remote_cache&#x3D;http:&#x2F;&#x2F;cache.example.com&#x2F;cache&#x2F;build --disk_cache&#x3D;&#x2F;path&#x2F;to&#x2F;local&#x2F;cachebuild --google_default_credentials<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="远程执行配置"><a href="#远程执行配置" class="headerlink" title="远程执行配置"></a>远程执行配置</h3><p>Bazel 的远程执行功能允许你在远程服务器或集群上分布式执行构建任务，而不是在本地机器上执行。这种能力特别适用于大规模的项目，可以显著缩短构建时间，因为它利用了多台机器的计算资源。</p><p>远程执行让 Bazel 在远程执行环境中运行构建任务，例如编译、链接、测试等。Bazel 将构建任务分发到一个或多个远程执行节点，这些节点并行处理任务并将结果返回给本地 Bazel 客户端。</p><p>一个典型的远程执行环境由以下组件组成：</p><ul><li>远程执行服务器：处理来自 Bazel 的任务，并将它们分发给执行节点。</li><li>远程工作节点：这些节点执行实际的构建任务。</li><li>Remote Cache（远程缓存）：存储构建产物以便重复使用，避免重新执行相同任务。</li></ul><p>要启用 Bazel 的远程执行功能，你需要配置 Bazel 来连接远程执行服务。配置通常在 <code>.bazelrc</code> 文件中完成。</p><p>假设你有一个远程执行服务器，它的地址是 <code>remotebuild.example.com</code>。你可以通过以下配置启用远程执行：</p><pre class="line-numbers language-none"><code class="language-none"># .bazelrcbuild --remote_executor&#x3D;grpc:&#x2F;&#x2F;remotebuild.example.com:443build --remote_cache&#x3D;grpc:&#x2F;&#x2F;remotebuild.example.com:443build --remote_timeout&#x3D;300build --spawn_strategy&#x3D;remotebuild --strategy&#x3D;Javac&#x3D;remotebuild --strategy&#x3D;CppCompile&#x3D;remotebuild --strategy&#x3D;Objc&#x3D;remote<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>--remote_executor</code>：指定远程执行服务器的地址。</li><li><code>--remote_cache</code>：配置远程缓存的地址，这里可以和远程执行服务器一致。</li><li><code>--remote_timeout</code>：设置远程执行的超时时间。</li><li><code>--spawn_strategy=remote</code>：告诉 Bazel 使用远程策略执行所有构建任务。</li><li><code>--strategy=Javac=remote</code> 等：为特定类型的任务指定使用远程执行。</li></ul><p>如果远程执行服务器需要身份验证，你可能需要配置凭据。对于 Google Cloud Remote Build Execution (RBE) 服务，典型的配置如下：</p><pre class="line-numbers language-none"><code class="language-none">build --google_credentials&#x3D;&#x2F;path&#x2F;to&#x2F;credentials.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <code>gcloud</code> 工具登录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcloud auth application-default login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置远程执行服务（如 BuildFarm、BuildGrid 或 Google 的 Remote Build Execution (RBE)）通常涉及以下步骤：</p><ol><li>安装和配置 Remote Execution Server：这包括配置服务器的计算资源、执行策略等。</li><li>配置 Remote Workers：确保工作节点能够连接到服务器，并具备执行构建任务所需的环境和依赖。</li><li>配置 Remote Cache：搭建和配置远程缓存，以便存储和共享构建产物。</li></ol><p>配置完成后，你可以运行 Bazel 命令进行远程执行，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel build //App:MyApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个过程中，Bazel 会：</p><ol><li>将构建请求发送到远程执行服务器。</li><li>服务器将任务分发到远程工作节点，并行执行。</li><li>远程节点完成任务后，将结果和构建产物返回到本地。</li><li>本地 Bazel 客户端将最终产物（如可执行文件或 IPA 文件）生成。</li></ol><p>使用远程执行的好处</p><ul><li>通过分布式构建，可以显著缩短构建时间。</li><li>充分利用远程集群的计算资源，而不是依赖本地机器的性能。</li><li>确保所有开发人员、CI&#x2F;CD 系统在相同的环境中执行构建，减少“在我机器上正常”的问题。</li></ul><p>假设你有一个项目 <code>App</code>，其中包括一个 <code>BUILD</code> 文件。以下是如何在远程执行环境中构建这个项目的完整配置。</p><p><code>.bazelrc</code> 文件：</p><pre class="line-numbers language-none"><code class="language-none">build --remote_executor&#x3D;grpc:&#x2F;&#x2F;remotebuild.example.com:443build --remote_cache&#x3D;grpc:&#x2F;&#x2F;remotebuild.example.com:443build --google_credentials&#x3D;&#x2F;path&#x2F;to&#x2F;credentials.jsonbuild --spawn_strategy&#x3D;remotebuild --strategy&#x3D;CppCompile&#x3D;remotebuild --strategy&#x3D;Javac&#x3D;remotebuild --strategy&#x3D;Objc&#x3D;remote<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后你可以执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel build //App:MyApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自定义构建规则"><a href="#自定义构建规则" class="headerlink" title="自定义构建规则"></a>自定义构建规则</h3><p>Bazel 的可扩展性是其强大功能之一，它允许开发者为尚未支持的编程语言或构建工具创建自定义的构建规则。通过编写自定义规则，你可以让 Bazel 识别、编译、链接特定语言的代码，并将它们集成到现有的 Bazel 构建系统中。</p><p>在自定义规则中，你可以指定输入、输出、依赖关系以及构建过程中的具体操作。</p><p>一个自定义的 Bazel 构建规则通常包括以下部分：</p><ul><li>规则定义：描述构建过程的逻辑和依赖关系。</li><li>构建步骤：实际执行的命令，比如编译或链接操作。</li><li>规则调用：在 <code>BUILD</code> 文件中调用自定义规则来应用于实际项目。</li></ul><p>假设我们要为一个尚未被官方支持的编程语言 <code>MyLang</code> 创建一个简单的构建规则，该规则能够将 <code>.mylang</code> 源文件编译为可执行文件。</p><p>首先，在项目的根目录下创建一个 <code>mylang_rules.bzl</code> 文件，用于定义 <code>MyLang</code> 的构建规则。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># mylang_rules.bzl</span><span class="token keyword">def</span> <span class="token function">_mylang_binary_impl</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 输入文件</span>    source <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">.</span>src        <span class="token comment"># 输出文件 (可执行文件)</span>    output <span class="token operator">=</span> ctx<span class="token punctuation">.</span>actions<span class="token punctuation">.</span>declare_file<span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>label<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token comment"># 编译命令</span>    ctx<span class="token punctuation">.</span>actions<span class="token punctuation">.</span>run<span class="token punctuation">(</span>        inputs<span class="token operator">=</span><span class="token punctuation">[</span>source<span class="token punctuation">]</span><span class="token punctuation">,</span>        outputs<span class="token operator">=</span><span class="token punctuation">[</span>output<span class="token punctuation">]</span><span class="token punctuation">,</span>        arguments<span class="token operator">=</span><span class="token punctuation">[</span>source<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token string">"-o"</span><span class="token punctuation">,</span> output<span class="token punctuation">.</span>path<span class="token punctuation">]</span><span class="token punctuation">,</span>        executable<span class="token operator">=</span><span class="token string">"path/to/mylang_compiler"</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> DefaultInfo<span class="token punctuation">(</span>        executable<span class="token operator">=</span>output<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token comment"># 定义 mylang_binary 规则</span>mylang_binary <span class="token operator">=</span> rule<span class="token punctuation">(</span>    implementation<span class="token operator">=</span>_mylang_binary_impl<span class="token punctuation">,</span>    attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">"src"</span><span class="token punctuation">:</span> attr<span class="token punctuation">.</span>label<span class="token punctuation">(</span>allow_single_file<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 单个源文件</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    executable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment"># 生成可执行文件</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>_mylang_binary_impl</code> 实现了 <code>mylang_binary</code> 规则的逻辑，它使用 Bazel 的 <code>ctx.actions.run</code> 来定义编译过程。<code>mylang_binary</code>定义了一个新的构建规则，允许我们在 <code>BUILD</code> 文件中使用 <code>mylang_binary</code> 规则来处理 <code>MyLang</code> 源文件。</p><p>在你的项目中，使用自定义的 <code>mylang_binary</code> 规则。比如，在 <code>my_project/BUILD</code> 文件中：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># my_project/BUILD</span>load<span class="token punctuation">(</span><span class="token string">"//:mylang_rules.bzl"</span><span class="token punctuation">,</span> <span class="token string">"mylang_binary"</span><span class="token punctuation">)</span>mylang_binary<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"my_program"</span><span class="token punctuation">,</span>    src <span class="token operator">=</span> <span class="token string">"main.mylang"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 <code>BUILD</code> 文件表示使用 <code>mylang_binary</code> 规则编译 <code>main.mylang</code> 文件，并生成一个名为 <code>my_program</code> 的可执行文件。</p><p>你可以通过 Bazel 构建这个项目：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bazel build //my_project:my_program<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将使用 <code>MyLang</code> 编译器将 <code>main.mylang</code> 编译为 <code>my_program</code> 可执行文件。</p><p>自定义规则的功能可以进一步扩展。例如，你可以添加支持多个源文件、库依赖、资源文件等。如果你希望 <code>mylang_binary</code> 支持多个源文件，可以修改规则定义：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># mylang_rules.bzl</span><span class="token keyword">def</span> <span class="token function">_mylang_binary_impl</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sources <span class="token operator">=</span> ctx<span class="token punctuation">.</span>files<span class="token punctuation">.</span>srcs    output <span class="token operator">=</span> ctx<span class="token punctuation">.</span>actions<span class="token punctuation">.</span>declare_file<span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>label<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment"># 假设 mylang_compiler 能够接受多个源文件</span>    args <span class="token operator">=</span> <span class="token punctuation">[</span>source<span class="token punctuation">.</span>path <span class="token keyword">for</span> source <span class="token keyword">in</span> sources<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">"-o"</span><span class="token punctuation">,</span> output<span class="token punctuation">.</span>path<span class="token punctuation">]</span>    ctx<span class="token punctuation">.</span>actions<span class="token punctuation">.</span>run<span class="token punctuation">(</span>        inputs<span class="token operator">=</span>sources<span class="token punctuation">,</span>        outputs<span class="token operator">=</span><span class="token punctuation">[</span>output<span class="token punctuation">]</span><span class="token punctuation">,</span>        arguments<span class="token operator">=</span>args<span class="token punctuation">,</span>        executable<span class="token operator">=</span><span class="token string">"path/to/mylang_compiler"</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> DefaultInfo<span class="token punctuation">(</span>        executable<span class="token operator">=</span>output<span class="token punctuation">,</span>    <span class="token punctuation">)</span>mylang_binary <span class="token operator">=</span> rule<span class="token punctuation">(</span>    implementation<span class="token operator">=</span>_mylang_binary_impl<span class="token punctuation">,</span>    attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">"srcs"</span><span class="token punctuation">:</span> attr<span class="token punctuation">.</span>label_list<span class="token punctuation">(</span>allow_files<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 支持多个源文件</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    executable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>BUILD</code> 文件中：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># my_project/BUILD</span>mylang_binary<span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"my_program"</span><span class="token punctuation">,</span>    srcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"main.mylang"</span><span class="token punctuation">,</span> <span class="token string">"utils.mylang"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过创建自定义规则，你可以将 <code>MyLang</code> 与 Bazel 的其他功能（如远程缓存、远程执行、增量构建等）集成在一起。你还可以通过将规则打包为 Bazel 模块，供其他项目复用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要想说说 iOS 的性能问题的原因，如何监控发现问题，以及如何预防和解决这些问题。&lt;/p&gt;
&lt;p&gt;为啥要说是二刷呢，因为以前我也写过好几篇性能相关的文章。有性能优化的&lt;a href=&quot;https://starming.com/2017/06/20/deeply-ios
      
    
    </summary>
    
      <category term="Programming" scheme="https://starming.com/categories/Programming/"/>
    
    
      <category term="iOS" scheme="https://starming.com/tags/iOS/"/>
    
      <category term="Performance optimization" scheme="https://starming.com/tags/Performance-optimization/"/>
    
  </entry>
  
  <entry>
    <title>海贼王之感人名场面</title>
    <link href="https://starming.com/2024/08/18/one-piece-1/"/>
    <id>https://starming.com/2024/08/18/one-piece-1/</id>
    <published>2024-08-18T13:24:09.000Z</published>
    <updated>2024-08-19T01:11:39.904Z</updated>
    
    <content type="html"><![CDATA[<p>这次播客是我，柠檬和田阳一起聊了下空岛篇以及之前的故事。田师傅渊博的海贼王知识非常值得一听。可在<a href="https://www.xiaoyuzhoufm.com/episode/66c21c4733591c27beff0948">小宇宙收听</a>，或扫码下图。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/15.jpg" class="lozad post-image"src="/uploads/one-piece-1/15.jpg"></p><p>海贼王为什么有那么多令人感动的看一次哭一次的关于友情的名场面，我想可能是因为这些都是生活中所难以获得的美好与渴望吧。</p><p>下面让我看一次感动一次的名场面。</p><p>第一个是香克斯为救路飞丢掉一只手臂，让我感动的是香克斯的气度，也是因为他的气度一只影响着路飞后面走的路。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/01.jpg" class="lozad post-image"src="/uploads/one-piece-1/01.jpg"></p><p>接下来是索隆的回忆，回忆中他的竞争对手，榜样和目标霜月克伊娜向他展露了柔软的一面，可能索隆还小不能理解她，但却让索隆因此更加坚定了自己的目标，同时带上了克伊娜的那份。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/02.jpg" class="lozad post-image"src="/uploads/one-piece-1/02.jpg"></p><p>只是一只小狗，没有能力守护什么，却不言放弃，还默默接受着结果。这感动了路飞，也让我了解到了海贼王的意义。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/03.jpg" class="lozad post-image"src="/uploads/one-piece-1/03.jpg"></p><p>一个人几十年一直在追求追寻自己想得到的宝箱，在得到后发现是虚无。他可能不会埋怨了，只会感谢珍惜身边那些充满善意，善良的人吧。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/04.jpg" class="lozad post-image"src="/uploads/one-piece-1/04.jpg"></p><p>路飞和黑猫队长对战，发现黑猫队长是个只顾自己，只会利用伙伴的人，于是发出感叹，说他能力再强又怎样，还不如乌索普。这是因为什么呢？是气度，乌索普志气是保护身边的人，远望着无边无际的大海，有了这样的气度才能够有远航，冒险和称霸海洋的权利。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/05.jpg" class="lozad post-image"src="/uploads/one-piece-1/05.jpg"></p><p>仪式感的解散，代表着乌索普和孩童时代的告别，告别舒适、安全，去面对挫折，煎熬。还好有着相互信赖的伙伴。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/06.jpg" class="lozad post-image"src="/uploads/one-piece-1/06.jpg"></p><p>当两个人面对未知未来的时，是自保还是成全对方，这是对人性的考验。哲夫的选择换来了山治的感恩。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/07.jpg" class="lozad post-image"src="/uploads/one-piece-1/07.jpg"></p><p>成年后的山治表面上看着吊儿郎当，但对哲夫的第二次施恩，却是发至肺腑的感激。哲夫真切的关心，和山治的下跪，让我深深感到他们之间的羁绊有多深。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/08.jpg" class="lozad post-image"src="/uploads/one-piece-1/08.jpg"></p><p>不管娜美如何为了自己村子而背叛了路飞他们，路飞都是一只相信着她，娜美一只都不敢轻易去信任别人，直到最后无路可走时，才向路飞求助，路飞一如既往的相信着娜美，因为他从一开始就知道娜美是善良的。这种无条件的付出，赢得了娜美的信任。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/09.jpg" class="lozad post-image"src="/uploads/one-piece-1/09.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/10.jpg" class="lozad post-image"src="/uploads/one-piece-1/10.jpg"></p><p>在和路飞分别时的这段非常感人。海军的迫近，让此时无声更胜有声，这就是伙伴的标记。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/11.jpg" class="lozad post-image"src="/uploads/one-piece-1/11.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/12.jpg" class="lozad post-image"src="/uploads/one-piece-1/12.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/13.jpg" class="lozad post-image"src="/uploads/one-piece-1/13.jpg"></p><p>当罗宾下决心要通过牺牲自己来保护大家，但大家全然不顾的追来了，她的身世决定她的未来是暗淡的，她也担心未来大家会抛弃她，于是她想死。但是与世界为敌又怎样，一直以来都是牺牲小我成全大我，但是路飞和乌索普的行为让罗宾明白，再渺小的人为了珍爱的人也可以和世界为敌。</p><p>有一群愿意和你一起走下去的伙伴，那么大海也就是你的。这一段是看一遍哭一遍，令人难忘。这部漫画在我心中永存。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/one-piece-1/14.jpg" class="lozad post-image"src="/uploads/one-piece-1/14.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这次播客是我，柠檬和田阳一起聊了下空岛篇以及之前的故事。田师傅渊博的海贼王知识非常值得一听。可在&lt;a href=&quot;https://www.xiaoyuzhoufm.com/episode/66c21c4733591c27beff0948&quot;&gt;小宇宙收听&lt;/a&gt;，或扫码下图。&lt;
      
    
    </summary>
    
      <category term="Podcast" scheme="https://starming.com/categories/Podcast/"/>
    
    
      <category term="Podcast" scheme="https://starming.com/tags/Podcast/"/>
    
      <category term="Manga" scheme="https://starming.com/tags/Manga/"/>
    
  </entry>
  
  <entry>
    <title>鸟山明和他的龙珠</title>
    <link href="https://starming.com/2024/08/10/dragonball-story/"/>
    <id>https://starming.com/2024/08/10/dragonball-story/</id>
    <published>2024-08-10T00:05:23.000Z</published>
    <updated>2024-08-10T01:24:27.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次录了期圣斗士的播客，还写了篇<a href="%5Bhttps://starming.com/2024/07/20/saint-seiya-story/%5D(https://starming.com/2024/07/20/saint-seiya-story/)">文章</a>。这次录了期<a href="https://www.xiaoyuzhoufm.com/episode/66b56568db5e6d6bf9f8a661">龙珠话题的播客</a>，聊下龙珠，说下龙珠的故事，鸟山明与龙珠的那些事，比如他的助手、编辑以及他平日的一些爱好。作为一个老的漫画爱好者，我还会说说以前海南版七龙珠和画书大王杂志的一些事。本期播客地址，或扫码下图中二维码收听。铭莉双收播客已经有了 <a href="https://feed.xyzfm.space/4fw9n8q79hdk">RSS 连接</a>，可以通过泛用型客户端收听，也可以直接在苹果 Podcast 里搜索“铭莉双收”订阅收听，记得五星好评哦。以下内容是对播客内容的一点补充。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/dragonball-story/01.jpg" class="lozad post-image"src="/uploads/dragonball-story/01.jpg"></p><h2 id="龙珠的影响力"><a href="#龙珠的影响力" class="headerlink" title="龙珠的影响力"></a>龙珠的影响力</h2><p>龙珠的影响力不言而喻，下面用一些排行数据来直观感受下。</p><p>日本漫画全球销量排行榜，龙珠排在第二，第一是海贼王。火影第四，柯南第五。日本NHK官方排名前5的动漫，龙珠也是第二，第一是千与千寻，第三是海贼王。火影第四。日本最受欢迎漫画家排行榜中鸟山明位居第二，第一是手冢治虫。宫崎骏是第三。日本动漫协会民调评出最经典35部动漫中，龙珠是第一，海贼王第二，火影是第四。</p><p>可见龙珠在日本动漫界地位。</p><p>我所看的是情况是谁家要是有全套海南版七龙珠，一定会被全班羡慕，去他家蹭着看。因为七龙珠的火爆，一些其他的漫画也会被改成以七开头的，比如乱马就被改成七笑拳，连作者高桥留美子都被改成了鸟山明。同期还有很多漫画比如《哆啦A梦》、《圣斗士星矢》、《侠探寒羽良》，但是看得最多的还是龙珠。</p><h2 id="龙珠和西游记的关系"><a href="#龙珠和西游记的关系" class="headerlink" title="龙珠和西游记的关系"></a>龙珠和西游记的关系</h2><p>鸟山明当初想创作一部带有《西游记》风格的冒险故事。</p><p>龙珠开始有点西游记冒险的那味，也用了一些西游记中元素，比如主角的名字，如意棒，筋斗云。还有乌龙的形象就是借用了猪八戒。</p><p>《西游记》最初是通过说书人和民间智慧口头流传下来的，后来由吴承恩在明朝将这些故事集结成书。到了民国时期，考证出吴承恩是《西游记》的整理者。几百年前写的《西游记》没有版权，即使是现代小说，在我国超过50年也进入公共领域，不再享有版权保护。进入公共领域意味着任何人都可以改编和商业使用这部作品，无需支付原作者费用。因此龙珠使用西游记中的元素也是没有问题的。</p><h3 id="龙珠角色名字来源"><a href="#龙珠角色名字来源" class="headerlink" title="龙珠角色名字来源"></a>龙珠角色名字来源</h3><p>因为龙珠流通的版本较多，本文主要取了个中，没有用最早的海南版和最新的台版，而是用的中国少年儿童出版社的翻译名，比如库林就是海南版中的小林，比克是短笛，亚姆查就是乐平。如有地方错了，可能是我看的版本太多导致混淆的缘故，请见谅。</p><p>下面是鸟山明怎么给龙珠里的人物命名的。基本都是根据生活中常见吃穿物品的音来起名的。</p><p>孙悟空以及初期冒险碰到的人都是有中国特色的，亚姆查是饮茶日语 yamcha 的发音。乌龙、普尔、天津饭、饺子、鹤仙人、桃白白等。悟饭的日语发音是 gouhan，在日语中也就是饭的意思。皮拉夫看起来没有中国味，但是确实中式杂烩炒饭的法语发音，他的手下阿修和小舞的是烧卖 shyumai 的发音。</p><p>布尔玛日语是ブルマ，读音 bulma，日语意思是女生短裤。布尔玛父亲布利夫日语意思是男性内裤，儿子特兰克斯意思是男性短裤，女儿布拉(Bra)是胸罩的意思。他们一家主题是内衣。</p><p>牛魔王的女儿琪琪的名字来自日语牛的读音 chichi。</p><p>库林的日语发音是 kuri，是光头的意思。小林女儿马萝是光头的法语发音。</p><p>红绸军里的人都是按照颜色来的，蓝将军、白将军、银大佐、紫曹长、紫罗兰大佐、黑副官、红总帅</p><p>比克大魔王是短笛的发音，手下都是乐器，皮亚诺、辛巴鲁、坦巴利、多拉姆分别对应钢琴 piano，钹 cymbal，铃鼓 tambourine，鼓 drum。</p><p>赛亚人 saiya 是日语蔬菜发音 yasai 倒着发。贝吉塔是蔬菜阴雨 vegetable 的前几个字母 vegeta 的发音。那巴是菜叶日语 nappa 发音。卡卡罗特是胡萝卜的英语发音 carotte，他衣服颜色也是胡萝卜的颜色，哥哥拉蒂兹是英语萝卜 radish 的发音，父亲巴达克是牛蒡英语 burdock 的发音。可以看出赛亚人都是蔬菜。</p><p>那美克星篇中弗利萨是能够装所有蔬菜的冰箱 freezer 的发音，他的父亲格尔多大王是 kingcold，也就是冷王的意思。冰箱还能够装水果，所以弗利萨的手下都是水果，比如第一个被贝吉塔杀掉的是丘夷是水果 kiwi，也就是猕猴桃的意思。萨博是日本水果朱栾 zabon 的发音，多多利亚是榴莲 durian 的发音。</p><p>基纽是牛奶日语 ginyu 发音，古尔多是酸奶德文 yoghurt 后半音，吉斯是奶酪英语 cheese 的发音，巴特是黄油英语 butter 的发音。简直就是奶制品特种部队。</p><p>人造人基本就简略到只用编号来表示了。</p><p>悟饭读高中时碰到的同学名字都是以学习用具命名的，比如莎普是铅笔刀英语 sharpener 的发音，伊雷莎是橡皮 eraser 的发音。</p><p>布欧篇更敷衍了，直接将一段灰姑娘电影中的咒语“比比迪巴比迪布欧”拆成不同人的名字，比比迪，巴菲迪，布欧。欧布就是布欧倒过来念。</p><p>下面按照时间线说说龙珠的内容。</p><h2 id="龙珠时间线"><a href="#龙珠时间线" class="headerlink" title="龙珠时间线"></a>龙珠时间线</h2><h3 id="正传前"><a href="#正传前" class="headerlink" title="正传前"></a>正传前</h3><p>宇宙中有个恐怖的魔物叫魔罗，它能吸收生命能量并用来增强自己，还能攻击敌人。魔罗摧毁了很多星球，最终大界王神耗费大量神力封印了它的魔力。魔导师比比迪创造了布欧，布欧在数年间摧毁了成千上万颗行星，并消灭了五位界王神中的四位，吸收了大界王神后变成肥布欧，西界王神艰难地将布欧封印在蛋壳内并抛入太空。</p><p>杏仁开始管理五行山上的八卦炉。小加力古的祖先从魔境星来到地球。邪道神化身为蛇道的公主并在路旁建了一座宫殿。占卜婆婆开始掌管人们的命运。阎魔大王穿越蛇道得到北界王的教导进行修炼，期间遇到蛇公主，蛇公主对他产生好感。龟仙人出生。比克在天神门下修炼。龟仙人18岁时在师父武泰斗的教导下修炼，并迷恋上少女芳芳。鹤仙人的兄弟桃白白出生。龟仙人在海滩捡到一颗三星龙珠。第一届天下第一武道会开幕。老孙悟饭出生。</p><p>那美克星遭遇可怕的风暴，许多娜美克星人丧生。卡达祖把儿子比克送上太空以保全性命，但太空船迫降地球。加力古卷土重来，企图夺取天神之位，天神被驱逐后，比克担任天神，但他的邪念分离出来，成为比克大魔王。大魔王开始破坏大地，但不久后被武泰斗用魔封波封印在电饭煲内，武泰斗也因此牺牲。</p><p>达普拉对地球进行了调研，为魔人布欧的苏醒做准备，但调研得太早了。</p><p>传说中的超级赛亚人在宇宙间大肆破坏。赛亚人集结占领了普兰特星，将其改名为贝吉塔星。祖福鲁族科学家赖知博士被杀，祖福鲁人被灭族，他们的科技被赛亚人夺走。赛亚人开始在宇宙间航行，与异星人接触并发展贸易。赛亚人通过占领星球并将资源卖给异星人，与弗利萨建立了伙伴关系。贝吉塔王与皇后结婚。贝吉塔王子、亚姆查、布尔玛、天津饭先后出生，地球新国王诞生。弗利萨开始对赛亚人感到不安，库林出生。弗利萨进攻贝吉塔星球，贝吉塔行星毁灭，孙悟空被父亲巴达克送往地球。巴达克试图挑战弗利萨但失败，卡卡罗特被送往地球。</p><p>卡卡罗特出生。老孙悟饭在竹林中发现赛亚人飞行器中的婴儿并收养了他，取名孙悟空。悟空不小心从山崖摔下，头部受伤后变得活泼开朗。龟仙人的不死鸟因食物中毒死去，他在海滨发现了一只小海龟。晚上悟空出去撒尿，看见圆月，第一次变身巨猿，无意中踩死了爷爷。</p><p>牛魔王之女琪琪出生，她的母亲不久后去世。牛魔王和琪琪在山脚野餐时，火焰让他们的城堡和整座山变为火海，他们迁居山脚，并将此山改名为火焰山。</p><h3 id="悟空历险"><a href="#悟空历险" class="headerlink" title="悟空历险"></a>悟空历险</h3><p>艾纪748年（孙悟空11岁）</p><p>龙珠正传开始</p><p>布尔玛和孙悟空的命运相遇，开始了寻找七颗龙珠的冒险旅程。</p><p>布尔玛在家里整理仓库时发现了二星龙珠，接着在北方山洞里找到了五星龙珠，并决定利用暑假寻找剩下的龙珠。</p><p>她在路上遇见了悟空，发现悟空的爷爷遗物是四星龙珠，于是邀请他一起冒险。接下来，悟空发现了男女的不同。途中，小悟空救了深山里的老乌龟，将它送回海边，老乌龟带来老龟仙人，布尔玛用内裤从龟仙人那换来了三星龙珠，悟空还获得了筋斗云。</p><p>途中，悟空制服了变成怪物的乌龙，村里的老妇人给了他们六星龙珠。悟空还和亚姆查交手，最终成了平局。后来，悟空打败了亚姆查，在牛魔王的村子里遇见了琪琪。龟仙人用龟派气功扑灭了火焰山的大火，但也把大山吹走了，他们在废墟中找到了七星龙珠。在火焰山，悟空学会了龟派气功，战斗力达到10。去龟仙岛的路上，悟空和琪琪定下了婚约。</p><p>之后，兔子团长被送上月球做糖果，皮拉夫的手下舞和修偷走了龙珠。皮拉夫许愿时，乌龙抢先索要了一条女式内裤，悟空变成巨猿，把皮拉夫的城堡夷为平地。</p><p>同年，悟空拜龟仙人为师，结识了库林，一起习武。布尔玛和亚姆查开始了他们的恋爱长跑。</p><p>艾纪749年（12岁）</p><p>孙悟空和库林在龟仙人的安排下参加了“天下第一武道会”。库林在四强赛中输给了龟仙人化名的程龙，孙悟空也在决赛中惜败于他，获得亚军。比赛中，悟空因满月变成大猩猩，程龙无奈之下摧毁了月亮。</p><p>同年，孙悟空在寻找爷爷的四星龙珠时，顺手摧毁了“红绸军团”，阻止了首领瑞德想要变高的愿望，维护了地球治安。在这个过程中，悟空结识了斯诺、人造人8号、乌帕父子和卡林仙人，还击败了杀手桃白白。</p><p>在寻找最后一颗龙珠时，孙悟空得到占星婆婆的帮助，再次见到了已故的爷爷孙悟饭，完成了他的遗愿，看到了孙悟空的成长。同年，亚姆查拜入龟仙人门下。</p><h3 id="第一次参加武道会"><a href="#第一次参加武道会" class="headerlink" title="第一次参加武道会"></a>第一次参加武道会</h3><p>艾纪749</p><p>悟空和库林开始在龟仙人门下修炼，带来了可爱的兰琪。他们在小岛上接受了8个月的特训。</p><p>一天，他们吃了有毒的河豚鱼，只能躺在床上休息。几天后，悟空和库林正式开始训练，直到下一届天下第一武道会。</p><p>在训练期间，他们进行了负重40公斤的锻炼。红绸子军银司令也在寻找龙珠。</p><p>小悟空和库林练了8个月的基本功，然后直接参加了武道会。</p><p>有人认为几个月就能速成拿好名次，是爽文套路，取悦读者； 有人觉得龟仙人不肯教招式，是怕教会徒弟饿死师父，传武老毛病； 有人说龟仙人的理念是无招胜有招，基本功最重要，招式反而不重要； 也有人认为只靠日常劳作就能强身健体、逆袭，是投机取巧，老港片里常用的套路，不是因为合理，而是接地气，容易让观众代入。</p><p>不得不承认，龙珠确实用了不少爽文套路。8个月备战，两个十三四岁的孩子能顺利进入世界大赛四强，这有点离谱。打桃白白时更夸张，只用3天，通过卡林塔的攀爬和追逐训练，就全面碾压桃白白。比克大魔王篇更是充满武侠味，复仇、开挂、爽文元素全都有。</p><p>最终，龟仙人、悟空和库林离开小岛参加天下第一武道会。龟仙人化身“程龙”获得了冠军，悟空屈居第二。</p><h3 id="红绸军"><a href="#红绸军" class="headerlink" title="红绸军"></a>红绸军</h3><p>艾纪750</p><p>皮拉夫、红绸军和悟空同时开始找龙珠。红绸军在皮拉夫的地下城堡很快就找到了两颗龙珠。第二天，布尔玛给悟空修好了龙珠雷达。悟空和蓝将军在半空中打到了企鹅村上空，结果被阿拉蕾一记头槌打败。这也是悟空第一次来企鹅村，遇到了阿拉蕾。同一天，桃白白用舌头亲自杀了蓝将军。悟空在卡林塔下惨败给桃白白，决定爬上卡林塔找仙人帮忙。</p><p>过了两天，悟空爬上了卡林塔顶，得到了卡林仙人的引导，仙人给了他“超圣水”，其实就是普通的自来水。原来，真正的提升能力过程在于和卡林仙人的较量。又过了两天，经过三天的训练，悟空再战桃白白，取得了胜利，还一举歼灭了红绸军。这一天，悟空不仅为世界除了大害，还在水晶婆婆的格斗场上看到了已经去世的爷爷孙悟饭。</p><h3 id="第二次武道会，天津饭"><a href="#第二次武道会，天津饭" class="headerlink" title="第二次武道会，天津饭"></a>第二次武道会，天津饭</h3><p>艾纪752年（15岁）</p><p>孙悟空在世界各地修炼之后，回来参加了这届天下第一武道会。鹤仙流也派人来参加了，龟仙流的亚姆查和鹤仙流的天津饭打了一场。但因为实力差太多，亚姆查被打败了，腿还受了伤，没能进八强。</p><p>程龙三年前因为打碎了月亮，导致人狼没法变回人，所以这次人狼来参加武道会想报仇。但程龙还是轻松地打败了他，还用库林的亮脑门和催眠术把人狼变回人了。</p><p>库林和饺子比赛时，库林这个数学天才靠着数数赢了饺子这个数学鬼才，给龟仙流挣回了面子。</p><p>孙悟空更是一招就打败了两个世界冠军的巴普特，轻松进了四强。四强战里，程龙和天津饭打得很激烈，但程龙想感化天津饭，所以主动认输了。孙悟空和库林打了一场，库林虽然尽力了，但还是输了。</p><p>总决赛是天津饭和孙悟空打，天津饭在战斗中觉醒了武道正义感，变成了好人。但最后因为运气稍差，孙悟空又得了亚军。</p><p>武道会结束后，库林在武道馆被神秘人杀了，孙悟空愤怒地去追，但因为体力耗尽，没能打过对方。龟仙人根据现场的东西，推断出大魔王又出现了。</p><p>孙悟空结识了亚奇洛贝，他们一起杀了几个魔族战士，结果引来了大魔王。孙悟空打不过，被打得晕了过去。龟仙人、天津饭、饺子在收集龙珠时，也遇到了大魔王。龟仙人挺身而出，想使用魔封波封印他，但失败了，龟仙人战死了。神龙出现后，饺子也战死了，大魔王恢复年轻，开始了他的恐怖统治。</p><p>天津饭想修炼魔封波来封印大魔王，但把封具弄坏了。孙悟空在亚奇洛贝的帮助下，再次见到了卡林仙人。他喝下蕴含剧毒的超神水，以命赌力，终于成功突破了！</p><p>突破后的孙悟空在国王宫殿旁击败了大魔王，再次拯救了地球！大魔王死前留下孙家保姆，说“魔族永远不会灭绝”。击败大魔王的孙悟空获得了面见天神的机会，他通过如意棒前往天界！在天界与波波交手之后，天神闪亮登场，一手弹开孙悟空，秀得一手好操作！天神复活神龙之后，库林、龟仙人、饺子等人也复活了。孙悟空则留在天界继续修行！</p><h3 id="比克大魔王"><a href="#比克大魔王" class="headerlink" title="比克大魔王"></a>比克大魔王</h3><p>艾纪753</p><p>第22届天下第一武道会正式开始了，最后天津饭赢了，悟空又得了亚军。可就在这时候，库林突然被杀，比克大魔王又出来了。后来，在地球国王掌政20周年纪念的第二天，悟空打败了比克大魔王，地球又恢复了和平，比克二代也出现了。然后，悟空就去了天神神殿，开始了神仙和波波先生指导下的三年修炼。</p><h3 id="第三次武道会，比克大魔王"><a href="#第三次武道会，比克大魔王" class="headerlink" title="第三次武道会，比克大魔王"></a>第三次武道会，比克大魔王</h3><p>艾纪755年（18岁）</p><p>这段时间发生了好多大事！先是刚满18岁的孙悟空和琪琪完成了他们儿时的约定，结婚了。然后比克大魔王也来参加武道会，还打败了天神，嚣张得不行。不过最后孙悟空还是艰难地赢了他，粉碎了他想统治世界的野心。接着，孙悟空终于拿到了天下第一武道会的冠军，和琪琪一起在包子山定居了。哦对了，兰斯追着天津饭不知道跑到哪里去了。</p><p>再说说后来吧，第23届天下第一武道会又开始了，这次悟空打败了比克二代，终于第一次夺得了武道会的桂冠。比赛结束后，他们还订婚了。然后，艾纪756年，孙悟空19岁的时候，他们的儿子孙悟饭出生了。同年，孙悟饭的未来妻子比迪丽也出生了。这时间过得真快，事情也真多，真是让人感慨万千！</p><h3 id="赛亚人地球战"><a href="#赛亚人地球战" class="headerlink" title="赛亚人地球战"></a>赛亚人地球战</h3><p>艾纪760年（23岁）</p><p>有个外星神秘战士叫拉蒂兹的跑到地球来了，他一来就揭露了孙悟空的身世，原来孙悟空是赛亚人，这下赛亚人正式进入龙珠历史了。</p><p>拉蒂兹还想利用孙悟饭，拉拢孙悟空入伙。不过，比克和孙悟空联手对战拉蒂兹，结果也不占优势。</p><p>危急时刻，孙悟饭怒气爆发，竟然击伤了拉蒂兹。</p><p>拉蒂兹是孙悟空的亲哥哥，作为一名上级赛亚人战士，他来到地球寻找孙悟空，目的是拉拢孙悟空加入他们的行列，共同征服世界。然而，孙悟空拒绝了拉蒂兹的要求，这导致了双方的激烈冲突。</p><p>在与孙悟空和比克的战斗中，拉蒂兹展现了强大的实力，一度占据上风。然而，孙悟空在战斗中逐渐找到了拉蒂兹的弱点，并利用这一点展开反击。</p><p>在危急关头，孙悟空紧紧地抱住了拉蒂兹，使其无法动弹。同时，他请求比克使用绝招“魔贯光杀炮”来终结战斗。</p><p>比克听从了孙悟空的请求，发射出了强大的“魔贯光杀炮”，这一击直接贯穿了孙悟空和拉蒂兹的身体。</p><p>龙珠的信息也泄露了，听说更强的赛亚人一年后就要入侵地球。</p><p>比克赶紧带走孙悟饭去修练了，天津饭、库林、饺子、亚姆查、亚奇洛贝也跑到天界去修练了。</p><p>至于孙悟空嘛，他跑到阴间跟界王学习去了！这龙珠世界真是越来越热闹了！</p><p>艾纪761年</p><p>贝吉塔和那巴这俩人，他们降落到了一个叫阿鲁尼亚的星球上，结果一看，觉得没啥用，就直接把它给炸了。炸完之后，他俩就进入冬眠状态了，说是要睡一年，等到抵达地球的时候再醒过来。</p><p>再说孙悟空，他这时候也复活了，从界王星赶回了阎王殿。</p><p>后来，库林、天津饭、饺子、亚姆查和弥次郎兵卫这几个人，他们都跑到天神神殿去修行了。</p><p>悟空呢，他也没闲着，他到了北界王星，还在巨大的重力环境下抓住了巴布鲁斯。然后，他得用槌子敲中格雷哥利的脑袋，这事儿可不容易。不过呢，悟空最后还是做到了，用槌子打中了格雷哥利。</p><p>还有天津饭、亚姆查、库林和饺子他们，他们几个人还跑到“过去”的“贝吉塔星”上，跟赛亚人打了起来。结果呢，两个低等战士就差点把他们给“干掉”了。回到自己的身体后，他们发誓要发奋图强，一定要变得更强。最后，悟空也从界王那里完成了修业，重生了。</p><p>艾纪762年</p><p>贝吉塔跟那巴来到地球后，悟饭、比克、天津饭、库林、亚姆查还有饺子他们一起对抗这两个赛亚人。亚姆查这家伙，身先士卒，冲在最前面，结果第一个战死，算是博了个头筹吧。饺子也不甘示弱，紧跟着也自爆身亡了，真是惨烈！天津饭那时候说，不求同生，但求同死，双宿双栖，也是让人感慨万千。最后呢，悟空跟贝吉塔打了个平手，这场打斗才结束。贝吉塔乘坐太空船18日回到弗利萨星球。也是在那一天，悟空终于知道了他爷爷是怎么死的。同时，有个叫格罗博士的人，他派了个小机器人在这附近收集那些强大战士的细胞，想做个超强的生命体出来。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/dragonball-story/02.png" class="lozad post-image"src="/uploads/dragonball-story/02.png"></p><p>本篇中拉蒂兹战斗力情况如下：</p><ul><li>拉蒂兹：战斗力1500</li><li>孙悟空：常态416，龟派神功924</li><li>比克：战斗力408，魔贯光杀炮1330</li><li>孙悟饭：愤怒1307</li></ul><p>本篇中贝吉塔战斗力情况如下：</p><ul><li>天津饭：1830</li><li>栽培人：1200</li><li>那巴：4000，聚气8000</li><li>亚姆查：1480</li><li>饺子：610</li><li>比克：3500，为打倒赛亚人提升</li><li>库林：1770</li><li>孙悟饭：愤怒2800</li><li>孙悟空：常态8000，2倍界王拳1.6万，3倍2.4万，4倍界王拳3.2万</li><li>贝吉塔：常态1.8万，闪光炮2.4万，虚弱7000，巨猿化7万</li></ul><h3 id="那美克星"><a href="#那美克星" class="headerlink" title="那美克星"></a>那美克星</h3><p>艾纪762年</p><p>库林、悟饭和悟空打完架，伤得不轻，都被送去医院治伤了。过了没几天，库林和悟饭就康复出院了。紧接着，天神的飞船也修好了，速度快得很。</p><p>然后，布尔玛真是个天才，没几天就学会了娜美克星人的语言，厉害得不得了。她拉上库林和悟饭，三个人开着飞船就直奔娜美克星去了，用了34天时间，如果使用地球技术飞船那是需要四千年才能到。</p><p>另一边呢，贝吉塔在弗利萨星球的79区也受了重伤，但他恢复得也快，没多久就完全好了。一出疗养舱，他也二话不说，直接就往娜美克星赶。这几个人目标都是一样的，都奔着娜美克星去了。</p><p>布尔玛、孙悟饭、库林和贝吉塔一起降落到了娜美克星。同时，悟空也康复出院，急匆匆地赶往娜美克星。丹迪和库林去见大长老，而天津饭、亚姆查、饺子和比克则去了北界王星特训。</p><p>那美克星这边的代表是年纪小但能力超强的丹迪。这地方势力可复杂了，有像万年打野的贝吉塔，单人成团到处跑；有弗利萨主宰着，还带着一群手下；还有一群温和的那美克星人；最后就是咱们的主角们像防御塔一样守着各个地方。</p><p>贝吉塔先杀了多多利亚</p><p>后来，萨波击败了贝吉塔，把他带到了弗利萨的飞船里。赛亚人有个能力，濒死复活能增加战斗力。但贝吉塔不甘示弱，再次挑战萨波，终于把他干掉了。这时，库林和孙悟饭也见到了大长老。</p><p>另一方面，基纽战队原本要去雅路达星，但计划有变，他们被派去娜美克星协助弗利萨，他们乘坐飞船用了5天到达那美克星。而悟空乘坐了布尔玛父亲做的太空船在一百倍重力的环境下修炼，终于适应了那种极端条件。孙悟空在一百倍重力室修炼后，实力大涨，飞船用了6天时间到达那美克星，悟空打败了基纽特战队。但基纽战队的队友会换身技能，把孙悟空弄伤得很严重，他只好进疗养仓了，弗利萨星球疗伤技术很高，遍体鳞伤也只需要一个小时痊愈，如果是地球医疗技术的话，四个月也难痊愈。</p><p>趁着贝吉塔休息，库林、孙悟饭还有丹迪偷偷召唤神龙，救了比克，还把比克送到那美克星。第三个愿望还没许，大长老寿命到了，神龙就消失了。</p><p>弗利萨知道神龙死了，气坏了。贝吉塔、比克、库林、孙悟饭、丹迪五个人联手，还是打不过弗利萨，贝吉塔还战死了。</p><p>孙悟空养好伤回来，战斗力飙升，跟弗利萨苦战。后来库林被弗利萨杀了，悟空愤怒至极，他第一次变身成超级赛亚人，最终击败了弗利萨。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/dragonball-story/03.png" class="lozad post-image"src="/uploads/dragonball-story/03.png"></p><p>那美克星人被地球神龙复活，又由波仑伽（大长老复活短时间）传送到地球。最后那美克星爆炸，孙悟空坐着基纽特战队的飞船去雅德拉克星学瞬间移动了。</p><p>此阶段战斗力情况如下：</p><ul><li>库林：1500，大长老激发潜力1.3万</li><li>悟饭：1500，大长老激发潜力1.4万，对弗利萨第三形态愤怒200万</li><li>丘夷：1.8万</li><li>贝吉塔：常态2.4万，萨博击败疗伤后3万，再次大难不死后12万，对弗利萨25万，对弗利萨第四形态250万</li><li>多多利亚：2.2万</li><li>萨博：2.2万，变身2.8万</li><li>古尔多：1万，有超能力</li><li>利库姆：4.2万</li><li>巴特：4.5万，速度宇宙第一</li><li>孙悟空：9万，2倍界王拳18万，重伤复活300万，10倍界王拳3000万，20倍界王拳6000万，超级赛亚人1.5亿</li><li>吉斯：4.5万</li><li>基纽：12万</li><li>内鲁：4.2万</li><li>比克：和内鲁同化后150万，胜于弗利萨第二形态</li><li>弗利萨：第一形态53万，第二形态120万，第三形态220完胜比克，弗利萨最终形态1.2亿</li></ul><h3 id="特兰克斯"><a href="#特兰克斯" class="headerlink" title="特兰克斯"></a>特兰克斯</h3><p>库林和亚姆查，这两个家伙，后来靠着那美克星那条神奇的神龙，嗖的一下，就从哪儿来回到地球了。</p><p>没过多久，饺子和天津饭也回来了，好事成双。那些剩下的娜美克星人，神龙也帮忙找了个新家，新娜美克星，听起来就不错。</p><p>然后沙鲁杀了未来的特兰克斯，偷偷搭了特兰克斯的时光机，成为一个蛋，进入地下孵化。在地底下猫了好多年，自己悄悄地吸收能量，准备搞事呢。</p><p>还有，弗利萨，也给修好了，没完没了。</p><p>转眼第二年，年初那会儿，贝吉塔可拼了，整天泡在重力室里修炼，就想变成超级赛亚人。练过头了，就会受伤，经布尔玛精心照料，两人就好上了，感情升温得跟坐火箭似的。</p><p>艾纪764年<br>弗利萨父子跑到地球来了。这时候未来特兰克斯出现啦！他是从 20 年后的未来来的，也就是艾纪 784 年。特兰克斯把弗利萨父子打败了，还给孙悟空带来了治心脏病的特效药，跟孙悟空说了人造人的那些事儿。</p><p>此阶段战斗力情况如下：</p><ul><li>机械弗利萨：1.4亿</li><li>库尔德王：8000万，弗利萨的父亲</li><li>特兰克斯：6亿</li><li>孙悟空：8亿，亚德拉特星修炼结果，心脏病4亿以下</li><li>人造人19号：4.2亿</li><li>人造人20号：4.2亿</li><li>贝吉塔：10亿</li><li>比克：5亿，和天神合体15亿</li><li>人造人18号：12亿</li><li>人造人17号：15亿</li><li>人造人16号：19亿</li></ul><h3 id="沙鲁"><a href="#沙鲁" class="headerlink" title="沙鲁"></a>沙鲁</h3><p>艾纪767年</p><p>弗利萨父子进攻地球的时候，遇到了来自未来的特兰克斯，这小伙子真不简单，一下子就把弗利萨父子给打败了。可紧接着，人造人出现了，悟空跟人造人19号、20号打起来，可是心脏病毒让他受不了，只好停下来。这时候，贝吉塔以超级赛亚人的身份出现了，真是帅啊！</p><p>没过多久，特兰克斯又来了，这次他从更远的未来回来，他发现在他那个时代的三年后，有个叫沙鲁的人造人出现了。哎呀，时间线就这么对上了。</p><p>库林和未来的特兰克斯找到了格罗博士的实验室，把那个还没完全成型的沙鲁给干掉了。</p><p>然后，人造人16、17、18号都冒出来了，沙鲁还吸收了17、18号，变得更强了。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/dragonball-story/04.png" class="lozad post-image"src="/uploads/dragonball-story/04.png"></p><p>孙悟空他们这边也不甘示弱，比克和天神合体，龙珠失效后，过了两天，悟空吃了特兰克斯带来的药，慢慢好起来了。孙悟空立马瞬移到新那美克星找新任天神丹迪，把龙珠给复活了。</p><p>贝吉塔和特兰克斯父子俩也进入精神时光屋去修炼了。</p><p>贝吉塔也突破了自己的极限，可惜还是没能打败完全体的沙鲁。特兰克斯也一样，虽然开发出了超级赛亚人一第三阶，但还是败给了沙鲁。</p><p>沙鲁变得更强了。然后悟空和悟饭也去精神时光屋修炼了。</p><p>后来沙鲁还搞了个沙鲁游戏，真是嚣张。孙悟空和孙悟饭进入精神时光屋修炼，出来后孙悟空虽然变强了，但还是没能打败沙鲁。最后，孙悟饭在沙鲁、16号和撒旦的帮助下，终于突破极限，变成了超级赛亚人二，成功打败了沙鲁。但因为骄傲自大，导致悟空又牺牲了，不过最后还是悟饭愤怒的一击，终于把沙鲁给消灭了，拯救了地球。可惜的是，孙悟空在这场战斗中牺牲了。</p><p>鸟山明曾说，第二阶段的沙鲁是他最喜欢的角色。大家都笑他是不是傻，尤其是编辑近藤裕。近藤以前做少女漫画杂志，看惯了帅哥，怎么能接受这种形象？不过这只是开玩笑，近藤其实很有深度。</p><p>近藤裕非常擅长设计人物形象，而且他总是根据大众心理来设计，效果往往非常好。比如弗利萨的形象，就是他提出要塑造成一个宇宙地产商的点子——在泡沫经济鼎盛时期，炒地皮的最招人恨。</p><p>近藤不喜欢二阶沙鲁，催着鸟山明赶快画出新形态，是因为他考虑到未来的胜负和故事整体。如果敌人太丑，大家会觉得主角赢是理所当然的结果；而敌人是帅哥的话，读者才会担心悟空能不能赢。事实证明，近藤的意见是对的——大部分人都认为完美沙鲁稳压悟空一头，沙鲁几乎是不可战胜的，这场决斗的胜负归属一直是龙珠中的热门话题。</p><p>那鸟山明为什么最喜欢二阶沙鲁呢？他的审美真的这么特别吗？一方面是因为他喜欢日本特摄剧，比起动漫，他更喜欢奥特曼、哥斯拉、超级战队这些特摄剧，并且在作品中致敬过。那么假面骑士怎么能落下呢？鸟山明在采访中表示，自己最喜欢的动物之一就是飞蝗（好在他没真在家里养这个），沙鲁的昆虫原型就是受到假面骑士的影响而诞生的。斑点难画？他心里乐意着呢。而且画斑点明显是助手的工作，鸟山明自嘲说斑点麻烦，只是习惯性地凡尔赛罢了。</p><p>此阶段战斗力情况如下：</p><ul><li>特兰克斯：超级赛亚人第二阶段150亿，超级赛亚人第三阶段225亿，超级赛亚人全功率250亿</li><li>孙悟空：超级赛亚人全功率350亿</li><li>贝吉塔：超级赛亚人第二阶段150亿，超级赛亚人全功率250亿</li><li>沙鲁：第一形态11亿，第一形态吸收人类精华19亿和16号持平，第二形态95亿，沙鲁完全体初登场200亿，后期380亿，拳力500亿，闪电沙鲁1000亿</li><li>小沙鲁：250亿</li><li>孙悟饭：超级赛亚人全功率330亿，超级赛亚人全功率愤怒450亿，超级赛亚人2战斗力900亿</li></ul><h3 id="布欧"><a href="#布欧" class="headerlink" title="布欧"></a>布欧</h3><p>悟空的葬礼上，大家都参加了。之后，未来的特兰克斯回到自己的时代，消灭了未来的17号、18号和沙鲁。</p><p>接下来几个月，有一部关于撒旦先生的电视特别节目，详细介绍了他的生平，但没有提到沙鲁之战。撒旦被认为是地球上最强的格斗家。</p><p>库林和18号结婚了，他们的女儿玛伦也出生了。界王神和杰比特来到地球，寻找魔人布欧的蛋壳。悟饭升上了橙星高中的一年级。</p><p>一位金发战士保卫撒旦市的故事传遍了大街小巷。悟饭在橙星高中认识了撒旦的女儿比迪丽。下午三点左右，悟饭请布尔玛为他制作一件战斗服，布尔玛同意了。大约五点，超级赛亚蒙面超人诞生了。</p><p>比迪丽发现赛亚蒙面超人其实就是悟饭。接着，悟饭教比迪丽飞行，南界王见识到悟空惊人的修炼方式。小特兰克斯在他父亲面前第一次变成超级赛亚人。比迪丽终于掌握了舞空术。</p><p>第25届天下第一武道会召开，悟空获准离开阴间一天来参加比赛。贝吉塔通过魔导师巴比迪的控制，变身超级赛亚人2，并与悟空打斗，导致魔人布欧在地球上苏醒。悟饭拔出界王神剑，贝吉塔为了亲人自爆拯救了地球。胖布欧杀死了魔导师巴比迪。悟空展示超级赛亚人3的威力后提前返回阴间。悟天和特兰克斯开始练习合体，第三次才成功。悟饭把界王神剑折断，释放了老界王神，老界王神决定为悟饭引发出更深藏的潜能。</p><p>胖布欧在撒旦的感化下逐渐平静，但撒旦被杀后，胖布欧释放出瘦布欧，吃了胖布欧后变成大布欧。大布欧在精神时光屋与悟天克斯混战，打到下界。大布欧吸收了悟饭、悟天、特兰克斯和比克。在大布欧要杀光地球所有人的紧急关头，老界王神将他的性命送给悟空，让他再返人间作战。贝吉塔在水晶婆婆的协助下也回到了地球。两人第一次用耳环合体，变身为贝吉特，成功进入大布欧体内救出众人，使大布欧恢复成小布欧。小布欧炸毁了地球，但那美克星神龙让地球恢复原样。贝吉塔也因地球人全体复活而重生。悟空用一枚特大元气弹消灭了布欧。</p><p>神龙将人们心中对布欧的记忆完全抹掉。几年后，第26届天下第一武道会举行，撒旦先生夺得第一，胖布欧第二。</p><p>此阶段战斗力情况如下：</p><ul><li>孙悟天：19亿</li><li>特兰克斯：20亿</li><li>悟天克斯：超3战斗力8000亿</li><li>悟饭：神秘悟饭1.2兆</li><li>胖布欧：5000亿</li><li>瘦布欧：3500亿</li><li>大布欧：7000亿</li></ul><h3 id="龙珠超"><a href="#龙珠超" class="headerlink" title="龙珠超"></a>龙珠超</h3><p>破坏神比鲁斯来袭，悟空拼尽全力抵消了比鲁斯的“灼热弹”，比鲁斯很赞赏悟空，并决定不再破坏地球。</p><p>小芳出生。同年，弗利萨复活，修炼出金色形态，带军队来地球复仇。悟空击败弗利萨，弗利萨再次被送回“地狱”。第七宇宙和第六宇宙的破坏神比武大会开始，第七宇宙获胜。未来的扎马斯入侵，特兰克斯回到过去求助，最后合体扎马斯被未来全王消灭，未来全王和现世全王成为朋友。</p><p>布拉出生。同年，全王举办力之大会，失败的宇宙将被清除。悟空、贝吉塔、悟饭等十人代表第七宇宙参赛，悟空在大会上首次达成自在极意，第七宇宙获胜。人造人17号用超级龙珠许愿复活被清除的宇宙，大家回到正常生活。弗利萨的两个小兵在万帕星找到布罗利父子，悟空一伙寻找龙珠时遇到弗利萨军，悟空和达尔与布罗利交战，最后用美达摩融合术压制布罗利，但在消灭他的一瞬间，布罗利被神龙传送到万帕星。悟空送给布罗利物资，并表示想通过与他对战变强以超越比鲁斯。实习天使梅尔斯因违背天使中立准则而消失，孙悟空完全掌握自在极意，梅尔斯因大神官转生成人类而复活。</p><p>第27届天下第一武道会举行，撒旦先生夺得第一，“胖布欧”第二。第28届天下第一武道会举行，悟空在比赛场上将布欧的转世——欧布带走修炼。</p><h3 id="龙珠GT"><a href="#龙珠GT" class="headerlink" title="龙珠GT"></a>龙珠GT</h3><p>悟空被皮拉夫用黑星龙珠变成了8岁。悟空、小芳和特兰克斯乘宇宙飞船出发寻找龙珠。九个月后，他们遇上了贝比。贝比被击败后，潜入地球控制了几乎所有人，并变得更强大。贝比用黑星龙珠重建了祖福鲁星。悟空变身超级赛亚人4，与贝比展开大战，最终贝比被灭，祖福鲁星人也因地球人被治愈而灭绝。</p><p>黑星龙珠的诅咒导致地球爆炸，所有生命迁往祖福鲁星。那美克星龙珠将地球复原后，大家迁回地球。第30届天下第一武道会举行，撒旦再次获得冠军。</p><p>超级17号进化完成，但被悟空和18号联手击败。龙珠出现裂痕，邪恶龙肆虐世界。悟空最终击败一星龙，神龙重现并带走悟空，七颗龙珠融入悟空的身体，悟空离开了一百年。</p><p>悟空的玄孙出生，为纪念祖先取名小孙悟空。小悟空在独自寻找龙珠的冒险中激发了超级赛亚人潜能。在祖居门前，小孙悟空与显灵的祖父见面。</p><p>第63届天下第一武道会举行，小孙悟空与贝吉塔的玄孙角逐少年组决赛桂冠，结果未明。110岁的小芳在观众席上看到祖父悟空的身影，但未能追上。悟空和龙珠的故事到此画上完美的休止符。</p><h2 id="龙珠中的道具清单"><a href="#龙珠中的道具清单" class="headerlink" title="龙珠中的道具清单"></a>龙珠中的道具清单</h2><ul><li>龙珠：收集七颗龙珠能够实现一个愿望，丹迪制作的可以实现三个，可一次复活多人。只有那美克星龙族才能制作龙珠。那美克星大长老制作的龙珠能实现三个愿望，但是一次只能复活一个人，后期新的可以让多人复活。龙珠实现的愿望中，最让人感动的是库林让神龙拆掉18号和17号体内的爆炸装置。</li><li>筋斗云：只有心灵纯洁的人才能坐上去。曾经坐上去的人有，孙悟空、悟饭、人鱼（悟空按龟仙人要求找的人）、琪琪、兰奇、欧布等。</li><li>神奇胶囊：可以将房子汽车等物品装到一个瓶子里。打开瓶盖就能还原。由布尔玛父亲发明。</li><li>如意棒：可以随意伸长，悟空就是用它直接伸到神殿。</li><li>PP糖：吃下的人听到PP就会拉肚子，效果会持续一个月，布尔玛用在了乌龙身上。</li><li>龟壳：龟仙人所背，重量大，也用于悟空库林的训练。</li><li>仙豆：重伤可痊愈。每次不可大量种植，数量很有限。但是仙豆不能治疗疾病，比如悟空心脏病发作时，仙豆不起作用。</li><li>超圣水：里面只是普通的水。</li><li>超神水：有剧毒，但是如果有强大的体能和意志力就能够引出潜能。悟空是唯一喝过没死的人。</li><li>战斗机器人：红绸军黑参谋对付悟空的可操作的机器人。</li><li>皮拉夫的机器人：皮拉夫三人组每人一个可操作的机器人，还可以合体。</li><li>比克大魔王的封印：用来封住比克大魔王的咒印。将其贴在瓶子上，使用魔封波就可以将比克大魔王封印住。</li><li>侦查器：按一下就可以知道对手的战斗力，还可以进行星际对话。旧款上限是2.2万，新款没有上限。</li><li>弗利萨军战斗服：超级橡胶制成，柔软性和防御力都很高，很有弹性，什么身材都能穿进去，几乎感觉不到重量。简直就是最理想的宅男服装。</li><li>栽培人套装：赛亚人的科学生物，播种后滴上栽培液，就会诞生栽培人，战斗力还不错，但不会说话。</li><li>魔法飞毯：波波使用的交通工具，一瞬间将布尔玛带到天神的宇宙飞船那。</li><li>光束枪：弗利萨的士兵使用的枪，布尔玛库林悟饭一行到那美克星的飞船被光束枪一枪击毙。</li><li>治疗机：弗利萨军的治疗装置，最多四十分钟就能痊愈。</li><li>特兰克斯的剑：一剑砍死悟空打了几十页漫画的弗利萨，非常的耀眼。</li><li>紧急停止控制器：用于停止17号和18号活动的装置。需要在10米内使用。</li><li>变身服装和手表：悟饭高中时，做好事为了隐藏身份所穿，悟饭拜托布尔玛制作的。</li><li>测拳机：第24届天下第一武道会上开始使用的，最高纪录时撒旦打出的139分。</li><li>能量吸收器：用于解开布欧封印的能量吸收器。</li><li>封印蛋：封印魔人布欧的蛋。</li><li>终极之剑：传说一拔出来就能够提升力量的剑。原因是老界王神被封印在剑内，他会帮助拔剑人提升力量。</li><li>卡先钢：全宇宙最坚硬的金属。使用终极之剑都砍不开。</li><li>天界神珠：带上的两人可以合体，合体后力量提升。</li></ul><h2 id="龙珠世界全地图"><a href="#龙珠世界全地图" class="headerlink" title="龙珠世界全地图"></a>龙珠世界全地图</h2><p>龙珠世界氛围天界和宇宙，天界包括阎王殿、蛇道、界王星、地狱和天国。宇宙包含了地球、那美克星、弗利萨星和贝吉塔星等星球。</p><p>天界位于宇宙之上，里面有裁判死者的阎王殿、天国和地狱，是神管理世界的地方。好人会去天国，坏人去地狱，如果被魔族所杀灵魂只能在宇宙飘浮。阎王殿是死者灵魂的入口，蛇道连接着阎王殿和界王星，界王星很小，只有界王和他的宠物阿布住在上面，重力是地球的十倍，界王的生活很简单很舒适，数数草，眺望天空，还可以看小便撒的多远。</p><p>那美克星科技是先进的，可以造出超光速宇宙飞船，但是那美克星人却因为天气问题几乎灭绝，为了恢复星球，仅存的那美克星人开始了种植花花草草的安稳生活。那美克星人分为龙族和战士两个，那美克星人没有性别，通过口中吐蛋进行繁殖。</p><p>贝吉塔星住着赛亚人，他们大部分都是弗利萨的雇佣兵，会去侵略其他星球。最后弗利萨害怕赛亚星会出现传说中的超级赛亚人，于是将贝吉塔星摧毁，赛亚人几乎灭绝。赛亚人是好战的名族，从小被灌输战斗的思想，使得他们天生就很享受战斗。</p><p>龙珠世界的地球只有一个国家，由国王统治，全国有四十三个区。地球的科技主要是胶囊公司带来的，也就是布尔玛他们家的公司。反重力装置交通工具很普及，地球人有人类，比如库林，动物类，比如乌龙，还有怪物类，比如皮拉夫。</p><p>地球北部地区有中都、东都、牧场、吉古鲁村、红绸军白队基地等地方。中都是国王的都城，比克大魔王就是在这里让国王屈服的。东都是东北部最大城市，贝吉塔和那巴就是在这里着陆的。拉蒂兹是在牧场着陆的。吉古鲁村是常年被大雪覆盖的城市，那里的人淳朴热情，小悟空帮他们打败了红绸军白队基地。</p><p>地球东部有兔子军团镇、乌龙的村庄、亚姆查的住处、皮拉夫城堡和海盗洞穴。</p><p>西部有圣地卡林，卡林塔、悟饭修行地、西都、胶囊公司和红绸军总部。卡林塔居住着卡林仙人，悟饭修行地是比克为了对抗赛亚人专门培训悟饭的地方。西都是地球科技最发达的地方，胶囊公司也在西部。</p><p>南部有龟仙人的小屋、企鹅村、火焰山、天下第一武道馆、占星婆婆宫殿。</p><h2 id="鸟山明"><a href="#鸟山明" class="headerlink" title="鸟山明"></a>鸟山明</h2><h3 id="家乡"><a href="#家乡" class="headerlink" title="家乡"></a>家乡</h3><p>鸟山明先生，家住 爱知县 名古屋市清州。名古屋是日本重工业基地，飞机汽车很繁荣，也导致鸟山明很喜欢一些机械的东西。但是清州很偏，导致鸟山明一直都只有一个助手，几乎所有创作和作画都是一个人完成。</p><p>1983年，他连载《阿拉蕾Q》时，创下“六亿四千七百四十五万日元”的漫画家纳税最高记录。阿拉蕾结束时鸟山明本打算去过自由自在的生活，游泳、赛车、玩模型和旅游，但是被鸟岛和彦告知业界残酷，让他很快回归业界，这才有了龙珠。</p><h3 id="画画方法"><a href="#画画方法" class="headerlink" title="画画方法"></a>画画方法</h3><p>作者通常会先画出NAME给责任编辑看，双方讨论后再修改细节。然后作者在稿纸上打草稿、勾线，助手负责涂黑、涂白和贴网点。</p><p>NAME可以画在普通笔记本上，只要有大概的分格和轮廓，作者和编辑能看懂就行。为了省力，画得潦草是正常的。</p><p>鸟山明连载时不画NAME，直接从底稿开始，改动很少。他曾说过：“为了少做修改，我会把稿子拖到最后一刻再交给编辑，实在没办法编辑也只能认了。”这种拖延战术我们都懂，但不是每个人都能像他一样一出手就是高质量底稿。</p><p>说到画画风格，龙珠的舞台总是很荒凉，鸟山明是觉得画街巷太复杂，阿拉蕾的背景也是用圈圈状的山和树木这种省事的方式来糊弄过去。因为住在乡村买网点纸很麻烦，也就用黑白做了基调。</p><p>鸟山明不会偷懒，他扎实地练习场景透视、人体比例、情节节奏和人物塑造。透视不过关，他就堆细节，用花纹和建筑填满画面，多分格，少画全景。人物比例画不好，就贴网点或用声效字遮挡，甚至用无意义的破格吸引读者。</p><p>人物成长和互动复杂，容易出错，他设计不同的价值观让角色自己动起来，而不是贴现成的性格标签。住在乡下，只有一名助手，背景不画建筑，头发不用涂黑，减轻助手负担。作画工具不高档，他只能大刀阔斧地画，时间有限，能推掉彩页就推掉，不讲与主线无关的故事，不乱埋伏笔，不无限拓展剧情。</p><p>鸟山明画漫画也不是一开始有很厉害的，周刊少年编辑鸟岛和彦说他第一次收到鸟山明漫画是临摹星球大战的作品，这类作品是不可刊登的，他是对漫画中的文字绘画感觉新鲜，这才有去联系鸟山明。</p><p>日本坚持黑白漫画，因为彩色漫画虽然好看，但成本高。JUMP每期有几页彩页和拉页海报，但大部分是黑白的，用的是便宜的纸张，定价低，小孩子都能买得起。</p><p>集英社的全彩版龙珠只关注色彩，不重视黑白基调，效果不好。鸟山明最初用普通的透明水彩，后来用签字笔融水涂色，效果不错。1981年，他在《りぼん》杂志的访谈中了解到彩色墨水的使用方法，后来常用Luma牌墨水。他还向动画导演和制作人员学习上色技巧。</p><h3 id="助手"><a href="#助手" class="headerlink" title="助手"></a>助手</h3><p>一个人又要拼命想故事，还得小心翼翼别踩坑，画技还得天天磨，连载的压力大得跟山似的，还得想着怎么快点火起来。能按时交稿，质量还不差，那已经是超人水平了！这时候再让他每周都给画上色，还没人帮忙分担，换谁不崩溃啊？</p><h4 id="田中久志"><a href="#田中久志" class="headerlink" title="田中久志"></a>田中久志</h4><p>说回鸟山明，他那时候可惨了，啥都得自己干，连个助手影儿都没有。可能他之前都不知道还有漫画助手这职业呢，毕竟以前都是画短篇的。他家那地儿偏得要命，想找人都找不着。要是在东京，鸟嶋和彦那哥们儿肯定能帮上忙，但鸟山明非要在家搞创作，那就只能自己想办法了。好在，他加入了个小圈子，里面有个叫田中久志的，后来成了他的第一任助手，不过这家伙一周才来一趟，帮不了太多忙。但人家可是厉害角色，参加过比赛还拿过亚军呢，现在都成大学教授了。</p><h4 id="谷上"><a href="#谷上" class="headerlink" title="谷上"></a>谷上</h4><p>再来说说谷上，这位是东京来的机械天才，鸟山明都夸他。但不知道为啥，没多久就走了，存在感超低。那时候龙珠火得不行，如果是在大城市，来应征的人得挤破门，但鸟山明家那地儿太偏了。</p><h4 id="松山孝司"><a href="#松山孝司" class="headerlink" title="松山孝司"></a>松山孝司</h4><p>还有松山孝司，这家伙跟鸟山明那叫一个默契，俩人兴趣相投，简直就是灵魂伴侣。松山不仅是助手，还是模型手办的高手，拿奖拿到手软。他从阿拉蕾后期就开始跟着鸟山明，一直到龙珠结束，整整12年！鸟山明还特地为松山减负，超级赛亚人的头发都不涂黑了，就是为了让他轻松点。俩人工作之余还一起抽烟、聊电影、打游戏、骑摩托，简直不要太爽！</p><p>松山结婚的时候，鸟山明还特地留言说以后不让他加班太晚，可见两人关系多铁了。总之，鸟山明能画出那么火的漫画，松山孝司功不可没！</p><p>一边要绞尽脑汁创作故事、一边要避免踩坑、一边要打磨画技、一边要适应连载的工作强度、一边还要争取尽快积攒人气，能保质保量地按时交稿就不错了，这时候再让他们每周都上色，又找不到人分担压力，换谁不得崩溃？</p><h3 id="历任编辑"><a href="#历任编辑" class="headerlink" title="历任编辑"></a>历任编辑</h3><h4 id="鸟岛和彦"><a href="#鸟岛和彦" class="headerlink" title="鸟岛和彦"></a>鸟岛和彦</h4><p>鸟岛和彦这个人，大家可能不太熟悉，但说到龙珠里的马西利特博士和比克大魔王，动漫迷们应该都知道。他们的原型其实就是鸟岛和彦，他不仅是鸟山明的第一任编辑，还是个厉害的角色。80年代的时候，他就开始搞游戏业务，还推动了漫画和游戏的关系。就像那个《达伊大冒险》，其实就是为了展示游戏和漫画的紧密联系。他甚至想让鸟山明把龙珠的故事扩展到宇宙，还想让鸟山明和高桥留美子一起设计个RPG游戏。这哥们儿自己也创办了本超火的游戏杂志V-Jump，后来还当上了少年JUMP的主编，开始大刀阔斧地改革。</p><h4 id="近藤裕则"><a href="#近藤裕则" class="headerlink" title="近藤裕则"></a>近藤裕则</h4><p>然后说说近藤裕则，他是鸟山明的第二代编辑，也是弗利萨的原型。别看他彬彬有礼，严厉程度可不低。他喜欢帅哥，所以老是催鸟山明赶紧让沙鲁完全体出场。但鸟山明其实更喜欢画异形和昆虫这类的东西，像蓝将军和萨博这样的帅哥他画得并不多。</p><h4 id="武田冬门"><a href="#武田冬门" class="headerlink" title="武田冬门"></a>武田冬门</h4><p>最后来聊聊武田冬门，这哥们儿是鸟山明的第三代编辑，也是胖布欧的原型。他可是鸟山明的超级粉丝，对《布欧篇》的创作，他基本上就是：“哥，你随便画，我都爱看。”所以，鸟山明就创造出了那个超可爱的天真胖布欧。</p><h3 id="爱好模型"><a href="#爱好模型" class="headerlink" title="爱好模型"></a>爱好模型</h3><p>鸟山明工作房间有个大桌子用来拼模型，身后的另一个大桌子也是拼模型用的，比他在角落里画画的桌面大了三四倍不止。漫画只是糊口的手艺，模型才是真爱啊。</p><h3 id="爱好摩托车"><a href="#爱好摩托车" class="headerlink" title="爱好摩托车"></a>爱好摩托车</h3><p>据说鸟山明的父亲曾参加过摩托车比赛，拥有一家汽车维修公司，鸟山明说自己一有空就会去摩托车改装店。</p><p>鸟山明还透露过他除了设计游戏还设计汽车，但因为保密协议，他没有透入是为哪家公司设计汽车，他觉得能够以门外汉的身份去设计可以好好乘坐的汽车是他生活的意义。</p><h3 id="爱好游戏"><a href="#爱好游戏" class="headerlink" title="爱好游戏"></a>爱好游戏</h3><p>鸟山明曾说自己是做事比较认真、一旦钻进去就很投入的那种人——从他的模型上就能看得出来——结果有了红白机之后，一下子迷上电子游戏，难以自拔，他说：“本来只是想随便买个红白机玩玩，结果却上瘾了，玩得手指都疼啦。甭管工作多么辛苦，我的手指从没长过茧。奇怪的是，一玩起红白机来，手上竟然长出了茧。”</p><p>老师曾说：“我的假期全都耗在《勇者斗恶龙III》上了。既高兴，又难过。但游戏本身确实非常有趣。白天去游泳池，晚上沉迷红白机上的《母亲》游戏，最后只能半夜工作。”</p><p>后来他还与堀井雄二、坂口博信这个「梦幻团队」开发的《时空之轮》。</p><h3 id="爱好养宠物"><a href="#爱好养宠物" class="headerlink" title="爱好养宠物"></a>爱好养宠物</h3><p>鸟山明特别喜欢养小动物，尤其是狗和鸟。</p><p>他养的第一只狗叫“涡轮丸”，挺有个性的名字吧。后来呢，他又买了只哈士奇，给取了个名字叫“马特”，哦对，原名是“俄罗斯套娃”，但叫“马特”更亲切些。</p><p>再后来，他又看上了柯基这种狗，于是就把“马特”这两个字颠倒一下，叫“托马”了。</p><p>不仅仅是家里养的小动物，鸟山明家里还常常有些“不请自来”的客人，比如野猫、蜥蜴、乌龟、老鼠，甚至还有蛇！</p><p>野猫经常来找家里的锅巴打架，也是挺有趣的。蜥蜴和乌龟他最后都放生了，也没看到它们回来报答他。说到老鼠，那可真是让他头疼，晚上一过街老鼠都能把他吓得跳进田里。家里的老鼠更是麻烦，最后用了“灭鼠110”才解决。他家的猫还特别有趣，每次抓到老鼠都送到他面前，真是让人哭笑不得。</p><p>哦对了，还有毒蛇呢，像日本蝮、响尾蛇这种，他都好几次死里逃生，真是命大！不过说实话，他更烦那些到处跑的蟑螂和永远打不完的苍蝇蚊子。</p><p>这周边的小动物实在是太多了，有时候真的吵得他都没法专心画画。</p><h3 id="作品"><a href="#作品" class="headerlink" title="作品"></a>作品</h3><p>鸟山明出来长篇IQ博士和龙珠外还有很多短篇漫画，以下是按年排列的作品列表。</p><ul><li>1978年：「神秘的rainiack」完成后，「Awawaworld」角逐 Young Jump 新人赏，「WONDER ISLAND」「WONDER ISLAND2」（刊於WJ増1&#x2F;25）</li><li>1979年：「本日的HIRI岛」，「GAL刑事TOMATO」</li><li>1980年：「IQ博士」</li><li>1981年：「POLA &amp; ROID」，「ESCAPE」</li><li>1982年：「MAD MATIC」，「HETAPPI漫画研究所」，「PINK」</li><li>1983年：「CНОВІТ」，「CHOBIT2」，「骑龙少年 其壹」，「骑龙少年 其贰」，「东风大冒险」</li><li>1984年：「龙珠」</li><li>1986年：「MI Hoo」</li><li>1987年：「LADY RED」，「剑之介大人」</li><li>1988年：「SONCHOH」，「豆次郎」</li><li>1989年：「小忍者空丸」</li><li>1990年：「WOLF」，「CASHMAN」</li><li>1992年：「TRUNKS THE STORY 唯一的战士」，「DUB &amp; PETER1」</li><li>1993年：「GO!GOIACKMAN」</li><li>1996年：「宇宙人PEKE」，「TOKIMECHA」</li><li>1997年：「魔人村的BUBUL」，「COWAI」</li><li>1998年：「河鹿」，「肺魚鯕鰍」</li><li>1999年：「猫魔人在此」，「猫魔人在此2」</li><li>2000年：「HYOUTAMU」，「SANDLAND」</li><li>2001年：「猫魔人Z」</li><li>2003年：「TOCCIO THE ANGEL」，「猫魔人Z2」，「三色猫魔人」</li></ul><h2 id="海南版七龙珠"><a href="#海南版七龙珠" class="headerlink" title="海南版七龙珠"></a>海南版七龙珠</h2><p>海南摄影美术出版社，它是由海南省新闻出版局花了11万块钱建立起来的，是个挺正式的省级单位。刚开张那会儿，他们也不知道出啥书好，就尝试搞了些人体写真、美女挂历啊，还有些壮阳秘籍、鬼怪故事、养生菜谱之类的，当然也包括了介绍海南风情的画册和连环画。不过，这些书受众面可比漫画广多了。</p><p>说到漫画，海南版的《龙珠》那可是真牛，品质高，速度快，其他出版社都追不上，只能跟在后面抄作业。1991年1月，第一本《龙珠》就问世了，接着3月份第一卷就全套上架了。到了1992年2月，故事都快讲到人造人和未来战士那段了，一年之内就出了10卷，销量也是噌噌往上涨，最火的时候一卷能卖到12万册呢！</p><p>但是，从第11卷开始，出版速度就慢下来了，中间还隔了大半年才继续出。为啥呢？因为海南版快追上原作者鸟山明的进度了，他们不能这么赶了。这时候，市场上还出现了单本卖的情况，以前都是成套卖的。</p><p>到了1993年，海南社这边的情况就不太清楚了，反正沙鲁篇拖到了1994年才出完。那段时间，读者们可急坏了，等得花儿都谢了。</p><p>还有件事得提，1992年中国加入了《伯尔尼公约》，版权这事儿就严起来了。之前海南社出的那些日漫，其实算是打了个擦边球，不算完全的盗版。但新政一出，规矩就来了。</p><p>1994年，央视《新闻联播》连着三天讲打击盗版的事儿，还专门点名了日本漫画，说它们内容不健康，影响青少年。这下子，家长们都紧张了，孩子们看《龙珠》都得偷偷摸摸的。</p><p>最后，海南社还是没能继续出漫画了，不管读者怎么盼，后面的故事都只能留在想象中了。到了1997年，新闻出版署查了他们，发现违规出版了不少书，管理也乱，还被吊销了出版资格。从此，海南摄影美术出版社和《龙珠》的故事就告一段落了。</p><h2 id="画书大王"><a href="#画书大王" class="headerlink" title="画书大王"></a>画书大王</h2><p>记得94年那会儿，《画书大王》，大家都叫它“画王”，咱心里的一道光！那感觉，就像是大家坐一块儿，平等交流，一块儿进步，全靠一腔热爱撑着。这杂志虽然薄薄的，不到百页，但里头啥都有，从鸟山明、北条司到高桥留美子这些国际大咖的作品，再到咱们国内第一代漫画家王庸声、谭晓春、陈翔他们的原创故事，那叫一个丰富多彩。</p><p>最让我开眼界的是，它不光有漫画看，还时不时来点法国漫画、纸雕漫画，世界各地的风格都能在这上面找到，学校里那美术课本可没这待遇！</p><p>画王连载漫画的同时，还教你咋画漫画，有套连载叫《漫画研究所》，鸟山明亲自上阵，从零开始，一步步教你。虽然最后几页讲怎么给集英社投稿，对国内来说用处不大，但人家还是完完整整给咱们搬来了，这份诚意，没得说！</p><p>我看画书大王的起因主要是因为杂志里面有刊登打败沙鲁之后的内容。每期我都有跟，同时也看到了更多的漫画，以及漫画背后作者画漫画的事情，这些点燃了我对漫画这个行业的热爱。</p><p>杂志是王庸声老师创办，初心是为了中国漫画的未来。可惜，画王只坚持了两年，就赶上那时候对漫画的“风波”，没了它，中国漫画就像突然被掐了脖子，艰难前行。就算有其他杂志接着干，但总感觉少了那么一股子劲儿。</p><p>那时，总会有那么群人，带着纯纯的热爱，艰难却很快乐的坚守者这座小城堡。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上次录了期圣斗士的播客，还写了篇&lt;a href=&quot;%5Bhttps://starming.com/2024/07/20/saint-seiy
      
    
    </summary>
    
      <category term="Podcast" scheme="https://starming.com/categories/Podcast/"/>
    
    
      <category term="Podcast" scheme="https://starming.com/tags/Podcast/"/>
    
      <category term="Manga" scheme="https://starming.com/tags/Manga/"/>
    
  </entry>
  
  <entry>
    <title>圣斗士星矢的前世今生，车田正美的坚持，城户光政的阴谋</title>
    <link href="https://starming.com/2024/07/20/saint-seiya-story/"/>
    <id>https://starming.com/2024/07/20/saint-seiya-story/</id>
    <published>2024-07-19T23:33:51.000Z</published>
    <updated>2024-08-10T03:51:22.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我最近和家人们一起做了一个播客，名叫<a href="https://www.xiaoyuzhoufm.com/podcast/668b45c5094e5a1fbfd51135">《铭莉双收》</a>，本文内容是对最新一期播客“<a href="https://www.xiaoyuzhoufm.com/episode/669cb59a8fcadceb90cdae80">还有人看圣斗士星矢吗？</a>”的一个补充，欢迎大家订阅收听。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/saint-seiya-story/01.JPG" class="lozad post-image"src="/uploads/saint-seiya-story/01.JPG"></p><p>提到圣斗士星矢，大部分人都是通过90年央视播出的《圣斗士星矢》这部动画片看到的。后来200多个地方电台每年轮番播放，我也是那时看了一遍又一遍。再后来圣斗士的风潮就结束了，被龙珠和灌篮高手等动画片所替代。</p><p>我相对更铁粉些，后来还看了圣斗士星矢的漫画，工作后还买了车田正美授权的手代木史织画的冥王神话LC。</p><p>圣斗士星矢在生活中的影响随处可见，像小宇宙爆发、天马流星拳、庐山升龙霸这样的词总是声声入耳。B站年会圣斗士主题演出也是常客。日本还有真人舞台音乐剧。在法国圣斗士也是非常流行，几个法国网友自制了一部十分钟左右的动画短片，这个动画在法国引起了轰动，动画还传到东映高层那，这是发生在圣斗士动画结束十年后的事情，东映因此重启了冥王篇动画。最近22年，法国还举办了一场圣斗士星矢的音乐会。在一些电视剧和电影中也会用到这些词。《爱情公寓》里关谷神奇总是会变身“圣斗士关谷”。韩寒的《飞驰人生》电影中，车手摸到以前赛车时将其比作打开圣衣箱的瞬间。</p><p>就算圣斗士星矢这个 IP 还一直人气尚在，但自从漫画冥王篇人气下滑，动画海皇篇收视率下降，还有后续的作品一直无法再续辉煌，即便是车田正美老师本人在五十多岁再次持笔续篇《圣斗士星矢NEXT DIMENSION 冥王神话》也没法重塑辉煌。如今 ND 刚完结，迎来最终回，官方随书赠了再多纪念品也没有破圈传播出来。</p><p>这也可以看出《周刊少年Jump》这个舞台的残酷，也正是有了这样的舞台，才会不断诞生出新的神作。</p><p>但对于车田正美来说他为圣斗士星矢搭建的巨大世界观还远没完成，关于漫画和动画为何双双落败，车田正美和周刊少年Jump还有东映动画之间发生了什么问题，车田正美到底是个什么样的人呢？</p><h2 id="车田正美"><a href="#车田正美" class="headerlink" title="车田正美"></a>车田正美</h2><p>车田正美出生在建筑工人家庭，生日是1953年12月6日，今年他已经71岁，是射手座，所以知道为什么星矢是射手座候选人了吧。小时候车田正美就是暴走族的一员，他和其他不良少年不同的是他高中时特别喜欢本宫宏志的《男儿当大将》，决定当像本宫宏志那样的漫画家。另外大家熟悉本宫宏志的作品是《吞食天地》，就是街机上那个三国志游戏的漫画原著。</p><p>车田正美高三时给周刊少年Jump的新人奖比赛投稿，结果入围未果，安慰奖中他的名字都被写错，写成了东田正美。还是不良少年的他直接跑到杂志社问责，结果杂志编辑为了安息民愤，给了他一个当本宫宏志助手的机会，本宫宏志可是他的偶像啊。可想当时车田正美的杀气有多大。</p><p>有了当漫画家的觉悟，学习起来是飞快的。车田正美很快就开始在周刊少年Jump上连载漫画了，《女强风暴》、《拳王创世纪》、《风魔小次郎》和《男坂》等作品不断推出。《风魔小次郎》我小时候看过，感觉和圣斗士的风格很像，只是少了圣衣。缺少了圣衣加持，里面的人物更难和圣斗士中人物区分开了。</p><p>这些作品中，《男坂》由于题材还是一群小混混对付黑道，已经过时，人气不断降低，最后被迫完结。但是车田正美本人和他作品中的热血男儿一样，不轻言放弃，于是在完结最后一页还写着未完二字。这种不放弃就是三十年，2014年《男坂》重开连载。</p><p>当时《男坂》的被迫停载让车田正美的小宇宙终于得到爆发，他曾表示，如果下部作品不能红他金盆洗手不干这行了。为了达成这个目标，他低下了他高傲的头颅，将他信奉的拳击和小混混题材放弃掉，给他们包上一层商业化的圣衣，侵泡在希腊神话中，拿出来的就是《圣斗士星矢》。</p><p>当年《圣斗士星矢》火到集英社大楼都被称为车田大楼，上一次被这么叫的还是鸟山明的《阿拉蕾》。东映动画制作了《圣斗士星矢》的TV动画，接着就是手办的热卖，手办火热程度一直持续到现在。车田正美当时在文化类纳税是排名第一的，他买了很多豪车，生活也过的豪起来了。</p><p>好景不长，在海皇篇时，他和编辑理念出现分歧，还打算用以前成功时的闯宫套路，小强们不升级，黄金圣斗士还是最厉害的，如今的他似乎更有底气，于是不再听从于编辑提出的人物成长，新对手更强的Jump成功学。到了冥王篇读者终于开始厌倦，车田正美的故事编排能力不足的缺陷也更加突出了。于是车田正美自断双臂，大量删减了冥王篇的内容，使其能很快的完结。同样的情景也发生在动画这，《剧场版 天界篇·序奏》里，编剧和车田正美的想法也出现了很大的冲突，这部动画口碑非常差，TV动画海皇篇收视率也出现了滑铁卢。</p><p>虽然漫画冥王篇中被删减的内容在续作《圣斗士星矢NEXT DIMENSION 冥王神话》中得到了补全，但圣斗士的故事还是没能回到公众视野中来。</p><p>自车田正美三十多岁完结《圣斗士星矢》后，他还一直在画新的漫画，包括《静斗士翔》、《魔矢》、《钢铁神兵》、《青鸟的神话》以及自传漫画《蓝之时代》。这些作品都没有流行起来。</p><p>流行就是这样，大家都在追求新鲜感的东西，东西再好，看多了就无趣了。即使是手冢治虫，鸟山明这样的顶流漫画家，后期的作品也难流行开来，但是这也不会妨碍他们成为经典。曾经流行过能够成为一段回忆，经典的作品却能够一直被关注，价值会更高些呢。</p><p>在车田正美画续作ND时，他已经五十多了，现在才完结，这一画就是十八年。老爷子真的和他笔下的角色一样，为了自己的理想，一直坚持着，努力着。</p><p>说完车田正美，接下来，我会说一说圣斗士星矢到底是个什么样的故事，还会包括圣斗士神话的起源，也就是车田正美创作的超神话。还有正篇中提到的前圣战的故事。</p><h2 id="故事起源"><a href="#故事起源" class="headerlink" title="故事起源"></a>故事起源</h2><p>圣斗士星矢的世界观是车田正美独创的超神话，和我们知道的希腊神话不一样，只是借鉴了希腊神话、印度和中国的一些神话故事。</p><p>起源要从大爆炸说起，大爆炸释放出众神意志，众神意志诞生出大地、天空、海洋和人，有些人会觉醒众神意志。最开始有三个人，分别是掌管天地的宙斯、冥界的哈迪斯和海洋的波塞冬。</p><p>人的欲望不断膨胀，掠夺、侵占，到处是罪恶。宙斯无法忍受，于是发起了大洪水作为惩罚。后来宙斯把大地交给了自己的女儿雅典娜，然后消失了。</p><p>波塞冬为了夺取雅典娜的大地，创建了亚特兰蒂斯和海斗士军团，使用特殊材料制作了鳞衣给海斗士。由于雅典娜不喜欢武器，所以大地斗士很难伤害身穿鳞衣的海斗士，还很容易被杀。雅典娜让穆大陆的炼金术士使用銀星砂等材料制作出圣衣，以保护这些斗士，这些斗士也被称为圣斗士。由于特殊材质，这些圣衣如果遇到小伤害放进圣衣箱里是会自修复的。天空的88个星座是雅典娜对圣衣做的设计图，因此斗士只能穿上和自己守护星座相对应的圣衣。</p><p>有了圣斗士，海皇落败，返回亚特兰蒂斯，利用神力发动洪水和地震，于是雅典娜让圣斗士将亚特兰蒂斯破坏，并把波塞冬封印于北极。常年看守的圣斗士后来成为冰战士。</p><p>神之间的战争叫圣战。第一次圣战后雅典娜创建了雅典娜神殿和十二宫，这片区域叫做圣域。这之后雅典娜和圣斗士还遭遇了巨人族的侵犯，战争结束后圣衣产地穆大陆沉没，很多炼金术士也死于这场战争。制作圣衣的技术失传，只剩下少数可以修复圣衣的人，比如牡羊座的穆。</p><p>后面还发生了很多次圣战，看起来大多数神是不爱和平的，这点还是比不上人类。最残暴的神是战神阿瑞斯，他还会煽动人类发动战争。他的斗士被叫做狂斗士。阿瑞斯发起的战争导致大量亡民成了哈迪斯的子民。阿瑞斯和雅典娜的圣战中，圣斗士不断死于狂斗士手下，于是雅典娜允许天秤座圣斗士可以使用武器，让他对付狂斗士，致使阿瑞斯败北。</p><h2 id="前圣战"><a href="#前圣战" class="headerlink" title="前圣战"></a>前圣战</h2><p>最近的圣战，也就是圣斗士星矢正篇里提到的前圣战，发生在两百多年前。和前圣战相关的作品有《圣斗士星矢NEXT DIMENSION 冥王神话》（后面简称 ND）和《圣斗士星矢 THE LOST CANVAS 冥王神话》(后面简称 LC)</p><p>ND 是继续着正篇讲的，里面纱织穿越到了前圣战，目的是毁掉哈迪斯之剑，以拯救被哈迪斯之剑伤害的星矢。LC 完全是讲的发生在正篇之前的事情，但是人物和 ND 不完全一样。</p><h2 id="正篇前发生的事情"><a href="#正篇前发生的事情" class="headerlink" title="正篇前发生的事情"></a>正篇前发生的事情</h2><p>正篇主要分为以下部分：</p><ul><li>银河战争篇</li><li>暗黑圣斗士</li><li>白银圣斗士</li><li>圣域十二宫</li><li>北欧篇</li><li>海王篇</li><li>冥王十二宫</li><li>冥王冥界篇</li></ul><p>在银河战争篇之前，女神雅典娜降生于圣域，老教皇史昂在宣布雅典娜降生这个消息后准备退位给撒加和艾欧罗斯，但是艾欧罗斯被选中的可能性更高些，于是撒加的弟弟加隆提议杀掉雅典娜和老教皇，撒加将加隆关到舒尼恩岬牢狱内。</p><p>住在德国灵根的潘多拉家中一个有封条的盒子，使得睡眠之神修普诺斯和死亡之神塔纳托斯复活了。瞬和哈迪斯的灵魂同时出生，哈迪斯的灵魂是借由潘多拉的母亲生出，潘多拉家族城堡里的人在哈迪斯灵魂诞生之时全部死去，只留下潘多拉一人，这座城堡后来就是哈迪斯城堡。</p><p>加隆在牢狱中发现了海皇波塞冬的封印，他让海皇波塞冬附身在希腊船王家的继承人-朱利安·索罗体内，波塞冬再次进入沉睡。</p><p>在老教皇宣布艾欧罗斯为继承人后，那夜撒加杀害了老教皇。在撒加要杀雅典娜时被艾欧罗斯发现，艾欧罗斯带上雅典娜打算逃出圣域，撒加以教皇名义说艾欧里亚绑架雅典娜，是叛徒，于是一路被其他黄金圣斗士阻拦，最后垂死的艾欧里亚碰到来希腊旅游的财阀城户光政，并将雅典娜托付给了他。</p><p>接着城户光政开始策划“百子祭奠神”。</p><h2 id="正篇"><a href="#正篇" class="headerlink" title="正篇"></a>正篇</h2><p>城户光政为了保护雅典娜，将100名孤儿派到世界各地进行修行，最后只有十个人成为了圣斗士。在银河擂台赛中，胜出的前四人是星矢、冰河、紫龙和瞬，后来经历由瞬的哥哥一辉领导的暗黑圣斗士之战后，一辉最终被四小强的友谊所感动，从而加入了他们，成为了五小强。五小强战胜了白银圣斗士，勇闯了黄金十二宫，铲除了海斗士和海皇波塞冬，死磕了冥王哈迪斯。</p><p>正篇中最出彩是黄金圣斗士和冥斗士，这也是圣斗士星矢IP最核心的部分，直到现在，即便圣斗士新作品无人问津，但是黄金圣斗士和冥斗士的手办依然火爆。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/saint-seiya-story/02.jpeg" class="lozad post-image"src="/uploads/saint-seiya-story/02.jpeg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/saint-seiya-story/03.jpeg" class="lozad post-image"src="/uploads/saint-seiya-story/03.jpeg"></p><h2 id="黄金圣斗士排名"><a href="#黄金圣斗士排名" class="headerlink" title="黄金圣斗士排名"></a>黄金圣斗士排名</h2><p>另外，黄金圣斗士中谁更厉害也是永远是最受关注的话题。由于圣斗士星矢的作品太多，内容相互冲突，这里只限于车田正美自己的两部作品里的角色来比较。SS 代表正篇，ND 代表续作。</p><p>第一梯队有</p><ul><li>SS的撒加，SS加隆，SS童虎，SS史昂</li><li>ND双子座的该隐和亚伯，ND狮子座凯撒</li></ul><p>第二梯队有</p><ul><li>SS沙加，SS穆</li><li>ND山羊座以藏，ND处女座释静摩，ND水瓶座米斯托利亚，ND天蝎座艾卡拉特</li></ul><p>第三梯队有</p><ul><li>SS米罗，SS卡妙，SS艾欧里亚，SS修罗</li><li>ND的射手座格式塔，ND天秤座童虎，ND白羊座史昂，ND巨蟹座迪斯托尔，ND金牛奥克斯</li></ul><p>第四梯队有</p><ul><li>SS金牛阿鲁迪巴</li><li>ND双鱼座卡迪纳尔</li></ul><p>最差的</p><ul><li>SS双鱼座阿布罗狄，SS巨蟹座迪斯</li></ul><h2 id="城户光政是谁"><a href="#城户光政是谁" class="headerlink" title="城户光政是谁"></a>城户光政是谁</h2><p>看了圣斗士星矢的人都会觉得剧情漏洞太多。但这里做一个假设，所有圣斗士星矢的剧情漏洞就都填上了。</p><p>这个假设是城户光政就是将大地交给雅典娜后就消失的宙斯。从头按照这个假设再看看剧情，宙斯应该是在每次圣战中按照帮雅典娜的人，不然为什么每次雅典娜都能够赢得圣战。正篇中，宙斯下凡投胎成为城户光政，以神力成为了大富豪，并在两年内在全世界到处留种，生了一百个孩子。一般人到了城户光政这个年龄是无法办到的。因此这只能是使用了神力。并且他没有将遗产给自己的孩子而是给了一个捡来的娃娃，这并不是人类的思维。</p><p>艾欧里亚将雅典娜交给城户光政这段，是不是和赵子龙救阿斗，交给孩子亲爹刘备一模一样。宙斯一定是将自己的身份告知了艾欧里亚，不然他怎么会把雅典娜交给他呢，宙斯将艾欧里亚的灵魂附着到射手座圣衣上，这样圣衣可以继续保护雅典娜。你看后来冥界篇中黄金圣斗士复活时怎么就没有艾欧里亚呢，这是因为艾欧里亚的灵魂并没有到冥界啊。</p><p>救回雅典娜后，城户光政又生了两个最关键的孩子，一个是星矢，一个是瞬，星矢是弑神者，瞬是给冥王作为转世体用。随后几年中宙斯将这些孩子的母亲都害死，致使这些孩子成为孤儿。</p><p>6年后，城户光政将一百个孩子聚到一起，和撒加达成协议，提供一百个人给他培训，并提供大量资金支持。撒加欣然答应了。为了表达感谢，撒加额外将几十万年都没用过的天鹅座和天龙座奉献了出来，并配备了黄金圣斗士卡妙和童虎作为导师，看来紫龙和冰河是内定的啊。撒加知道下面要面对对付神的战斗，于是将弑神者星矢叫到希腊重点培养。你看，星矢成为圣斗士时，教皇还亲自到场祝贺。</p><p>宙斯布好局，就到天上等着看好戏了。</p><p>成为冥王的转世体的条件是世界上最纯洁善良的人，这种人不会主动进入冲突，降低了被伤害的概率，但是一旦遇到危险难于自保，因此需要一个能够随时保护转世体的人。于是冥王就在死亡岛安排了一个导师，这个导师没有身份、圣衣和实体，只有一个面具，存在的目的就培养一个能够保护冥王转世体的人，将这个人培养成死不了，能够穿越生死空间，还越战越猛的人。能够让人不死和自由穿越空间的只有冥王。这样每次瞬遇到危险，一辉都能瞬间感到，无视雅典娜结界，或者直接降到冥界第四狱。一辉的导师很可能是前面某个双子座圣斗士的灵魂，凤翼天翔加幻魔拳招式和效果与双子座的银河星爆加幻朧魔皇拳如出一辙。</p><p>最终宙斯的阴谋得逞，他的儿子们和他的女儿一同战胜了波塞冬，能够弑神的儿子星矢最终帮女儿弑掉了总是威胁她的大爷冥王哈迪斯。</p><p>最后海皇篇主题曲有段歌词可以作为这段猜想的印证，“正如被选中的神之子”。</p><h2 id="一些八卦图个乐"><a href="#一些八卦图个乐" class="headerlink" title="一些八卦图个乐"></a>一些八卦图个乐</h2><p>魔玲和星矢有着超越师徒的关系，这关系有点像杨过和小龙女。用漫画中魔玲自己说的话作证，“星矢一直把我当作他的姐姐，而且我们彼此问维持着超越师徒间的感情。如果可以的话，最后还是想再让他看一次我的真面目呢。”，待星矢背上圣衣走的时候，魔玲揭开了自己的面具。</p><p>邪武这个舔狗，给雅典娜做牛做马，雅典娜还是喜欢不服管教的星矢，这情节是不是也很熟悉，车田正美妥妥的看过神雕侠侣。</p><p>冰河恋母，成为圣斗士的动力就是为了下海。</p><p>死亡岛的斗士都是没有正式编制的，他们的圣衣是自产的，没被雅典娜采用的，黑暗斗士的招式是自己琢磨的，不像圣斗士都有名师指点。这妥妥的山寨工厂。</p><p>童虎的设定是中国人，童虎是从乾隆时一直到90年代，那么肯定经历了抗日战争，日本人在庐山烧杀抢掠时童虎无动于衷么，难道是因为超过了参军年龄。</p><p>紫龙的父亲是城户光政，母亲是庐山人，应该是叫照香炉，紫龙从小跟随母亲，随母姓，人称庐山照紫龙，他还有个妹妹叫紫烟，有诗为证：<br>日照香炉生紫烟，遥看瀑布挂前川。<br>飞流直下三千尺，疑是银河落九天。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我最近和家人们一起做了一个播客，名叫&lt;a href=&quot;https://www.xiaoyuzhoufm.com/podcast/668b45
      
    
    </summary>
    
      <category term="Podcast" scheme="https://starming.com/categories/Podcast/"/>
    
    
      <category term="Podcast" scheme="https://starming.com/tags/Podcast/"/>
    
      <category term="Manga" scheme="https://starming.com/tags/Manga/"/>
    
  </entry>
  
  <entry>
    <title>梵高灵感的来自江户浮世绘，颜气江户APP来自江户的色彩</title>
    <link href="https://starming.com/2024/07/04/edocolorapp/"/>
    <id>https://starming.com/2024/07/04/edocolorapp/</id>
    <published>2024-07-03T21:48:02.000Z</published>
    <updated>2024-07-04T13:08:15.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看过我前面博客的同学会发现我很喜欢自己画些配图，每次给画配色都会有些新的体会，却不知道是什么，于是每次都要经过一轮新的摸爬滚打才能调到自己满意的颜色，最近我为了能够提高自己的配色效率，就专门的看了一些色彩相关的书籍，学习了点色彩的理论，还专门的手写了一款 APP，提高了上色的效率呢。这个 APP 叫颜气江户，我已经发到<a href="https://apps.apple.com/cn/app/%E9%A2%9C%E6%B0%94/id6504629708">苹果商店（28元）</a>，iOS、iPad 和 macOS 商店都可以找到，搜索“颜气江户”。下面我会聊一点色彩的理论，以及怎么将其融入到 APP 中的。</p><p>颜气江户 APP 有一些色彩 APP 的基本功能，200个江户色卡，色卡配图和配色表，以及识别图片配色等功能。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/edocolorapp/08.png" class="lozad post-image"src="/uploads/edocolorapp/08.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/edocolorapp/06.png" class="lozad post-image"src="/uploads/edocolorapp/06.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/edocolorapp/04.png" class="lozad post-image"src="/uploads/edocolorapp/04.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/edocolorapp/07.png" class="lozad post-image"src="/uploads/edocolorapp/07.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/edocolorapp/03.png" class="lozad post-image"src="/uploads/edocolorapp/03.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/edocolorapp/02.png" class="lozad post-image"src="/uploads/edocolorapp/02.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/edocolorapp/05.png" class="lozad post-image"src="/uploads/edocolorapp/05.png"></p><h2 id="舒服的配色"><a href="#舒服的配色" class="headerlink" title="舒服的配色"></a>舒服的配色</h2><p>首先，无论你是否画画，你都会觉得一些配色看起来很舒服，也会觉得有些配色看起来很丑。这些其实是有一定规律可循的。你的眼睛会寻求中等灰色才会达到一种平衡状态，互补色调合后会变成灰色，所以灰色和互补色很容易让配色舒服。因此苹果笔记本常年都是主打银灰色，macOS 操作系统的窗口和 Sidebar 一直以来也都是灰色的，非常耐看。有颜色的手机，单个不耐看，放在一起看着就很舒服，也是这个道理。</p><p>色彩即是物理的、化学的，还是生理的和心理的。物理主要是关于光谱和色彩光波，化学就是染色和载色剂相关的东西，对于艺术美学来说，主要是生理和心理方面的作用，看着舒服就是生理方面的，生理学家埃瓦尔德·赫林就说过眼睛和大脑需要中等灰色，没有的话大脑会处于不安状态。</p><p>这种灰色是可以通过色彩调合而成，最简单的调合方式就是互补色加白色。</p><h2 id="互补色"><a href="#互补色" class="headerlink" title="互补色"></a>互补色</h2><p>那么什么是互补色呢。灰色好理解，互补色可能就比较复杂些了。严谨点的理论上通过色轮可以获取不同数量的互补颜色组合。比如双色互补是色轮上的直线段两端的颜色，三色互补是色轮上构成等边三角形火等腰三角形的三种色彩，四色互补是色轮上构成正方形或长方形的四种色彩。</p><p>虽然互补色会让画面配色看起来和谐舒服，但是有些艺术作品是需要有冲击性的，又或者有鲜明个性的，不然就不好玩了。因此创作时是不用严格按照互补色来配色，根据个人主观喜好来用色就好，当觉得配的不好时再运用互补色的理论调整好了。</p><h2 id="对比色"><a href="#对比色" class="headerlink" title="对比色"></a>对比色</h2><p>另外，通过对比色可以突出你想突出的内容，有五种常用的色彩对比方法</p><ul><li>色相对比：十二色轮的主色</li><li>明暗对比：黄色最亮，紫色最暗</li><li>冷暖对比：红色和橙色最暖，蓝绿色最冷，风景画中远处色彩较冷</li><li>补色对比：调合后成灰色的颜色对比</li><li>面积对比：颜色所占比例对比</li></ul><h2 id="色彩的意义"><a href="#色彩的意义" class="headerlink" title="色彩的意义"></a>色彩的意义</h2><p>色彩的组合其实和音乐的音阶一样，了解音阶的理论并不能创作出美妙的旋律，了解配色原理和每个颜色也不并能创作出美丽的作品。</p><p>了解色彩只是一切美好的基础，也是好的开端。</p><p>同时色彩的变迁和演变也伴随着历史、文化和艺术的演变，了解更多色彩的知识也能够探索到更多未知的领域，让日子意义感更足些呢。</p><h2 id="江户色"><a href="#江户色" class="headerlink" title="江户色"></a>江户色</h2><p>19世纪50年代，江户时期的艺术品传入欧洲，在欧洲流行起来，巴黎一些前卫的艺术家很喜欢这些艺术品。1886年梵高来到巴黎见到江户浮世绘后对其产生了极大兴趣。</p><p>梵高起初收集浮世绘作品是想在咖啡馆里卖这些作品，结果没人买。梵高作品《铃鼓咖啡馆里的阿戈斯蒂娜·塞迦陀利》中可以看到咖啡馆上挂着浮世绘艺伎图。</p><p>虽然梵高没有从浮世绘中获取收入，却从其中获取了创作灵感。他临摹了歌川广重的《开花的李树园》和《大桥安宅骤雨》，还有溪斋英泉的《身穿云龙打挂的花魁》。</p><p>梵高《包扎着耳朵的自画像》这张自画像中墙上挂着的是佐藤虎清的《艺者与富士》。梵高曾表示自己很喜欢葛饰北斋的《神奈川冲浪里》，而后创作了最著名的《星月夜》，其中旋转的星云和神奈川冲浪里的浪非常神似。</p><p>梵高曾经说过：“如果你研究日本艺术，你看到的是一个充满智慧、哲思和悟性的人将时间用来做什么呢？研究地球与月亮的距离？不。研究俾斯麦政策？不。他研究一片草叶。这难道不是日本人教给我们的真正的宗教吗?他们简单地生活在自然之中如同花儿一样。”</p><p>我喜欢梵高的配色，同时也喜欢江户时代浮世绘画中的颜色，因此我打算先从江户时代的颜色入手，先做好研究。</p><p>我找了200种当时流行的颜色，颜气江户 APP 目前就内置了这些颜色，并加入了颜色的名字的来源。江户色名主要取自植物、动物、自然现象以及歌舞伎演员等。透过这些色名的来源，我发现还能够了解到江户时期的人们生活文化自然的方方面面。</p><p>举几个由歌舞伎演员名命名的颜色的例子，比如団十郎茶、梅幸茶、路考茶、芝翫茶、璃寛茶。</p><p>団十郎茶是歌舞伎役者市川團十郎爱使用的颜色，成田屋的标志，是一种偏红的棕色。艺荒事（武戏）代表剧“暂”里所用的服装颜色，还有温泉猴子的脸和柿饼也是这种颜色。</p><p>梅幸茶是歌舞伎大师初代尾上菊五郎最喜欢的颜色，颜色名来自菊五郎的俳句名梅幸。</p><p>路考茶是江戸的歌舞伎役者二代目瀬川菊之丞襲名王子路考喜欢的颜色，江户各地女性争相模仿，浮世絵美人衣服很多用的也是这个颜色。</p><p>芝翫茶是大阪花形役者三代目中村歌右衛門喜欢的颜色，呈偏淡的红棕色，芝翫是他的俳名。</p><p>璃寛茶是歌舞伎演员二世嵐吉三郎最喜欢的舞台衣裳的颜色，他的俳句叫瑠寛。虎河豚是一种高级鱼，就是璃寛茶色。</p><p>歌舞伎的演员成了明星和时尚的领导者，庶民喜欢把歌舞伎演员喜欢的颜色叫做役者色，将这些颜色衣裳穿在自己身上，会觉得自己很时尚。</p><p>另外，江户时代颜色有个最显著的特色，那就是茶色和鼠色很多，统称四十八茶百鼠。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/edocolorapp/01.png" class="lozad post-image"src="/uploads/edocolorapp/01.png"></p><p>江户中期富裕的商人越来越多，生活变得奢侈起来，更多钱用在了华丽颜色的服饰上，幕府为了避免攀比和浪费，因此提倡节俭，并颁布了奢侈禁止令，让更多的钱用在江户的城市发展上。这样一些以前代表低身份的茶色和鼠色被玩出了花，出现了很多新的颜色，这些颜色变成了流行时尚色。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;看过我前面博客的同学会发现我很喜欢自己画些配图，每次给画配色都会有些新的体会，却不知道是什么，于是每次都要经过一轮新的摸爬滚打才能调到自己满
      
    
    </summary>
    
      <category term="App" scheme="https://starming.com/categories/App/"/>
    
    
      <category term="App" scheme="https://starming.com/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>小册子之 SwiftUI 动画</title>
    <link href="https://starming.com/2024/05/25/pamphlet-series-animation/"/>
    <id>https://starming.com/2024/05/25/pamphlet-series-animation/</id>
    <published>2024-05-25T11:20:09.000Z</published>
    <updated>2024-09-18T08:02:45.335Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容已整理到小册子中，本文会随着系统更新和我更多的实践而新增和更新，你可以下载<a href="https://apps.apple.com/cn/app/%E6%88%B4%E9%93%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%B0%8F%E5%86%8C%E5%AD%90/id1609702529?mt=12">“戴铭的开发小册子”</a>应用，来跟踪查看本文内容新增和更新。小册子应用的代码可以在 <a href="https://github.com/ming1016/SwiftPamphletApp">Github</a> 上查看。</p><p>本文属于小册子系列中的一篇，已发布系列文章有：</p><ul><li><a href="https://starming.com/2024/05/18/pamphlet-series-swiftdata/">小册子之如何使用 SwiftData 开发 SwiftUI 应用</a></li><li><a href="https://starming.com/2024/05/18/pamphlet-series-widget/">小册子之简说 Widget 小组件</a></li><li><a href="https://starming.com/2024/05/18/pamphlet-series-listdataview/">小册子之 List、Lazy 容器、ScrollView、Grid 和 Table 数据集合 SwiftUI 视图</a></li><li><a href="https://starming.com/2024/05/18/pamphlet-series-layout/">小册子之详说 Navigation、ViewThatFits、Layout 协议等布局 SwiftUI 组件</a></li><li><a href="https://starming.com/2024/05/18/pamphlet-series-form/">小册子之 Form、Picker、Toggle、Slider 和 Stepper 表单相关 SwiftUI 视图</a></li><li>【本篇】<a href="https://starming.com/2024/05/25/pamphlet-series-animation/">小册子之 SwiftUI 动画</a></li></ul><h2 id="SwiftUI动画"><a href="#SwiftUI动画" class="headerlink" title="SwiftUI动画"></a>SwiftUI动画</h2><p>SwiftUI 里实现动画的方式包括有 .animation 隐式动画、withAnimation 和 withTransaction 显示动画、matchedGeometryEffect Hero 动画和 TimelineView 等。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayAnimation</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isChange <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> anis<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Animation</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p2"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">interpolatingSpring</span><span class="token punctuation">(</span>stiffness<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> damping<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p4"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p5"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeIn</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p6"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p7"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">interactiveSpring</span><span class="token punctuation">(</span>response<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> dampingFraction<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> blendDuration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p8"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p9"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">repeatCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selection <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// animation 隐式动画和 withAnimation 显示动画</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>isChange <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"另一种状态"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"一种状态"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span>easeInOut<span class="token punctuation">,</span> value<span class="token punctuation">:</span> isChange<span class="token punctuation">)</span> <span class="token comment">// 受限的隐式动画，只绑定某个值。</span>            <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                <span class="token comment">// 使用 withAnimation 就是显式动画，效果等同 withTransaction(Transaction(animation: .default))</span>                withAnimation <span class="token punctuation">&#123;</span>                    isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 设置 Transaction。和隐式动画共存时，优先执行 withAnimation 或 Transaction。</span>                <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>animation<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                t<span class="token punctuation">.</span>disablesAnimations <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 用来禁用隐式动画</span>                <span class="token function">withTransaction</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end onHover</span>                <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token number">60</span> <span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span>anis<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span>anis<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> isChange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>            isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"pause.fill"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"play.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// matchedGeometryEffect 的使用</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"后台"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            placeStayView            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"前台"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            placeShowView        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>                <span class="token comment">// 通过使用相同 matchedGeometryEffect 的 id，绑定两个元素变化。</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> isChange <span class="token punctuation">&#123;</span>                <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g1"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"转换"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">!</span>isChange <span class="token punctuation">&#123;</span>                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g1"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">!</span>isChange <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p19"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g1"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 使用 isSource，作为移动到相同 matchedGeometryEffect id 的方法。</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p19"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"g2"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">,</span> isSource<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p19"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g2"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                                <span class="token comment">// 点击跟随的效果</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> i <span class="token operator">==</span> selection <span class="token operator">?</span> <span class="token number">200</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"h</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                        withAnimation <span class="token punctuation">&#123;</span>                            selection <span class="token operator">=</span> i                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"h</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">selection</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">,</span> isSource<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>                <span class="token comment">// matchedGeometryEffect 还可以应用到 List 中，通过 Array enumerated 获得 index 作为 matchedGeometryEffect 的 id。右侧固定按钮可以直接让对应 id 的视图滚动到固定按钮的位置</span>                        <span class="token comment">// TimelineView</span>        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">periodic</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token punctuation">.</span>now<span class="token punctuation">,</span> by<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">t<span class="token punctuation">.</span>date</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token class-name">HStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">repeatCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> e<span class="token punctuation">)</span>                                <span class="token class-name">TimelineSubView</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> t<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token comment">// 需要传入 timeline 的时间给子视图才能够起作用。</span>                                <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// matchedGeometryEffect</span>        <span class="token comment">/// TimelineScheduler 的使用，TimelineScheduler 有以下类型</span>        <span class="token comment">/// .animation：制定更新的频率，可以控制暂停</span>        <span class="token comment">/// .everyMinute：每分钟更新一次</span>        <span class="token comment">/// .explicit：所有要更新的放到一个数组里</span>        <span class="token comment">/// .periodic：设置开始时间和更新频率</span>        <span class="token comment">/// 也可以自定义 TimelineScheduler</span>        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span>everySecond<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>            <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 自定义的 TimelineScheduler</span>        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">everyLoop</span><span class="token punctuation">(</span>timeOffsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>            <span class="token class-name">TimelineSubView</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> t<span class="token punctuation">.</span>date<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// MARK: - TimelineSubView</span>    <span class="token keyword">struct</span> <span class="token class-name">TimelineSubView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> date <span class="token punctuation">:</span> <span class="token class-name">Date</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"let's go"</span></span>        <span class="token comment">// 顺序从数组中取值，取完再重头开始</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> idx<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">func</span> <span class="token function-definition function">advanceIndex</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            idx <span class="token operator">=</span> <span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> count            <span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> idx <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">HStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">idx</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeIn</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> date<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                        <span class="token function">advanceIndex</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                        s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">.</span>hour</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">.</span>minute</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">.</span>second</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>                        <span class="token function">advanceIndex</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                                    <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// MARK: - 用 matchedGeometryEffect 做动画</span>    <span class="token comment">/// matchedGeometryEffect 可以无缝的将一个图像变成另外一个图像。</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> placeStayItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"p2"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"p4"</span></span><span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> placeShowItems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token attribute atrule">@Namespace</span> <span class="token keyword">private</span> <span class="token keyword">var</span> mgeStore        <span class="token keyword">private</span> <span class="token keyword">var</span> placeStayView<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>placeStayItems<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                        withAnimation <span class="token punctuation">&#123;</span>                            placeStayItems<span class="token punctuation">.</span>removeAll <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">==</span> s <span class="token punctuation">&#125;</span>                            placeShowItems<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end LazyVGrid</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// private var placeStayView</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> placeShowView<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>placeShowItems<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                        withAnimation <span class="token punctuation">&#123;</span>                            placeShowItems<span class="token punctuation">.</span>removeAll <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">==</span> s <span class="token punctuation">&#125;</span>                            placeStayItems<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>white<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end LazyVGrid</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end private var placeShowView</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end struct PlayAnimation</span><span class="token comment">// MARK: - 扩展 TimelineSchedule</span><span class="token keyword">extension</span> <span class="token class-name">TimelineSchedule</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">PeriodicTimelineSchedule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> everySecond<span class="token punctuation">:</span> <span class="token class-name">PeriodicTimelineSchedule</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token punctuation">.</span>now<span class="token punctuation">,</span> by<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义一个 TimelineSchedule</span><span class="token comment">// timeOffsets 用完，就会再重头重新再来一遍</span><span class="token keyword">struct</span> <span class="token class-name">PCLoopTimelineSchedule</span><span class="token punctuation">:</span> <span class="token class-name">TimelineSchedule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timeOffsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TimeInterval</span><span class="token punctuation">]</span>        <span class="token keyword">func</span> <span class="token function-definition function">entries</span><span class="token punctuation">(</span>from startDate<span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token punctuation">,</span> mode<span class="token punctuation">:</span> <span class="token class-name">TimelineScheduleMode</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Entries</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Entries</span><span class="token punctuation">(</span>last<span class="token punctuation">:</span> startDate<span class="token punctuation">,</span> offsets<span class="token punctuation">:</span> timeOffsets<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">struct</span> <span class="token class-name">Entries</span><span class="token punctuation">:</span> <span class="token class-name">Sequence</span><span class="token punctuation">,</span> <span class="token class-name">IteratorProtocol</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> last<span class="token punctuation">:</span> <span class="token class-name">Date</span>        <span class="token keyword">let</span> offsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TimeInterval</span><span class="token punctuation">]</span>        <span class="token keyword">var</span> idx<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Date</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>            idx <span class="token operator">=</span> <span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> offsets<span class="token punctuation">.</span>count            last <span class="token operator">=</span> last<span class="token punctuation">.</span><span class="token function">addingTimeInterval</span><span class="token punctuation">(</span>offsets<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> last        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end Struct Entries</span><span class="token punctuation">&#125;</span><span class="token comment">// 为自定义的 PCLoopTimelineSchedule 做一个 TimelineSchedule 的扩展函数，方便使用</span><span class="token keyword">extension</span> <span class="token class-name">TimelineSchedule</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">PCLoopTimelineSchedule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">everyLoop</span><span class="token punctuation">(</span>timeOffsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TimeInterval</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">PCLoopTimelineSchedule</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>timeOffsets<span class="token punctuation">:</span> timeOffsets<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="contentTransition"><a href="#contentTransition" class="headerlink" title="contentTransition"></a>contentTransition</h2><p><code>.contentTransition(.numericText())</code> 修饰符用于在视图内容发生变化时，以数字动画的方式进行过渡。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> filmNumber<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">filmNumber</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contentTransition</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">numericText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span>easeIn<span class="token punctuation">,</span> value<span class="token punctuation">:</span> filmNumber<span class="token punctuation">)</span>            <span class="token class-name">Stepper</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影数量"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $filmNumber<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>indigo<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="animation修饰符"><a href="#animation修饰符" class="headerlink" title="animation修饰符"></a>animation修饰符</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>在 SwiftUI 中，创建一个动画需要以下三个组成部分：</p><ul><li>一个时间曲线函数</li><li>一个声明将状态（或特定的依赖项）与该时间曲线函数关联起来</li><li>一个依赖于该状态（或特定的依赖项）的可动画组件</li></ul><p>动画的接口定义为 <code>Animation(timingFunction:property:duration:delay)</code></p><ul><li><code>timingFunction</code> 是时间曲线函数，可以是线性、缓动、弹簧等</li><li><code>property</code> 是动画属性，可以是颜色、大小、位置等</li><li><code>duration</code> 是动画持续时间</li><li><code>delay</code> 是动画延迟时间</li></ul><p>三种写法</p><ul><li><code>withAnimation(_:_:)</code> 全局应用</li><li><code>animation(_:value:)</code> 应用于 View</li><li><code>animation(_:)</code> 应用于绑定的变量</li></ul><p>第一种</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    myProperty <span class="token operator">=</span> newValue<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> myProperty<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第三种</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scale<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">1.0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PosterView</span><span class="token punctuation">(</span>scale<span class="token punctuation">:</span> $scale<span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PosterView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> scale<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"evermore"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>scale<span class="token punctuation">)</span>            <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>                scale <span class="token operator">=</span> <span class="token number">1.5</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们创建了一个 <code>MovieView</code>，它有一个状态变量 <code>scale</code>。当 <code>scale</code> 的值改变时，<code>PosterView</code> 中的海报图片会以线性动画的方式进行缩放。当 <code>PosterView</code> 出现时，<code>scale</code> 的值会改变为 1.5，因此海报图片会以线性动画的方式放大到 1.5 倍。</p><p>在 SwiftUI 中，我们也可以创建一个自定义的 <code>AnimatableModifier</code> 来实现对图文卡片大小的动画处理。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isSmall <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"evermore"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span>cornerSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影标题"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>bold<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">animatableCard</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> isSmall <span class="token operator">?</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>            <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                isSmall<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">AnimatableCardModifier</span><span class="token punctuation">:</span> <span class="token class-name">AnimatableModifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> size<span class="token punctuation">:</span> <span class="token class-name">CGSize</span>    <span class="token keyword">var</span> color<span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token punctuation">.</span>white        <span class="token keyword">var</span> animatableData<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">.</span><span class="token class-name">AnimatableData</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token class-name">CGSize</span><span class="token punctuation">.</span><span class="token class-name">AnimatableData</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> size<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span> size <span class="token operator">=</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> newValue<span class="token punctuation">.</span>first<span class="token punctuation">,</span> height<span class="token punctuation">:</span> newValue<span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        content            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">animatableCard</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">,</span>                        color<span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token punctuation">.</span>white<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">AnimatableCardModifier</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> size<span class="token punctuation">,</span>                                             color<span class="token punctuation">:</span> color<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SwiftUI 内置了许多动画过渡函数，主要分为四类：</p><ul><li>时间曲线动画函数</li><li>弹簧动画函数</li><li>高阶动画函数</li><li>自定义动画函数</li></ul><h3 id="时间曲线动画函数"><a href="#时间曲线动画函数" class="headerlink" title="时间曲线动画函数"></a>时间曲线动画函数</h3><p>时间曲线函数决定了动画的速度如何随时间变化，这对于动画的自然感觉非常重要。</p><p>SwiftUI 提供了以下几种预设的时间曲线函数：</p><ul><li><code>linear</code>：线性动画，动画速度始终保持不变。</li><li><code>easeIn</code>：动画开始时速度较慢，然后逐渐加速。</li><li><code>easeOut</code>：动画开始时速度较快，然后逐渐减速。</li><li><code>easeInOut</code>：动画开始和结束时速度较慢，中间阶段速度较快。</li></ul><p>除此之外，SwiftUI 还提供了 <code>timingCurve</code> 函数，可以通过二次曲线或 Bézier 曲线来自定义插值函数，实现更复杂的动画效果。</p><p>以下是代码示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scale<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">1.0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影标题"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"evermore"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>scale<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>            <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                scale <span class="token operator">=</span> <span class="token number">1.5</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们创建了一个 <code>MovieView</code>，它包含一个电影标题和一个电影海报。当视图出现时，海报的大小会以 <code>easeInOut</code> 的方式在 1 秒内放大到 1.5 倍。</p><h3 id="弹簧动画函数"><a href="#弹簧动画函数" class="headerlink" title="弹簧动画函数"></a>弹簧动画函数</h3><p>弹簧动画函数可以模拟物理世界中的弹簧运动，使动画看起来更加自然和生动。</p><p>SwiftUI 提供了以下几种预设的弹簧动画函数：</p><ul><li><code>smooth</code>：平滑的弹簧动画，动画速度逐渐减慢，直到停止。</li><li><code>snappy</code>：快速的弹簧动画，动画速度快速减慢，然后停止。</li><li><code>bouncy</code>：弹跳的弹簧动画，动画在结束时会有一些弹跳效果。</li></ul><p>除此之外，SwiftUI 还提供了 <code>spring</code> 函数，可以自定义弹簧动画的持续时间、弹跳度和混合持续时间，实现更复杂的弹簧动画效果。</p><p>以下是代码示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scale<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">1.0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影标题"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"evermore"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>scale<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>            <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span>response<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> dampingFraction<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> blendDuration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                scale <span class="token operator">=</span> <span class="token number">1.5</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们创建了一个 <code>MovieView</code>，它包含一个电影标题和一个电影海报。当视图出现时，海报的大小会以自定义的弹簧动画方式在 0.5 秒内放大到 1.5 倍。</p><h3 id="高阶动画函数"><a href="#高阶动画函数" class="headerlink" title="高阶动画函数"></a>高阶动画函数</h3><p>高级动画函数可以在基础动画函数的基础上，添加延迟、重复、翻转和速度等功能，使动画效果更加丰富和复杂。</p><p>以下是这些函数的简单介绍：</p><ul><li><code>func delay(TimeInterval) -&gt; Animation</code>：此函数可以使动画在指定的时间间隔后开始。</li><li><code>func repeatCount(Int, autoreverses: Bool) -&gt; Animation</code>：此函数可以使动画重复指定的次数。如果 <code>autoreverses</code> 参数为 <code>true</code>，则每次重复时动画都会翻转。</li><li><code>func repeatForever(autoreverses: Bool) -&gt; Animation</code>：此函数可以使动画无限次重复。如果 <code>autoreverses</code> 参数为 <code>true</code>，则每次重复时动画都会翻转。</li><li><code>func speed(Double) -&gt; Animation</code>：此函数可以调整动画的速度，使其比默认速度快或慢。</li></ul><p>以下是代码示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">MovieView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scale<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">1.0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影标题"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"movie_poster"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>scale<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>            <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token class-name">Animation</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> autoreverses<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">speed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                scale <span class="token operator">=</span> <span class="token number">1.5</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们创建了一个 <code>MovieView</code>，它包含一个电影标题和一个电影海报。当视图出现时，海报的大小会以 <code>easeInOut</code> 的方式在 1 秒内放大到 1.5 倍，然后在 0.5 秒后开始，重复 3 次，每次重复都会翻转，速度是默认速度的 2 倍。</p><h3 id="自定义动画函数"><a href="#自定义动画函数" class="headerlink" title="自定义动画函数"></a>自定义动画函数</h3><p>SwiftUI 可以通过实现 <code>CustomAnimation</code> 协议来完全自定义插值算法。</p><p>以下是一个简单的 <code>Linear</code> 动画函数的实现：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scale<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">1.0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影标题"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"evermore"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>scale<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">myLinear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> scale<span class="token punctuation">)</span> <span class="token comment">// use myLinear animation</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>            scale <span class="token operator">=</span> <span class="token number">1.5</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">MyLinearAnimation</span><span class="token punctuation">:</span> <span class="token class-name">CustomAnimation</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> duration<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span>  <span class="token keyword">func</span> <span class="token function-definition function">animate</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">V</span><span class="token punctuation">,</span> time<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">AnimationContext</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">V</span><span class="token operator">?</span> <span class="token keyword">where</span> <span class="token class-name">V</span> <span class="token punctuation">:</span> <span class="token class-name">VectorArithmetic</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> time <span class="token operator">&lt;=</span> duration <span class="token punctuation">&#123;</span>      value<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> time <span class="token operator">/</span> duration<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token nil constant">nil</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">func</span> <span class="token function-definition function">velocity</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">:</span> <span class="token class-name">VectorArithmetic</span><span class="token operator">></span><span class="token punctuation">(</span>    value<span class="token punctuation">:</span> <span class="token class-name">V</span><span class="token punctuation">,</span> time<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token class-name">AnimationContext</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token operator">></span>  <span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">V</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>    value<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token number">1.0</span> <span class="token operator">/</span> duration<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">func</span> <span class="token function-definition function">shouldMerge</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token operator">></span><span class="token punctuation">(</span>previous<span class="token punctuation">:</span> <span class="token class-name">Animation</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">V</span><span class="token punctuation">,</span> time<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">AnimationContext</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Bool</span> <span class="token keyword">where</span> <span class="token class-name">V</span> <span class="token punctuation">:</span> <span class="token class-name">VectorArithmetic</span> <span class="token punctuation">&#123;</span>    <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">Animation</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">myLinear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Animation</span> <span class="token punctuation">&#123;</span> <span class="token comment">// define function like linear</span>    <span class="token keyword">return</span> <span class="token class-name">Animation</span><span class="token punctuation">(</span><span class="token class-name">MyLinearAnimation</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> duration<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h2><h3 id="Transaction-使用指南"><a href="#Transaction-使用指南" class="headerlink" title="Transaction 使用指南"></a>Transaction 使用指南</h3><p>这段内容主要介绍了 SwiftUI 中的 <code>Transaction</code> 和 <code>withTransaction</code>。<code>Transaction</code> 是 SwiftUI 中用于控制动画的一种方式，它可以用来定义动画的详细参数，如动画类型、持续时间等。<code>withTransaction</code> 是一个函数，它接受一个 <code>Transaction</code> 实例和一个闭包作为参数，闭包中的代码将在这个 <code>Transaction</code> 的上下文中执行。</p><p>以下是一个使用 <code>Transaction</code> 和 <code>withTransaction</code> 的代码示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scale<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">1.0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影标题"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"evermore"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>scale<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> transaction <span class="token operator">=</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>animation<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">withTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                scale <span class="token operator">=</span> <span class="token number">1.5</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们创建了一个 <code>MovieView</code>，它包含一个电影标题和一个电影海报。当视图出现时，我们创建了一个 <code>Transaction</code>，并设置了动画类型为 <code>easeInOut</code>，持续时间为 1 秒。然后我们在 <code>withTransaction</code> 的闭包中改变 <code>scale</code> 的值，这样海报的大小就会以 <code>easeInOut</code> 的方式在 1 秒内放大到 1.5 倍。</p><h3 id="使用-Transaction-和-withTransaction"><a href="#使用-Transaction-和-withTransaction" class="headerlink" title="使用 Transaction 和 withTransaction"></a>使用 <code>Transaction</code> 和 <code>withTransaction</code></h3><p>SwiftUI 中 <code>Transaction</code> 的 <code>disablesAnimations</code> 和 <code>isContinuous</code> 属性，以及 <code>transaction(_:)</code> 方法怎么使用？</p><p><code>disablesAnimations</code> 属性可以用来禁止动画，<code>isContinuous</code> 属性可以用来标识一个连续的交互（例如拖动）。<code>transaction(_:)</code> 方法可以用来创建一个新的 <code>Transaction</code> 并在其闭包中设置动画参数。</p><p>以下是一个使用这些特性的代码示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> size<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">100</span>    <span class="token attribute atrule">@GestureState</span> <span class="token keyword">var</span> dragSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span> <span class="token operator">=</span> <span class="token punctuation">.</span>zero    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"fearless"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> size<span class="token punctuation">,</span> height<span class="token punctuation">:</span> size<span class="token punctuation">)</span> <span class="token comment">// 使用 size 控制尺寸，而非位置</span>                <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> size<span class="token punctuation">)</span> <span class="token comment">// 使用弹簧动画</span>                <span class="token punctuation">.</span>transaction <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>isContinuous <span class="token punctuation">&#123;</span>                        <span class="token short-argument">$0</span><span class="token punctuation">.</span>animation <span class="token operator">=</span> <span class="token nil constant">nil</span> <span class="token comment">// 拖动时，不设置动画</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token short-argument">$0</span><span class="token punctuation">.</span>animation <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 使用弹簧动画</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">gesture</span><span class="token punctuation">(</span>                    <span class="token class-name">DragGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">updating</span><span class="token punctuation">(</span>$dragSize<span class="token punctuation">,</span> body<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> current<span class="token punctuation">,</span> state<span class="token punctuation">,</span> transaction <span class="token keyword">in</span>                            state <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> current<span class="token punctuation">.</span>translation<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> current<span class="token punctuation">.</span>translation<span class="token punctuation">.</span>height<span class="token punctuation">)</span>                            transaction<span class="token punctuation">.</span>isContinuous <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 拖动时，设置标识</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token class-name">Stepper</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"尺寸: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">size</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $size<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token operator">...</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment">// 使用 Stepper 替代 Slider</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"开始动画"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> transaction <span class="token operator">=</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> size <span class="token operator">&lt;</span> <span class="token number">150</span> <span class="token punctuation">&#123;</span> transaction<span class="token punctuation">.</span>disablesAnimations <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span>                <span class="token function">withTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    size <span class="token operator">=</span> <span class="token number">50</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，当 <code>size</code> 小于 150 时，我们禁用动画。通过 <code>.isContinuous</code> 属性，我们可以标识一个连续的交互（例如拖动）。在这个示例中，当拖动时，我们禁用动画。通过 <code>transaction(_:)</code> 方法，我们可以创建一个新的 <code>Transaction</code> 并在其中设置动画参数。</p><h3 id="用于视图组件"><a href="#用于视图组件" class="headerlink" title="用于视图组件"></a>用于视图组件</h3><p>大部分 SwiftUI 视图组件都有 <code>transaction(_:)</code> 方法，可以用来设置动画参数。比如 NavigationStack, Sheet, Alert 等。</p><p><code>Transaction</code> 也可以用于 <code>Binding</code> 和 <code>FetchRequest</code>。</p><p>看下面的例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> size<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">100</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> isBold<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">let</span> animation<span class="token punctuation">:</span> <span class="token class-name">Animation</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token punctuation">.</span>spring    <span class="token keyword">var</span> sizeBinding<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">CGFloat</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> transaction <span class="token operator">=</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>animation<span class="token punctuation">:</span> animation<span class="token punctuation">)</span>        <span class="token keyword">return</span> $size<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> isBoldBinding<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">Bool</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> transaction <span class="token operator">=</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>animation<span class="token punctuation">:</span> animation<span class="token punctuation">)</span>        <span class="token keyword">return</span> $isBold<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"film"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> size<span class="token punctuation">,</span> height<span class="token punctuation">:</span> size<span class="token punctuation">)</span> <span class="token comment">// 使用 size 控制尺寸，而非位置</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> size<span class="token punctuation">,</span> weight<span class="token punctuation">:</span> isBold <span class="token operator">?</span> <span class="token punctuation">.</span>bold <span class="token punctuation">:</span> <span class="token punctuation">.</span>regular<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 使用 isBold 控制粗细</span>            <span class="token class-name">Stepper</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"尺寸: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">size</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> sizeBinding<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token operator">...</span><span class="token number">200</span><span class="token punctuation">)</span>            <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"粗细"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> isBoldBinding<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h3><p><code>Transaction</code> 可以用于控制动画的传播行为。在 SwiftUI 中，动画可以在视图层次结构中传播，这意味着一个视图的动画效果可能会影响到其子视图。<code>Transaction</code> 可以用来控制动画的传播行为，例如禁用动画、设置动画类型等。</p><p>以下是一个使用 <code>Transaction</code> 控制动画传播行为的代码示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token class-name">BookStatus</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> small<span class="token punctuation">,</span> medium<span class="token punctuation">,</span> large<span class="token punctuation">,</span> extraLarge<span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">func</span> <span class="token function-definition function">debugAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        transaction <span class="token punctuation">&#123;</span>            <span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">.</span>animation <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> status<span class="token punctuation">:</span> <span class="token class-name">BookStatus</span> <span class="token operator">=</span> <span class="token punctuation">.</span>small    <span class="token keyword">var</span> animation<span class="token punctuation">:</span> <span class="token class-name">Animation</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> status <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>small<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">.</span>linear        <span class="token keyword">case</span> <span class="token punctuation">.</span>medium<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">.</span>easeIn        <span class="token keyword">case</span> <span class="token punctuation">.</span>large<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">.</span>easeOut        <span class="token keyword">case</span> <span class="token punctuation">.</span>extraLarge<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> size<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> status <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>small<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">100</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>medium<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">200</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>large<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">300</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>extraLarge<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">400</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"book"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> size<span class="token punctuation">,</span> height<span class="token punctuation">:</span> size<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">debugAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 查看动画变化信息</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"改变状态"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> transaction <span class="token operator">=</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>animation<span class="token punctuation">:</span> animation<span class="token punctuation">)</span>                <span class="token function">withTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">switch</span> <span class="token keyword">self</span><span class="token punctuation">.</span>status <span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token punctuation">.</span>small<span class="token punctuation">:</span>                        <span class="token keyword">self</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token punctuation">.</span>medium                    <span class="token keyword">case</span> <span class="token punctuation">.</span>medium<span class="token punctuation">:</span>                        <span class="token keyword">self</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token punctuation">.</span>large                    <span class="token keyword">case</span> <span class="token punctuation">.</span>large<span class="token punctuation">:</span>                        <span class="token keyword">self</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token punctuation">.</span>extraLarge                    <span class="token keyword">case</span> <span class="token punctuation">.</span>extraLarge<span class="token punctuation">:</span>                        <span class="token keyword">self</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token punctuation">.</span>small                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个示例中，我们创建了一个 <code>BookView</code>，它包含一个书籍图标。我们通过 <code>BookStatus</code> 枚举来控制书籍的大小，通过 <code>animation</code> 计算属性来根据状态返回不同的动画类型。在 <code>withTransaction</code> 中，我们根据状态创建一个新的 <code>Transaction</code>，并在其中设置动画类型。通过 <code>debugAnimation</code> 修饰符，我们可以查看动画的变化信息。</p><h3 id="TransactionKey"><a href="#TransactionKey" class="headerlink" title="TransactionKey"></a>TransactionKey</h3><p>TransactionKey 是一种在 SwiftUI 的视图更新过程中传递额外信息的机制，它可以让你在不同的视图和视图更新之间共享数据。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> store <span class="token operator">=</span> <span class="token class-name">MovieStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"evermore"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">saturation</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>isPlaying <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 滤镜变化</span>                <span class="token punctuation">.</span>transaction <span class="token punctuation">&#123;</span>                    <span class="token short-argument">$0</span><span class="token punctuation">.</span>animation <span class="token operator">=</span> <span class="token short-argument">$0</span><span class="token punctuation">[</span><span class="token class-name">StatusKey</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">.</span>animation                <span class="token punctuation">&#125;</span>            <span class="token class-name">PlayView</span><span class="token punctuation">(</span>store<span class="token punctuation">:</span> store<span class="token punctuation">)</span>            <span class="token class-name">PauseView</span><span class="token punctuation">(</span>store<span class="token punctuation">:</span> store<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PlayView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> store<span class="token punctuation">:</span> <span class="token class-name">MovieStore</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"播放"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">withTransaction</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token punctuation">.</span>playing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                store<span class="token punctuation">.</span>isPlaying<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PauseView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> store<span class="token punctuation">:</span> <span class="token class-name">MovieStore</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"暂停"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">withTransaction</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token punctuation">.</span>paused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                store<span class="token punctuation">.</span>isPlaying<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute atrule">@Observable</span><span class="token keyword">class</span> <span class="token class-name">MovieStore</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> isPlaying <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token class-name">MovieStatus</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> playing    <span class="token keyword">case</span> paused    <span class="token keyword">case</span> stopped    <span class="token keyword">var</span> animation<span class="token punctuation">:</span> <span class="token class-name">Animation</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token keyword">self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>playing<span class="token punctuation">:</span>            <span class="token class-name">Animation</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>paused<span class="token punctuation">:</span>            <span class="token nil constant">nil</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>stopped<span class="token punctuation">:</span>            <span class="token class-name">Animation</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">StatusKey</span><span class="token punctuation">:</span> <span class="token class-name">TransactionKey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> defaultValue<span class="token punctuation">:</span> <span class="token class-name">MovieStatus</span> <span class="token operator">=</span> <span class="token punctuation">.</span>stopped<span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">Transaction</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> status<span class="token punctuation">:</span> <span class="token class-name">MovieStatus</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">self</span><span class="token punctuation">[</span><span class="token class-name">StatusKey</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">set</span> <span class="token punctuation">&#123;</span> <span class="token keyword">self</span><span class="token punctuation">[</span><span class="token class-name">StatusKey</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token operator">=</span> newValue <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中，我们创建了一个 <code>MovieStore</code> 类，用于存储电影播放状态。我们通过 <code>PlayView</code> 和 <code>PauseView</code> 分别创建了播放和暂停按钮，点击按钮时，我们通过 <code>withTransaction</code> 函数改变了 <code>MovieStore</code> 的 <code>isPlaying</code> 属性，并根据状态设置了动画类型。在 <code>ContentView</code> 中，我们通过 <code>transaction</code> 修饰符设置了动画类型为 <code>MovieStatus</code> 中的动画类型。</p><h3 id="AnyTransition"><a href="#AnyTransition" class="headerlink" title="AnyTransition"></a>AnyTransition</h3><p><code>AnyTransition</code> 是一个用于创建自定义过渡效果的类型，它可以让你定义视图之间的过渡动画。你可以使用 <code>AnyTransition</code> 的 <code>modifier</code> 方法将自定义过渡效果应用到视图上。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> musicViewModel <span class="token operator">=</span> <span class="token class-name">MusicViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>musicViewModel<span class="token punctuation">.</span>musicNames<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>description<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> musicName <span class="token keyword">in</span>                <span class="token keyword">if</span> musicName <span class="token operator">==</span> musicViewModel<span class="token punctuation">.</span>currentMusic <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span>musicName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token punctuation">.</span>glitch<span class="token punctuation">.</span><span class="token function">combined</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token punctuation">.</span>opacity<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Next Music"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                musicViewModel<span class="token punctuation">.</span><span class="token function">selectNextMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderedProminent<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">MyTransition</span><span class="token punctuation">:</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> active<span class="token punctuation">:</span> <span class="token class-name">Bool</span>    <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        content            <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span>active <span class="token operator">?</span> <span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token operator">...</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> active <span class="token operator">?</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token operator">...</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> active <span class="token operator">?</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token operator">...</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">AnyTransition</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> glitch<span class="token punctuation">:</span> <span class="token class-name">AnyTransition</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AnyTransition</span><span class="token punctuation">.</span><span class="token function">modifier</span><span class="token punctuation">(</span>            active<span class="token punctuation">:</span> <span class="token class-name">MyTransition</span><span class="token punctuation">(</span>active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            identity<span class="token punctuation">:</span> <span class="token class-name">MyTransition</span><span class="token punctuation">(</span>active<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MusicViewModel</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> currentMusic <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>        <span class="token keyword">let</span> musicNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"fearless"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"evermore"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"red"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"speaknow"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"lover"</span></span><span class="token punctuation">]</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        currentMusic <span class="token operator">=</span> musicNames<span class="token punctuation">.</span>first <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"fearless"</span></span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">selectNextMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">guard</span> <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> musicNames<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> currentMusic<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">let</span> nextIndex <span class="token operator">=</span> currentIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> musicNames<span class="token punctuation">.</span>count <span class="token operator">?</span> currentIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span>                <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            currentMusic <span class="token operator">=</span> musicNames<span class="token punctuation">[</span>nextIndex<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中，我们创建了一个 <code>MusicViewModel</code> 类，用于存储音乐播放状态。我们通过 <code>MyTransition</code> 自定义了一个过渡效果，通过 <code>AnyTransition</code> 的 <code>modifier</code> 方法将自定义过渡效果应用到视图上。在 <code>ContentView</code> 中，我们通过 <code>transition</code> 修饰符设置了过渡效果为 <code>glitch</code>，并在点击按钮时切换音乐。</p><h2 id="Matched-Geometry-Effect"><a href="#Matched-Geometry-Effect" class="headerlink" title="Matched Geometry Effect"></a>Matched Geometry Effect</h2><h3 id="位置变化"><a href="#位置变化" class="headerlink" title="位置变化"></a>位置变化</h3><p>Matched Geometry Effect 是一种特殊的动画效果。当你有两个视图，并且你想在一个视图消失，另一个视图出现时，创建一个平滑的过渡动画，你就可以使用这个效果。你只需要给这两个视图添加同样的标识符和命名空间，然后当你删除一个视图并添加另一个视图时，就会自动创建一个动画，让一个视图看起来像是滑动到另一个视图的位置。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> viewModel <span class="token operator">=</span> <span class="token class-name">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@Namespace</span> <span class="token keyword">var</span> musicSelectionNamespace    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">.</span>topMusic<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> item <span class="token keyword">in</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> viewModel<span class="token punctuation">.</span><span class="token function">selectTopMusic</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Image</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">)</span>                            <span class="token class-name">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">fontDesign</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rounded<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> item<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> musicSelectionNamespace<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>minHeight<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">)</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>viewModel<span class="token punctuation">.</span>bottomMusic<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> item <span class="token keyword">in</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> viewModel<span class="token punctuation">.</span><span class="token function">selectBottomMusic</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Image</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">)</span>                            <span class="token class-name">Text</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>bold<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> item<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> musicSelectionNamespace<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>minHeight<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中，我们创建了一个 <code>ContentView</code> 视图，其中包含两个 <code>HStack</code> 视图，分别展示了 <code>viewModel</code> 中的 <code>topMusic</code> 和 <code>bottomMusic</code> 数组。我们为每个 <code>topMusic</code> 和 <code>bottomMusic</code> 元素创建了一个 <code>Button</code> 视图，当用户点击按钮时，会调用 <code>viewModel</code> 中的 <code>selectTopMusic</code> 和 <code>selectBottomMusic</code> 方法。我们使用 <code>matchedGeometryEffect</code> 修饰符为每个 <code>Button</code> 视图添加了一个标识符，这样当用户点击按钮时，就会自动创建一个动画，让一个视图看起来像是滑动到另一个视图的位置。</p><h3 id="大小变化"><a href="#大小变化" class="headerlink" title="大小变化"></a>大小变化</h3><p>Matched Geometry Effect 在大小和位置上都可以进行动画过渡，这样可以让你创建更加复杂的动画效果。</p><p>以下是一个视图大小切换的示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> isExpanded<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> albumId <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Album"</span></span>        <span class="token attribute atrule">@Namespace</span> <span class="token keyword">var</span> expansionAnimation        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token function">albumView</span><span class="token punctuation">(</span>isExpanded<span class="token punctuation">:</span> isExpanded<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>            withAnimation <span class="token punctuation">&#123;</span>                isExpanded<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token attribute atrule">@ViewBuilder</span>    <span class="token keyword">func</span> <span class="token function-definition function">albumView</span><span class="token punctuation">(</span>isExpanded<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> imageSize <span class="token operator">=</span> isExpanded <span class="token operator">?</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">450</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>isExpanded <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"evermore"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"fearless"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fill<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> imageSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> imageSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">clipped</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> albumId<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> expansionAnimation<span class="token punctuation">)</span>            <span class="token punctuation">.</span>overlay <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Taylor Swift"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span>isExpanded <span class="token operator">?</span> <span class="token punctuation">.</span>largeTitle <span class="token punctuation">:</span> <span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fontDesign</span><span class="token punctuation">(</span><span class="token punctuation">.</span>monospaced<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fontDesign</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rounded<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内容位置变化"><a href="#内容位置变化" class="headerlink" title="内容位置变化"></a>内容位置变化</h3><p>内容位置变化的动画效果。以下是一个内容位置变化的示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> show <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token attribute atrule">@Namespace</span> <span class="token keyword">var</span> placeHolder    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> albumCoverSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span> <span class="token operator">=</span> <span class="token punctuation">.</span>zero    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> songListSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span> <span class="token operator">=</span> <span class="token punctuation">.</span>zero    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Taylor Swift，1989年12月13日出生于美国宾夕法尼亚州，美国乡村音乐、流行音乐女歌手、词曲创作人、演员、慈善家。"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fontDesign</span><span class="token punctuation">(</span><span class="token punctuation">.</span>monospaced<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fontDesign</span><span class="token punctuation">(</span><span class="token punctuation">.</span>rounded<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Color</span><span class="token punctuation">.</span>clear                <span class="token comment">// AlbumCover placeholder</span>                <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Color</span><span class="token punctuation">.</span>clear <span class="token comment">// AlbumCoverView().opacity(0.01)</span>                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> albumCoverSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"bottom"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> placeHolder<span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> isSource<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"top"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> placeHolder<span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> isSource<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                    <span class="token class-name">AlbumCoverView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">sizeInfo</span><span class="token punctuation">(</span>$albumCoverSize<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"bottom"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> placeHolder<span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> show <span class="token operator">?</span> <span class="token punctuation">.</span>bottom <span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> isSource<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                    <span class="token class-name">SongListView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"top"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> placeHolder<span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> show <span class="token operator">?</span> <span class="token punctuation">.</span>bottom <span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> isSource<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> show<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">overlayButton</span><span class="token punctuation">(</span>show<span class="token punctuation">:</span> $show<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">AlbumCoverView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"evermore"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fill<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">SongListView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Fearless"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Speak Now"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Red"</span></span><span class="token punctuation">)</span>            <span class="token comment">// ...</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">overlayButton</span><span class="token punctuation">(</span>show<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">Bool</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                withAnimation <span class="token punctuation">&#123;</span>                    show<span class="token punctuation">.</span>wrappedValue<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"arrow.up.arrow.down.square"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">,</span> alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>topTrailing        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">sizeInfo</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> size<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">CGSize</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> geometry <span class="token keyword">in</span>                <span class="token class-name">Color</span><span class="token punctuation">.</span>clear<span class="token punctuation">.</span><span class="token function">preference</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token class-name">SizePreferenceKey</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> geometry<span class="token punctuation">.</span>size<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">onPreferenceChange</span><span class="token punctuation">(</span><span class="token class-name">SizePreferenceKey</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> size<span class="token punctuation">.</span>wrappedValue <span class="token operator">=</span> <span class="token short-argument">$0</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">SizePreferenceKey</span><span class="token punctuation">:</span> <span class="token class-name">PreferenceKey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> defaultValue<span class="token punctuation">:</span> <span class="token class-name">CGSize</span> <span class="token operator">=</span> <span class="token punctuation">.</span>zero    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">reduce</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">CGSize</span><span class="token punctuation">,</span> nextValue<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGSize</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        value <span class="token operator">=</span> <span class="token function">nextValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用 <code>matchedGeometryEffect</code> 修饰符为 <code>AlbumCoverView</code> 和 <code>SongListView</code> 添加了一个标识符，这样当用户点击按钮时，就会自动创建一个动画，让 <code>AlbumCoverView</code> 和 <code>SongListView</code> 看起来像是从一个位置切换到另一个位置。</p><h3 id="点击显示详细信息"><a href="#点击显示详细信息" class="headerlink" title="点击显示详细信息"></a>点击显示详细信息</h3><p>点击显示详细信息的动画效果。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Namespace</span> <span class="token keyword">var</span> animation    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> showDetail <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>showDetail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Taylor Swift"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"artist"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> animation<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"美国歌手"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"description"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> animation<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                    <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span>gradient<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"background"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> animation<span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">SingerView</span><span class="token punctuation">(</span>animation<span class="token punctuation">:</span> animation<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>            withAnimation <span class="token punctuation">&#123;</span>                showDetail<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">SingerView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> animation<span class="token punctuation">:</span> <span class="token class-name">Namespace</span><span class="token punctuation">.</span><span class="token constant">ID</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Taylor Swift"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"artist"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> animation<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"美国歌手"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"description"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> animation<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"泰勒·阿利森·斯威夫特（Taylor Swift），1989年12月13日出生于美国宾夕法尼亚州，美国乡村音乐、流行音乐女歌手、词曲创作人、演员、慈善家。"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>subheadline<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"evermore"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span>cornerSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Evermore 是 Taylor Swift 的最新专辑，这是她在 2020 年的第二张专辑，也是她的第九张录音室专辑。"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>subheadline<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> maxHeight<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span>gradient<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"background"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> animation<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导航动画"><a href="#导航动画" class="headerlink" title="导航动画"></a>导航动画</h3><p>以下是一个导航动画的示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Namespace</span> <span class="token keyword">var</span> animation    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> selectedManga<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span>            <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedManga <span class="token operator">==</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">MangaListView</span><span class="token punctuation">(</span>animation<span class="token punctuation">:</span> animation<span class="token punctuation">,</span> selectedManga<span class="token punctuation">:</span> $selectedManga<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">MangaDetailView</span><span class="token punctuation">(</span>selectedManga<span class="token punctuation">:</span> $selectedManga<span class="token punctuation">,</span> animation<span class="token punctuation">:</span> animation<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">MangaDetailView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> selectedManga<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>    <span class="token keyword">var</span> animation<span class="token punctuation">:</span> <span class="token class-name">Namespace</span><span class="token punctuation">.</span><span class="token constant">ID</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">selectedManga <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"mangaTitle"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> animation<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>                        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                withAnimation <span class="token punctuation">&#123;</span>                    selectedManga <span class="token operator">=</span> <span class="token nil constant">nil</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span> <span class="token string-literal"><span class="token string">"返回"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">.</span>gradient<span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> maxHeight<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token class-name">UIColor</span><span class="token punctuation">.</span>systemTeal<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"background"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> animation<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">MangaListView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> animation<span class="token punctuation">:</span> <span class="token class-name">Namespace</span><span class="token punctuation">.</span><span class="token constant">ID</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> selectedManga<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                withAnimation <span class="token punctuation">&#123;</span>                    selectedManga <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"海贼王"</span></span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span> <span class="token string-literal"><span class="token string">"海贼王"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"mangaTitle"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> animation<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>teal<span class="token punctuation">)</span>            <span class="token punctuation">)</span>                        <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                withAnimation <span class="token punctuation">&#123;</span>                    selectedManga <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"火影忍者"</span></span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span> <span class="token string-literal"><span class="token string">"火影忍者"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>mint<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"background"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> animation<span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                withAnimation <span class="token punctuation">&#123;</span>                    selectedManga <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"进击的巨人"</span></span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span> <span class="token string-literal"><span class="token string">"进击的巨人"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                withAnimation <span class="token punctuation">&#123;</span>                    selectedManga <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"鬼灭之刃"</span></span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span> <span class="token string-literal"><span class="token string">"鬼灭之刃"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>purple<span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                withAnimation <span class="token punctuation">&#123;</span>                    selectedManga <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"我的英雄学院"</span></span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span> <span class="token string-literal"><span class="token string">"我的英雄学院"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="geometryGroup"><a href="#geometryGroup" class="headerlink" title="geometryGroup"></a>geometryGroup</h3><p><code>.geometryGroup()</code> 主要用于处理一组视图动画变化时不协调的问题。如果你有一组视图，它们的位置和大小会随着动画变化，你可以使用 <code>.geometryGroup()</code> 修饰符来确保它们的位置和大小保持一致。</p><h2 id="PhaseAnimator"><a href="#PhaseAnimator" class="headerlink" title="PhaseAnimator"></a>PhaseAnimator</h2><p>PhaseAnimator</p><p>以下代码示例演示了如何使用 <code>PhaseAnimator</code> 视图修饰符创建一个动画，该动画通过循环遍历所有动画步骤来连续运行。在这个例子中，我们使用 <code>PhaseAnimator</code> 来创建一个简单的动画，该动画通过循环遍历所有动画步骤来连续运行。当观测值发生变化时，动画会触发一次。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token class-name">AlbumAnimationPhase</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">CaseIterable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> evermore<span class="token punctuation">,</span> fearless<span class="token punctuation">,</span> folklore<span class="token punctuation">,</span> lover<span class="token punctuation">,</span> midnights<span class="token punctuation">,</span> red<span class="token punctuation">,</span> speaknow    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">:</span> <span class="token class-name">AlbumAnimationPhase</span><span class="token punctuation">,</span> rhs<span class="token punctuation">:</span> <span class="token class-name">AlbumAnimationPhase</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Bool</span> <span class="token punctuation">&#123;</span>        lhs<span class="token punctuation">.</span>rawValue <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>rawValue    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> animate<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PhaseAnimator</span><span class="token punctuation">(</span>                <span class="token class-name">AlbumAnimationPhase</span><span class="token punctuation">.</span>allCases<span class="token punctuation">,</span>                trigger<span class="token punctuation">:</span> animate<span class="token punctuation">,</span>                content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> phase <span class="token keyword">in</span>                    <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">AlbumAnimationPhase</span><span class="token punctuation">.</span>allCases<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> album <span class="token keyword">in</span>                            <span class="token keyword">if</span> phase <span class="token operator">>=</span> album <span class="token punctuation">&#123;</span>                                <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                                    <span class="token class-name">Image</span><span class="token punctuation">(</span>album<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                                    <span class="token class-name">Text</span><span class="token punctuation">(</span>album<span class="token punctuation">.</span>rawValue<span class="token punctuation">.</span>capitalized<span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                                <span class="token punctuation">&#125;</span>                                <span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">asymmetric</span><span class="token punctuation">(</span>insertion<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>edge<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span><span class="token punctuation">,</span> removal<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>edge<span class="token punctuation">:</span> <span class="token punctuation">.</span>trailing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> animation<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> phase <span class="token keyword">in</span>                    <span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end ScrollView</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            animate<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"开始"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，我们首先定义了一个枚举类型 <code>AlbumAnimationPhase</code>，用于表示专辑的不同阶段。然后，我们在 <code>ContentView</code> 视图中创建了一个 <code>PhaseAnimator</code> 视图修饰符，该修饰符接受一个观测值 <code>trigger</code>，用于触发动画。在 <code>content</code> 闭包中，我们遍历所有专辑，并根据当前阶段 <code>phase</code> 来决定是否显示专辑。在 <code>animation</code> 闭包中，我们使用 <code>.spring(duration: 0.5)</code> 创建了一个弹簧动画效果。   </p><h2 id="KeyframeAnimator"><a href="#KeyframeAnimator" class="headerlink" title="KeyframeAnimator"></a>KeyframeAnimator</h2><p><code>KeyframeAnimator</code>是一个在SwiftUI中创建关键帧动画的工具。关键帧动画是一种动画类型，其中定义了动画开始和结束的关键帧，以及可能的一些中间关键帧，然后动画系统会在这些关键帧之间进行插值以创建平滑的动画。</p><p><code>KeyframeAnimator</code>接受一个初始值，一个内容闭包，以及一个关键帧闭包。初始值是一个包含了动画所需的所有属性的结构（在这个例子中是<code>scale</code>，<code>rotation</code>和<code>offset</code>）。内容闭包接受一个这样的结构实例，并返回一个视图。这个视图将使用结构中的值进行配置，以便它可以根据这些值进行动画。关键帧闭包接受一个这样的结构实例，并定义了一系列的关键帧轨道。每个轨道都对应于结构中的一个属性，并定义了一系列的关键帧。每个关键帧都定义了一个值和一个时间点，动画系统将在这些关键帧之间进行插值。</p><p>此外，SwiftUI提供了四种不同类型的关键帧：<code>LinearKeyframe</code>，<code>SpringKeyframe</code>，<code>CubicKeyframe</code>和<code>MoveKeyframe</code>。前三种关键帧使用不同的动画过渡函数进行插值，而<code>MoveKeyframe</code>则立即跳转到指定值，无需插值。</p><p><code>KeyframeAnimator</code>可以用于创建各种复杂的动画效果，例如根据滚动位置调整关键帧驱动的效果，或者根据时间进行更新。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> animationTrigger<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">KeyframeAnimator</span><span class="token punctuation">(</span>                initialValue<span class="token punctuation">:</span> <span class="token class-name">AnimatedMovie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> movie <span class="token keyword">in</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"evermore"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>movie<span class="token punctuation">.</span>scaleRatio<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span>movie<span class="token punctuation">.</span>rotationAngle<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>y<span class="token punctuation">:</span> movie<span class="token punctuation">.</span>verticalOffset<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> keyframes<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> movie <span class="token keyword">in</span>                    <span class="token class-name">KeyframeTrack</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>scaleRatio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">LinearKeyframe</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.36</span><span class="token punctuation">)</span>                        <span class="token class-name">SpringKeyframe</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span> spring<span class="token punctuation">:</span> <span class="token punctuation">.</span>bouncy<span class="token punctuation">)</span>                        <span class="token class-name">SpringKeyframe</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> spring<span class="token punctuation">:</span> <span class="token punctuation">.</span>bouncy<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">KeyframeTrack</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>rotationAngle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">CubicKeyframe</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span>                        <span class="token class-name">CubicKeyframe</span><span class="token punctuation">(</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">KeyframeTrack</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>verticalOffset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">LinearKeyframe</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span>                        <span class="token class-name">SpringKeyframe</span><span class="token punctuation">(</span><span class="token number">20.0</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.15</span><span class="token punctuation">,</span> spring<span class="token punctuation">:</span> <span class="token punctuation">.</span>bouncy<span class="token punctuation">)</span>                        <span class="token class-name">CubicKeyframe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60.0</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">)</span>                        <span class="token class-name">MoveKeyframe</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">AnimatedMovie</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> scaleRatio<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> rotationAngle <span class="token operator">=</span> <span class="token class-name">Angle</span><span class="token punctuation">.</span>zero    <span class="token keyword">var</span> verticalOffset<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中，我们首先定义了一个<code>AnimatedMovie</code>结构，它包含了动画所需的所有属性。然后，我们在<code>ContentView</code>视图中创建了一个<code>KeyframeAnimator</code>，该修饰符接受一个观测值<code>animationTrigger</code>，用于触发动画。在<code>content</code>闭包中，我们使用<code>Image</code>视图创建了一个电影海报，并根据<code>AnimatedMovie</code>结构中的值对其进行配置。在<code>keyframes</code>闭包中，我们为每个属性定义了一系列的关键帧轨道。例如，我们为<code>scaleRatio</code>属性定义了三个关键帧，分别使用<code>LinearKeyframe</code>和<code>SpringKeyframe</code>进行插值。我们还为<code>rotationAngle</code>和<code>verticalOffset</code>属性定义了两个关键帧轨道，分别使用<code>CubicKeyframe</code>和<code>MoveKeyframe</code>进行插值。</p><p>也可以使用 <code>.keyframeAnimator</code> 修饰符来创建关键帧动画。以下是一个示例，演示了如何使用 .keyframeAnimator 修饰符创建一个关键帧动画，该动画在用户点击时触发。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> animationTrigger<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"evermore"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>animationTrigger <span class="token operator">?</span> <span class="token number">1.5</span> <span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span>animationTrigger <span class="token operator">?</span> <span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>y<span class="token punctuation">:</span> animationTrigger <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">60.0</span> <span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">keyframeAnimator</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">:</span> <span class="token class-name">AnimatedMovie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                              trigger<span class="token punctuation">:</span> animationTrigger<span class="token punctuation">,</span>                              content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> view<span class="token punctuation">,</span> value <span class="token keyword">in</span>                view                    <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>scaleRatio<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>rotationAngle<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                              keyframes<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> value <span class="token keyword">in</span>                <span class="token class-name">KeyframeTrack</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>scaleRatio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">LinearKeyframe</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.36</span><span class="token punctuation">)</span>                    <span class="token class-name">SpringKeyframe</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span> spring<span class="token punctuation">:</span> <span class="token punctuation">.</span>bouncy<span class="token punctuation">)</span>                    <span class="token class-name">SpringKeyframe</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> spring<span class="token punctuation">:</span> <span class="token punctuation">.</span>bouncy<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                                <span class="token class-name">KeyframeTrack</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>rotationAngle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">CubicKeyframe</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span>                    <span class="token class-name">CubicKeyframe</span><span class="token punctuation">(</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                                <span class="token class-name">KeyframeTrack</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>verticalOffset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">LinearKeyframe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60.0</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span>                    <span class="token class-name">SpringKeyframe</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.15</span><span class="token punctuation">,</span> spring<span class="token punctuation">:</span> <span class="token punctuation">.</span>bouncy<span class="token punctuation">)</span>                    <span class="token class-name">CubicKeyframe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">60.0</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">)</span>                    <span class="token class-name">MoveKeyframe</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                withAnimation <span class="token punctuation">&#123;</span>                    animationTrigger<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">AnimatedMovie</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> scaleRatio<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> rotationAngle <span class="token operator">=</span> <span class="token class-name">Angle</span><span class="token punctuation">.</span>zero    <span class="token keyword">var</span> verticalOffset<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们创建了一个 <code>AnimatedMovie</code> 结构，它包含了动画所需的所有属性。然后，我们在 <code>ContentView</code> 视图中创建了一个 <code>KeyframeAnimator</code>，该修饰符接受一个观测值 <code>animationTrigger</code>，用于触发动画。在 <code>content</code> 闭包中，我们使用 <code>Image</code> 视图创建了一个电影海报，并根据 <code>AnimatedMovie</code> 结构中的值对其进行配置。在 <code>keyframes</code> 闭包中，我们为每个属性定义了一系列的关键帧轨道。例如，我们为 <code>scaleRatio</code> 属性定义了三个关键帧，分别使用 <code>LinearKeyframe</code> 和 <code>SpringKeyframe</code> 进行插值。我们还为 <code>rotationAngle</code> 和 <code>verticalOffset</code> 属性定义了两个关键帧轨道，分别使用 <code>CubicKeyframe</code> 和 <code>MoveKeyframe</code> 进行插值。</p><h2 id="布局动画"><a href="#布局动画" class="headerlink" title="布局动画"></a>布局动画</h2><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">struct</span> <span class="token class-name">AnimateLayout</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span> <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> changeLayout<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token attribute atrule">@Namespace</span> <span class="token keyword">var</span> namespace <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> changeLayout <span class="token punctuation">&#123;</span>    <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span> items <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span> items <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"切换布局"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    withAnimation <span class="token punctuation">&#123;</span> changeLayout<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">var</span> items<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> namespace<span class="token punctuation">)</span>  <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> namespace<span class="token punctuation">)</span>  <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Three"</span></span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Three"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> namespace<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动画-例子"><a href="#动画-例子" class="headerlink" title="动画-例子"></a>动画-例子</h2><p>动画的例子有很多。准备中… 请期待。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下内容已整理到小册子中，本文会随着系统更新和我更多的实践而新增和更新，你可以下载&lt;a href=&quot;https://apps.apple.com/cn/app/%E6%88%B4%E9%93%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%B0%8F%E5
      
    
    </summary>
    
      <category term="App" scheme="https://starming.com/categories/App/"/>
    
    
      <category term="SwiftUI" scheme="https://starming.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>小册子之 Form、Picker、Toggle、Slider 和 Stepper 表单相关 SwiftUI 视图</title>
    <link href="https://starming.com/2024/05/18/pamphlet-series-form/"/>
    <id>https://starming.com/2024/05/18/pamphlet-series-form/</id>
    <published>2024-05-18T02:24:12.000Z</published>
    <updated>2024-09-18T08:02:32.103Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容已整理到小册子中，本文会随着系统更新和我更多的实践而新增和更新，你可以下载<a href="https://apps.apple.com/cn/app/%E6%88%B4%E9%93%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%B0%8F%E5%86%8C%E5%AD%90/id1609702529?mt=12">“戴铭的开发小册子”</a>应用，来跟踪查看本文内容新增和更新。小册子应用的代码可以在 <a href="https://github.com/ming1016/SwiftPamphletApp">Github</a> 上查看。</p><p>本文属于小册子系列中的一篇，已发布系列文章有：</p><ul><li><a href="https://starming.com/2024/05/18/pamphlet-series-swiftdata/">小册子之如何使用 SwiftData 开发 SwiftUI 应用</a></li><li><a href="https://starming.com/2024/05/18/pamphlet-series-widget/">小册子之简说 Widget 小组件</a></li><li><a href="https://starming.com/2024/05/18/pamphlet-series-listdataview/">小册子之 List、Lazy 容器、ScrollView、Grid 和 Table 数据集合 SwiftUI 视图</a></li><li><a href="https://starming.com/2024/05/18/pamphlet-series-layout/">小册子之详说 Navigation、ViewThatFits、Layout 协议等布局 SwiftUI 组件</a></li><li>【本篇】<a href="https://starming.com/2024/05/18/pamphlet-series-form/">小册子之 Form、Picker、Toggle、Slider 和 Stepper 表单相关 SwiftUI 视图</a></li><li><a href="https://starming.com/2024/05/25/pamphlet-series-animation/">小册子之 SwiftUI 动画</a></li></ul><h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><table><thead><tr><th>控件视图</th><th>说明</th><th>Style</th></tr></thead><tbody><tr><td>Button</td><td>触发操作的按钮</td><td>.bordered, .borderless, .borderedProminent, .plain</td></tr><tr><td>Picker</td><td>提供多选项供选择</td><td>.wheel, .inline, .segmented, .menu, .radioGroup</td></tr><tr><td>DatePicker and MultiDatePicker</td><td>选择日期的工具</td><td>.compact, .wheel, .graphical</td></tr><tr><td>Toggle</td><td>切换两种状态的开关</td><td>.switch, .botton, .checkbox</td></tr><tr><td>Stepper</td><td>调整数值的步进器</td><td>无样式选项</td></tr><tr><td>Menu</td><td>显示选项列表的菜单</td><td>.borderlessButton, .button</td></tr></tbody></table><p>Form 有 ColumnFormStyle 还有 GroupedFormStyle。使用 buttonStyle 修饰符：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>   <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">formStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>grouped<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Form 新版也得到了增强，示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">SimpleFormView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> eventDescription <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> accent <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scheme <span class="token operator">=</span> <span class="token class-name">ColorScheme</span><span class="token punctuation">.</span>light    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">DatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Date"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $date<span class="token punctuation">)</span>                <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Description"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $eventDescription<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">lineLimit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Vibe"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Accent color"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $accent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>accentColors<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> color <span class="token keyword">in</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span>description<span class="token punctuation">.</span>capitalized<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Color scheme"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $scheme<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Light"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">ColorScheme</span><span class="token punctuation">.</span>light<span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Dark"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">ColorScheme</span><span class="token punctuation">.</span>dark<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">formStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>grouped<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> accentColors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Color</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> <span class="token punctuation">.</span>green<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>orange<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">,</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Form 的样式除了 <code>.formStyle(.grouped)</code> 还有 <code>.formStyle(..columns)</code>。</p><p>关于 Form 字体、单元、背景颜色设置，参看下面代码：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> movieTitle <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isWatched <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> rating <span class="token operator">=</span> <span class="token number">1</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> watchDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影标题"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $movieTitle<span class="token punctuation">)</span>                <span class="token class-name">LabeledContent</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"导演"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"克里斯托弗·诺兰"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"关于电影"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">listRowBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>gray<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"已观看"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $isWatched<span class="token punctuation">)</span>                <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"评分"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $rating<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> number <span class="token keyword">in</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 星"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影详情"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">listRowBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>gray<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">DatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"观看日期"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $watchDate<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">listRowBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>gray<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"重置所有电影数据"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">resetAllData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">listRowBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>indigo<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">scrollContentBackground</span><span class="token punctuation">(</span><span class="token punctuation">.</span>hidden<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">navigationBarTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影追踪器"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">resetAllData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        movieTitle <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>        isWatched <span class="token operator">=</span> <span class="token boolean">false</span>        rating <span class="token operator">=</span> <span class="token number">1</span>        watchDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">LabeledContent</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> label<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> value<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> label<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>label <span class="token operator">=</span> label        <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Picker选择器"><a href="#Picker选择器" class="headerlink" title="Picker选择器"></a>Picker选择器</h2><h3 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h3><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://ming1016.github.io/qdimg/240505/picker-ap01.jpeg" class="lozad post-image"src="https://ming1016.github.io/qdimg/240505/picker-ap01.jpeg"></p><p>SwiftUI 中的 <code>Picker</code> 视图是一个用于选择列表中的一个选项的用户界面元素。你可以使用 <code>Picker</code> 视图来创建各种类型的选择器，包括滚动选择器、弹出菜单和分段控制。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayPickerView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> select <span class="token operator">=</span> <span class="token number">1</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> dateFt<span class="token punctuation">:</span> <span class="token class-name">DateFormatter</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> ft <span class="token operator">=</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ft<span class="token punctuation">.</span>dateStyle <span class="token operator">=</span> <span class="token punctuation">.</span>long        <span class="token keyword">return</span> ft    <span class="token punctuation">&#125;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 默认是下拉的风格</span>        <span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选区"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $select<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"2"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// Segment 风格，</span>        <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $select<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token class-name">SegmentedPickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 颜色选择器</span>        <span class="token class-name">ColorPicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个颜色"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $color<span class="token punctuation">,</span> supportsOpacity<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token comment">// 时间选择器</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DatePicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $date<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">...</span><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> displayedComponents<span class="token punctuation">:</span> <span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选时间"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">DatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选时间"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $date<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">datePickerStyle</span><span class="token punctuation">(</span><span class="token class-name">GraphicalDatePickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxHeight<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">)</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"时间：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">,</span> formatter<span class="token punctuation">:</span> dateFt</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，有三种类型的 <code>Picker</code> 视图：</p><ol><li>默认的下拉风格 <code>Picker</code> 视图。这种类型的 <code>Picker</code> 视图在 <code>Form</code> 中使用，用户可以点击选择器来打开一个下拉菜单，然后从菜单中选择一个选项。</li></ol><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选区"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $select<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"2"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>分段控制风格 <code>Picker</code> 视图。这种类型的 <code>Picker</code> 视图使用 <code>SegmentedPickerStyle()</code> 修饰符，它将选择器显示为一组水平排列的按钮，用户可以点击按钮来选择一个选项。</li></ol><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $select<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token class-name">SegmentedPickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><code>ColorPicker</code> 和 <code>DatePicker</code> 视图。这两种类型的视图是 <code>Picker</code> 视图的特殊形式，它们分别用于选择颜色和日期。</li></ol><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">ColorPicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个颜色"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $color<span class="token punctuation">,</span> supportsOpacity<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token class-name">DatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选时间"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $date<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">datePickerStyle</span><span class="token punctuation">(</span><span class="token class-name">GraphicalDatePickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在所有这些 <code>Picker</code> 视图中，你都需要提供一个绑定的选择状态，这个状态会在用户选择一个新的选项时更新。你还需要为每个选项提供一个视图和一个唯一的标签。</p><h3 id="文字Picker"><a href="#文字Picker" class="headerlink" title="文字Picker"></a>文字Picker</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>文字 Picker 示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">StaticDataPickerView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedCategory <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"动作"</span></span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择的类别: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">selectedCategory</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影类别"</span></span><span class="token punctuation">,</span>                 selection<span class="token punctuation">:</span> $selectedCategory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"动作"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"动作"</span></span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"喜剧"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"喜剧"</span></span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"剧情"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"剧情"</span></span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"恐怖"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"恐怖"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用枚举"><a href="#使用枚举" class="headerlink" title="使用枚举"></a>使用枚举</h4><p>使用枚举来创建选取器的示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token class-name">MovieCategory</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">CaseIterable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> action <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"动作"</span></span>    <span class="token keyword">case</span> comedy <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"喜剧"</span></span>    <span class="token keyword">case</span> drama <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"剧情"</span></span>    <span class="token keyword">case</span> horror <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"恐怖"</span></span>    <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token class-name">MovieCategory</span> <span class="token punctuation">&#123;</span> <span class="token keyword">self</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">MoviePicker</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>   <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedCategory<span class="token punctuation">:</span> <span class="token class-name">MovieCategory</span> <span class="token operator">=</span> <span class="token punctuation">.</span>action  <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影类别"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $selectedCategory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">MovieCategory</span><span class="token punctuation">.</span>allCases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> category <span class="token keyword">in</span>             <span class="token class-name">Text</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><p>SwiftUI 提供了多种内置的 <code>Picker</code> 样式，以改变 <code>Picker</code> 的外观和行为。以下是一些主要的 <code>Picker</code> 样式及其使用示例：</p><ul><li><code>DefaultPickerStyle</code>：根据平台和环境自动调整样式。这是默认的 <code>Picker</code> 样式。</li></ul><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Label"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span>options<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token short-argument">$0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>WheelPickerStyle</code>：以旋转轮的形式展示选项。在 iOS 上，这种样式会显示一个滚动的选择器。</li></ul><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Label"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span>options<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token short-argument">$0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token class-name">WheelPickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>SegmentedPickerStyle</code>：将选项以分段控件的形式展示。这种样式会显示一个分段控制，用户可以在其中选择一个选项。</li></ul><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Label"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span>options<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token short-argument">$0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token class-name">SegmentedPickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>InlinePickerStyle</code>：在列表或表格中内联展示选项。这种样式会在 <code>Form</code> 或 <code>List</code> 中显示一个内联的选择器。</li></ul><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Label"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span>options<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token short-argument">$0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token class-name">InlinePickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>MenuPickerStyle</code>：点击时以菜单的形式展示选项。这种样式会显示一个菜单，用户可以在其中选择一个选项。</li></ul><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Label"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span>options<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>options<span class="token punctuation">[</span><span class="token short-argument">$0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token class-name">MenuPickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>.navigationLink</code>：在 iOS 16+ 中，点击后进入下一个页面。这种样式会显示一个导航链接，用户可以点击它来打开一个新的视图。</li><li><code>.radioGrouped</code>：仅在 macOS 中可用，以单选按钮组的形式展示选项。这种样式会显示一个单选按钮组，用户可以在其中选择一个选项。</li></ul><h3 id="ColorPicker"><a href="#ColorPicker" class="headerlink" title="ColorPicker"></a>ColorPicker</h3><p><code>ColorPicker</code> 是一个允许用户选择颜色的视图。以下是一个 <code>ColorPicker</code> 的使用示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedColor <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>white    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ColorPicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择一个颜色"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $selectedColor<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"你选择的颜色"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>selectedColor<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们创建了一个 <code>ColorPicker</code> 视图，用户可以通过这个视图选择一个颜色。我们使用 <code>@State</code> 属性包装器来创建一个可以绑定到 <code>ColorPicker</code> 的 <code>selectedColor</code> 状态。当用户选择一个新的颜色时，<code>selectedColor</code> 状态会自动更新，<code>Text</code> 视图的前景色也会相应地更新。</p><h3 id="DatePicker"><a href="#DatePicker" class="headerlink" title="DatePicker"></a>DatePicker</h3><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> releaseDate<span class="token punctuation">:</span> <span class="token class-name">Date</span> <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择电影发布日期"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $releaseDate<span class="token punctuation">,</span> displayedComponents<span class="token punctuation">:</span> <span class="token punctuation">.</span>date<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择的发布日期: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">releaseDate<span class="token punctuation">,</span> formatter<span class="token punctuation">:</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">.</span>dateMedium</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="选择多个日期"><a href="#选择多个日期" class="headerlink" title="选择多个日期"></a>选择多个日期</h4><p>在 iOS 16 中，您现在可以允许用户选择多个日期，MultiDatePicker 视图会显示一个日历，用户可以选择多个日期，可以设置选择范围。示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PMultiDatePicker</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>calendar<span class="token punctuation">)</span> <span class="token keyword">var</span> cal    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> dates<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">DateComponents</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MultiDatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择个日子"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $dates<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now<span class="token operator">...</span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        dates<span class="token punctuation">.</span>compactMap <span class="token punctuation">&#123;</span> c <span class="token keyword">in</span>            cal<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span>c<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> <span class="token punctuation">.</span>long<span class="token punctuation">,</span> time<span class="token punctuation">:</span> <span class="token punctuation">.</span>omitted<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指定日期范围"><a href="#指定日期范围" class="headerlink" title="指定日期范围"></a>指定日期范围</h4><p>指定日期的范围，例如只能选择当前日期之后的日期，示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">DatePicker</span><span class="token punctuation">(</span>    <span class="token string-literal"><span class="token string">"选择日期"</span></span><span class="token punctuation">,</span>    selection<span class="token punctuation">:</span> $selectedDate<span class="token punctuation">,</span>    <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">,</span>    displayedComponents<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>date<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">datePickerStyle</span><span class="token punctuation">(</span><span class="token class-name">WheelDatePickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">labelsHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中：</p><ul><li><code>selection: $selectedDate</code> 表示选定的日期和时间。</li><li><code>in: Date()...</code> 表示可选日期的范围。在这个例子中，用户只能选择当前日期之后的日期。你也可以使用 <code>...Date()</code> 来限制用户只能选择当前日期之前的日期，或者使用 <code>Date().addingTimeInterval(86400*7)</code> 来限制用户只能选择从当前日期开始的接下来一周内的日期。</li><li><code>displayedComponents: [.date]</code> 表示 <code>DatePicker</code> 应该显示哪些组件。在这个例子中，我们只显示日期组件。你也可以使用 <code>.hourAndMinute</code> 来显示小时和分钟组件，或者同时显示日期和时间组件。</li><li><code>.datePickerStyle(WheelDatePickerStyle())</code> 表示 <code>DatePicker</code> 的样式。在这个例子中，我们使用滚轮样式。你也可以使用 <code>GraphicalDatePickerStyle()</code> 来应用图形样式。</li><li><code>.labelsHidden()</code> 表示隐藏 <code>DatePicker</code> 的标签。</li></ul><h3 id="PhotoPicker"><a href="#PhotoPicker" class="headerlink" title="PhotoPicker"></a>PhotoPicker</h3><h4 id="PhotoPicker-使用示例"><a href="#PhotoPicker-使用示例" class="headerlink" title="PhotoPicker 使用示例"></a>PhotoPicker 使用示例</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> <span class="token class-name">PhotosUI</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedItem<span class="token punctuation">:</span> <span class="token class-name">PhotosPickerItem</span><span class="token operator">?</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedPhotoData<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token operator">?</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token keyword">let</span> item <span class="token operator">=</span> selectedItem<span class="token punctuation">,</span> <span class="token keyword">let</span> data <span class="token operator">=</span> selectedPhotoData<span class="token punctuation">,</span> <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span>uiImage<span class="token punctuation">:</span> image<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择电影海报"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电影海报"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>                <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>navigationBarTrailing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selectedItem<span class="token punctuation">,</span> matching<span class="token punctuation">:</span> <span class="token punctuation">.</span>images<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择照片"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"photo"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>indigo<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">controlSize</span><span class="token punctuation">(</span><span class="token punctuation">.</span>extraLarge<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderedProminent<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> selectedItem<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> oldValue<span class="token punctuation">,</span> newValue <span class="token keyword">in</span>                <span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> newValue<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">loadTransferable</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        selectedPhotoData <span class="token operator">=</span> data                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="限制选择媒体类型"><a href="#限制选择媒体类型" class="headerlink" title="限制选择媒体类型"></a>限制选择媒体类型</h4><p>我们可以使用 <code>matching</code> 参数来过滤 <code>PhotosPicker</code> 中显示的媒体类型。这个参数接受一个 <code>PHAssetMediaType</code> 枚举值，可以是 <code>.images</code>、<code>.videos</code>、<code>.audio</code>、<code>.any</code> 等。</p><p>例如，如果我们只想显示图片，可以这样设置：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selectedItem<span class="token punctuation">,</span> matching<span class="token punctuation">:</span> <span class="token punctuation">.</span>images<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择照片"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"photo"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果我们想同时显示图片和视频，可以使用 <code>.any(of:)</code> 方法：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selectedItem<span class="token punctuation">,</span> matching<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>images<span class="token punctuation">,</span> <span class="token punctuation">.</span>videos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择照片"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"photo"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此外，我们还可以使用 <code>.not(_:)</code> 方法来排除某种类型的媒体。例如，如果我们想显示所有的图片，但是不包括 Live Photo，可以这样设置：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selectedItem<span class="token punctuation">,</span> matching<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>images<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">.</span>livePhotos<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择照片"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"photo"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这些设置可以让我们更精确地控制 <code>PhotosPicker</code> 中显示的媒体类型。</p><h4 id="选择多张图片"><a href="#选择多张图片" class="headerlink" title="选择多张图片"></a>选择多张图片</h4><p>以下示例演示了如何使用 <code>PhotosPicker</code> 选择多张图片，并将它们显示在一个 <code>LazyVGrid</code> 中：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> <span class="token class-name">PhotosUI</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedItems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">PhotosPickerItem</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">PhotosPickerItem</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedPhotosData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Data</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Data</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>selectedPhotosData<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> photoData <span class="token keyword">in</span>                        <span class="token keyword">if</span> <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> photoData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Image</span><span class="token punctuation">(</span>uiImage<span class="token punctuation">:</span> image<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"书籍"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>                <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>navigationBarTrailing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selectedItems<span class="token punctuation">,</span> maxSelectionCount<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> matching<span class="token punctuation">:</span> <span class="token punctuation">.</span>images<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"book.fill"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>brown<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> selectedItems<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> oldValue<span class="token punctuation">,</span> newValue <span class="token keyword">in</span>                        <span class="token keyword">for</span> newItem <span class="token keyword">in</span> newValue <span class="token punctuation">&#123;</span>                            <span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>                                <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> newItem<span class="token punctuation">.</span><span class="token function">loadTransferable</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    selectedPhotosData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上示例中，我们使用了 <code>PhotosPicker</code> 的 <code>maxSelectionCount</code> 参数来限制用户最多只能选择 5 张图片。当用户选择图片后，我们将图片数据保存在 <code>selectedPhotosData</code> 数组中，并在 <code>LazyVGrid</code> 中显示这些图片。</p><h3 id="字体Picker"><a href="#字体Picker" class="headerlink" title="字体Picker"></a>字体Picker</h3><p>这段代码实现了一个字体选择器的功能，用户可以在其中选择和查看自己喜欢的字体。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> fontFamily<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择字体:"</span></span><span class="token punctuation">)</span>            <span class="token class-name">FontPicker</span><span class="token punctuation">(</span>fontFamily<span class="token punctuation">:</span> $fontFamily<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">equatable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">FontPicker</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token punctuation">,</span> <span class="token class-name">Equatable</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> fontFamily<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">fontFamily</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span>fontFamily<span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $fontFamily<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">NSFontManager</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span>availableFontFamilies<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> family <span class="token keyword">in</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span>family<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span>family<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">==</span> <span class="token punctuation">(</span>l<span class="token punctuation">:</span> <span class="token class-name">FontPicker</span><span class="token punctuation">,</span> r<span class="token punctuation">:</span> <span class="token class-name">FontPicker</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Bool</span> <span class="token punctuation">&#123;</span>        l<span class="token punctuation">.</span>fontFamily <span class="token operator">==</span> r<span class="token punctuation">.</span>fontFamily    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WheelPicker"><a href="#WheelPicker" class="headerlink" title="WheelPicker"></a>WheelPicker</h3><p>本示例是一个可折叠的滚轮选择器 <code>CollapsibleWheelPicker</code>。这个选择器允许用户从一组书籍中选择一本。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selection <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Book 1"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"Book 2"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"Book 3"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"Book 4"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"Book 5"</span></span><span class="token punctuation">]</span>  <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">NavigationStack</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CollapsibleWheelPicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">ForEach</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> item <span class="token keyword">in</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">item</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Books"</span></span><span class="token punctuation">)</span>          <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">items<span class="token punctuation">[</span>selection<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">CollapsibleWheelPicker</span><span class="token operator">&lt;</span><span class="token class-name">SelectionValue</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">,</span> <span class="token class-name">Label</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">SelectionValue</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token punctuation">,</span> <span class="token class-name">Label</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> selection<span class="token punctuation">:</span> <span class="token class-name">SelectionValue</span>    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">let</span> content<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span>    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">let</span> label<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Label</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CollapsibleView</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> label<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Picker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selection<span class="token punctuation">,</span> content<span class="token punctuation">:</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">EmptyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>wheel<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">CollapsibleView</span><span class="token operator">&lt;</span><span class="token class-name">Label</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">Label</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isSecondaryViewVisible <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">let</span> label<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Label</span>  <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">let</span> content<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span>  <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> isSecondaryViewVisible<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> label<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span>      <span class="token keyword">if</span> isSecondaryViewVisible <span class="token punctuation">&#123;</span>        <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>ContentView</code> 中，我们创建了一个 <code>CollapsibleWheelPicker</code> 视图。这个视图包含一个滚轮样式的选择器，用户可以从中选择一本书。选择的书籍会绑定到 <code>selection</code> 变量。</p><p><code>CollapsibleWheelPicker</code> 视图是一个可折叠的滚轮选择器，它接受一个绑定的选择变量、一个内容视图和一个标签视图。内容视图是一个 <code>Picker</code> 视图，用于显示可供选择的书籍。标签视图是一个 <code>Text</code> 视图，显示当前选择的书籍。</p><h2 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://ming1016.github.io/qdimg/240505/toggle-ap01.png" class="lozad post-image"src="https://ming1016.github.io/qdimg/240505/toggle-ap01.png"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>使用示例如下</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayToggleView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isEnable <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 普通样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"开了"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"关了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 按钮样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"打开了"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"关闭了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.moon"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">controlSize</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>button<span class="token punctuation">)</span>                <span class="token comment">// Switch 样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"开了"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"关了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token class-name">SwitchToggleStyle</span><span class="token punctuation">(</span>tint<span class="token punctuation">:</span> <span class="token punctuation">.</span>orange<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 自定义样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"录音中"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"已静音"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token class-name">PCToggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义样式</span><span class="token keyword">struct</span> <span class="token class-name">PCToggleStyle</span><span class="token punctuation">:</span> <span class="token class-name">ToggleStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>label            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isOn <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"mic.square.fill"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"mic.slash.circle.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                    configuration<span class="token punctuation">.</span>isOn<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="样式-1"><a href="#样式-1" class="headerlink" title="样式"></a>样式</h3><p>Toggle 可以设置 toggleStyle，可以自定义样式。</p><p>下表是不同平台支持的样式</p><ul><li>DefaultToggleStyle：iOS 表现的是 Switch，macOS 是 Checkbox</li><li>SwitchToggleStyle：iOS 和 macOS 都支持</li><li>CheckboxToggleStyle：只支持 macOS</li></ul><h3 id="纯图像的-Toggle"><a href="#纯图像的-Toggle" class="headerlink" title="纯图像的 Toggle"></a>纯图像的 Toggle</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isMuted <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isMuted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> isMuted <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"speaker.slash.fill"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"speaker.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>button<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义-ToggleStyle"><a href="#自定义-ToggleStyle" class="headerlink" title="自定义 ToggleStyle"></a>自定义 ToggleStyle</h3><p>做一个自定义的切换按钮 OfflineModeToggleStyle。这个切换按钮允许用户控制是否开启离线模式。代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isOfflineMode <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isOfflineMode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Offline Mode"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token class-name">OfflineModeToggleStyle</span><span class="token punctuation">(</span>systemImage<span class="token punctuation">:</span> isOfflineMode <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"wifi.slash"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"wifi"</span></span><span class="token punctuation">,</span> activeColor<span class="token punctuation">:</span> <span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">OfflineModeToggleStyle</span><span class="token punctuation">:</span> <span class="token class-name">ToggleStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> systemImage<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> activeColor<span class="token punctuation">:</span> <span class="token class-name">Color</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>label            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isOn <span class="token operator">?</span> activeColor <span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>systemGray5<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>overlay <span class="token punctuation">&#123;</span>                    <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span>overlay <span class="token punctuation">&#123;</span>                            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> systemImage<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isOn <span class="token operator">?</span> activeColor <span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>systemGray5<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                        <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isOn <span class="token operator">?</span> <span class="token number">8</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                    <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        configuration<span class="token punctuation">.</span>isOn<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中，我们定义了一个 OfflineModeToggleStyle，它接受两个参数：systemImage 和 activeColor。systemImage 是一个字符串，表示图像的系统名称。activeColor 是一个颜色，表示激活状态的颜色。</p><h3 id="动画化的-Toggle"><a href="#动画化的-Toggle" class="headerlink" title="动画化的 Toggle"></a>动画化的 Toggle</h3><p>以下是一个自定义的切换按钮 MuteToggleStyle。这个切换按钮允许用户控制是否开启静音模式。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isMuted <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isMuted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Mute Mode"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>isMuted <span class="token operator">?</span> <span class="token punctuation">.</span>white <span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token class-name">MuteToggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> maxHeight<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">MuteToggleStyle</span><span class="token punctuation">:</span> <span class="token class-name">ToggleStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> onImage <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"speaker.slash.fill"</span></span>    <span class="token keyword">var</span> offImage <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"speaker.2.fill"</span></span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>label            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isOn <span class="token operator">?</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>systemGray6<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>                <span class="token punctuation">.</span>overlay <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isOn <span class="token operator">?</span> onImage <span class="token punctuation">:</span> offImage<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isOn <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isOn <span class="token operator">?</span> <span class="token number">10</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                    <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        configuration<span class="token punctuation">.</span>isOn<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">ToggleStyle</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">MuteToggleStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> mute<span class="token punctuation">:</span> <span class="token class-name">MuteToggleStyle</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中，我们定义了一个 MuteToggleStyle，它接受两个参数：onImage 和 offImage。onImage 是一个字符串，表示激活状态的图像的系统名称。offImage 是一个字符串，表示非激活状态的图像的系统名称。</p><h3 id="两个标签的-Toggle"><a href="#两个标签的-Toggle" class="headerlink" title="两个标签的 Toggle"></a>两个标签的 Toggle</h3><p>以下是一个自定义的切换按钮，它有两个标签。这个切换按钮允许用户控制是否开启静音模式。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $mute<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"静音"</span></span><span class="token punctuation">)</span>  <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这将关闭所有声音"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Slider"><a href="#Slider" class="headerlink" title="Slider"></a>Slider</h2><p>简单示例</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlaySliderView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $count<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下代码演示了如何创建一个自定义的 <code>Slider</code> 控件，用于调整亮度。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> brightness<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">50</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isEditing<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Brightness Control"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">BrightnessSlider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $brightness<span class="token punctuation">,</span> range<span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">,</span> step<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> isEditing<span class="token punctuation">:</span> $isEditing<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Brightness: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">(</span>brightness<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, is changing: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEditing</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>footnote<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">BrightnessSlider</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> value<span class="token punctuation">:</span> <span class="token class-name">Double</span>    <span class="token keyword">var</span> range<span class="token punctuation">:</span> <span class="token class-name">ClosedRange</span><span class="token operator">&lt;</span><span class="token class-name">Double</span><span class="token operator">></span>    <span class="token keyword">var</span> step<span class="token punctuation">:</span> <span class="token class-name">Double</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> isEditing<span class="token punctuation">:</span> <span class="token class-name">Bool</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $value<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> range<span class="token punctuation">,</span> step<span class="token punctuation">:</span> step<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"亮度"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"light.max"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> minimumValueLabel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">(</span>range<span class="token punctuation">.</span>lowerBound<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> maximumValueLabel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">(</span>range<span class="token punctuation">.</span>upperBound<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> onEditingChanged<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中，我们创建了一个 <code>BrightnessSlider</code> 控件，它是一个自定义的 <code>Slider</code> 控件，用于调整亮度。<code>BrightnessSlider</code> 接受一个 <code>value</code> 绑定，一个 <code>range</code> 范围，一个 <code>step</code> 步长，以及一个 <code>isEditing</code> 绑定。在 <code>BrightnessSlider</code> 中，我们使用 <code>Slider</code> 控件来显示亮度调整器。我们还使用 <code>Label</code> 来显示亮度调整器的标题，并使用 <code>minimumValueLabel</code> 和 <code>maximumValueLabel</code> 来显示亮度调整器的最小值和最大值。最后，我们使用 <code>onEditingChanged</code> 修饰符来监听亮度调整器的编辑状态。</p><h2 id="Stepper"><a href="#Stepper" class="headerlink" title="Stepper"></a>Stepper</h2><p><code>Stepper</code> 控件允许用户通过点击按钮来增加或减少数值。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stepper</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $count<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token operator">...</span><span class="token number">20</span><span class="token punctuation">,</span> step<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"共</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> onEditingChanged<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> b <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end Stepper</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>ContentView</code> 中，我们定义了一个状态变量 <code>count</code>，并将其初始化为 2。然后，我们创建了一个 <code>Stepper</code> 视图，并将其绑定到 <code>count</code> 状态变量。</p><p><code>Stepper</code> 视图的值范围为 2 到 20，步进值为 2，这意味着每次点击按钮，<code>count</code> 的值会增加或减少 2。我们还添加了一个标签，显示当前的 <code>count</code> 值。</p><p>我们还添加了 <code>onEditingChanged</code> 回调，当 <code>Stepper</code> 的值改变时，会打印出一个布尔值，表示 <code>Stepper</code> 是否正在被编辑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下内容已整理到小册子中，本文会随着系统更新和我更多的实践而新增和更新，你可以下载&lt;a href=&quot;https://apps.apple.com/cn/app/%E6%88%B4%E9%93%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%B0%8F%E5
      
    
    </summary>
    
      <category term="App" scheme="https://starming.com/categories/App/"/>
    
    
      <category term="SwiftUI" scheme="https://starming.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>小册子之详说 Navigation、ViewThatFits、Layout 协议等布局 SwiftUI 组件</title>
    <link href="https://starming.com/2024/05/18/pamphlet-series-layout/"/>
    <id>https://starming.com/2024/05/18/pamphlet-series-layout/</id>
    <published>2024-05-18T01:48:04.000Z</published>
    <updated>2024-09-18T08:02:23.296Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容已整理到小册子中，本文会随着系统更新和我更多的实践而新增和更新，你可以下载<a href="https://apps.apple.com/cn/app/%E6%88%B4%E9%93%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%B0%8F%E5%86%8C%E5%AD%90/id1609702529?mt=12">“戴铭的开发小册子”</a>应用，来跟踪查看本文内容新增和更新。小册子应用的代码可以在 <a href="https://github.com/ming1016/SwiftPamphletApp">Github</a> 上查看。</p><p>本文属于小册子系列中的一篇，已发布系列文章有：</p><ul><li><a href="https://starming.com/2024/05/18/pamphlet-series-swiftdata/">小册子之如何使用 SwiftData 开发 SwiftUI 应用</a></li><li><a href="https://starming.com/2024/05/18/pamphlet-series-widget/">小册子之简说 Widget 小组件</a></li><li><a href="https://starming.com/2024/05/18/pamphlet-series-listdataview/">小册子之 List、Lazy 容器、ScrollView、Grid 和 Table 数据集合 SwiftUI 视图</a></li><li>【本篇】<a href="https://starming.com/2024/05/18/pamphlet-series-layout/">小册子之详说 Navigation、ViewThatFits、Layout 协议等布局 SwiftUI 组件</a></li><li><a href="https://starming.com/2024/05/18/pamphlet-series-form/">小册子之 Form、Picker、Toggle、Slider 和 Stepper 表单相关 SwiftUI 视图</a></li><li><a href="https://starming.com/2024/05/25/pamphlet-series-animation/">小册子之 SwiftUI 动画</a></li></ul><h2 id="Navigation导航"><a href="#Navigation导航" class="headerlink" title="Navigation导航"></a>Navigation导航</h2><h3 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h3><p>控制导航启动状态、管理 size class 之间的 transition 和响应 deep link。</p><p>Navigation bar 有新的默认行为，如果没有提供标题，导航栏默认为 inline  title 显示模式。使用 <code>navigationBarTitleDisplayMode(_:)</code> 改变显示模式。如果 navigation bar  没有标题、工具栏项或搜索内容，它就会自动隐藏。使用 <code>.toolbar(.visible)</code> modifier 显示一个空 navigation bar。</p><p>参考：</p><ul><li><a href="https://developer.apple.com/documentation/swiftui/migrating-to-new-navigation-types?changes=latest_minor">Migrating to New Navigation Types</a> 官方迁移指南</li><li><a href="https://developer.apple.com/documentation/swiftui/navigationstack?changes=latest_minor">NavigationStack</a></li><li><a href="https://developer.apple.com/documentation/swiftui/navigationsplitview">NavigationSplitView</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/10054/">The SwiftUI cookbook for navigation</a></li></ul><p>NavigationStack 的示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PNavigationStack</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token comment">// 深层链接</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> $a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..&lt;</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 行"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.circle"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 行内容"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"NavigationStack Demo"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 path 设置了 stack 的深度路径。</p><p>NavigationSplitView 两栏的例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PNavigationSplitViewTwoColumn</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> choice<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationSplitView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $choice<span class="token punctuation">,</span> rowContent<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> detail<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>choice <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NavigationSplitView 三栏的例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PNavigationSplitViewThreeColumn</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Group</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span><span class="token punctuation">,</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>        <span class="token keyword">var</span> subs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> gps <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token class-name">Group</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"One"</span></span><span class="token punctuation">,</span> subs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"o1"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"o2"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"o3"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Group</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">,</span> subs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"t1"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"t2"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"t3"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> choiceGroup<span class="token punctuation">:</span> <span class="token class-name">Group</span><span class="token operator">?</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> choiceSub<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> cv <span class="token operator">=</span> <span class="token class-name">NavigationSplitViewVisibility</span><span class="token punctuation">.</span>automatic        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationSplitView</span><span class="token punctuation">(</span>columnVisibility<span class="token punctuation">:</span> $cv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>gps<span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $choiceGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationSplitViewColumnWidth</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>choiceGroup<span class="token operator">?</span><span class="token punctuation">.</span>subs <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $choiceSub<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> detail<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>choiceSub <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点击"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cv <span class="token operator">=</span> <span class="token punctuation">.</span>all            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">navigationSplitViewStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>prominentDetail<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>navigationSplitViewColumnWidth() </code> 是用来自定义宽的，<code>navigationSplitViewStyle</code> 设置为 <code>.prominentDetail</code> 是让 detail 的视图尽量保持其大小。</p><p>SwiftUI 新加了个<a href="https://developer.apple.com/documentation/swiftui/presentedwindowcontent/toolbar(_:in:)">功能</a>可以配置是否隐藏 Tabbar，这样在从主页进入下一级时就可以选择不显示底部标签栏了，示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toolbar</span><span class="token punctuation">(</span><span class="token punctuation">.</span>hidden<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>tabBar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相比较以前 NavigationView 增强的是 destination 可以根据值的不同类型展示不同的目的页面，示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PNavigationStackDestination</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"字符串"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"字符串"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"红色"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"不同类型 Destination"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c <span class="token keyword">in</span>                c<span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 的 detail"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对 toolbar 的自定义，示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">toolbar</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"toolbar"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"new"</span></span><span class="token punctuation">,</span> placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>secondaryAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"New Invitation"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"envelope"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">toolbarRole</span><span class="token punctuation">(</span><span class="token punctuation">.</span>editor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是废弃的 NavigationView 的用法。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://ming1016.github.io/qdimg/240505/navigation-ap01.jpeg" class="lozad post-image"src="https://ming1016.github.io/qdimg/240505/navigation-ap01.jpeg"></p><p>对应代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayNavigationView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> lData <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span> <span class="token punctuation">.</span>orange<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token class-name">List</span><span class="token punctuation">(</span>lData<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">NavigationLink</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">PNavDetailView</span><span class="token punctuation">(</span>contentStr<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>mint<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一个 NavigationView 的示例"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>white<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">safeAreaInset</span><span class="token punctuation">(</span>edge<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bottom1"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bottom2"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bottom3"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"数字列表"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>            <span class="token comment">// placement 共有 keyboard、destructiveAction、cancellationAction、confirmationAction、status、primaryAction、navigation、principal、automatic 这些</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>primaryAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"primaryAction"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>ultraThinMaterial<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 通过 ToolbarItemGroup 可以简化相同位置 ToolbarItem 的编写。</span>            <span class="token class-name">ToolbarItemGroup</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>navigation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"返回"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"前进"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">PCToolbar</span><span class="token punctuation">(</span>doDestruct<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"删除了"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> doCancel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"取消了"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> doConfirm<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确认了"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"status"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>principal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"principal"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>keyboard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Touch Bar Button"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end toolbar</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - NavigationView 的目的页面</span><span class="token keyword">struct</span> <span class="token class-name">PNavDetailView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>presentationMode<span class="token punctuation">)</span> <span class="token keyword">var</span> pMode<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">PresentationMode</span><span class="token operator">></span>    <span class="token keyword">var</span> contentStr<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>contentStr<span class="token punctuation">)</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"返回"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    pMode<span class="token punctuation">.</span>wrappedValue<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end ZStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 toolbar</span><span class="token comment">// 通过 ToolbarContent 创建可重复使用的 toolbar 组</span><span class="token keyword">struct</span> <span class="token class-name">PCToolbar</span><span class="token punctuation">:</span> <span class="token class-name">ToolbarContent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> doDestruct<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token keyword">let</span> doCancel<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token keyword">let</span> doConfirm<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">ToolbarContent</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>destructiveAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"删除"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> doDestruct<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancellationAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"取消"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> doCancel<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>confirmationAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确定"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> doConfirm<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>toolbar 的位置设置可选项如下：</p><ul><li>primaryAction：放置到最主要位置，macOS 就是放在 toolbar 的最左边</li><li>automatic：根据平台不同放到默认位置</li><li>confirmationAction：一些确定的动作</li><li>cancellationAction：取消动作</li><li>destructiveAction：删除的动作</li><li>status：状态变化，比如检查更新等动作</li><li>navigation：导航动作，比如浏览器的前进后退</li><li>principal：突出的位置，iOS 和 macOS 会出现在中间的位置</li><li>keyboard：macOS 会出现在 Touch Bar 里。iOS 会出现在弹出的虚拟键盘上。</li></ul><h3 id="NavigationStack"><a href="#NavigationStack" class="headerlink" title="NavigationStack"></a>NavigationStack</h3><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>假设我们有一个 TVShow 结构体和一个 Book 结构体，它们分别包含电视剧和书籍的名字。当用户点击一个电视剧或书籍的名字时，他们会被导航到相应的详细信息页面。</p><p>以下是一个例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">TVShow</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> tvShows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">TVShow</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Game of Thrones"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TVShow</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Breaking Bad"</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Book</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"1984"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"To Kill a Mockingbird"</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Section</span><span class="token punctuation">(</span>header<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Best TV Shows"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>tvShows<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> show <span class="token keyword">in</span>                        <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> show<span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Text</span><span class="token punctuation">(</span>show<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Section</span><span class="token punctuation">(</span>header<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Books"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> book <span class="token keyword">in</span>                        <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> book<span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Text</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">TVShow</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> show <span class="token keyword">in</span>                <span class="token class-name">TVShowView</span><span class="token punctuation">(</span>show<span class="token punctuation">:</span> show<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> book <span class="token keyword">in</span>                <span class="token class-name">BookView</span><span class="token punctuation">(</span>book<span class="token punctuation">:</span> book<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Media"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">TVShowView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> show<span class="token punctuation">:</span> <span class="token class-name">TVShow</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Details for </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">show<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">BookView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> book<span class="token punctuation">:</span> <span class="token class-name">Book</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Details for </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">book<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全局路由"><a href="#全局路由" class="headerlink" title="全局路由"></a>全局路由</h4><p>先写个路由的枚举</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">enum</span> <span class="token class-name">Route</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> all    <span class="token keyword">case</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">detail</span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> des<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 App 中设置好全局路由</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@main</span><span class="token keyword">struct</span> <span class="token class-name">LearnNavApp</span><span class="token punctuation">:</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Scene</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WindowGroup</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">NavigationStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Route</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> route <span class="token keyword">in</span>                        <span class="token keyword">switch</span> route <span class="token punctuation">&#123;</span>                            <span class="token keyword">case</span> <span class="token punctuation">.</span>all<span class="token punctuation">:</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"显示所有图书"</span></span><span class="token punctuation">)</span>                            <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">let</span> book<span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"添加书 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">book<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                            <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span><span class="token keyword">let</span> book<span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"详细 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">book<span class="token punctuation">.</span>des</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有视图都可调用，调用方式如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">NavigationLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看书籍详细说明"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token class-name">Route</span><span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"1984"</span></span><span class="token punctuation">,</span> des<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"1984 Detail"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="NavigationPath"><a href="#NavigationPath" class="headerlink" title="NavigationPath"></a>NavigationPath</h3><p><code>NavigationPath</code> 是一个用于管理 SwiftUI 中导航路径的工具。它可以帮助你在 SwiftUI 中实现更复杂的导航逻辑。</p><p>在 SwiftUI 中，我们通常使用 <code>NavigationLink</code> 来实现导航。然而，<code>NavigationLink</code> 只能实现简单的前进导航，如果你需要实现更复杂的导航逻辑，例如后退、跳转到任意页面等，你就需要使用 <code>NavigationPath</code>。</p><p><code>NavigationPath</code> 的工作原理是，它维护了一个路径数组，每个元素代表一个页面。当你需要导航到一个新的页面时，你只需要将这个页面添加到路径数组中。当你需要后退时，你只需要从路径数组中移除最后一个元素。这样，你就可以实现任意复杂的导航逻辑。</p><p>看个例子</p><p>假设我们有一个 TVShow 结构体，它包含电视剧的名字。当用户点击一个电视剧的名字时，他们会被导航到这个电视剧的详细信息页面。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token class-name">NavigationPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> tvShows <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token class-name">TVShow</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Game of Thrones"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TVShow</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Breaking Bad"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TVShow</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"The Witcher"</span></span><span class="token punctuation">)</span> <span class="token punctuation">]</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> $path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Select a TV show to get started."</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>subheadline<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>semibold<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>tvShows<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> show <span class="token keyword">in</span>                    <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> show<span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span>show<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>subheadline<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>medium<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> showFriends<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"This isn't navigation"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">TVShow</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> show <span class="token keyword">in</span>                <span class="token class-name">TVShowView</span><span class="token punctuation">(</span>onSelectReset<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token function">popToRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> show<span class="token punctuation">:</span> show<span class="token punctuation">,</span> otherShows<span class="token punctuation">:</span> tvShows<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Select your show"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> path<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> oldValue<span class="token punctuation">,</span> newValue <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">showFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> show <span class="token operator">=</span> <span class="token class-name">TVShow</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Friends"</span></span><span class="token punctuation">)</span>        path<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>show<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">popToRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        path<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>count<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">TVShowView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> onSelectReset<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token keyword">var</span> show<span class="token punctuation">:</span> <span class="token class-name">TVShow</span>    <span class="token keyword">var</span> otherShows<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TVShow</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>show<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>bottom<span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> onSelectReset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Reset Selection"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>otherShows<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> otherShow <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>otherShow<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">TVShow</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> premiereDate<span class="token punctuation">:</span> <span class="token class-name">Date</span> <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now    <span class="token keyword">var</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"detail"</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中，<code>NavigationPath</code> 被用作一个 <code>@State</code> 变量，这意味着它会自动响应变化，并更新视图。当你修改 <code>NavigationPath</code> 中的路径数组时，视图会自动更新，显示新的页面。</p><h3 id="NavigationSplitView"><a href="#NavigationSplitView" class="headerlink" title="NavigationSplitView"></a>NavigationSplitView</h3><p>以下是一个基于 NavigationSplitView 的三栏视图的示例。这个示例包含了一个主视图，一个次级视图和一个详细视图。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> books<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Book</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token class-name">Book</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Book 1"</span></span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Author 1"</span></span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Description 1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Book</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Book 2"</span></span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Author 2"</span></span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Description 2"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Book</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Book 3"</span></span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Author 3"</span></span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Description 3"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> selectedBook<span class="token punctuation">:</span> <span class="token class-name">Book</span><span class="token operator">?</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> splitVisibility<span class="token punctuation">:</span> <span class="token class-name">NavigationSplitViewVisibility</span> <span class="token operator">=</span> <span class="token punctuation">.</span>all    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationSplitView</span><span class="token punctuation">(</span>columnVisibility<span class="token punctuation">:</span> $splitVisibility<span class="token punctuation">,</span> sidebar<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> book <span class="token keyword">in</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> selectedBook <span class="token operator">=</span> book <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> book <span class="token operator">=</span> selectedBook <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Author: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">book<span class="token punctuation">.</span>author</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Select a Book"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> detail<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> book <span class="token operator">=</span> selectedBook <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>description<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Book details will appear here"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> selectedBook<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> oldValue<span class="token punctuation">,</span> newValue <span class="token keyword">in</span>            <span class="token comment">//...</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span><span class="token punctuation">,</span> <span class="token class-name">Equatable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例中，<code>sidebar</code> 是主视图，它显示了一个图书列表。当用户选择一个图书时，<code>content</code> 视图会显示图书的作者，<code>detail</code> 视图会显示图书的详细信息。<code>NavigationSplitView</code> 会根据 <code>splitVisibility</code> 的值来决定显示哪些视图。</p><h3 id="自定义导航栏"><a href="#自定义导航栏" class="headerlink" title="自定义导航栏"></a>自定义导航栏</h3><h4 id="交互样式"><a href="#交互样式" class="headerlink" title="交互样式"></a>交互样式</h4><p>使用 <code>navigationSplitViewStyle(_:)</code> 修饰符</p><h4 id="改变标签栏背景色"><a href="#改变标签栏背景色" class="headerlink" title="改变标签栏背景色"></a>改变标签栏背景色</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">toolbarBackground</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">.</span>gradient<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>automatic<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toolbarBackground</span><span class="token punctuation">(</span><span class="token punctuation">.</span>visible<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>automatic<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="列宽"><a href="#列宽" class="headerlink" title="列宽"></a>列宽</h4><p> <code>navigationSplitViewColumnWidth(_:)</code> 修饰符用于指定列宽。</p><p> 设置列的最小、最大和理想大小，使用 <code>navigationSplitViewColumnWidth(min:ideal:max:)</code>。可以修饰于不同的列上。</p><h4 id="自定返回按钮"><a href="#自定返回按钮" class="headerlink" title="自定返回按钮"></a>自定返回按钮</h4><p>先通过修饰符隐藏系统返回按钮 <code>.navigationBarBackButtonHidden(true)</code>。然后通过 <code>ToolbarItem(placement: .navigationBarLeading)</code> 来添加自定义的返回按钮。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">BookDetailView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> book<span class="token punctuation">:</span> <span class="token class-name">Book</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> isDetailShown<span class="token punctuation">:</span> <span class="token class-name">Bool</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Author: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">book<span class="token punctuation">.</span>author</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">navigationBarBackButtonHidden</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span>        <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>navigationBarLeading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                    isDetailShown <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"chevron.backward"</span></span><span class="token punctuation">)</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Back to Books"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Inspectors右侧多出一栏"><a href="#Inspectors右侧多出一栏" class="headerlink" title="Inspectors右侧多出一栏"></a>Inspectors右侧多出一栏</h3><p>Inspector 的示例</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">Book</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> books<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Book</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token class-name">Book</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Book 1"</span></span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Author 1"</span></span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Description 1"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Book</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Book 2"</span></span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Author 2"</span></span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Description 2"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Book</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Book 3"</span></span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Author 3"</span></span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Description 3"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> selectedBook<span class="token punctuation">:</span> <span class="token class-name">Book</span><span class="token operator">?</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> showInspector<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> splitVisibility<span class="token punctuation">:</span> <span class="token class-name">NavigationSplitViewVisibility</span> <span class="token operator">=</span> <span class="token punctuation">.</span>all        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationSplitView</span><span class="token punctuation">(</span>columnVisibility<span class="token punctuation">:</span> $splitVisibility<span class="token punctuation">,</span> sidebar<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> book <span class="token keyword">in</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> selectedBook <span class="token operator">=</span> book <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> book <span class="token operator">=</span> selectedBook <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Author: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">book<span class="token punctuation">.</span>author</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Select a Book"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> detail<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Inspector 开关"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                showInspector<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> book <span class="token operator">=</span> selectedBook <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>description<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Book details will appear here"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">inspector</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $showInspector<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> book <span class="token operator">=</span> selectedBook <span class="token punctuation">&#123;</span>                <span class="token class-name">InspectorView</span><span class="token punctuation">(</span>book<span class="token punctuation">:</span> book<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">InspectorView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> book<span class="token punctuation">:</span> <span class="token class-name">Book</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Author: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">book<span class="token punctuation">.</span>author</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">inspectorColumnWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">presentationDetents</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>medium<span class="token punctuation">,</span> <span class="token punctuation">.</span>large<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它显示了一个图书列表。当用户选择一个图书时，会显示 InspectorView，这是辅助视图，它显示了图书的详细信息。inspector 方法用于显示和隐藏 InspectorView，inspectorColumnWidth 方法用于设置辅助视图的宽度，presentationDetents 方法用于设置辅助视图的大小。</p><h3 id="导航状态保存和还原"><a href="#导航状态保存和还原" class="headerlink" title="导航状态保存和还原"></a>导航状态保存和还原</h3><p>通过 SceneStorage 保存导航路径，程序终止时会持久化存储路径，重启时恢复路径。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">protocol</span> <span class="token class-name">URLProcessor</span><span class="token operator">&lt;</span><span class="token class-name">RouteType</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">associatedtype</span> <span class="token class-name">RouteType</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span>    <span class="token keyword">func</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token keyword">mutating</span><span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token punctuation">[</span><span class="token class-name">RouteType</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">protocol</span> <span class="token class-name">UserActivityProcessor</span><span class="token operator">&lt;</span><span class="token class-name">RouteType</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">associatedtype</span> <span class="token class-name">RouteType</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span>    <span class="token keyword">func</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> activity<span class="token punctuation">:</span> <span class="token class-name">NSUserActivity</span><span class="token punctuation">,</span> <span class="token keyword">mutating</span><span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token punctuation">[</span><span class="token class-name">RouteType</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token attribute atrule">@Observable</span><span class="token attribute atrule">@MainActor</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RouteManager</span><span class="token operator">&lt;</span><span class="token class-name">RouteType</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> navigationPath<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">RouteType</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> jsonDecoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> jsonEncoder <span class="token operator">=</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> urlProcessor<span class="token punctuation">:</span> any <span class="token class-name">URLProcessor</span><span class="token operator">&lt;</span><span class="token class-name">RouteType</span><span class="token operator">></span>    <span class="token keyword">private</span> <span class="token keyword">let</span> activityProcessor<span class="token punctuation">:</span> any <span class="token class-name">UserActivityProcessor</span><span class="token operator">&lt;</span><span class="token class-name">RouteType</span><span class="token operator">></span>    <span class="token keyword">init</span><span class="token punctuation">(</span>        urlProcessor<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">URLProcessor</span><span class="token operator">&lt;</span><span class="token class-name">RouteType</span><span class="token operator">></span><span class="token punctuation">,</span>        activityProcessor<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">UserActivityProcessor</span><span class="token operator">&lt;</span><span class="token class-name">RouteType</span><span class="token operator">></span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>urlProcessor <span class="token operator">=</span> urlProcessor        <span class="token keyword">self</span><span class="token punctuation">.</span>activityProcessor <span class="token operator">=</span> activityProcessor    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> activity<span class="token punctuation">:</span> <span class="token class-name">NSUserActivity</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        activityProcessor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> <span class="token keyword">mutating</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>navigationPath<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">process</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        urlProcessor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">mutating</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>navigationPath<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">RouteManager</span> <span class="token keyword">where</span> <span class="token class-name">RouteType</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">toData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Data</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token operator">?</span> jsonEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>navigationPath<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">restore</span><span class="token punctuation">(</span>from data<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            navigationPath <span class="token operator">=</span> <span class="token keyword">try</span> jsonDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">RouteType</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>            navigationPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码定义了一个名为 <code>RouteManager</code> 的类，它用于处理和管理导航路径。这个类使用了 SwiftUI 的 <code>@MainActor</code> 和 <code>@Observable</code> 属性包装器，以确保它的操作在主线程上执行，并且当 <code>navigationPath</code> 发生变化时，会自动更新相关的 UI。</p><p><code>RouteManager</code> 类有两个协议类型的属性：<code>urlProcessor</code> 和 <code>activityProcessor</code>。这两个属性分别用于处理 URL 和用户活动（<code>NSUserActivity</code>）。这两个处理器的任务是根据给定的 URL 或用户活动，更新 <code>navigationPath</code>。</p><p><code>RouteManager</code> 类还有两个方法：<code>process(_ activity: NSUserActivity)</code> 和 <code>process(_ url: URL)</code>。这两个方法分别用于处理用户活动和 URL。处理的方式是调用相应的处理器的 <code>process</code> 方法。</p><p>此外，<code>RouteManager</code> 类还有一个扩展，这个扩展只适用于 <code>RouteType</code> 是 <code>Codable</code> 的情况。这个扩展提供了两个方法：<code>toData()</code> 和 <code>restore(from data: Data)</code>。<code>toData()</code> 方法将 <code>navigationPath</code> 转换为 <code>Data</code>，<code>restore(from data: Data)</code> 方法则将 <code>Data</code> 转换回 <code>navigationPath</code>。这两个方法可以用于将 <code>navigationPath</code> 保存到磁盘，并在需要时从磁盘恢复。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">MainView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@SceneStorage</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"navigationState"</span></span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">var</span> navigationData<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token operator">?</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> dataStore <span class="token operator">=</span> <span class="token class-name">DataStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> routeManager <span class="token operator">=</span> <span class="token class-name">RouteManager</span><span class="token operator">&lt;</span><span class="token class-name">Route</span><span class="token operator">></span><span class="token punctuation">(</span>        urlProcessor<span class="token punctuation">:</span> <span class="token class-name">SomeURLProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        activityProcessor<span class="token punctuation">:</span> <span class="token class-name">SomeUserActivityProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> $routeManager<span class="token punctuation">.</span>navigationPath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">SomeView</span><span class="token punctuation">(</span>categories<span class="token punctuation">:</span> dataStore<span class="token punctuation">.</span>categories<span class="token punctuation">)</span>                <span class="token punctuation">.</span>task <span class="token punctuation">&#123;</span> <span class="token keyword">await</span> dataStore<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Route</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> route <span class="token keyword">in</span>                    <span class="token comment">// ...</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span>onOpenURL <span class="token punctuation">&#123;</span> routeManager<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>task <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> navigationData <span class="token operator">=</span> navigationData <span class="token punctuation">&#123;</span>                routeManager<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> navigationData<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> routeManager<span class="token punctuation">.</span>$navigationPath<span class="token punctuation">.</span>values <span class="token punctuation">&#123;</span>                navigationData <span class="token operator">=</span> routeManager<span class="token punctuation">.</span><span class="token function">toData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@SceneStorage(&quot;navigationState&quot;)</code> 是用来保存和恢复导航状态的。当应用程序被挂起时，它会自动将 <code>navigationData</code> 保存到磁盘，当应用程序重新启动时，它会自动从磁盘恢复 <code>navigationData</code>。</p><p><code>@State private var dataStore = DataStore()</code> 和 <code>@State private var routeManager = RouteManager&lt;Route&gt;(...)</code> 是用来存储数据和路由管理器的。<code>DataStore</code> 是用来获取和存储数据的，<code>RouteManager</code> 是用来处理和管理导航路径的。</p><p><code>body</code> 属性定义了视图的内容。它首先创建了一个 <code>NavigationStack</code>，然后在这个 <code>NavigationStack</code> 中创建了一个 <code>SomeView</code>。<code>SomeView</code> 使用了 <code>dataStore.categories</code> 作为它的参数，并且在被创建后立即执行 <code>dataStore.fetch()</code> 来获取数据。</p><p><code>body</code> 属性还定义了一个任务，这个任务在视图被创建后立即执行。这个任务首先检查 <code>navigationData</code> 是否存在，如果存在，就使用 <code>routeManager.restore(from: navigationData)</code> 来恢复导航路径。然后，它监听 <code>routeManager.$navigationPath.values</code>，每当 <code>navigationPath</code> 发生变化时，就使用 <code>routeManager.toData()</code> 来将 <code>navigationPath</code> 转换为 <code>Data</code>，并将结果保存到 <code>navigationData</code> 中。</p><h2 id="布局基础"><a href="#布局基础" class="headerlink" title="布局基础"></a>布局基础</h2><h3 id="布局-基础"><a href="#布局-基础" class="headerlink" title="布局-基础"></a>布局-基础</h3><h4 id="基本元素样式"><a href="#基本元素样式" class="headerlink" title="基本元素样式"></a>基本元素样式</h4><p>通过 <code>.font(.title)</code> 设置字体大小。</p><p><code>.stroke(Color.blue)</code> 设置描边。举个例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>orange<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">StrokeStyle</span><span class="token punctuation">(</span>lineWidth<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> lineCap<span class="token punctuation">:</span> <span class="token punctuation">.</span>round<span class="token punctuation">,</span> dash<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>StrokeStyle(lineWidth: 10, lineCap: .round, dash: [30])</code> 定义了描边的样式，其中 <code>lineWidth: 10</code> 表示线宽为 10，<code>lineCap: .round</code> 表示线帽样式为圆形，<code>dash: [30]</code> 表示虚线模式，数组中的数字表示虚线和间隙的交替长度。</p><h4 id="frame"><a href="#frame" class="headerlink" title="frame"></a>frame</h4><p><code>.frame(width: 200, height:100, alignment: .topLeading)</code></p><ul><li><code>width: 200</code> 表示视图的宽度为 200 点。</li><li><code>height: 100</code> 表示视图的高度为 100 点。</li><li><code>alignment: .topLeading</code> 表示视图的内容应该在视图的左上角对齐。<code>.topLeading</code> 是 SwiftUI 中的一个对齐方式，表示左上角对齐。</li></ul><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><p>多个视图通过 Stack 视图进行对齐排列。这些 Stack 视图主要是：</p><ul><li>ZStack：Z轴排列</li><li>VStack：垂直排列</li><li>HStack：横向排列</li></ul><h4 id="间隔"><a href="#间隔" class="headerlink" title="间隔"></a>间隔</h4><p> 视图之间的间隔可以用 Space()，它可以在各种布局视图中使用。</p><h3 id="布局-留白"><a href="#布局-留白" class="headerlink" title="布局-留白"></a>布局-留白</h3><h4 id="Space"><a href="#Space" class="headerlink" title="Space"></a>Space</h4><p><code>Spacer</code> 是一个灵活的空间，它会尽可能地占用多的空间，从而将其周围的视图推向堆栈的两边。因此，第一个 <code>Text</code> 视图会被推到左边，第二个 <code>Text</code> 视图会被推到中间，第三个 <code>Text</code> 视图会被推到右边。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"左边"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"中间"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"右边"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面这个例子是用 Space() 让三个视图都居右。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"视图1"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"视图2"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"视图3"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="布局-对齐"><a href="#布局-对齐" class="headerlink" title="布局-对齐"></a>布局-对齐</h3><h4 id="frame-对齐"><a href="#frame-对齐" class="headerlink" title="frame 对齐"></a>frame 对齐</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="可设置对齐的视图"><a href="#可设置对齐的视图" class="headerlink" title="可设置对齐的视图"></a>可设置对齐的视图</h4><p>在 SwiftUI 中，许多视图都接受 <code>alignment</code> 参数，用于控制其子视图的对齐方式。以下是一些常见的接受 <code>alignment</code> 参数的视图：</p><ul><li><code>HStack(alignment: .bottom)</code>：水平堆栈视图，可以控制其子视图在垂直方向上的对齐方式。</li><li><code>VStack(alignment: .trailing)</code>：垂直堆栈视图，可以控制其子视图在水平方向上的对齐方式。</li><li><code>ZStack(alignment: .center)</code>：深度堆栈视图，可以控制其子视图在水平和垂直方向上的对齐方式。</li><li><code>GridRow(alignment: .firstTextBaseline)</code>：用于定义网格的行或列的大小，可以设置行或列中的内容的对齐方式。。</li></ul><h4 id="基线对齐"><a href="#基线对齐" class="headerlink" title="基线对齐"></a>基线对齐</h4><p>你可以使用 <code>alignment</code> 参数来设置视图的对齐方式，包括基线对齐。以下是一个例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">HStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>firstTextBaseline<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Hello"</span></span><span class="token punctuation">)</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"World"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>HStack</code> 是一个水平堆栈视图，它会将其子视图水平排列。<code>alignment: .firstTextBaseline</code> 是一个参数，用于设置堆栈中的内容的对齐方式。<code>.firstTextBaseline</code> 表示所有文本视图都应该根据它们的第一行的基线对齐。基线是文本字符的底部线。</p><p>因此，这个 <code>HStack</code> 中的两个 <code>Text</code> 视图会根据它们的第一行的基线对齐，即使它们的字体大小不同。</p><h3 id="布局-居中"><a href="#布局-居中" class="headerlink" title="布局-居中"></a>布局-居中</h3><p>在 SwiftUI 中，有多种方法可以使视图居中：</p><h4 id="Spacer"><a href="#Spacer" class="headerlink" title="Spacer"></a>Spacer</h4><p>使用 <code>Spacer</code>：<code>Spacer</code> 是一个灵活的空间，它会尽可能地占用多的空间，从而将其周围的视图推向堆栈的两边。如果在一个视图的两边都放置一个 <code>Spacer</code>，那么这个视图就会被推到中间。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"居中"</span></span><span class="token punctuation">)</span>    <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h4><p>使用 <code>alignment</code> 参数：许多 SwiftUI 视图都接受 <code>alignment</code> 参数，用于控制其子视图的对齐方式。例如，<code>VStack</code> 和 <code>HStack</code> 都接受 <code>alignment</code> 参数。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"居中"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="frame-1"><a href="#frame-1" class="headerlink" title="frame"></a>frame</h4><p>使用 <code>frame</code> 方法：<code>frame</code> 方法可以设置视图的尺寸和对齐方式。如果你想让一个视图在其父视图中居中，你可以使用 <code>frame(maxWidth: .infinity, maxHeight: .infinity)</code> 来使视图尽可能地占用多的空间，然后使用 <code>alignment: .center</code> 来使视图在这个空间中居中。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"居中"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> maxHeight<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="布局-offset偏移"><a href="#布局-offset偏移" class="headerlink" title="布局-offset偏移"></a>布局-offset偏移</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">OffsetDemo</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> offset<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Hello, World!"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>y<span class="token punctuation">:</span> offset<span class="token punctuation">)</span>            <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $offset<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">100</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们创建了一个 <code>Text</code> 视图和一个 <code>Slider</code>。<code>Text</code> 视图使用了 <code>.offset(y: offset)</code> 修饰符，这意味着它的 y 偏移量会根据 <code>offset</code> 的值改变。<code>Slider</code> 则用于改变 <code>offset</code> 的值。当你移动滑块时，<code>Text</code> 视图的位置也会相应地上下移动。</p><h3 id="Safe-Area"><a href="#Safe-Area" class="headerlink" title="Safe Area"></a>Safe Area</h3><h4 id="ignoresSafeArea-忽略安全区域"><a href="#ignoresSafeArea-忽略安全区域" class="headerlink" title="ignoresSafeArea 忽略安全区域"></a>ignoresSafeArea 忽略安全区域</h4><p>使用 <code>.ignoresSafeArea()</code> 可以忽略安全区域。默认是所有方向都忽略。</p><p>如果只忽略部分方向，可以按照下面方法做：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// 默认会同时包含 .keyboard 和 .container。</span><span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span>edges<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span>edges<span class="token punctuation">:</span> <span class="token punctuation">.</span>vertical<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span>edges<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>leading<span class="token punctuation">,</span> <span class="token punctuation">.</span>trailing<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 可以对安全区域分别指定</span><span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">.</span>keyboard<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">.</span>container<span class="token punctuation">,</span> edges<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>leading<span class="token punctuation">,</span> <span class="token punctuation">.</span>trailing<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="safeAreaInset"><a href="#safeAreaInset" class="headerlink" title="safeAreaInset"></a>safeAreaInset</h4><p><code>safeAreaInset</code> 是 SwiftUI 中的一个属性，它允许你将视图放置在安全区域内。”安全区域”是指设备屏幕上的一块区域，这块区域不会被系统界面（如状态栏、导航栏、工具栏、Tab栏等）遮挡。</p><p>例如，你可以使用 <code>safeAreaInset</code> 将一个视图放置在屏幕底部的安全区域内，代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Hello, World!"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">safeAreaInset</span><span class="token punctuation">(</span>edge<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Press me"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Button pressed"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，”Press me” 按钮会被放置在屏幕底部的安全区域内，而且距离底部有 10 个点的间距。</p><p>下面是更完整点的例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> tasks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TaskModel</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">...</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token class-name">TaskModel</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Task </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> taskName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> isFocused<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> task <span class="token keyword">in</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">listStyle</span><span class="token punctuation">(</span><span class="token class-name">PlainListStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">safeAreaInset</span><span class="token punctuation">(</span>edge<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Add task"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $taskName<span class="token punctuation">,</span> onCommit<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                            <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token class-name">RoundedBorderTextFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>leading<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>                                                <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                            <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"plus"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>trailing<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>bottom<span class="token punctuation">,</span> isFocused <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">NotificationCenter</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">publisher</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">UIResponder</span><span class="token punctuation">.</span>keyboardWillShowNotification<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                    withAnimation <span class="token punctuation">&#123;</span>                        isFocused <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">NotificationCenter</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">publisher</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">UIResponder</span><span class="token punctuation">.</span>keyboardWillHideNotification<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                    withAnimation <span class="token punctuation">&#123;</span>                        isFocused <span class="token operator">=</span> <span class="token boolean">false</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationBarTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Task List Demo"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">addTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token operator">!</span>taskName<span class="token punctuation">.</span>isEmpty <span class="token punctuation">&#123;</span>            withAnimation <span class="token punctuation">&#123;</span>                tasks<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">TaskModel</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> taskName<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            taskName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">TaskModel</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户可以在底部的输入框中输入任务名称，然后点击 “+” 按钮将任务添加到任务清单中。添加的任务会显示在屏幕的上方。当键盘出现或消失时，底部的输入框会相应地移动，以确保不会被键盘遮挡。 </p><h3 id="布局原理"><a href="#布局原理" class="headerlink" title="布局原理"></a>布局原理</h3><p>SwiftUI 的布局系统是一个两阶段的协商过程，涉及到父视图和子视图之间的交互。</p><p>建议阶段：在这个阶段，父视图会向子视图提出一个建议尺寸。这个建议尺寸是父视图希望子视图的大小。例如，如果父视图是一个 VStack，那么它可能会向子视图提出一个具有明确高度、宽度未指定的建议尺寸。</p><p>需求阶段：在这个阶段，子视图会根据父视图的建议尺寸来确定自己的需求尺寸。子视图可以选择接受父视图的建议尺寸，也可以选择返回一个不同的尺寸。例如，一个 Text 视图可能会返回一个刚好能够容纳其文本的尺寸。</p><p>在这个过程中，父视图和子视图都有可能影响最终的布局结果。父视图可以通过调整建议尺寸来影响子视图的大小，而子视图可以通过返回不同的需求尺寸来影响自己的大小。</p><p>在一些复杂的布局场景中，可能需要进行多轮的协商才能得到最终的布局结果。例如，如果一个视图使用了 GeometryReader 来获取其在父视图中的位置和尺寸，那么 GeometryReader 可能会在布局稳定之前，多次向子视图发送新的几何信息。</p><p>总的来说 SwiftUI 它允许父视图和子视图之间进行协商，以达到最佳的布局效果。</p><h2 id="布局进阶"><a href="#布局进阶" class="headerlink" title="布局进阶"></a>布局进阶</h2><h3 id="AnyLayout"><a href="#AnyLayout" class="headerlink" title="AnyLayout"></a>AnyLayout</h3><p>使用 AnyLayout 包装布局组件，可以在布局之间进行切换，同时保持动画效果。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">WeatherLayout</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> changeLayout <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> layout <span class="token operator">=</span> changeLayout <span class="token operator">?</span> <span class="token class-name">AnyLayout</span><span class="token punctuation">(</span><span class="token class-name">HStackLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">AnyLayout</span><span class="token punctuation">(</span><span class="token class-name">VStackLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layout <span class="token punctuation">&#123;</span>            <span class="token class-name">WeatherView</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"sun.max.fill"</span></span><span class="token punctuation">,</span> temperature<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>            <span class="token class-name">WeatherView</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.rain.fill"</span></span><span class="token punctuation">,</span> temperature<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token punctuation">.</span>blue<span class="token punctuation">)</span>            <span class="token class-name">WeatherView</span><span class="token punctuation">(</span>icon<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"snow"</span></span><span class="token punctuation">,</span> temperature<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token punctuation">.</span>white<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> changeLayout<span class="token punctuation">)</span>        <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>            changeLayout<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">WeatherView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> icon<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> temperature<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token class-name">Color</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> icon<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">temperature</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">°"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中，我们创建了一个 WeatherView 视图，它包含一个天气图标和一个温度标签。然后，我们在 WeatherLayout 视图中使用 AnyLayout 来动态改变布局。用户可以通过点击视图来在水平布局和垂直布局之间切换。</p><h3 id="ViewThatFits"><a href="#ViewThatFits" class="headerlink" title="ViewThatFits"></a>ViewThatFits</h3><p><code>ViewThatFits</code> 是一个自动选择最适合当前屏幕大小的子视图进行显示的视图。它会根据可用空间的大小来决定如何布局和显示子视图。</p><p><code>ViewThatFits</code> 是一个在 SwiftUI 中用于选择最适合显示的视图的组件。它的工作原理如下：</p><ul><li><p>首先，<code>ViewThatFits</code> 会测量在特定轴（水平或垂直）或两个轴（水平和垂直）上的可用空间。这是通过 SwiftUI 的布局系统来完成的，该系统提供了当前视图的大小和位置信息。</p></li><li><p>接着，<code>ViewThatFits</code> 会测量第一个视图的大小。这是通过调用视图的 <code>measure(in:)</code> 方法来完成的，该方法返回一个包含视图理想大小的 <code>CGSize</code> 值。</p></li><li><p>如果第一个视图的大小适合可用空间，<code>ViewThatFits</code> 就会选择并放置这个视图。放置视图是通过调用视图的 <code>layout(in:)</code> 方法来完成的，该方法接受一个 <code>CGRect</code> 值，该值定义了视图在其父视图中的位置和大小。</p></li><li><p>如果第一个视图的大小不适合可用空间，<code>ViewThatFits</code> 会继续测量第二个视图的大小。如果第二个视图的大小适合可用空间，<code>ViewThatFits</code> 就会选择并放置这个视图。</p></li><li><p>如果所有视图的大小都不适合可用空间，<code>ViewThatFits</code> 会选择并放置 <code>ViewBuilder</code> 闭包中的最后一个视图。<code>ViewBuilder</code> 是一个特殊的闭包，它可以根据其内容动态创建视图。</p></li></ul><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">ViewThatFits</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"晴天，气温25°"</span></span><span class="token punctuation">)</span> <span class="token comment">// 宽度在200到300之间</span>        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"晴天，25°"</span></span><span class="token punctuation">)</span> <span class="token comment">// 宽度在150到200之间</span>        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">)</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"晴25"</span></span><span class="token punctuation">)</span> <span class="token comment">// 宽度在100到150之间</span>        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span> <span class="token comment">// ViewThatFits所需的大小</span><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span> <span class="token comment">// 父视图提议的大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在不同的宽度下，ViewThatFits 会选择不同的视图进行显示。在上面的示例中，当父视图的宽度在100到150之间时，ViewThatFits 会选择显示 “晴25” 这个视图。</p><p>通过 ViewThatFits 来确定内容是否可滚动。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> step<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Int</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span><span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"数量: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span>            <span class="token class-name">Stepper</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"数量"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $step<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">...</span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token class-name">ViewThatFits</span> <span class="token punctuation">&#123;</span>                content                <span class="token class-name">ScrollView</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span>showsIndicators<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    content                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> content<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">..&lt;</span> count<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Layout协议"><a href="#Layout协议" class="headerlink" title="Layout协议"></a>Layout协议</h3><p>通过实现 Layout 协议，创建一个水平堆栈布局，其中所有子视图的宽度都相等。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">OptimizedEqualWidthHStack</span><span class="token punctuation">:</span> <span class="token class-name">Layout</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">func</span> <span class="token function-definition function">sizeThatFits</span><span class="token punctuation">(</span>proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span> subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span> cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGSize</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> subviews<span class="token punctuation">.</span>isEmpty <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">.</span>zero <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> maxSubviewSize <span class="token operator">=</span> <span class="token function">calculateMaxSize</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> totalSpacing <span class="token operator">=</span> <span class="token function">calculateSpacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> maxSubviewSize<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token class-name">CGFloat</span><span class="token punctuation">(</span>subviews<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> totalSpacing<span class="token punctuation">,</span> height<span class="token punctuation">:</span> maxSubviewSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">func</span> <span class="token function-definition function">placeSubviews</span><span class="token punctuation">(</span><span class="token keyword">in</span> bounds<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">,</span> proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span> subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span> cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> subviews<span class="token punctuation">.</span>isEmpty <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> maxSubviewSize <span class="token operator">=</span> <span class="token function">calculateMaxSize</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> spacings <span class="token operator">=</span> <span class="token function">calculateSpacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> placementProposal <span class="token operator">=</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> maxSubviewSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> maxSubviewSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>    <span class="token keyword">var</span> nextX <span class="token operator">=</span> bounds<span class="token punctuation">.</span>minX <span class="token operator">+</span> maxSubviewSize<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> subviews<span class="token punctuation">.</span>indices <span class="token punctuation">&#123;</span>      subviews<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">place</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> nextX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> bounds<span class="token punctuation">.</span>midY<span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">,</span> proposal<span class="token punctuation">:</span> placementProposal<span class="token punctuation">)</span>      nextX <span class="token operator">+=</span> maxSubviewSize<span class="token punctuation">.</span>width <span class="token operator">+</span> spacings<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">calculateMaxSize</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGSize</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> subviews<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">sizeThatFits</span><span class="token punctuation">(</span><span class="token punctuation">.</span>unspecified<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token short-argument">$1</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token short-argument">$1</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">calculateSpacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">CGFloat</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> subviews<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">&lt;</span> subviews<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> subviews<span class="token punctuation">[</span><span class="token short-argument">$0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>spacing<span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> subviews<span class="token punctuation">[</span><span class="token short-argument">$0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>spacing<span class="token punctuation">,</span> along<span class="token punctuation">:</span> <span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段代码中 sizeThatFits 方法计算并返回布局容器需要的大小，以便排列其子视图。它首先检查子视图数组是否为空，如果为空则返回 .zero。然后，它计算子视图的最大尺寸和总间距，最后返回一个 CGSize 对象，其宽度等于最大子视图宽度乘以子视图数量加上总间距，高度等于最大子视图高度。</p><p>placeSubviews 方法将子视图放置在布局容器中。它首先检查子视图数组是否为空，如果为空则返回。然后，它计算子视图的最大尺寸和间距，然后遍历子视图数组，将每个子视图放置在布局容器中的适当位置。</p><p>calculateMaxSize 和 calculateSpacing 是两个私有方法，用于计算子视图的最大尺寸和间距。</p><h3 id="GeometryReader"><a href="#GeometryReader" class="headerlink" title="GeometryReader"></a>GeometryReader</h3><p>在 SwiftUI 中，有多种方法可以获取和控制视图的尺寸：</p><ul><li><code>frame(width:60, height:60)</code>：这个方法会为子视图提供一个建议的尺寸，这里是 60 x 60。</li><li><code>fixedSize()</code>：这个方法会为子视图提供一个未指定模式的建议尺寸，这意味着视图会尽可能地大以适应其内容。</li><li><code>frame(minWidth: 120, maxWidth: 360)</code>：这个方法会将子视图的需求尺寸控制在指定的范围中，这里是宽度在 120 到 360 之间。</li><li><code>frame(idealWidth: 120, idealHeight: 120)</code>：这个方法会返回一个需求尺寸，如果当前视图收到为未指定模式的建议尺寸，那么它会返回 120 x 120 的尺寸。</li><li><code>GeometryReader</code>：<code>GeometryReader</code> 会将建议尺寸作为需求尺寸直接返回，这意味着它会充满全部可用区域。你可以使用 <code>GeometryReader</code> 来获取其内容的尺寸和位置。</li></ul><p><code>GeometryReader</code> 可以获取其内容的尺寸和位置。在这个例子中，我们使用 <code>GeometryReader</code> 来获取视图的尺寸，然后打印出来。这对于理解 SwiftUI 的布局系统和调试布局问题非常有用。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">logSizeInfo</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> label<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> proxy <span class="token keyword">in</span>                <span class="token class-name">Color</span><span class="token punctuation">.</span>clear                    <span class="token punctuation">.</span><span class="token function">onAppear</span><span class="token punctuation">(</span>perform<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                        <span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">label</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> Size: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">proxy<span class="token punctuation">.</span>size</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"大标题"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logSizeInfo</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"大标题视图"</span></span><span class="token punctuation">)</span> <span class="token comment">// 打印视图尺寸</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"正文"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logSizeInfo</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"正文视图"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码首先定义了一个 <code>View</code> 的扩展，添加了一个 <code>logSizeInfo(_:)</code> 方法。这个方法接受一个标签字符串作为参数，然后返回一个新的视图。这个新的视图在背景中使用 <code>GeometryReader</code> 来获取并打印视图的尺寸。</p><p>然后，我们创建了一个 <code>VStack</code> 视图，其中包含一个 <code>Text</code> 视图。我们为 <code>Text</code> 视图调用了 <code>logSizeInfo(_:)</code> 方法，以打印其尺寸。</p><p>如何利用 <code>GeometryReader</code> 来绘制一个圆形？</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">CircleView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> proxy <span class="token keyword">in</span>            <span class="token class-name">Path</span> <span class="token punctuation">&#123;</span> path <span class="token keyword">in</span>                <span class="token keyword">let</span> radius <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> proxy<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>                <span class="token keyword">let</span> center <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> proxy<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> proxy<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span><span class="token function">addArc</span><span class="token punctuation">(</span>center<span class="token punctuation">:</span> center<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> radius<span class="token punctuation">,</span> startAngle<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">,</span> endAngle<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>degrees<span class="token punctuation">:</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clockwise<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们首先获取 <code>GeometryReader</code> 的尺寸，然后计算出半径和中心点的位置。然后，我们使用 <code>Path</code> 的 <code>addArc(center:radius:startAngle:endAngle:clockwise:)</code> 方法来添加一个圆形路径。最后，我们使用 <code>fill(_:)</code> 方法来填充路径，颜色为蓝色。</p><p>关于 GeometryReader 性能问题</p><p>GeometryReader 是 SwiftUI 中的一个工具，它可以帮助我们获取视图的大小和位置。但是，它在获取这些信息时，需要等待视图被评估、布局和渲染完成。这就好比你在装修房子时，需要等待墙壁砌好、油漆干燥后，才能测量墙壁的尺寸。这个过程可能需要等待一段时间，而且可能需要多次重复，因为每次墙壁的尺寸改变，都需要重新测量。</p><p>这就是 GeometryReader 可能会影响性能的原因。它需要等待视图完成一轮的评估、布局和渲染，然后才能获取到尺寸数据，然后可能需要根据这些数据重新调整布局，这就需要再次进行评估、布局和渲染。这个过程可能需要重复多次，导致视图被多次重新评估和布局。</p><p>但是，随着 SwiftUI 的更新，这个问题已经有所改善。现在，我们可以创建自定义的布局容器，这些容器可以在布局阶段就获取到父视图的建议尺寸和所有子视图的需求尺寸，这样就可以避免反复传递尺寸数据，减少了视图的反复更新。</p><h3 id="alignmentGuide"><a href="#alignmentGuide" class="headerlink" title="alignmentGuide"></a>alignmentGuide</h3><p><code>alignmentGuide</code>是SwiftUI中的一个修饰符，它允许你自定义视图的对齐方式。你可以使用它来调整视图在其父视图或同级视图中的位置。</p><p>当你在一个视图上应用<code>alignmentGuide</code>修饰符时，你需要提供一个对齐标识符和一个闭包。对齐标识符定义了你想要调整的对齐方式（例如，<code>.leading</code>，<code>.trailing</code>，<code>.center</code>等）。闭包接收一个参数，这个参数包含了视图的尺寸，你可以使用这个参数来计算对齐指南的偏移量。</p><p>举个例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">CircleView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">alignmentGuide</span><span class="token punctuation">(</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> vd <span class="token keyword">in</span>                    vd<span class="token punctuation">[</span><span class="token punctuation">.</span>top<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">50</span>                <span class="token punctuation">&#125;</span>            <span class="token class-name">CircleView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>gray<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">CircleView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>mint<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在HStack中，第一个CircleView使用了.alignmentGuide修饰符，这使得它在顶部对齐时向下偏移了50个单位。</p><h3 id="布局进阶-参考资料"><a href="#布局进阶-参考资料" class="headerlink" title="布局进阶-参考资料"></a>布局进阶-参考资料</h3><h4 id="WWDC"><a href="#WWDC" class="headerlink" title="WWDC"></a>WWDC</h4><p>23</p><ul><li><a href="https://developer.apple.com/wwdc23/10111">Go beyond the window with SwiftUI - WWDC23 - Videos - Apple Developer</a></li></ul><p>22</p><ul><li><a href="https://developer.apple.com/wwdc22/10061">Bring multiple windows to your SwiftUI app  - WWDC22 - Videos - Apple Developer</a> 为您的 SwiftUI App 添加多个窗口</li></ul><p>20</p><ul><li><a href="https://developer.apple.com/wwdc20/10031">Stacks, Grids, and Outlines in SwiftUI - WWDC20 - Videos - Apple Developer</a> SwiftUI 中的叠放、网格和大纲</li><li><a href="https://developer.apple.com/news/?id=nixcb564">How to make your app look great on every screen - Discover - Apple Developer</a> How to make your app look greate on every screen</li></ul><h4 id="官方接口文档"><a href="#官方接口文档" class="headerlink" title="官方接口文档"></a>官方接口文档</h4><ul><li><a href="https://developer.apple.com/documentation/swiftui/layout-fundamentals">Layout fundamentals | 接口</a></li><li><a href="https://developer.apple.com/documentation/swiftui/layout-adjustments">Layout adjustments | 接口</a></li><li><a href="https://developer.apple.com/documentation/swiftui/custom-layout">Custom layout | 接口</a></li><li><a href="https://developer.apple.com/documentation/swiftui/view-groupings">View groupings | 接口</a></li></ul><h2 id="Stack-1"><a href="#Stack-1" class="headerlink" title="Stack"></a>Stack</h2><p>Stack View 有 VStack、HStack 和 ZStack</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://ming1016.github.io/qdimg/240505/stack-ap01.jpeg" class="lozad post-image"src="https://ming1016.github.io/qdimg/240505/stack-ap01.jpeg"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayStackView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 默认是 VStack 竖排</span>                <span class="token comment">// 横排</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"左"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"右"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// Z 轴排</span>        <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的开发小册子"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">Color</span><span class="token punctuation">.</span>cyan            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一段文字"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GroupBox"><a href="#GroupBox" class="headerlink" title="GroupBox"></a>GroupBox</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://ming1016.github.io/qdimg/240505/groupbox-ap01.png" class="lozad post-image"src="https://ming1016.github.io/qdimg/240505/groupbox-ap01.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayGroupBoxView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GroupBox</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这是 GroupBox 的内容"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"标题一"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"t.square.fill"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token class-name">GroupBox</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"还是 GroupBox 的内容"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"标题二"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"t.square.fill"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">groupBoxStyle</span><span class="token punctuation">(</span><span class="token class-name">PCGroupBoxStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCGroupBoxStyle</span><span class="token punctuation">:</span> <span class="token class-name">GroupBoxStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>label                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            configuration<span class="token punctuation">.</span>content        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>叠加 GroupBox 颜色会有区分</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">GroupBox</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电视剧名称: 人民的名义"</span></span><span class="token punctuation">)</span>    <span class="token class-name">GroupBox</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"播放时间: 每周一至周五"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，您还可以 <code>GroupBox</code> 使用 <code>Label</code> .将 <code>Label</code> 定位为 <code>GroupBox</code> 容器的标题。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">GroupBox</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电视剧"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"tv"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"播放时间: 每周一至周五"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GroupBox 也可以用于创建自定义的按钮组，如下所示：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">TVShowCardView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// The header of the card</span>            <span class="token comment">// - Photo, Show Name and Genre</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">)</span>                <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"权力的游戏"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>semibold<span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"奇幻剧"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>caption<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span>uiColor<span class="token punctuation">:</span> <span class="token class-name">UIColor</span><span class="token punctuation">.</span>systemGray6<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>                        <span class="token comment">// The description of the show in a few lines</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"《权力的游戏》是一部改编自乔治·马丁的奇幻小说系列《冰与火之歌》的电视剧。"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>body<span class="token punctuation">)</span>                        <span class="token comment">// Buttons to watch, share or save the show</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token function">actionGroupBox</span><span class="token punctuation">(</span>imageName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"play.rectangle"</span></span><span class="token punctuation">,</span> actionName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"观看"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Watching..."</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token function">actionGroupBox</span><span class="token punctuation">(</span>imageName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"square.and.arrow.up"</span></span><span class="token punctuation">,</span> actionName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"分享"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Sharing..."</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token function">actionGroupBox</span><span class="token punctuation">(</span>imageName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"bookmark"</span></span><span class="token punctuation">,</span> actionName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"保存"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Saving..."</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// A function to create a GroupBox for an action</span>    <span class="token keyword">func</span> <span class="token function-definition function">actionGroupBox</span><span class="token punctuation">(</span>imageName<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> actionName<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GroupBox</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> imageName<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>actionName<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>caption<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>            <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TVShowCardView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token class-name">UIColor</span><span class="token punctuation">.</span>systemGray6<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"电视剧"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>sRGB<span class="token punctuation">,</span> red<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> opacity<span class="token punctuation">:</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TabView"><a href="#TabView" class="headerlink" title="TabView"></a>TabView</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayTabView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selection <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TabView</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"首页"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">hidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"二栏"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"三栏"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"four"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"five"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"six"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"seven"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"eight"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"nine"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"ten"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end TabView</span>                                    <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"上一页"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> selection <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                        selection <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cancelAction<span class="token punctuation">)</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"下一页"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> selection <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token punctuation">&#123;</span>                        selection <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>defaultAction<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end HStack</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.tabViewStyle(PageTabViewStyle(indexDisplayMode: .never)) 可以实现 UIPageViewController 的效果，如果要给小白点加上背景，可以多添加一个 .indexViewStyle(PageIndexViewStyle(backgroundDisplayMode: .always)) 修改器。</p><h3 id="添加提醒"><a href="#添加提醒" class="headerlink" title="添加提醒"></a>添加提醒</h3><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> bookVm<span class="token punctuation">:</span> <span class="token class-name">BooksViewModel</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        bookVm <span class="token operator">=</span> <span class="token class-name">BooksViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TabView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BookListView</span><span class="token punctuation">(</span>bookVm<span class="token punctuation">:</span> bookVm<span class="token punctuation">)</span>                <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"list.bullet.rectangle.fill"</span></span><span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Book List"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token class-name">SelectedBooksView</span><span class="token punctuation">(</span>bookVm<span class="token punctuation">:</span> bookVm<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">badge</span><span class="token punctuation">(</span>bookVm<span class="token punctuation">.</span>selectedBooks<span class="token punctuation">.</span>count<span class="token punctuation">)</span>                <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"book.fill"</span></span><span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Selected Books"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h3><p>iOS 14 和 macOS 11 开始可以使用 tabViewStyle 修饰符更改 TabView 样式。比如有页面指示器的水平滚动图片。</p><p>显示页面指示器：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">tabViewStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>indexDisplayMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>always<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>.tabViewStyle(.page(indexDisplayMode: .never))</code> 修饰符隐藏页面指示器。</p><p>水平滚动图片：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"pencil"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"scribble"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"highlighter"</span></span><span class="token punctuation">]</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TabView</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>images<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> imageName <span class="token keyword">in</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> imageName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">tabViewStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>indexDisplayMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>always<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分页视图</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">OnboardingView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TabView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">OnboardingPageView</span><span class="token punctuation">(</span>imageName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"figure.mixed.cardio"</span></span><span class="token punctuation">,</span>                               title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Welcome"</span></span><span class="token punctuation">,</span>                               description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Welcome to MyApp! Get started by exploring our amazing features."</span></span><span class="token punctuation">)</span>            <span class="token class-name">OnboardingPageView</span><span class="token punctuation">(</span>imageName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"figure.archery"</span></span><span class="token punctuation">,</span>                               title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Discover"</span></span><span class="token punctuation">,</span>                               description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Discover new content and stay up-to-date with the latest news and updates."</span></span><span class="token punctuation">)</span>            <span class="token class-name">OnboardingPageView</span><span class="token punctuation">(</span>imageName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"figure.yoga"</span></span><span class="token punctuation">,</span>                               title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Connect"</span></span><span class="token punctuation">,</span>                               description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Connect with friends and share your experiences with the community."</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">tabViewStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>indexDisplayMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>always<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">indexViewStyle</span><span class="token punctuation">(</span><span class="token class-name">PageIndexViewStyle</span><span class="token punctuation">(</span>backgroundDisplayMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>always<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>.indexViewStyle(PageIndexViewStyle(backgroundDisplayMode: .always))</code> 修饰符添加了背景。这将在点周围添加一个背景，使其在任何背景下都更容易看到。</p><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><p>iOS 16 和 macOS 13 开始可以更改 TabView 的背景颜色。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">MainScreen</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TabView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">BookListView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"图书列表"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">toolbarBackground</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>navigationBar<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">toolbarBackground</span><span class="token punctuation">(</span><span class="token punctuation">.</span>visible<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>navigationBar<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"图书"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"book.closed"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">UserPreferencesView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"设置"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"gearshape"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">toolbarBackground</span><span class="token punctuation">(</span><span class="token punctuation">.</span>indigo<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>tabBar<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">toolbarBackground</span><span class="token punctuation">(</span><span class="token punctuation">.</span>visible<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>tabBar<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">toolbarColorScheme</span><span class="token punctuation">(</span><span class="token punctuation">.</span>dark<span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>tabBar<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">BookListView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这里是图书列表"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">UserPreferencesView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这里是用户设置"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ControlGroup"><a href="#ControlGroup" class="headerlink" title="ControlGroup"></a>ControlGroup</h2><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayControlGroupView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ControlGroup</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"plus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"plus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"minus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"minus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">controlGroupStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token comment">// .automatic 是默认样式，还有 .navigation</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Advanced-layout-control"><a href="#Advanced-layout-control" class="headerlink" title="Advanced layout control"></a>Advanced layout control</h2><p>session <a href="https://developer.apple.com/videos/play/wwdc2022-10056">Compose custom layouts with SwiftUI</a> </p><p>提供了新的 Grid 视图来同时满足 VStack 和 HStack。还有一个更低级别 Layout 接口，可以完全控制构建应用所需的布局。另外还有 ViewThatFits 可以自动选择填充可用空间的方式。</p><p>Grid 示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Grid</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">GridRow</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"One"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"One"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"One"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">GridRow</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token class-name">GridRow</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Three"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Three"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">gridCellColumns</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>gridCellColumns()</code>  modifier 可以让一个单元格跨多列。</p><p>ViewThatFits 的新视图，允许根据适合的大小放视图。ViewThatFits 会自动选择对于当前屏幕大小合适的子视图进行显示。Ryan Lintott 的<a href="https://twitter.com/ryanlintott/status/1534706352177700871">示例效果</a> ，对应示例代码 <a href="https://gist.github.com/ryanlintott/d03140dd155d0493a758dcd284e68eaa">LayoutThatFits.swift</a> 。</p><p>新的 Layout 协议可以观看 Swift Talk 第 308 期 <a href="https://talk.objc.io/episodes/S01E308-the-layout-protocol">The Layout Protocol</a> 。</p><p>通过符合 Layout 协议，我们可以自定义一个自定义的布局容器，直接参与 SwiftUI 的布局过程。新的 ProposedViewSize 结构，它是容器视图提供的大小。 <code>Layout.Subviews</code> 是布局视图的子视图代理集合，我们可以在其中为每个子视图请求各种布局属性。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">protocol</span> <span class="token class-name">Layout</span><span class="token punctuation">:</span> <span class="token class-name">Animatable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">var</span> layoutProperties<span class="token punctuation">:</span> <span class="token class-name">LayoutProperties</span> <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">associatedtype</span> <span class="token class-name">Cache</span> <span class="token operator">=</span> <span class="token class-name">Void</span>  <span class="token keyword">typealias</span> <span class="token class-name">Subviews</span> <span class="token operator">=</span> <span class="token class-name">LayoutSubviews</span>  <span class="token keyword">func</span> <span class="token function-definition function">updateCache</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Cache</span><span class="token punctuation">,</span> subviews<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Subviews</span><span class="token punctuation">)</span>  <span class="token keyword">func</span> <span class="token function-definition function">spacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Subviews</span><span class="token punctuation">,</span> cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Cache</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">ViewSpacing</span>  <span class="token comment">/// We return our view size here, use the passed parameters for computing the</span>  <span class="token comment">/// layout.</span>  <span class="token keyword">func</span> <span class="token function-definition function">sizeThatFits</span><span class="token punctuation">(</span>    proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>     subviews<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Subviews</span><span class="token punctuation">,</span>     cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Cache</span> <span class="token comment">// 👈🏻 use this for calculated data shared among Layout methods</span>  <span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGSize</span>    <span class="token comment">/// Use this to tell your subviews where to appear.</span>  <span class="token keyword">func</span> <span class="token function-definition function">placeSubviews</span><span class="token punctuation">(</span>    <span class="token keyword">in</span> bounds<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">,</span> <span class="token comment">// 👈🏻 region where we need to place our subviews into, origin might not be .zero</span>    proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>     subviews<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Subviews</span><span class="token punctuation">,</span>     cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Cache</span>  <span class="token punctuation">)</span>    <span class="token comment">// ... there are more a couple more optional methods</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面例子是一个自定义的水平 stack 视图，为其所有子视图提供其最大子视图的宽度：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">MyEqualWidthHStack</span><span class="token punctuation">:</span> <span class="token class-name">Layout</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/// Returns a size that the layout container needs to arrange its subviews.</span>  <span class="token comment">/// - Tag: sizeThatFitsHorizontal</span>  <span class="token keyword">func</span> <span class="token function-definition function">sizeThatFits</span><span class="token punctuation">(</span>    proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>    subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span>    cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span>  <span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGSize</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">guard</span> <span class="token operator">!</span>subviews<span class="token punctuation">.</span>isEmpty <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">.</span>zero <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> maxSize <span class="token operator">=</span> <span class="token function">maxSize</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> spacing <span class="token operator">=</span> <span class="token function">spacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> totalSpacing <span class="token operator">=</span> spacing<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">+</span> <span class="token short-argument">$1</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> maxSize<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token class-name">CGFloat</span><span class="token punctuation">(</span>subviews<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> totalSpacing<span class="token punctuation">,</span>      height<span class="token punctuation">:</span> maxSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/// Places the stack's subviews.</span>  <span class="token comment">/// - Tag: placeSubviewsHorizontal</span>  <span class="token keyword">func</span> <span class="token function-definition function">placeSubviews</span><span class="token punctuation">(</span>    <span class="token keyword">in</span> bounds<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">,</span>    proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>    subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span>    cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">guard</span> <span class="token operator">!</span>subviews<span class="token punctuation">.</span>isEmpty <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> maxSize <span class="token operator">=</span> <span class="token function">maxSize</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> spacing <span class="token operator">=</span> <span class="token function">spacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> placementProposal <span class="token operator">=</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> maxSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> maxSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>    <span class="token keyword">var</span> nextX <span class="token operator">=</span> bounds<span class="token punctuation">.</span>minX <span class="token operator">+</span> maxSize<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> subviews<span class="token punctuation">.</span>indices <span class="token punctuation">&#123;</span>      subviews<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">place</span><span class="token punctuation">(</span>        at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> nextX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> bounds<span class="token punctuation">.</span>midY<span class="token punctuation">)</span><span class="token punctuation">,</span>        anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">,</span>        proposal<span class="token punctuation">:</span> placementProposal<span class="token punctuation">)</span>      nextX <span class="token operator">+=</span> maxSize<span class="token punctuation">.</span>width <span class="token operator">+</span> spacing<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/// Finds the largest ideal size of the subviews.</span>  <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">maxSize</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGSize</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> subviewSizes <span class="token operator">=</span> subviews<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">sizeThatFits</span><span class="token punctuation">(</span><span class="token punctuation">.</span>unspecified<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> maxSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span> <span class="token operator">=</span> subviewSizes<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> currentMax<span class="token punctuation">,</span> subviewSize <span class="token keyword">in</span>      <span class="token class-name">CGSize</span><span class="token punctuation">(</span>        width<span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>currentMax<span class="token punctuation">.</span>width<span class="token punctuation">,</span> subviewSize<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>currentMax<span class="token punctuation">.</span>height<span class="token punctuation">,</span> subviewSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> maxSize  <span class="token punctuation">&#125;</span>  <span class="token comment">/// Gets an array of preferred spacing sizes between subviews in the</span>  <span class="token comment">/// horizontal dimension.</span>  <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">spacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">CGFloat</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    subviews<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> index <span class="token keyword">in</span>      <span class="token keyword">guard</span> index <span class="token operator">&lt;</span> subviews<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> subviews<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>spacing<span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span>        to<span class="token punctuation">:</span> subviews<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>spacing<span class="token punctuation">,</span>        along<span class="token punctuation">:</span> <span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义 layout 只能访问子视图代理 <code>Layout.Subviews</code> ，而不是视图或数据模型。我们可以通过 LayoutValueKey 在每个子视图上存储自定义值，通过 <code>layoutValue(key:value:)</code> modifier 设置。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">Rank</span><span class="token punctuation">:</span> <span class="token class-name">LayoutValueKey</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">let</span> defaultValue<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">func</span> <span class="token function-definition function">rank</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> value<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 👈🏻 convenience method</span>    <span class="token function">layoutValue</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token class-name">Rank</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> value<span class="token punctuation">)</span> <span class="token comment">// 👈🏻 the new modifier</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们就可以通过 Layout 方法中的 <code>Layout.Subviews</code> 代理读取自定义 <code>LayoutValueKey</code> 值：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">placeSubviews</span><span class="token punctuation">(</span>  <span class="token keyword">in</span> bounds<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">,</span>  proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>  subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span>  cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ranks <span class="token operator">=</span> subviews<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> subview <span class="token keyword">in</span>    subview<span class="token punctuation">[</span><span class="token class-name">Rank</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token comment">// 👈🏻</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要在布局之间变化使用动画，需要用 AnyLayout，代码示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PAnyLayout</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isVertical <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> layout <span class="token operator">=</span> isVertical <span class="token operator">?</span> <span class="token class-name">AnyLayout</span><span class="token punctuation">(</span><span class="token class-name">VStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">AnyLayout</span><span class="token punctuation">(</span><span class="token class-name">HStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layout <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"star"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Starming.com"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Click"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            withAnimation <span class="token punctuation">&#123;</span>                isVertical<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end button</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时 Text 和图片也支持了样式布局变化，代码示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PTextTransitionsView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> expandMessage <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> mintWithShadow<span class="token punctuation">:</span> <span class="token class-name">AnyShapeStyle</span> <span class="token operator">=</span> <span class="token class-name">AnyShapeStyle</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>mint<span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> primaryWithoutShadow<span class="token punctuation">:</span> <span class="token class-name">AnyShapeStyle</span> <span class="token operator">=</span> <span class="token class-name">AnyShapeStyle</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>primary<span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Dai Ming Swift Pamphlet"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span>expandMessage <span class="token operator">?</span> <span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>heavy<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>body<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span>expandMessage <span class="token operator">?</span> mintWithShadow <span class="token punctuation">:</span> primaryWithoutShadow<span class="token punctuation">)</span>            <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span> withAnimation <span class="token punctuation">&#123;</span> expandMessage<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> expandMessage <span class="token operator">?</span> <span class="token number">150</span> <span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">drawingGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cyan<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ContentUnavailableView"><a href="#ContentUnavailableView" class="headerlink" title="ContentUnavailableView"></a>ContentUnavailableView</h2><p>基本用法</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ArchivedInfosView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>modelContext<span class="token punctuation">)</span> <span class="token keyword">var</span> modelContext    <span class="token attribute atrule">@Query</span> <span class="token keyword">var</span> infos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">IOInfo</span><span class="token punctuation">]</span>    <span class="token operator">...</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selectInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>infos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> info <span class="token keyword">in</span>                <span class="token operator">...</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>overlay <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> infos<span class="token punctuation">.</span>isEmpty <span class="token punctuation">&#123;</span>                <span class="token class-name">ContentUnavailableView</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"无归档"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"archivebox"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> description<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点击下方按钮添加一个归档资料"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> actions<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"新增"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">addInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搜索</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Bindable</span> <span class="token keyword">var</span> vm<span class="token punctuation">:</span> <span class="token class-name">VModel</span>    <span class="token operator">...</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> item <span class="token keyword">in</span>                <span class="token operator">...</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Products"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>overlay <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span>isEmpty <span class="token punctuation">&#123;</span>                    <span class="token class-name">ContentUnavailableView</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> vm<span class="token punctuation">.</span>query<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $vm<span class="token punctuation">.</span>query<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token operator">...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下内容已整理到小册子中，本文会随着系统更新和我更多的实践而新增和更新，你可以下载&lt;a href=&quot;https://apps.apple.com/cn/app/%E6%88%B4%E9%93%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%B0%8F%E5
      
    
    </summary>
    
      <category term="App" scheme="https://starming.com/categories/App/"/>
    
    
      <category term="SwiftUI" scheme="https://starming.com/tags/SwiftUI/"/>
    
  </entry>
  
</feed>
