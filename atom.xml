<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>戴铭的博客 - 星光社</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ming1016.github.io/"/>
  <updated>2023-06-01T02:54:54.622Z</updated>
  <id>http://ming1016.github.io/</id>
  
  <author>
    <name>戴铭</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>给孩子小学的家长讲堂做了一个计算机科普分享</title>
    <link href="http://ming1016.github.io/2023/05/31/sharing-cs-in-elementary-school/"/>
    <id>http://ming1016.github.io/2023/05/31/sharing-cs-in-elementary-school/</id>
    <published>2023-05-31T11:39:09.000Z</published>
    <updated>2023-06-01T02:54:54.622Z</updated>
    
    <content type="html"><![CDATA[<p>柠檬所在的学校举办了一个家长讲堂活动，家长们做了很多有意思的分享，柠檬也希望我能够去讲讲，因此我也专门准备了一些内容。下面是我在家长讲堂上所分享的内容。</p><p>分享的标题是《图灵对计算机的设想》，那么图灵是什么人？</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/01.png" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/01.png"></p><p>阿兰·图灵，英国著名的数学家和计算机科学家，被誉为计算机科学之父、人工智能之父和密码学之父。</p><p>第二次世界大战中，阿兰·图灵是一位密码破译专家，协助英国政府破解了德国的密码，对盟军的胜利作出了贡献。</p><p>在1939年，英国参加了二战，他加入英国布莱切利园的一个密码破译组织，负责破解德军用的一种名为 Enigma 加密机的通信加密信息。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/02.png" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/02.png"></p><p>Enigma 看起来像一台打字机，有键盘、灯板、插线板和转子。键盘上按下一个字母键，灯板就会显示加密后的字母。</p><p>其中最重要的是转子，Enigma 的转子会轮换替代映射到密文。更改映射的能力很重要，因为一旦某人推导出一个字母替代规则，那么他将会知道密文中每个字母替换规则，因此需要将这些配对都改变，每次编码字母时都更改。</p><p>Enigma 实现方式是将所有布线嵌入到车轮&#x2F;转子中。通过在保持字母静止的同时转动转子，字母之间的连接会发生变化。重复替换步骤，然后转动每个字母的转子。在转子中，每根导线的两端都有外部接触点。这允许这些转子中的多个并排放置，相邻触点接触。在内部，每个转子的接线方式不同，即每个转子都包含不同的密码。在一些Enigma机器中，有三个转子，最常用的是八个。每个转子还有一个附加的字母环，该字母环随转子转动并用于设置转子的初始位置。</p><p>每个转子都可以转动到任何位置。这意味着对于第一个转子，有26条可能的路径通过一个字母。但是一旦我们沿着导线穿过第一个转子，现在有26条可能的路径通过第二个转子。然后通过第三条路径还有26条可能的路径。因此，2条通过所有三个转子的路径总数为17576。如果是5个转子，我们可以从五个转子中选择用于左侧的转子，然后从剩余的四个转子中选择用于中间的转子，然后从三个转子中选择用于正确的转子。这提供了60种可能的方式来选择用于消息的三个转子。由于一个字母可以通过转子有17576条可能的路径，因此总共有1054560种可能性。</p><p>1930年，德国军队版本增加了一个插板，允许交换字母。由于有26个字母，最多可以进行13个掉期，但通常只有10个。计算连接插板的可能方法数量的数学有点复杂，但数字是150738274937250。乘以我们上面给出的其他可能的组合，我们得到一个字母可以采用的可能路径总数是158962555217826360000。</p><p>可能性超多的，在那个只能用真空管做布尔计算的时代，想要破译这些可能，是一件很难的事情。</p><p>那么当时盟军是怎么破译的呢？</p><p>早期替换加密规律很简单，比如凯撒加密把信件中的字母向前挪三个位置，还有玛丽女王密谋杀伊丽莎白女王的密文，通过统计字母出现频率之类的规则，当破解了一个字母替换方法就能找出通篇原文，没有计算机也能够手工破解出来，而 Enigma 每个字母的可能性都海量的，导致盟军在很长一段时间都没法破译 Enigma 加密的内容。</p><p>1932年波兰数学家马里安·雷耶夫斯基、杰尔兹·罗佐基和亨里克·佐加尔斯基按照法国情报人员秘密获取的 Enigma 的原理破解了 Enigma。由于波兰数学家们利用的漏洞不断被德军修复，算力无法及时算出结果，后来将破解方法告诉了英国。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/03.png" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/03.png"></p><p>图灵基于波兰破解方法，利用字母加密后一定会是一个和自己不同的字母这个缺陷，设计了一个叫 Bombe 的计算机，对加密消息尝试多种组合，如发现字母解密后和原先一样，这个组合就会被跳过，接着试另一组，因此 Bombe 大幅减少了搜索量，这样就能保证及时破解信息。</p><p>战争历史学家 Harry Hinsley 肯定了图灵和布莱切利园组织的工作，说由于他们的工作让战争缩短了两年多，挽救了1400万人的生命。</p><p>如今加密技术怎样了呢？进入民用了么？我们能够利用加密技术保护我们的数据安全吗？</p><p>加密技术从硬件转向了软件，早期加密算法是1977年的 DES。DES 是一种对称加密算法，它的原理是将明文分成64位的块，通过一系列的置换、替换和移位操作，使用一个56位的密钥对明文进行加密，得到64位的密文。意味着有2的56次方，或大约72千万亿个不同密钥。当时是没有计算能力可以暴力破解所有可能密钥的。</p><p>DES 加密算法的具体步骤如下：</p><ul><li>初始置换（IP）：将明文按照一定的规则进行置换，得到一个新的64位明文。</li><li>分组：将置换后的明文分成左右两个32位的块。</li><li>轮函数：对右半部分进行一系列的置换、替换和移位操作，使用一个48位的子密钥对其进行加密。</li><li>左右交换：将左半部分和右半部分进行交换。</li><li>重复执行第3步和第4步，共进行16轮。</li><li>合并：将左右两个32位的块合并成一个64位的块。</li><li>末置换（FP）：将合并后的块按照一定的规则进行置换，得到一个新的64位密文。</li></ul><p>DES 解密算法的步骤与加密算法相反，主要是将加密算法中的子密钥按照相反的顺序使用，对密文进行解密。</p><p>DES 加密算法的安全性在当时是比较高的。</p><p>到了1999年，计算机芯片计算能力指数增加，一台计算机就能在几天内将 DES 的所有可能密钥都试一遍。因此，DES 已经不再被广泛使用，取而代之的是更加安全的加密算法，例如 AES。</p><p>2001年 AES 是一种对称加密算法，它的原理是将明文分成128位的块，通过一系列的置换、替换和移位操作，使用一个128位、192位或256位的密钥对明文进行加密，得到128位的密文。</p><p>AES 加密算法的具体步骤如下：</p><ul><li>密钥扩展：根据密钥长度，对密钥进行扩展，生成多个轮密钥。</li><li>初始轮：将明文按照一定的规则进行置换，得到一个新的128位明文。</li><li>轮函数：对明文进行一系列的置换、替换和移位操作，使用一个轮密钥对其进行加密。</li><li>重复执行第3步，共进行多轮。</li><li>末轮：对明文进行最后一轮的置换、替换和移位操作，使用最后一个轮密钥对其进行加密。</li><li>得到密文。</li></ul><p>AES 解密算法的步骤与加密算法相反，主要是将加密算法中的轮密钥按照相反的顺序使用，对密文进行解密。</p><p>AES 加密算法的安全性很高，主要基于其密钥长度和轮函数的复杂性。AES 支持三种密钥长度：128位、192位和256位，其中256位密钥的安全性最高。此外，AES 的轮函数使用了多种复杂的操作，例如有限域上的乘法和逆变换，使得密码破解变得更加困难。</p><p>AES 在性能和安全性间取得平衡。如今 AES 被广泛使用，比如 iPhone 上加密文件，访问 HTTPS 网站等。</p><p>进入互联网时代，以前加密技术中的密钥在网上传递过程中会被截获，截获到密钥就能够直接解密通信了。</p><p>那要怎么做才能够保证密钥不会被截获呢？</p><p>这就要用到密钥交换技术了。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/04.png" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/04.png"></p><p>密钥交换是一种不发送密钥，但依然让两台计算机在密钥上达成共识的算法。我们可以用单向函数来做。单向函数是一种数学操作，很容易算出结果，但想从结果逆向推算出输入非常困难。</p><p>密钥交换的原理是基于数学问题的难解性，例如离散对数问题。</p><p>其中，Diffie-Hellman 密钥交换协议是一种常见的密钥交换协议，在 Diffie-Hellman 里单向函数是模幂运算。意思是先做幂运算，拿一个数字当底数，拿一个数字当指数。其具体原理如下：</p><ul><li>选择两个大质数 p 和 g，其中 g 是 p 的原根。</li><li>小明选择一个私钥 a，并计算 <code>A=g^a(mod p)</code>，将 A 发送给小强。</li><li>小强选择一个私钥 b，并计算 <code>B=g^b(mod p)</code>，将 B 发送给小明。</li><li>小明计算 <code>s=B^a(mod p)</code>。</li><li>小强计算 <code>s=A^b(mod p)</code>。</li><li>现在，小明和小强都拥有相同的密钥 s，可以在通信过程中使用它来加密和解密消息。</li></ul><p>Diffie-Hellman 密钥交换协议的安全性基于离散对数问题的难解性，即使已知 p、g、A 和 B，也很难计算出 a 和 b。因此，Diffie-Hellman 密钥交换协议被广泛应用于安全通信和密钥交换等领域。</p><p>另外还可以用混色来比喻 Diffie-Hellman 密钥交换协议。</p><p>将颜色混合在一起很容易。但想知道混了什么颜色很难。要试很多种可能才知道，用这个比喻，那么我们的密钥是一种独特的颜色，首先，有一个公开的颜色 C，所有人都可以看到。然后小明和小强各自选一个秘密颜色 A 和颜色 C，只有自己知道，然后小明发给小强 A 和 C 的混色。小强也这样做，把他的秘密颜色 B 和公开颜色 C 混在一起，然后发给小明。小明收到小强的颜色后，把小明的秘密颜色 A 加进去，现在3种颜色混合在一起。小强也一样做。这样，小强和小明就有了一样的颜色。他们可以把这个颜色当密钥，尽管他们从来没有给对方发过这颜色。外部截获信息的人可以知道部分信息，但无法知道最终颜色。</p><p>Diffie-Hellman 密钥交换是建立共享密钥的一种方法。双方用一样的密钥加密和解密消息，这叫对称加密，因为密钥一样，凯撒加密，英格玛，AES 都是对称加密。</p><p>对称加密的内容两个人都能解密看到，如果加密的信息只想有一方可以解密查看就要用到非对称加密。非对称加密，有两个不同的密钥，一个是公开的，另一个是私有的，用公钥加密消息，只有有私钥的人能解密。</p><p>就好像把一个箱子和锁给你，你可以锁上箱子，但不能打开箱子，锁箱子就是公钥加密，能够打开箱子的是有钥匙的人，解锁就是私钥解密。</p><p>常见的非对称加密算法包括RSA、DSA和ECC等。目前最流行的非对称加密技术是 RSA。名字来自发明者：Rivest，Shamir，Adleman。</p><p>RSA 的原理是基于数学问题的难解性，例如大质数分解。RSA的具体原理如下：</p><ul><li>选择两个大质数 p 和 q，计算它们的乘积 <code>n=p*q</code>。</li><li>选择一个整数e，使得<code>1&lt;e&lt;φ(n)</code>，且 e 与 <code>φ(n)</code> 互质，<code>φ(n)=(p-1)*(q-1)</code>。</li><li>计算 e 关于 <code>φ(n)</code> 的模反元素 d，即满足 <code>e*d≡1(mod φ(n))</code> 的最小正整数 d。</li><li>公钥为 <code>(n,e)</code>，私钥为 <code>(n,d)</code>。</li><li>加密时，将明文 m 转换为整数 M，计算密文 <code>C=M^e(mod n)</code>。</li><li>解密时，将密文 C 计算出明文 m，即 <code>M=C^d(mod n)</code>。</li></ul><p>RSA 的安全性基于大质数分解的难度，即使已知公钥和密文，也很难计算出私钥。因此，RSA被广泛应用于数字签名、密钥交换和安全通信等领域。比如数字签名就是公钥来解密，大家都能公开看到签名内容，只有服务器端能够用私钥来加密，这样就能够证明签名是没有伪造的。</p><p>对称加密，密钥交换和公钥密码这些就是现代密码学。和图灵那个时代相比更加安全，加解密速度的提高让应用场景也更加地广泛了。</p><p>图灵除了密码破译外还做了一件对现代计算机影响深远的事情。</p><p>1935年，德国数学家大卫·希尔伯特提出的问题，就是“可判定性问题”，可判定性问题是指是否存在一种算法，输入逻辑语句，可以判断是和否。</p><p>图灵发明了一种叫做图灵机的东西，这个机器可以模拟任何其他的计算机，通过图灵机回答了可判定性问题，这个问题虽然看似简单，但是实际上却相当复杂，因为涉及了形式语言的理论、递归的原理等概念。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/06.png" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/06.png"></p><p>图灵机可以用于证明停机问题，即判断一个给定的程序是否会在有限时间内停止运行。停机问题是计算机科学中的一个经典问题，它在理论上是不可解的，即不存在一种通用的算法可以解决所有停机问题。这个图灵机可以接受一个程序集合作为输入，并输出一个程序，该程序与输入集合中的所有程序的行为都不同。通过对这个图灵机的构造和分析，图灵证明了停机问题的不可解性。</p><p>具体来说，当程序不递归自己，输出停机，测试程序就调用它，使其不停机；如果程序递归调用自己，输出不停机，测试程序不调用它，使其停机。那么问题是测试程序递归调用自己时。</p><p>另外还有个更形象的和停机问题一样的理发师悖论，具体说就是有个理发师他有个原则，有人不能刮胡子，他刮；有人刮胡子，他不能刮。无法回答的问题是，理发师会自己刮胡子么？因为他能自己刮，但根据他的原则他又不能刮，但他不能刮的话他又要刮。</p><p>图灵机是图灵对计算机的设想，他假设时间足够多，存储足够大，图灵机可以实现任何计算，另外通过停机问题也证明了并不是所有问题都能用计算来解决，也就是提前证明了计算机的极限。开启了可计算性理论，也就是丘奇-图灵论题。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/05.png" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/05.png"></p><p>图灵机工作过程和人处理问题的过程类似，获取外部信息，处理当前信息，将处理结果暂存，接下来再获取新的信息重复这个过程。为了完成这个过程，图灵设计的机器有用于输入信息的纸带，处理信息的状态规则，暂存结果的状态寄存器，以及用于获取信息和存储信息的读写器。图灵机的工作过程为：</p><ul><li>从纸带上读取信息</li><li>通过状态规则查找状态并按规则执行</li><li>状态寄存器存储结果</li><li>进入新状态</li><li>重复过程</li></ul><p>现代计算机的设计和实现受到了图灵机的启发。计算机的核心部件包括中央处理器（CPU）、存储器、输入输出设备等，这些部件的设计和实现都是基于图灵机的模型。例如，CPU 可以看作是图灵机的控制器，存储器可以看作是图灵机的纸带，输入输出设备可以看作是图灵机的输入输出接口。</p><p>另外，现代计算机的编程语言和算法也受到了图灵机的影响。图灵机可以模拟任何可计算的问题，因此它可以用来证明某个问题是可计算的，也可以用来设计算法和编写程序。现代计算机的编程语言和算法都是基于图灵机的模型，它们可以用来描述和解决各种计算问题。</p><p>总的来说现代计算机实现了图灵对计算机的设想，也深入到了我们每个人的生活。一些本来机器解决不了而人类可以解决的问题，机器也可以通过大量数据学习人类来解决。</p><p>接下来，我先简单介绍下计算机最核心的计算处理控制器发展，是怎么从图灵时代的继电器发展到现代 CPU 的。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/07.png" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/07.png"></p><p>图灵所在二战时代最大的计算机叫哈佛一号，由哈佛大学和 IBM 公司合作研制，有76万5千个组件，300万个连接点和500英里长的导线。哈佛一号采用电子管和机械继电器作为计算元件，可以进行加、减、乘、除等基本运算，还可以进行对数、三角函数等高级运算。继电器是用电控制机械开关。可以把继电器控制线路想成水龙头，打开水龙头，水会流出来，关闭水龙头，水就没了。只不过继电器控制的是电子而不是水。机械开关速度有限，最好的继电器1秒翻转50次。</p><p>哈佛一号的体积庞大，重达 5 吨，占地面积达 51 平方米，需要 3 个人来操作。哈佛一号的设计和实现受到了图灵机的启发，它采用了分程序控制和存储程序的思想，可以根据不同的程序进行自动切换。哈佛一号的设计者之一霍华德·艾肯曾说过：“我们试图建造一台机器，它可以像人一样思考，但是我们失败了。相反，我们建造了一台机器，它可以像机器一样思考。”</p><p>哈佛一号的研制历时 11 年，耗资 500 万美元，是当时世界上最先进的计算机之一。</p><p>哈佛马克一号一秒3次加减，6秒乘法，15秒除法。更复杂操作比如三角函数需要1分钟以上。除了速度慢，齿轮也容易磨损，继电器数量多故障率也会增加，哈佛马克一号有3500个继电器。昆虫也会造成继电器故障，1947年9月操作员从故障继电器中拔出一只死虫，那时每当电脑出了问题，就说它出了 bug。这个就是术语 bug 的来源。</p><p>继电器的替代品是真空管。真空管是一种电子器件，它的工作原理基于热电子发射和电子在真空中的运动。真空管由阴极、阳极和控制网格等部件组成，其中阴极是一个加热的金属丝，当温度升高时，会发射出大量的自由电子。这些电子被加速器电场加速，穿过控制网格，最终撞击到阳极上，产生电流。真空管内通过电流控制开闭实现继电器功能，由于真空管内没有会动的组件，这样速度更快，磨损更少，每秒可以开闭数千次。</p><p>真空管的工作过程可以分为三个阶段：发射阶段、传输阶段和收集阶段。在发射阶段，阴极发射出大量的自由电子，这些电子被加速器电场加速，形成电子流。在传输阶段，电子流穿过控制网格，受到网格电场的控制，形成一个电子束。在收集阶段，电子束撞击到阳极上，产生电流。</p><p>真空管的工作原理与晶体管等现代电子器件不同，它需要加热阴极才能发射电子，因此功耗较大，体积较大，寿命较短。但是真空管具有高功率、高频率、高压等特点，在一些特殊的应用场合仍然得到广泛应用。</p><p>真空管很贵，收音机一般只用一个，但计算机可能要上百甚至上千个。一般只有政府才会使用真空管做计算机。第一个大规模用真空管做的计算机是巨人一号，由工程师 Tommy Flower 设计，1943年12月完成。巨人一号在英国的布莱切利园里，用来破解日本的通信。巨人一号是基于图灵机的原理设计的，它采用了存储程序的思想，可以自动执行多个程序。同在布莱切利园的图灵的 bombe 机器没有使用真空管，而是使用的机械装置。核心部件是旋转轮机，它通过模拟密码机的运行过程来破解密码。Bombe 机器的工作原理与真空管电子计算机不同，它不需要电子元件，而是通过机械装置来实现计算和控制。巨人一号和图灵的 bombe 机器在破解密码的方式上也存在一些区别。巨人一号主要使用了穷举法和字典攻击等方法，而图灵的 bombe 则主要使用了差分密码分析等方法。</p><p>计算机硬件技术真正实现突破沿用至今的时刻发生在1947年，当年为了降低计算机成本和大小，同时提高可靠性和速度，1947年贝尔实验室科学家 John Bardeen，Walter Brattain，William Shockley 发明了晶体管。晶体管由三个掺杂不同材料的半导体层构成，其中中间的层被称为基底，两侧的层被称为掺杂层。当掺杂层中注入电子或空穴时，它们会在基底中形成一个电子或空穴浓度较高的区域，这个区域被称为 PN 结。PN 结可以用来控制电流的流动，从而实现放大和开关电信号的功能。晶体管的发明是电子技术史上的重要里程碑，它的出现标志着电子器件从真空管时代进入了半导体时代。</p><p>晶体管的物理学相当复杂，牵扯到量子力学。晶体管有两个电极，电极之间有一种材料隔开他们，这种材料有时候导电，有时候不导电，叫半导体。半导体每秒可以开关10000次，与玻璃制作的真空管相比，晶体管是固态的，不容易坏，而且比真空管更小更便宜。</p><p>1957年 IBM 推出完全用晶体管的 IBM 608，由于便宜，消费者也可以买得到。它有3000个晶体管，每秒执行4500次加法，80次乘除法。IBM 将晶体管计算机带入千家万户。现在计算机里的晶体管小于50纳米，而一张纸的厚度大概是10万纳米。每秒可以切换上百万次，工作很多年。</p><p>晶体管和半导体的开发在圣克拉拉谷，半导体材料大部分是硅，硅很特别，它是半导体，它有时导电，有时不导电，我们可以控制导电时机，所以硅是做晶体管的绝佳材料。硅的蕴藏量丰富，占地壳四分之一，这个地方后来被称为硅谷。</p><p>1960年代，为了解决电子器件体积大、功耗高、可靠性差等问题。在德州仪器工作的 Jack Killby 把多个组件包在一起，变成一个新的独立组件，这个组件就是集成电路。Robert Noyce 的仙童半导体让集成电路变为现实。最开始一个 IC 只有几个晶体管，把简单电路，逻辑门封装成单独组件。</p><p>在集成电路中，数百万个晶体管、电容器、电阻器等元件被集成在一个芯片上，从而大大减小了电路的体积和功耗，提高了电路的可靠性和性能。</p><p>在集成电路出现之前，电子器件主要采用离散元件的方式进行组装。这种方式需要大量的电子元件，而且需要手工进行组装和连接，不仅体积大、功耗高，而且可靠性差。随着半导体技术的发展，人们开始尝试将多个晶体管、电容器、电阻器等元件集成在一个芯片上，从而形成了集成电路。</p><p>集成电路的出现极大地推动了电子技术的发展。它不仅使电子器件的体积和功耗大大减小，而且提高了电路的可靠性和性能。随着集成电路技术的不断发展，芯片上的晶体管数量不断增加，集成度不断提高。</p><p>为了创造更复杂的电路并能够大规模生产，出现了通过蚀刻金属线的方式，把零件连接到一起的印刷电路板技术，简称 PCB。是一种用于连接和支持电子元件的基板，它通过在表面覆盖一层导电材料（通常是铜）并在其上刻蚀出电路图案，从而实现电路的连接和布局。印刷电路板广泛应用于电子设备中，例如计算机、手机、电视等。</p><p>印刷电路板的制作过程通常包括以下几个步骤：</p><ul><li>设计电路图：首先需要根据电路的功能和布局设计电路图，通常使用电路设计软件进行设计。</li><li>制作印刷电路板：将电路图转换为印刷电路板的图案，并使用光刻技术将图案转移到覆盖在基板上的光阻膜上。然后，使用化学蚀刻技术将未被光阻膜保护的铜层蚀刻掉，从而形成电路图案。</li><li>镀金层：在印刷电路板表面镀上一层金属，通常是镀金，以提高电路板的导电性和耐腐蚀性。</li><li>焊接元件：将电子元件焊接到印刷电路板上，通常使用表面贴装技术（Surface Mount Technology，SMT）或插件式技术（Through-Hole Technology，THT）。</li><li>测试电路板：使用测试设备对印刷电路板进行测试，以确保电路板的功能和性能符合要求。</li></ul><p>为了在相同体积下集成更多晶体管，全新的光刻工艺出现了，用光把复杂图案印到材料上，比如半导体。其基本原理是利用光敏材料对光的敏感性，通过光的照射和化学反应来形成所需的图案。光刻使用材料包括光掩膜，光刻胶，金属化，氧化层和晶圆。我们可以用晶圆做基础，把复杂金属电路放上面，集成所有东西，非常适合做集成电路。</p><p>光刻的基本步骤包括：</p><ul><li>涂覆光刻胶：将光刻胶涂覆在待加工的基板表面上，形成一层均匀的薄膜。</li><li>曝光：将光刻胶暴露在紫外线下，通过掩膜将光刻胶暴露在特定的区域，形成所需的图案。</li><li>显影：将光刻胶进行显影，将未暴露在紫外线下的光刻胶溶解掉，形成所需的图案。</li><li>退光刻胶：使用退光刻胶剂将光刻胶进行退除，以便进行下一步的工艺步骤。</li></ul><p>在曝光过程中，光刻胶中的光敏剂会吸收光子能量，从而发生化学反应，使得光刻胶在曝光区域发生物理或化学变化。在显影过程中，未曝光的光刻胶会被溶解掉，而曝光区域的光刻胶则会保留下来，形成所需的图案。在退光刻胶过程中，使用退光刻胶剂将光刻胶进行退除，以便进行下一步的工艺步骤。</p><p>用类似制作步骤，光刻可以制作其他电子元件，比如电阻和电容，都在一片硅上。而且互相连接的电路也做好了。现实中，光刻法一次会做上百万个细节。</p><p>有了光刻技术晶体管越来越小，密度也变得更高，戈登·摩尔发现了一个趋势，就是每两年相同空间所放晶体管数量会增加两倍，后来这个规律被称为摩尔定律。戈登·摩尔和罗伯特·诺伊斯联手成立了一家新公司，结合 Intergrated 和 Electronics 两个词，取名 Intel，是现在最大的芯片制造商。CPU 晶体管数量按摩尔定律一直在指数级地增长，1980年，一个芯片有3万晶体管。到1990年达到了100万，2010年一个芯片里已经可以放进10亿晶体管，现在苹果 M1 Ultra 的晶体管数量约为1140亿。英特尔说，到2030年，芯片将拥有约1万亿个晶体管。先进的芯片中晶体管的尺寸是以纳米为单位，小到2纳米，比血红细胞小2800倍。除了 CPU 还有内存，显卡，固态硬盘和摄像头感光元件等都得益于光刻带来的摩尔定律发展。现在的电路设计都是超大规模集成（VLSI）自动生成的设计。</p><p>目前由于光的波长精度已经接近极限，因此需要波长更短的光源来投射更小图案。另外晶体管小到一定程度电极之间可能只有原子长，会发生量子隧道贯穿，也就是电子会跳过间隙。不过相信只要有需求，这些技术问题终将被克服。</p><p>那么究竟都有什么样的需求一直推动着计算机技术爆发增长呢？</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/08.png" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/08.png"></p><p>最早计算机的用途主要就是做数学计算，比如二战的炮手，需要根据射程和大气压力来计算近似多项式，多项式可以描述几个变量的关系，这些函数手算很麻烦耗时。Charles Babbage 提出一种新型机械装置叫差分机将欲求多项方程的前3个初始值输入到机器，推论出固定不变的差数，接下来每个值就可以将差数和前一个阶段的值相加得到。求多项方程的结果完全只需要用到加和减。</p><p>在19世纪末，美国人口10年一次普查，然而手工编制需要七年时间，编制完成已经过时了，1890年人口激增，手工编制普查数据需要13年之久。Herman Hollerith 发明了打孔卡片制表机，机器是电动机械的，用传统机械计数，用电动结构连接其他组件。用打孔来表示数据，每个孔代表一个二进制数码，机器会读取孔的位置将其转成数字，打孔卡片制表机的工作方式如下：</p><ul><li>使用打孔机将有关个人的数据记录在打孔卡片上。在卡片上打孔，代表一个人的姓名、年龄、职业等信息。</li><li>打好的卡片被送入Hollerith的制表机。该机器有金属刷子，可以从卡片上的孔中穿过。</li><li>当刷子经过一个开孔时，一个电路就会完成，一个计数器就会递增。计数器记录着有多少张牌具有某些特征。</li><li>计数器还可以使用连接在机器上的打印机将结果打印在纸上。它将根据计数器的计数来打印数据的摘要。</li></ul><p>与手工操作相比，Hollerith的系统加快了数据的统计过程，速度是手动的十倍。美国人口普查局在1890年采用了他的打孔卡系统，使他们能够在两年半内完成人口普查数据处理。</p><p>Herman Hollerith 后来成立了制表机器公司，服务于会计、保险评估和库存管理等数据密集行业。后来这家公司和其他公司合并后改名国际商业机器公司，简称 IBM。</p><p>二战时期及二战后冷战时期各国对计算机的需求达到了鼎盛，比如我前面提到图灵他们做的破译 Enigma 的机器。政府对计算机投入资源的时期是美国和苏联的冷战，这也得益于二战时计算机在曼哈顿计划和破解德军加密对自身价值的证明。其中阿波罗计划是投入经费最多的项目，雇了40多万人，还有2万多家大学和公司参与了其中。复杂轨道的计算需求是最大的，因此 NASA制造了阿波罗导航计算机，这台计算机首先使用了集成电路，当时首先使用了集成电路的价格是很贵的，一个芯片就需要五十多美元，而阿波罗导航计算机需要上千个这样的芯片。另外军事上，洲际导弹和核弹也促进了集成电路规模化生产。</p><p>随着冷战的结束，政府在计算机上的投入也逐渐减少，计算机迎来了家用消费级时代。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/09.png" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/09.png"></p><p>70年代初，计算机各个组件的成本都有大幅下降，可以做出低成本适用于个人使用的电脑，第一台取得商业成功的个人计算机是 Altair 8800，很多计算机爱好者都会购买，计算机的程序要用机器码编写，由于编写麻烦，比尔·盖茨编写了 BASIC 解释器，可以将 BASIC 代码转换成可执行机器码，这个解释器叫 Altair BASIC，也是微软的第一个产品。</p><p>24岁的 Steve Wozniak 受到 Altair 8800 的启发，做了一台自己的计算机，他的同学 Steve Jobs 看中了其中机会，1976年4月1日创立了苹果计算机公司，1976年7月开始将 Steve Wozniak 设计的计算机进行售卖，这也是苹果计算机公司的第一款产品。后来苹果的 Apple-II 卖了上百万套，苹果公司一战成名。</p><p>和苹果的封闭架构不同的是 IBM 发布的 IBM PC，IBM PC 采用的是开放式架构，这样每个公司都可以遵循这个标准做出自己的计算机，核心硬件和外设都可以有不同组合，这样的计算机也称为 IBM 兼容计算机。</p><p>开放的架构也繁荣了生态，更多公司比如康柏和戴尔加入了个人计算机领域。</p><p>让计算机进入更多普通人家庭的是交互上的革命。</p><p>1984年苹果发布了 Macintosh，使用图形界面取代了用命令行交互的终端。</p><p>更多用户对计算机的使用也带来视觉和听觉感官的诉求。那么图形和声音是怎么让计算机识别处理和保存的呢？</p><p>当一个图像以特定的格式保存时，构成图像的数字数据–像素和它们的颜色值–被编码并根据该格式的规范进行压缩。该文件还包含元数据，如图像大小、分辨率和色彩模式。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/10.png" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/10.png"></p><p>图像文件格式决定了数字数据的组织和压缩方式，图像文件格式的主要类型有：</p><ul><li>JPEG：一种 “有损 “的压缩格式，通常用于照片。它压缩图像数据以减少文件大小，导致图像质量的一些损失。</li><li>PNG：一种 “无损 “的压缩格式，适用于带有文字、线条和图形的图像。用这种格式保存时，没有图像质量的损失。</li><li>GIF： 一种适用于颜色数量有限的图像的格式，通常用于网络上的简单图形和动画。</li><li>BMP: 一种未压缩的格式，存储图像的精确像素数据。BMP文件的尺寸往往很大。</li></ul><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/11.png" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/11.png"></p><p>数字音频文件是由代表音频波形的二进制数据组成。文件格式规定了这种二进制数据的结构和组织方式，以表示音频样本、比特深度、采样率、通道数量和其他元数据。像媒体播放器这样的计算机程序可以读取文件格式并解码二进制数据以播放音频。</p><p>常见的音频文件格式包括：</p><ul><li>WAV：一种标准的未压缩的音频格式，由原始样本组成。WAV文件往往尺寸较大，但具有较高的音频质量。</li><li>MP3: 一种压缩的音频格式，使用有损压缩来减少文件大小。MP3文件较小，但与WAV相比，其音频质量略低。</li><li>AAC: 另一种压缩的音频格式，提供良好的压缩率，同时保持相对较高的音频质量。AAC文件通常用于iPod等设备。</li><li>FLAC: 一种无损压缩的音频格式，在保留所有原始音频信息和质量的同时压缩文件以减小尺寸。</li></ul><p>如今，计算机已经可以大致模拟出我们所能感受到的东西，而图灵对计算机的构想也正随着硬件高速发展而逐步被实现，并走进每一个人的生活。关于图灵证明的计算机的极限，计算机已通过学习大量数据来模仿人类进行突破，学会根据情况忽略一些悖论来避免宕机。和计算机不同，我们的生命有限，记忆的容量有限，但也正因为如此，我们才能更好地享受和珍惜每一次对未知事物探索过程的回忆，而不是结果。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/12.jpg" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/12.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/13.jpg" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/13.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/sharing-cs-in-elementary-school/14.jpg" class="lozad post-image"src="/uploads/sharing-cs-in-elementary-school/14.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;柠檬所在的学校举办了一个家长讲堂活动，家长们做了很多有意思的分享，柠檬也希望我能够去讲讲，因此我也专门准备了一些内容。下面是我在家长讲堂上所分享的内容。&lt;/p&gt;
&lt;p&gt;分享的标题是《图灵对计算机的设想》，那么图灵是什么人？&lt;/p&gt;
&lt;p&gt;&lt;img  srcset=&quot;data
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="Computer" scheme="http://ming1016.github.io/tags/Computer/"/>
    
  </entry>
  
  <entry>
    <title>使用 SwiftUI 开发 RSS 阅读器</title>
    <link href="http://ming1016.github.io/2023/04/24/swiftui-rss-reader/"/>
    <id>http://ming1016.github.io/2023/04/24/swiftui-rss-reader/</id>
    <published>2023-04-24T07:51:34.000Z</published>
    <updated>2023-04-24T10:50:03.272Z</updated>
    
    <content type="html"><![CDATA[<p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/01.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/01.png"></p><p>在 Apple 加速器活动和字节内分享了使用 SwiftUI 做 RSS 阅读器的一点心得。可能你还不知道什么是 RSS 阅读器，简单来说 RSS 是一些博客和新闻网站，甚至是播客和视频平台发布他们的内容更新的一种 XML 格式，阅读器就是通过请求这个 XML 以获取他们内容更新的客户端。</p><p>这就有了接下来几个问题：<br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/02.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/02.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/03.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/03.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/04.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/04.png"></p><p>目前已有 Reeder 和 NetNewsWire 等 RSS 阅读器，那么为什么还要再开发一个呢，早在14年我曾做过一个，陆续也更新过，后来还是以 Reeder 作为主力，feedly 作为服务，后来 feedly 有些不稳定，我又改成本地获取 feed 的方式，但是改成本地模式后设备同步又成了问题。正好最近几年苹果在界面、数据流和存储上都做了很大的功能加强。于是我打算将以前 objc、rac和 FMDB 替换成 SwiftUI 和 CoreData 技术，同时补上以前缺少的一些功能，比如添加管理feed，不同设备同步订阅 feed、文章已读状态和收藏信息等功能。</p><p>先说下怎么订阅 RSS。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/05.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/05.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/06.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/06.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/07.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/07.png"></p><p>如上图所示先通过链接获取待解析的数据，以及 mimeType，通过 mimeType 看里面是否包含如下描述：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">application<span class="token operator">/</span>atom<span class="token operator">+</span>xmlapplication<span class="token operator">/</span>rss<span class="token operator">+</span>xmlapplication<span class="token operator">/</span>jsonapplication<span class="token operator">/</span>feed<span class="token operator">+</span>jsontext<span class="token operator">/</span>xmlapplication<span class="token operator">/</span>xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包含的话就可以判断是 RSS。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/08.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/08.png"></p><p>如果不是的话就需要手动从网页里获取 RSS 的链接，方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">mime<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"text/html"</span></span><span class="token punctuation">)</span><span class="token class-name">SwiftSoup</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>homepageHTML<span class="token punctuation">)</span>htmlDom<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"link[rel=alternate]"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 SwiftSoup 是一个专门用来将 HTML 解析成 DOM 对象的库。一般 RSS 的链接会在属性键值是 rel 和 alternate 的 Link 这个标签里。但是很多网站并没有遵循这个规范，那么就需要在链接后直接通过添加以下文件名来查找哪个是它的 RSS 链接：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"feed.xml"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"rss.xml"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"atom.xml"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"feed"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"feed.rss"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"rss"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"index.xml"</span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到了 RSS 的链接就可以获取到它的数据，接下来就是对数据的处理，根据 RSS 的规范，RSS 的数据主要是以下三种。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/09.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/09.png"></p><p>对应的结构体如下：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/10.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/10.png"></p><p>RSS 的图标的获取方式有两种</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/11.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/11.png"></p><p>对处理好的数据需要进行本地的存储，目前不管是 Apple 还是三方库主要都是基于 SQLite 的封装。估计是因为 SQLite 开销小，支持大多数 SQL 92 标准语法，采用标准的 ANSI-C 代码，很容易在多个平台运行，同时 SQLite 还支持所有 SQL 用来保障数据安全和完整性的事务属性，比如原子性、一致性、隔离性和持久性。以下是 iOS 上一些主要基于 SQLite 封装库：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/12.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/12.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/13.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/13.png"></p><p>我选择的是 Core Data，首先是 Core Data 的 API 很强，将复杂数据建模和操作的 SQL 语句都做成了可视化和对象模式操作。多个数据对象之间的关联关系也做了很多自动处理。Core Data 还使用了惰性加载的方式，只有在需要时才从存储区域获取数据，以节省内存，提高执行效率。</p><p>Core Data 的使用需要对数据库进行设置。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/14.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/14.png"></p><p>在读取实体存储时可以设置 Core Spotlight 以及进行一些调试测试工作。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/16.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/16.png"></p><p>Core Data 对数据的增删改和检索操作都是在 NSManagerObjectContext 中完成的。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/17.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/17.png"></p><p>如果要支持 CloudKit，NSManagerObjectContext 初始化时需要在合并策略做一些设置。context 的数据操作都是基于对象操作的方式，比如增加一个 feed 就是在 context 中创建一个 feed 的对象，然后对其字段对应的属性进行设置即可。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/18.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/18.png"></p><p>删除就是用 context 的 delete 方法将对要删除数据对应的对象进行删除即可。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/19.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/19.png"></p><p>修改就是对读取的对象进行设置。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/20.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/20.png"></p><p>检索有两种方式，一种是创建一个 Controller，使用 lazy 来修饰检索检索结果，惰性加载以节省内存。数据变化会在 NSFetchedResultsController 代理里进行回调，在回调里可以更新 @Published 属性包装的属性以及时同步展示更新的数据。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/21.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/21.png"></p><p>另一种检索方式是使用 @FetchRequest 属性包装，写法更加简洁。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/22.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/22.png"></p><p>下面是 RSS 数据操作对应的代码。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/23.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/23.png"></p><p>添加 Feed 的代码</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> newFeed <span class="token operator">=</span> <span class="token class-name">WebFeedMO</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> stack<span class="token punctuation">.</span>context<span class="token punctuation">)</span>newFeed<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>newFeed<span class="token punctuation">.</span>createAt <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>nownewFeed<span class="token punctuation">.</span>homePageURL <span class="token operator">=</span> inputURLstack<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">await</span> <span class="token function">handleAFeed</span><span class="token punctuation">(</span>webFeed<span class="token punctuation">:</span> newFeed<span class="token punctuation">)</span> <span class="token comment">// 文章</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除 Feed</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">for</span> a <span class="token keyword">in</span> webFeed<span class="token punctuation">.</span>allElements <span class="token punctuation">&#123;</span>    stack<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>stack<span class="token punctuation">.</span><span class="token function">deleteWebFeed</span><span class="token punctuation">(</span>webFeed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>检索 Feed 列表</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> fetch <span class="token operator">=</span> <span class="token class-name">WebFeedMO</span><span class="token punctuation">.</span><span class="token function">fetchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> sortDescriptorUnreadCount <span class="token operator">=</span> <span class="token class-name">NSSortDescriptor</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"unreadCount"</span></span><span class="token punctuation">,</span> ascending<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">let</span> sortDescriptorCreateAt <span class="token operator">=</span> <span class="token class-name">NSSortDescriptor</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"createAt"</span></span><span class="token punctuation">,</span> ascending<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>fetch<span class="token punctuation">.</span>sortDescriptors <span class="token operator">=</span> <span class="token punctuation">[</span>sortDescriptorUnreadCount<span class="token punctuation">,</span> sortDescriptorCreateAt<span class="token punctuation">]</span><span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token class-name">NSFetchedResultsController</span><span class="token punctuation">(</span>fetchRequest<span class="token punctuation">:</span> fetch<span class="token punctuation">,</span> managedObjectContext<span class="token punctuation">:</span> stack<span class="token punctuation">.</span>context<span class="token punctuation">,</span> sectionNameKeyPath<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> cacheName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"webFeeds"</span></span><span class="token punctuation">)</span>controller<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token keyword">try</span><span class="token operator">?</span> controller<span class="token punctuation">.</span><span class="token function">performFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/24.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/24.png"></p><p>Feed 里文章的列表检索</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> fetch <span class="token operator">=</span> <span class="token class-name">ArticleMO</span><span class="token punctuation">.</span><span class="token function">fetchRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> sortDescriptor <span class="token operator">=</span> <span class="token class-name">NSSortDescriptor</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"datePublished"</span></span><span class="token punctuation">,</span> ascending<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>fetch<span class="token punctuation">.</span>sortDescriptors <span class="token operator">=</span> <span class="token punctuation">[</span>sortDescriptor<span class="token punctuation">]</span><span class="token keyword">let</span> controller <span class="token operator">=</span> <span class="token class-name">NSFetchedResultsController</span><span class="token punctuation">(</span>fetchRequest<span class="token punctuation">:</span> fetch<span class="token punctuation">,</span> managedObjectContext<span class="token punctuation">:</span> stack<span class="token punctuation">.</span>context<span class="token punctuation">,</span> sectionNameKeyPath<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> cacheName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"newArticles"</span></span><span class="token punctuation">)</span>controller<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token keyword">try</span><span class="token operator">?</span> controller<span class="token punctuation">.</span><span class="token function">performFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标记已读</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> selectedArticle<span class="token punctuation">:</span> <span class="token class-name">ArticleMO</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">willSet</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        newValue<span class="token operator">?</span><span class="token punctuation">.</span>read <span class="token operator">=</span> <span class="token boolean">true</span>        selectedWebFeed<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">countUnreadArticles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全部标记已读</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> countElement <span class="token operator">=</span> selectedWebFeed<span class="token operator">?</span><span class="token punctuation">.</span>allElements<span class="token punctuation">.</span>count <span class="token operator">??</span> <span class="token number">0</span><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> a <span class="token keyword">in</span> selectedWebFeed<span class="token operator">?</span><span class="token punctuation">.</span>allElements <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    index <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> a<span class="token punctuation">.</span>read <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">&#123;</span>        a<span class="token punctuation">.</span>read <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> countElement <span class="token operator">></span> <span class="token number">1000</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">></span> <span class="token number">1000</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>favourite <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 最后重置未读总数</span>selectedWebFeed<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">countUnreadArticles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/25.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/25.png"></p><p>收藏状态的切换直接对布尔属性 favourite 执行 toggle 方法。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">selectedArticle<span class="token operator">?</span><span class="token punctuation">.</span>favourite<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>selectedArticle<span class="token operator">?</span><span class="token punctuation">.</span>dateModified <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>工具栏中的分享功能可以直接使用 SwiftUI 内置的 ShareLink 视图。Item 的 placement 对于不同平台的位置会有不同。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>    <span class="token class-name">ToolbarItemGroup</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>primaryAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Menu</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"拷贝链接"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"doc.on.doc"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">ShareLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"分享"</span></span><span class="token punctuation">,</span> item<span class="token punctuation">:</span> link<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"square.and.arrow.up"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">ToolbarItemGroup</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"收藏"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"star"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"浏览器"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"safari"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// end toolbar</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于网站提供的 RSS 是静态的，因此每次获取数据时需要进行和本地存储的数据进行比对去重。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/26.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/26.png"></p><p>Core Data 提供了一种通过简单配置约束就可以去重的方法。具体方法如上图所示。</p><p>但是如果要支持 iCloud 就没法使用唯一约束这个功能。因此只能回到老办法，手动比对。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/27.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/27.png"></p><p>为了提升大量数据添加的效率，可以使用 NSBatchInsertRequest。正常情况下，在使用 Core Data 进行大量数据插入时，应用程序需要为每个插入操作都创建上下文和执行请求。这样会导致上下文过度膨胀和查询操作的重复，并且会对内存和 CPU 带来负担。而 NSBatchInsertRequest 则能够通过批量插入的方式一次性将多条数据插入到 Core Data 中，并且执行速度要比逐条插入要快得多。NSBatchInsertRequest 实际上是在底层利用 SQLite 数据库的 INSERT INTO 语法来执行批量插入操作。这种方式通过一次性将数据提交给 SQLite，可以减少插入操作所需的检查、协调和锁定操作，从而提高插入操作的效率和性能。当使用 NSBatchInsertRequest 执行批量插入时，Core Data 会首先创建一个临时表，然后将待插入的数据全部插入到该临时表中。接着，Core Data 会使用关联操作将临时表中的数据一次性插入到实际的数据库表中，从而进一步提高了数据插入的效率。NSBatchInsertRequest 还提供了一些可用的参数设置选项，开发者可以根据具体的需求进行灵活配置。例如，通过设置 batchSize 参数，可以控制批量插入时每个批次所包含的最大行数，以避免内存的过度消耗；通过设置 propertiesToUpdate 参数，可以在批量插入后更新指定的属性值，从而避免对整个对象进行额外的查询和更新操作。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/28.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/28.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/29.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/29.png"></p><p>Core Data 里的数据可以通过 iCloud 实现多设备的同步，比如我在 macOS 上订阅、阅读和收藏的信息能够无缝切换到手机和 iPad 上。未来支持 iCloud 可以进行如下的设置：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/30.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/30.png"></p><p>支持 iCloud 也会有一些限制，对于我目前来说最大限制就是不支持唯一约束，另外数据表结构更改后老版本的兼容也是需要注意的，这是由于 iCloud 是云端数据统一传输，并不会兼容多版本。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/31.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/31.png"></p><p>通过以下方法可以让兼容合并更安全。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/32.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/32.png"></p><p>应用支持 iCloud 后会有 cloudd 这个后台进程对 iCloud 服务的同步和管理，定期检查 iCloud 上数据是否需要同步到本地设备，或者本地数据是否需要传到 iCloud。 apsd 进程会将数据的更新以通知的方式推送到其他设备，dasd 进程会对 iCloud 的数据进行处理然后交给应用进程。对这个流程的调试就是基于上面提到的这四个进程进行日志记录。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/33.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/33.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/34.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/34.png"></p><p>另外 Core Data 还支持一些调试参数，除了 iCloud 还可以支持多线程、SQL、合并等信息的日志打印。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/35.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/35.png"></p><p>为了节省 iCloud 空间大小，对于文章内容这样数据量大的数据就不用支持 iCloud 了，方法是如下：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/36.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/36.png"></p><p>另外，Core Data 里的数据还能够很容易的支持 spotlight 索引，方便在应用外能够被检索。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/37.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/37.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/38.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/38.png"></p><p>界面使用的是 NavigationSplitView。代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">HomeThreeColumnView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@EnvironmentObject</span> <span class="token keyword">var</span> webFeedController<span class="token punctuation">:</span> <span class="token class-name">WebFeedController</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationSplitView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">SidebarView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 左侧频道列表</span>        <span class="token punctuation">&#125;</span> content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">AWebFeedArticlesView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 文章列表</span>        <span class="token punctuation">&#125;</span> detail<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ArticleWebView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 文章内容</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NavigationSplitView 可以同时显示主视图和辅助视图。实现了 iOS 系统中常见的 iPad 多窗口布局模式，允许用户同时操作两个视图，提高了应用程序的多任务处理能力和用户体验。NavigationSplitView 提供了一组简洁易用的 API，开发者可以通过少量的代码实现大部分常见的多窗口布局需求。例如，只需要设置主视图和辅助视图的内容即可快速创建一个 NavigationSplitView，而无需手动管理视图控制器的层次结构。NavigationSplitView 还支持自定义视图拆分行为、边缘滑动手势等功能。</p><p>数据处理，包括 Core Data 的初始化配置和增删改和检索等我都放在了 Controller 里，Controller 的关键代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">WebFeedController</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span> <span class="token punctuation">,</span><span class="token class-name">ObservableObject</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> selectedWebFeed<span class="token punctuation">:</span> <span class="token class-name">WebFeedMO</span><span class="token operator">?</span>    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> selectedArticle<span class="token punctuation">:</span> <span class="token class-name">ArticleMO</span><span class="token operator">?</span>        <span class="token attribute atrule">@Published</span> <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> webFeeds<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">WebFeedMO</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token attribute atrule">@Published</span> <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> newArticles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">ArticleMO</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 最新文章</span>    <span class="token attribute atrule">@Published</span> <span class="token keyword">private</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token keyword">var</span> favoriteArticles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">ArticleMO</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 收藏的文章</span>    <span class="token keyword">var</span> stack<span class="token punctuation">:</span> <span class="token class-name">NRCDStack</span>        <span class="token keyword">init</span><span class="token punctuation">(</span>stack<span class="token punctuation">:</span> <span class="token class-name">NRCDStack</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token operator">...</span>        webFeeds <span class="token operator">=</span> fetchedResults<span class="token punctuation">.</span>fetchedObjects <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        newArticles <span class="token operator">=</span> fetchedNewArticlesResults<span class="token punctuation">.</span>fetchedObjects <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        favoriteArticles <span class="token operator">=</span> fetchFavoriteArticlesResults<span class="token punctuation">.</span>fetchedObjects <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取所有 feed 源</span>    <span class="token keyword">lazy</span> <span class="token keyword">var</span> fetchedResults<span class="token punctuation">:</span> <span class="token class-name">NSFetchedResultsController</span><span class="token operator">&lt;</span><span class="token class-name">WebFeedMO</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 获取最新 article</span>    <span class="token keyword">lazy</span> <span class="token keyword">var</span> fetchedNewArticlesResults<span class="token punctuation">:</span> <span class="token class-name">NSFetchedResultsController</span><span class="token operator">&lt;</span><span class="token class-name">ArticleMO</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 获取收集 article</span>    <span class="token keyword">lazy</span> <span class="token keyword">var</span> fetchFavoriteArticlesResults<span class="token punctuation">:</span> <span class="token class-name">NSFetchedResultsController</span><span class="token operator">&lt;</span><span class="token class-name">ArticleMO</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - NSFetchedResultsControllerDelegate</span><span class="token comment">// 跟踪变化，在回调中处理。</span><span class="token keyword">extension</span> <span class="token class-name">WebFeedController</span><span class="token punctuation">:</span> <span class="token class-name">NSFetchedResultsControllerDelegate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">controllerDidChangeContent</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> controller<span class="token punctuation">:</span> <span class="token class-name">NSFetchedResultsController</span><span class="token operator">&lt;</span><span class="token class-name">NSFetchRequestResult</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        webFeeds <span class="token operator">=</span> fetchedResults<span class="token punctuation">.</span>fetchedObjects <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        newArticles <span class="token operator">=</span> fetchedNewArticlesResults<span class="token punctuation">.</span>fetchedObjects <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        favoriteArticles <span class="token operator">=</span> fetchFavoriteArticlesResults<span class="token punctuation">.</span>fetchedObjects <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 数据 CRUD 操作</span><span class="token keyword">extension</span> <span class="token class-name">WebFeedController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 更新全部 Feed</span>    <span class="token keyword">func</span> <span class="token function-definition function">updateAllFeeds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span>        <span class="token comment">// MARK: - Feed 的操作</span>    <span class="token comment">// 添加 Feed</span>    <span class="token attribute atrule">@discardableResult</span>    <span class="token keyword">func</span> <span class="token function-definition function">createFeed</span><span class="token punctuation">(</span>inputURL<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> nameForDisplay<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">WebFeedMO</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除操作，删掉一个 Feed</span>    <span class="token keyword">func</span> <span class="token function-definition function">deleteWebFeed</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> webFeed<span class="token punctuation">:</span> <span class="token class-name">WebFeedMO</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span><span class="token function">deleteWebFeed</span><span class="token punctuation">(</span>webFeed<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 更新</span>    <span class="token keyword">func</span> <span class="token function-definition function">updateFeedByModel</span><span class="token punctuation">(</span><span class="token keyword">for</span> webFeed<span class="token punctuation">:</span> <span class="token class-name">WebFeedMO</span><span class="token punctuation">,</span> model<span class="token punctuation">:</span> <span class="token class-name">FeedModel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span>        <span class="token comment">// MARK: - 文章的操作</span>    <span class="token comment">// 收藏的文章</span>    <span class="token keyword">func</span> <span class="token function-definition function">fetchFavoriteArticles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        favoriteArticles <span class="token operator">=</span> fetchFavoriteArticlesResults<span class="token punctuation">.</span>fetchedObjects <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 最新文章</span>    <span class="token keyword">func</span> <span class="token function-definition function">fetchNewArticles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        newArticles <span class="token operator">=</span> fetchedNewArticlesResults<span class="token punctuation">.</span>fetchedObjects <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 收藏</span>    <span class="token keyword">func</span> <span class="token function-definition function">favoriteArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        selectedArticle<span class="token operator">?</span><span class="token punctuation">.</span>favourite<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        selectedArticle<span class="token operator">?</span><span class="token punctuation">.</span>dateModified <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now    <span class="token punctuation">&#125;</span>        <span class="token comment">// 清空所选 feed 下所有文章</span>    <span class="token keyword">func</span> <span class="token function-definition function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span>        <span class="token comment">// 标记全部已读</span>    <span class="token keyword">func</span> <span class="token function-definition function">markAllAsRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span>        <span class="token comment">// 新增文章</span>    <span class="token keyword">func</span> <span class="token function-definition function">createArticleByModel</span><span class="token punctuation">(</span><span class="token keyword">for</span> webFeed<span class="token punctuation">:</span> <span class="token class-name">WebFeedMO</span><span class="token punctuation">,</span> model<span class="token punctuation">:</span> <span class="token class-name">ArticleModel</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用最终效果如下图：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swiftui-rss-reader/42.png" class="lozad post-image"src="/uploads/swiftui-rss-reader/42.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img  srcset=&quot;data:image/svg+xml,%3Csvg%20xmlns=&#39;http://www.w3.org/2000/svg&#39;%20viewBox=&#39;0%200%20300%20300&#39;%3E%3C/svg%3E&quot; data-src=&quot;/uploa
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="SwiftUI" scheme="http://ming1016.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>参加了少数派和 SwiftGG 举办的《和我们一起畅想 Apple 的 AR 与 VR》直播活动</title>
    <link href="http://ming1016.github.io/2022/10/24/join-sspai-swiftgg-ask-apple-and-ar-vr-live-event/"/>
    <id>http://ming1016.github.io/2022/10/24/join-sspai-swiftgg-ask-apple-and-ar-vr-live-event/</id>
    <published>2022-10-24T07:47:34.000Z</published>
    <updated>2023-04-24T04:33:14.375Z</updated>
    
    <content type="html"><![CDATA[<p>上周，我参加了少数派和 SwiftGG 举办的《和我们一起畅想 Apple 的 AR 与 VR》直播活动，这里是<a href="https://weibo.com/1914010467/MbvfZp6Fj">视频回放</a>。其中聊了些参加 Ask Apple 活动的一些感受和收获，还聊了些 Apple XR 相关内容。</p><h2 id="Ask-Apple"><a href="#Ask-Apple" class="headerlink" title="Ask Apple"></a>Ask Apple</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/join-sspai-swiftgg-ask-apple-and-ar-vr-live-event/01.png" class="lozad post-image"src="/uploads/join-sspai-swiftgg-ask-apple-and-ar-vr-live-event/01.png"></p><p>这次 Apple 的 <a href="https://www.apple.com.cn/newsroom/2022/10/apple-introduces-ask-apple-for-developers/">Ask Apple</a> 活动有中文集锦版块，我感觉很贴心，先前 Apple 在 WWDC 期间的 Digital Lounge 中都是英文，阅读起来时间成本很高，需要过滤很多信息。我觉得参加活动的开发者分为两种，一种是在工作中有问题想要解决的，他们也会用各种渠道去找解法，比如请教身边有经验的人，问其他公司的朋友，或者直接在官方 feedback 里提。另一种开发者是当前没有疑难杂症，只是想关注下其他人关注的问题，还有看看有没有自己平时没太注意到的技术是否能够用到自己的工作中。</p><p>在 WeatherKit 主题环节中，有开发者问是否有有完整的天气相关的 Symbol 可以用，苹果工程师会列出自己整理的天气 Symbol 名称集，真是非常贴心了。</p><p>我还从天气主题的问答中，了解到天气预报还有分钟级的，不过目前可以用的国家只有美国、英国和爱尔兰。大部分国家会有恶劣天气事件可以用。天气主题中，大家很关注的是天气请求配额的问题，毕竟用多了是要自己掏腰包的嘛。了解到的情况是天气请求配额并不是简单的按请求次数来的，服务端会缓存的数据请求，相同的请求在缓存时间内请求多次也只算一次，数据更新了才会算新增加一次。</p><p>在 SF Symbols 环节有个有趣的情况，当时 Apple 工程师问大家平时自制 Symbol 一般用啥工具，举例是  Illustrator、Sketch、Affinity Designer，却没提最近最火的 Figma，Apple 提供的素材也没有 Figma 格式的，于是大家都回答 Figma，气氛略显尴尬，当然不排除砸场子的可能。我想大家只是希望 Apple 能够了解到 Figma 阵营已经很壮大了。</p><p>在 Widget 主题环节，开发者都提到了widget刷新频率问题，其实是有官方文档<a href="https://developer.apple.com/documentation/widgetkit/keeping-a-widget-up-to-date">《Keeping a Widget Up To Date》</a>专门阐述这个问题的， Apple 工程师也找出来发到了 Slack 中。</p><p>还有个是 SwiftUI 这次新推出的共享面板支持 ShareLink，我看还有开发者不知道，可能是他没来得及看 WWDC Session。其实这样没来得及看或者没时间看 Session 的人应该还有很多，正在解决手头问题或者开发新功能，碰到了具体问题就来问的。Ask Apple 这样的活动就可以解决他们的燃眉之急。</p><p>对于很多人关注用户体验的人，很关注后台任务怎样更新资源策略，Apple 工程师回答的很详细，还贴出了 一个官方 <a href="https://developer.apple.com/documentation/backgroundtasks/refreshing_and_maintaining_your_app_using_background_tasks">demo</a>，我正好也全面了解了下。另外今年 Apple 推出的 Background Asset 可以让系统统筹进行资源更新，这个更新过程可以发生在 App 未启动状态。</p><p><a href="https://twitter.com/fatbobman/">fatbobman</a> 整理了 Ask Apple 活动中关于 CoreData 的内容，<a href="https://www.fatbobman.com/posts/Core-Data-of-Ask-Apple-2022/">上 </a> 和 <a href="https://www.fatbobman.com/posts/Core-Data-of-Ask-Apple-2022-2/">下</a>。先前关注他博客里提到他开发的 App 用的是 Core Data 和 CloudKit，fatbobman 自己也在 Ask Apple 中问了相关问题，看得出他的收获很大。</p><h2 id="XR"><a href="#XR" class="headerlink" title="XR"></a>XR</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/join-sspai-swiftgg-ask-apple-and-ar-vr-live-event/02.png" class="lozad post-image"src="/uploads/join-sspai-swiftgg-ask-apple-and-ar-vr-live-event/02.png"></p><p>直播活动后半场环节是围绕 Apple 可能推出 XR 设备的讨论。</p><p>记得19年有篇报道称苹果内部有人透露出他们会在22年先推出结合AR和VR的头盔。23年再出轻便的 XR 眼镜，代号是 N421，官方回应的是硬件可能会不同，也可能不会推出。透露消息的人称自己是在 Apple 的千人大会上了解到的，参会人都是参与 XR 的项目组成员。</p><p>目前来看22年都快要结束了，还没有新 XR 消息。根据这几年苹果为XR做的技术铺垫，我觉得很有可能是一个轻便的很时尚的 AR 眼镜，不会像赛亚人那种很科幻的样子。</p><p>关于什么是 AR 什么是 VR，我觉得像环球影城里的哈利波特城堡还有迪斯尼加勒比海盗那种，在移动中结合了真实场景和虚幻场景的就是 AR。坐着不动体验比拟真实场景的虚幻场景，比如迪士尼的飞跃地平线就是VR。最终带来的愉悦感其实是差不多的。</p><p>眼镜最担心的是常带的电量问题。</p><p>我觉得 Apple 的这款常态是待机模式。待机模式会常显，类似 apple watch 和 iphone14 的那种常显，这样可以做到非常省电，内容类似 lock screen，可以自定义时间组件和下面三方 app 提供的 widget 和 live active。这样就在最省电的情况下依然可以看到自己关注的信息。</p><p>第二种是激活状态，这个状态下会开启摄像头，完成类似 iPhone 和 iPad 上的 AR 功能。AR Quick look、扫描物品、WorldMap、人物跟踪、4K、Location Anchor 这些 ARKit 的功能和应用都可以使用。</p><p>最后还可能会有投屏模式，可以将手机、电脑甚至是 Watch 上的内容投到眼镜上。使用通用控制功能，可以让 Apple Watch、iPhone、iPad 触摸屏、鼠标和键盘都可以进行眼镜的输入控制。</p><p>通过苹果申请的专利来看，他们使用的是无线充电模式，到时候可能会类似 airpod 那样的充电盒子的方式，比如可充电的眼镜盒。另外有个专利显示苹果设备是可以看穿到外部的，很有可能会是外带的轻便眼镜，而不会是头盔。因为 VR 头盔可以活动范围太小，不健康，不符合苹果提倡那种 Apple watch 运动模式的健康生活方式。</p><p>那什么 Apple 的技术会用到眼镜上呢？</p><p>ARKit 以及基于 ARKit 的 RoomPlan 和 Live Text 很明显就是给眼镜用的，RoomPlan 解决的是眼镜应用中虚拟物品摆放的问题，Live Text 可以解决现实世界中信息的识别问题。</p><p>ARKit 目前用的最多的应该就是 AR Quick Look 这个技术，它可以很方便的将虚拟物品摆到现实中。网页结合很简单，在 a 标签加上rel&#x3D;ar 属性，然后href里添加模型USDZ文件连接就行了。</p><p>ARKit4 的地理位置跟踪，可以在坐标点上放置虚拟元素，当别人打开 AR 应用走到放置的区域时，就可以加载出预先放置的虚拟元素。</p><p>新增 Motion Capture 2D 和 3D 骨骼检测，还有耳骨检测，可能是想检测对方有没有在看你。</p><p>交互界面上，SwiftUI 和 Stage Manager 肯定会用于眼镜的 UI 和 UX 设计中。SwiftUI 描述界面和交互设计是再合适不过的了。Stage Manager 可以将空间里大量的复杂交互应用进行分组。</p><p>对于镜片显示的技术来说，苹果收购了多家研发 <a href="https://en.wikipedia.org/wiki/MicroLED">micro LED</a> 的公司，micro LED 像素间距的上限更小，比 LCD 和 mini LED 都要小得多，上限高，就能有更大的分辨率的可能，更小的屏幕能够做到更高的分辨率。micro LED 使用的是非有机材料，相比较于 OLED 寿命要长，有着和 OLED 一样的高色彩对比度，还有更高的亮度尼特上限。micro LED 比过渡型的 mini LED 要省电。micro LED 的缺点是成本高，这个是目前在 micro LED 在攻克的难题。</p><p>Apple 的 Pro Display XDR 和最新的 iPad Pro MacBook Pro，用的是过渡到 micro LED 的 mini LED 屏幕，Pro Display XDR 亮度能够到1600尼特，并且使用寿命和节能都比 OLED 好，这点可以看出 Apple 未来的方向会体验更好的 micro LED。</p><p>从苹果收购 Beates 后，苹果加强了耳机硬件实力，空间音频可以提高虚拟世界元件的真实感，比如头顶有只虚拟的鸟，鸟叫声也是从上面传来，这样的感觉是不是很真实。</p><p>现在市场上已经推出了一些眼镜。微软的 VR + AR 的大头盔 Hololens 面对的不是普通用户而是专业人，比如建筑行业通过头盔可以看到现在建筑的情况，测量和检测，辅助工程，提高效率，保障安全。Hololens 售价是3500美金。Facebook 的 Oculus VR头显着重元宇宙，VR 主要是在室内场景使用，但室内里可以娱乐的东西太多了，竞争必然会很激烈。轻便的 AR 在户外的设备竞争会少些，目前用的最多的也就是听音频和看手表的设备，操作也比较麻烦，室外会有很多等待或者枯燥的时间待开发。</p><p>Snapchat 做的眼镜是为开发AR滤镜的人用的。Google 今年推出一个用于翻译垂直领域的眼镜，感觉应该是上次 Google Glass 没做成，吃一亏长一智，这次打算先精准定位下翻译这个市场。</p><p>开发者最关心的应该是如果 Apple 眼镜时代到来了，需要做哪些准备，储备什么技术。</p><p>我认为学好 ARKit 和 SwiftUI 是最有用的。还有这次 Ask Apple 活动里的那些技术主题，应该也是个信号，可以着重学习。</p><p>偏硬件的主题有<a href="https://developer.apple.com/documentation/arkit/">增强现实</a>、<a href="https://developer.apple.com/documentation/roomplan/">RoomPlan</a>、照片与相机、<a href="https://developer.apple.com/documentation/metrickit/improving_your_app_s_performance">能耗与性能</a>。偏界面交互的主题有设计、<a href="https://developer.apple.com/documentation/SwiftUI">SwiftUI</a>、<a href="https://developer.apple.com/documentation/WeatherKit">WeatherKit</a>、<a href="https://developer.apple.com/documentation/activitykit/displaying-live-data-with-live-activities">Live Activities</a>、<a href="https://developer.apple.com/documentation/visionkit/enabling_live_text_interactions_with_images">Live Text</a>、<a href="https://developer.apple.com/machine-learning/create-ml/">机器学习</a>、隐私、Focus 等。</p><p>Apple 眼镜时代带来了更多机会。下面是我比较感兴趣的会带来的变化。</p><p>首先是数字收藏品，这对于数字艺术创作者来说有了更多机会。数字雕塑、模型、挂画和时钟等会更多的出现在房间、办公室甚至室外。</p><p>对艺术创作者体验来说，可能更接近以前雕塑家和壁画画家，只是减少了现场的清理工作，失误了也不用重头再来，简单的做个撤回就好了。因此创作者可以更好地专注在创作本身。</p><p>绘画素材的收集，以前可能更多的是速写或者拍照，现在用眼镜就能很方便的把整个环境都扫描下来，回到工作室可以慢慢的在各个角度来观察素材。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周，我参加了少数派和 SwiftGG 举办的《和我们一起畅想 Apple 的 AR 与 VR》直播活动，这里是&lt;a href=&quot;https://weibo.com/1914010467/MbvfZp6Fj&quot;&gt;视频回放&lt;/a&gt;。其中聊了些参加 Ask Apple 活动的一些
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>使用 LLVM 分享的幻灯片</title>
    <link href="http://ming1016.github.io/2022/07/08/slides-of-use-llvm/"/>
    <id>http://ming1016.github.io/2022/07/08/slides-of-use-llvm/</id>
    <published>2022-07-08T05:01:21.000Z</published>
    <updated>2023-04-24T04:33:14.377Z</updated>
    
    <content type="html"><![CDATA[<p>我在快手中学出品，T沙龙主办的活动做了场直播分享。录播地址 <a href="https://www.bilibili.com/video/BV18T411g7HC">T Chat ｜ 戴铭：我在快手做移动端 Part 1：使用 LLVM</a>、<a href="https://www.bilibili.com/video/BV1Sf4y1d7W2">T Chat ｜ 戴铭：我在快手做移动端 Part 2：戴老师的斜杠人生</a></p><p>讲的内容我先前在清华大学和美团讲过。清华大学王继良教授给他的本科生开了门移动开发的课程，并邀请我给他们讲了一堂课。记得在18年 @Swift 大会我分享完了，现场有人开玩笑说要是以前大学老师能这么讲编译就好了，没想到我还实现了一次这个玩笑。</p><p>美团是他们 TC 委员会邀请的。当天<a href="https://dianqk.blog/">小青</a>还到了现场，完后他还给我推荐了<a href="https://www.bilibili.com/video/BV1b7411K7P4?vd_source=3f850052f68097e13e2f13e9353f3d1c">南京大学《软件分析》课程</a>，因为他觉得这门课是静态分析最好的入门课程，他说静态分析有个重要的点 sound&#x2F;soundness，要保证分析的结果是可靠的&#x2F;safe 的，我们说代码都不能删是无用结论，说都能删是错误结论。在这个过程寻找最合适的答案，不过考虑到运行的时候，那就是理论上 unsound 了（毕竟输入的参数不能证明是完整的）。小青说这个和我在分享开头说的差不多（那天时间比较充裕，我说的稍多了些）。小青最近也写了篇《<a href="https://dianqk.blog/2022/07/17/tai-e/">超棒的课程推荐：南大《软件分析》（附我的完整学习路线）</a>》，可以观摩学习学习。</p><p>这次 Apple 教育团队负责人还拉了高校同学来看，快手客户端校招简历投递信箱是 <a href="mailto:&#x63;&#117;&#x69;&#106;&#105;&#x61;&#48;&#51;&#64;&#107;&#117;&#97;&#x69;&#115;&#104;&#111;&#x75;&#46;&#x63;&#x6f;&#109;">&#x63;&#117;&#x69;&#106;&#105;&#x61;&#48;&#51;&#64;&#107;&#117;&#97;&#x69;&#115;&#104;&#111;&#x75;&#46;&#x63;&#x6f;&#109;</a> 。下面是这次分享内容的幻灯片：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/01.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/01.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/02.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/02.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/03.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/03.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/04.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/04.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/05.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/05.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/06.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/06.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/07.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/07.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/08.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/08.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/09.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/09.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/10.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/10.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/11.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/11.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/12.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/12.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/13.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/13.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/14.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/14.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/15.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/15.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/16.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/16.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/17.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/17.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/18.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/18.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/19.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/19.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/20.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/20.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/21.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/21.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/22.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/22.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/23.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/23.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/24.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/24.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/25.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/25.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/26.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/26.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/slides-of-use-llvm/27.png" class="lozad post-image"src="/uploads/slides-of-use-llvm/27.png"></p><p>幻灯片原图我也上传了网盘，链接: <a href="https://pan.baidu.com/s/1Bip4mK5_B4cofnCAj7gpwg?pwd=4s7m">https://pan.baidu.com/s/1Bip4mK5_B4cofnCAj7gpwg?pwd&#x3D;4s7m</a> 提取码: 4s7m</p><p>示例代码可参看文章<a href="https://ming1016.github.io/2022/06/10/use-llvm/">《使用 LLVM》</a></p><p>昨天有个推荐资料的问题，我还有个要补充下，每年老司机技术周刊在小专栏出品的 WWDC 内参，尤其是今年<a href="https://xiaozhuanlan.com/wwdc22">《WWDC22 内参》</a> ，用浙剑跟我说的“今年我们做的很用心，每篇文章都保证了至少两个审核来保证质量。一个审核从专业性角度看内容是否正确，另外一位审核从读者视角看只是是否正确引导。目前发布的每一篇都质量非常高，大部分内容都已经超越视频原本的内容了。”</p><p>买买买吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我在快手中学出品，T沙龙主办的活动做了场直播分享。录播地址 &lt;a href=&quot;https://www.bilibili.com/video/BV18T411g7HC&quot;&gt;T Chat ｜ 戴铭：我在快手做移动端 Part 1：使用 LLVM&lt;/a&gt;、&lt;a href=&quot;http
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="LLVM" scheme="http://ming1016.github.io/tags/LLVM/"/>
    
      <category term="Slides" scheme="http://ming1016.github.io/tags/Slides/"/>
    
  </entry>
  
  <entry>
    <title>使用 LLVM</title>
    <link href="http://ming1016.github.io/2022/06/10/use-llvm/"/>
    <id>http://ming1016.github.io/2022/06/10/use-llvm/</id>
    <published>2022-06-10T09:04:31.000Z</published>
    <updated>2023-04-24T04:33:14.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇还会持续更新，增加更多用 llvm 干的事情，直到本句话被删掉为止。欢迎关注本篇。</p><p>目前在做一些编译相关调研。先前写过篇《<a href="https://ming1016.github.io/2017/03/01/deeply-analyse-llvm/">深入剖析 iOS 编译 Clang &#x2F; LLVM</a>》和《<a href="https://ming1016.github.io/2017/04/01/slides-of-deeply-analyse-llvm/">深入剖析 iOS 编译 Clang &#x2F; LLVM 直播的 Slides</a>》，内容偏理论。本篇着重对 LLVM 的使用，理论内容会很少，主要是说下如何使用 llvm 来做些事情，会有详细的操作步骤和工程示例。本文对应的幻灯片见 《<a href="https://ming1016.github.io/2022/07/08/slides-of-use-llvm/">使用 LLVM 分享的幻灯片</a>》。</p><h2 id="代码新陈代谢"><a href="#代码新陈代谢" class="headerlink" title="代码新陈代谢"></a>代码新陈代谢</h2><p>昨天看了昨天和今天 WWDC22 的 session，看到了苹果为包体积也做了很多工作，甚至不惜改 C ABI的 call convention 来达到此目的。</p><p>我很早前就做过一个方案，可以说是一个更好处理代码新陈代谢的方案，那就先说下这个。</p><h3 id="方案总体介绍"><a href="#方案总体介绍" class="headerlink" title="方案总体介绍"></a>方案总体介绍</h3><p>静态检查无法分析真实使用场景里代码是不是真的用了，或用的是否多。</p><p>动态检查来说，以前检查的方式有通过埋点查看相应代码是否有用到，还可以通过类的 isInitialized 方法来统计类是否被用到。第一个方案成本高，第二个方案范围太大，如果类都很大，那么检查结果的意义就没了。因此，需要一个能够动态检查函数和代码块级别是否使用的方法。</p><h4 id="一些现有方案和其不可用的地方"><a href="#一些现有方案和其不可用的地方" class="headerlink" title="一些现有方案和其不可用的地方"></a>一些现有方案和其不可用的地方</h4><p>下面列两个已有可检查比类更小粒度的方案。</p><h5 id="gcov"><a href="#gcov" class="headerlink" title="gcov"></a>gcov</h5><p>clang 使用 -fprofile-instr-generate -fcoverage-mapping ，swiftc 使用 -profile-generate -profile-coverage-mapping 生成 .profraw 文件。llvm-profdata merge 转成 .profdata。编译时每个文件会用 <a href="https://github.com/llvm/llvm-project/blob/main/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp">GCOVProfiling</a> 生成 .gcno 包含计数和源码的映射关系，运行时用的是 <a href="https://github.com/llvm/llvm-project/blob/main/compiler-rt/lib/profile/GCDAProfiling.c">GCDAProfiling</a> 处理回调记录运行时执行了哪些代码。最后 llvm-cov 转成报告，生成工具是 <a href="http://www.opensource.apple.com/source/gcc/gcc-5484/gcc/gcov.c">gcov</a>，生成的报告可以看到哪些代码有用到，哪些没有用。</p><p>gcov 对于线下测试够用，但无法放到线上使用。</p><h5 id="SanitizerCoverage-插桩回调函数"><a href="#SanitizerCoverage-插桩回调函数" class="headerlink" title="SanitizerCoverage 插桩回调函数"></a>SanitizerCoverage 插桩回调函数</h5><p>SanitizerCoverage 是 libfuzzer 使用的代码覆盖技术，使用 <code>-fsanitize-coverage=trace-pc-guard</code> 这个编译 flag 插入不同级别的桩，会在程序控制流图的每条边插入<code>__sanitizer_cov_trace_pc_guard</code>。</p><p>如果只对函数插桩，使用 <code>-fsanitize-coverage=func</code>,<code>trace-pc-guard</code>，只对基本块用 <code>-fsanite-coverage=bb</code>,<code>no-prune</code>,<code>trace-pc-guard</code>。swift 使用 <code>-sanitize-coverage=func</code> 和 <code>-sanitize=undefined</code> 编译 flags。</p><p>在回调函数 <code>__sanitizer_cov_trace_pc_guard_init</code> 和 <code>__sanitizer_cov_trace_pc_guard</code> 里实现自己要干的事情，比如对当前插桩地址符号化，运行后就可以得到运行时调用了哪些方法。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/use-llvm/01.png" class="lozad post-image"src="/uploads/use-llvm/01.png"></p><p>使用 SanitizerCoverage 插桩，一个是编译会很慢，另一个是插入范围难控制，上线后各方面影响不可控。SanitizerCoverage 本是用于 fuzzing 测试的一个 llvm pass，因此可以了解 SanitizerCoverage 使用的技术，自建一个专门用于代码新陈代谢的 pass 用来解决 SanitizerCoverage 和 gcov 不好用的问题。</p><h4 id="自制可插入指令的-Pass"><a href="#自制可插入指令的-Pass" class="headerlink" title="自制可插入指令的 Pass"></a>自制可插入指令的 Pass</h4><p>之所以在编译中间层插入指令而不在编译 frontend 插入代码的原因是，这样做的话能用类似 llvm-mctoll 二进制转中间层 IR 代码的方式，可对第三方这样没有 frontend 源码而只有生成的二进制产物的库进行分析。</p><p>在函数中插入执行指令执行自定功能的方法是，用 IRBuilder 使用 SetInsertPoint 设置位置，CreateCall 插入指令，插入在块的初始位置，用的是 <code>dyn_cast&lt;BinaryOperator&gt;(&amp;I)</code> 。CreateCall 调用 LLVMContextFunctionCallee 来自 <code>F.getParent()-&gt;getOrInsertFunction</code>，其第一个参数就是要执行我们自定义函数的函数名，第二个参数 FunctionType 是通过 <code>paramTypes</code> 和 <code>Type::getVoidTy</code> 根据 LLVMContext 而来。 使用编译属性可以指定要控制的函数，pass 可用 getGlobalVariable 取到 <code>llvm.global.annotations</code> ，也就是所有编译属性。 </p><p><code>F.getName().front()</code> 为 <code>\x01</code> 表示的是 OC 方法，去掉这个前缀可得到方法名，<code>.contains(&quot;_block&quot;)</code> 是闭包函数。<code>F.getName().startswith(&quot;_Z&quot;)</code> 是 C++ 函数（<code>_Z</code>、<code>__Z</code>、<code>___Z</code> 都是）。使用 <code>F.getName()</code> 判读读取一个映射表进行对比，也可以达到通过编译属性设置控制指定函数的效果。映射表里设置需要线上验证的函数集合。然后，处理函数和块计数与源码的映射关系，编译加入处理自制 pass 记录运行时代码执行情况的回调。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>pass 代码编译生成 dylib 后，在 Xcode 中使用需要替换 clang 为编译 pass 的 clang，编译 pass 的版本也要对应上。在 xconfig 中设置构建命令选项 OTHER_CFLAGS OTHER_CPLUSPLUSFLAGS 是 -Xclang -load -Xclang $pass，CC CXX 设置为替换的 clang。调试是用的 opt，可换成 opt scheme，在 Edit Scheme 里设置 opt 的启动参数。</p><p>llvm 14 后只能使用 new pm，legcy pm(pass manager) 通过 Xlang 给 clang 传参，而 new pm 不行，new pm 的 pass 让 clang 加载，一种方法是使用 -fpass-plugin，另一种是把 pass 加到 clang 的 pipeline 里，重新构建对应版本的 clang。具体来说就是 PassBuilder 的回调 registerPipelineStartEPCallback 允许 ModulePassManager 使用 addPass 添加我们的 pass。</p><p>方案是这样，接下来的内容是偏实际的一些操作，你也可以跟着实践下，毕竟本篇是说怎么使用 LLVM 嘛。</p><p>先看看 gcov 的用法。</p><h3 id="生成代码覆盖率报告"><a href="#生成代码覆盖率报告" class="headerlink" title="生成代码覆盖率报告"></a>生成代码覆盖率报告</h3><p>命令行中开启代码覆盖率的编译选项，参看官方指南：<a href="https://clang.llvm.org/docs/SourceBasedCodeCoverage.html">Source-based Code Coverage</a> 。</p><p>通过一个例子实践下。</p><p>建个 C 代码文件 main.m ：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hi there!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加上代码覆盖率的编译参数进行编译。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun clang -fprofile-instr-generate -fcoverage-mapping main.m -o mainCoverage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行生成的 mainCoverage 会生成 default.profraw 文件，自定义文件名使用 LLVM_PROFILE_FILE&#x3D;”my.profraw” .&#x2F;mainCoverage 命令。</p><p>对于 Swift 文件也没有问题，建一个 swift 文件 hi.swift </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function-definition function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function-definition function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">func</span> <span class="token function-definition function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 swiftc 来编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">swiftc -profile-generate -profile-coverage-mapping hi.swift<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从上面 clang 和 swiftc 的命令可以看出，clang 使用的是 -fprofile-instr-generate 和 -fcoverage-mapping 编译 flags，swiftc 使用的是 -profile-generate 和 -profile-coverage-mapping 编译 flags。</p><p>编译出的可执行文件 mainCoverage 和 hi 都会多出</p><p>生成代码覆盖率前建立索引，也就是生成 .profdata 文件。通过 xcrun 调用 llvm-prodata 命令。命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun llvm-profdata merge -sparse my.profraw -o my.profdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>合并多个 .profdata 文件使用下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">llvm-profdata merge one.profdata two.profdata -output all.profdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <a href="https://llvm.org/docs/CommandGuide/llvm-cov.html">llvm-cov</a> 命令生成行的报告</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun llvm-cov show ./mainCoverage -instr-profile<span class="token operator">=</span>my.profdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token number">1</span><span class="token operator">|</span>       <span class="token operator">|</span><span class="token comment">#include &lt;stdio.h></span> <span class="token number">2</span><span class="token operator">|</span>       <span class="token operator">|</span> <span class="token number">3</span><span class="token operator">|</span>       <span class="token operator">|</span>int main<span class="token punctuation">(</span>int argc, char *argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token number">4</span><span class="token operator">|</span>      <span class="token number">1</span><span class="token operator">|</span><span class="token punctuation">&#123;</span> <span class="token number">5</span><span class="token operator">|</span>      <span class="token number">1</span><span class="token operator">|</span>    printf<span class="token punctuation">(</span><span class="token string">"hi there!<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">6</span><span class="token operator">|</span>      <span class="token number">1</span><span class="token operator">|</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">7</span><span class="token operator">|</span>      <span class="token number">1</span><span class="token operator">|</span><span class="token punctuation">&#125;</span> <span class="token number">8</span><span class="token operator">|</span>       <span class="token operator">|</span> <span class="token number">9</span><span class="token operator">|</span>      <span class="token number">0</span><span class="token operator">|</span>void <span class="token function-name function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token operator">|</span>      <span class="token number">0</span><span class="token operator">|</span>  <span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token number">11</span><span class="token operator">|</span>      <span class="token number">0</span><span class="token operator">|</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的输出可以看到，9到11行是没有执行的。</p><p>从文件层面看覆盖率，可以通过下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun llvm-cov report ./mainCoverage -instr-profile<span class="token operator">=</span>my.profdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出的报告如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Filename                                  Regions    Missed Regions     Cover   Functions  Missed Functions  Executed       Lines      Missed Lines     Cover    Branches   Missed Branches     Cover-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------/Users/mingdai/Downloads/PTest/main.m           <span class="token number">2</span>                 <span class="token number">1</span>    <span class="token number">50.00</span>%           <span class="token number">2</span>                 <span class="token number">1</span>    <span class="token number">50.00</span>%           <span class="token number">7</span>                 <span class="token number">3</span>    <span class="token number">57.14</span>%           <span class="token number">0</span>                 <span class="token number">0</span>         ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------TOTAL                                           <span class="token number">2</span>                 <span class="token number">1</span>    <span class="token number">50.00</span>%           <span class="token number">2</span>                 <span class="token number">1</span>    <span class="token number">50.00</span>%           <span class="token number">7</span>                 <span class="token number">3</span>    <span class="token number">57.14</span>%           <span class="token number">0</span>                 <span class="token number">0</span>         -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 JSON 的命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun llvm-cov <span class="token builtin class-name">export</span> -format<span class="token operator">=</span>text ./mainCoverage -instr-profile<span class="token operator">=</span>my.profdata <span class="token operator">></span> my.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从生成的 json 文件可以看到这个生成的报告有5个统计项，分别是函数、实例化、行、区域和分支。</p><p>更多报告生成选型参看 <a href="https://llvm.org/docs/CommandGuide/llvm-cov.html">llvm-cov 官方说明</a> 。</p><h3 id="Xcode-配置生成代码覆盖率报告"><a href="#Xcode-配置生成代码覆盖率报告" class="headerlink" title="Xcode 配置生成代码覆盖率报告"></a>Xcode 配置生成代码覆盖率报告</h3><p>在 Xcode 里开启代码覆盖率，先选择”Edit Scheme…”，再在 Test 中的 Options 里勾上 Gather coverage for all targets 或 some targets。如下图<br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/use-llvm/02.png" class="lozad post-image"src="/uploads/use-llvm/02.png"></p><p>在 Build Setting 中进行设置，添加 -profile-generate 和 -profile-coverage-mapping 编译 flags。<br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/use-llvm/03.png" class="lozad post-image"src="/uploads/use-llvm/03.png"></p><p>调用 llvm profile 的 c 函数生成 .profraw 文件。代码见：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - 代码覆盖率</span><span class="token keyword">func</span> <span class="token function-definition function">codeCoverageProfrawDump</span><span class="token punctuation">(</span>fileName<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"cc"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">fileName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.profraw"</span></span>    <span class="token keyword">let</span> fileManager <span class="token operator">=</span> <span class="token class-name">FileManager</span><span class="token punctuation">.</span><span class="token keyword">default</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> documentDirectory <span class="token operator">=</span> <span class="token keyword">try</span> fileManager<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>documentDirectory<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>userDomainMask<span class="token punctuation">,</span> appropriateFor<span class="token punctuation">:</span><span class="token nil constant">nil</span><span class="token punctuation">,</span> create<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> filePath<span class="token punctuation">:</span> <span class="token class-name">NSString</span> <span class="token operator">=</span> documentDirectory<span class="token punctuation">.</span><span class="token function">appendingPathComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>path <span class="token keyword">as</span> <span class="token class-name">NSString</span>        <span class="token function">__llvm_profile_set_filename</span><span class="token punctuation">(</span>filePath<span class="token punctuation">.</span>utf8String<span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span>"<span class="token class-name">File</span> at<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span>cString<span class="token punctuation">:</span> <span class="token function">__llvm_profile_get_filename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>"<span class="token punctuation">)</span>        <span class="token function">__llvm_profile_write_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>codeCoverageProfrawDump 函数放到 applicationWillTerminate 里执行，就可以生成在本次操作完后的代码覆盖率。</p><p>通过 llvm-cov report 命令将 .profraw 和生成的 Mach-O 文件关联输出代码覆盖率的报告，完整实现和调试看，参看 <a href="https://github.com/ming1016/DaiMingCreationToolbox/tree/main/Project/SwiftPamphletApp">DaiMingCreationToolbox</a> 里的 FundationFunction.swift 和 SwiftPamphletAppApp.swift 文件。</p><h3 id="Fuzzing-介绍"><a href="#Fuzzing-介绍" class="headerlink" title="Fuzzing 介绍"></a>Fuzzing 介绍</h3><p>另外，llvm 还提供另一种覆盖率输出，编译参数是 -fprofile-arcs -ftest-coverage 和链接参数 -lgcov，运行程序后会生成 .gcda 和 .gcno 文件，使用 lcov 或 gcovr 就可以生成一个 html 来查看覆盖率。</p><p>之所以能够输出代码覆盖率，主要是 llvm 在编译期间给函数、基本块（IDA 中以指令跳转当分界线的每块代码）和边界（较基本块多了执行边界信息）插了桩。插桩的函数也有回调，如果想使用插桩函数的回调，有源码可以使用 SanitizerCoverage， 官方说明见：<a href="https://clang.llvm.org/docs/SanitizerCoverage.html">SanitizerCoverage</a>。</p><p>SanitizerCoverage 用的是 ModulePass，是 llvm 提供的 ModulePass、CallGraphSCCPass、FunctionPass、LoopPass、RegionPass 这几个插桩 pass 中的一种。SanitizerCoverage 还应用在 llvm 的 Fuzz 生成器 <a href="https://llvm.org/docs/LibFuzzer.html">libfuzzer</a> 上，libfuzzer 可以从硬件和 IR 层面进行插桩获取程序的覆盖率。</p><p>Fuzzing 生成器的概念最早是威斯康星大学 Barton Miller 教授在<a href="https://pages.cs.wisc.edu/~bart/fuzz/CS736-Projects-f1988.pdf">他的课</a>上提出的，后应用于安全测试领域，比如 <a href="https://rd.springer.com/content/pdf/10.1007%2F978-0-387-35413-2_16.pdf">PROTOS 测试集项目</a>、网络协议安全测试 SPIKE、最普遍应用的文件 Fuzzing 技术 Peach、语法模板 <a href="https://github.com/MozillaSecurity/funfuzz">funfuzz</a> 和 Dom fuzz 的 <a href="https://github.com/googleprojectzero/domato">Domato</a>、分析 llvm IR 符号执行平台 <a href="http://klee.github.io/">Klee</a>、源码插桩和 QEMU 模式实现代码覆盖 fuzzing 的 AFL 和刚才我提到的 llvm 自带基于 SanitizerCoverage 的 libfuzzer、挖掘系统内核漏洞的系统函数调用模板 Fuzzing 库 syzkaller 和基于 libfuzzer 和 protobuf 做的 <a href="https://github.com/google/libprotobuf-mutator">libprotobuf-mutator</a>、组合了 libFuzzer，<a href="https://github.com/AFLplusplus/AFLplusplus">AFL++</a> 和 <a href="https://github.com/google/honggfuzz">Honggfuzz</a> 还有 ClusterFuzz 的平台 <a href="https://github.com/google/oss-fuzz">OSS-Fuzz</a>。</p><p>其中 Spike 是网络协议开源 Fuzzing 工具，由 Dave Aitel 编写的，Dave Aitel 是《the Hacker’s Handbook》（《黑客防范手册》）和《the Shellcoder’s Handbook》（《黑客攻防技术宝典：系统实战篇》）的作者。网络协议分析工具主要是 WireShark 和应用层的 SockMon（特定进程、协议、IP、函数抓包），和 IDA、OD 等工具结合找到软件执行的网络命令分析数据包的处理过程。Spike 可以对数据发包收包，还可以构造数据包自动化做覆盖更大的测试。</p><p>QEMU 是 2003 年 Fabrice Bellard 做的虚拟机，包含很多架构和硬件设备的模拟执行，原理是 qemu TCG 模块把机器代码转成 llvm IR，这个过程叫做反编译，关于反编译可以参考这篇论文《<a href="https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_andriesse.pdf">An In-Depth Analysis of Disassembly on Full-Scale x86&#x2F;x64 Binaries</a>》。之所以可以做到反编译是因为机器指令和汇编指令是一一对应的，可以先将机器指令翻译成机器对应的汇编，IR 实际上就是一个不遵循硬件设计的指令集，和硬件相关的汇编会按照 IR 的设计翻译成机器无关的 IR 指令。这样做的好处就是无论是哪个机器上的可执行二进制文件都能够统一成一份标准的指令表示。IR 也可以设计成 DSL，比如 <a href="https://github.com/NationalSecurityAgency/ghidra">Ghidra</a> 的 Sleigh 语言。</p><p>反编译后，再将得到的 IR 转成目标硬件设备可执行机器语言，IDA Pro 也是用的这个原理，IDA 的 IR 叫 microcode，IDA 的插件 <a href="https://github.com/patois/genmc">genmc</a> 专门用来显示 microcode，<a href="https://github.com/RolfRolles/HexRaysDeob">HexRaysDeob</a> 是利用 microcode 来做混淆的库。</p><p>qemu 做的是没有源码的二进制程序的分析，是一个完整的虚拟机工具，其中只有 tcg 模块的一部分功能就可以实现模拟 CPU 执行，执行过程中插入分析的代码就能够方便的访问寄存器，对地址或指令 hook，实现这些功能的库是 <a href="https://github.com/unicorn-engine/unicorn">Unicorn</a>，还有功能更多些的 <a href="https://github.com/qilingframework/qiling">Qiling</a>。Qiling 和 Unicorn 不同的是 Unicorn 只完成了 CPU 指令的仿真，而 Qiling 可以处理更高层次的动态库、系统调用、I&#x2F;O 处理或 Mach-O 加载等，Qiling 还可以通过 Python 开发自己动态分析工具，运行时进行 hotpatch，支持 macOS。基于 qemu 还有可以访问执行的所有代码和数据做回放程序执行过程的 <a href="https://github.com/panda-re/panda">PANDA</a>、虚拟地址消毒剂 <a href="https://github.com/andreafioraldi/qasan">QASan</a>、组合 Klee 和 qemu 的 <a href="https://s2e.systems/">S2E</a>。</p><p>能够使用 js 来开发免编译功能的 <a href="https://frida.re/">Frida</a> 也可以用于 Fuzzing，在 iOS 平台上的 Fuzzing 参看<a href="https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-1.html">1</a>、<a href="https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-2.html">2</a>、<a href="https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-3.html">3</a>，使用工具见 <a href="https://github.com/googleprojectzero/iOS-messaging-tools/tree/master/iMessage">iOS-messaging-tools</a>。</p><p>更多 Fuzzing 资料可以参看 GitHub 上一份整理好的 <a href="https://github.com/secfigo/Awesome-Fuzzing">Awesome-Fuzzing</a>。</p><p>可见 Fuzzing 生成器应用范围非常广，除了获取代码覆盖率，还能够进行网络安全分析和安全漏洞分析。本文主要是基于源码插桩，源码插桩库主要是 libfuzzer、AFL++、honggfuzz、riufuzz（honggfuzz 二次开发）。</p><p>AFL++ 在有源码情况下原理和 libfuzzer 差不多，只是底层不是用的 SanitizerCoverage，而是自实现的一个 pass，没有源码时 AFL++ 用的就是 qemu 中 TCG 模块的代码，在反编译为 IR 时进行插桩。更多 AFL++ 应用参见《<a href="https://github.com/google/fuzzing/blob/master/docs/afl-based-fuzzers-overview.md">What is AFL and What is it Good for?</a>》</p><p>Fuzzing 除了代码覆盖率，还需要又能够创建更多输出条件，记录执行路径，目标和方向是找出程序运行时在什么输入条件和路径下会有问题。但仅是检测哪些代码有用到，实际上只要用上 Fuzzing 的代码覆盖率就可以了。</p><h3 id="SanitizerCoverage-插桩回调函数-1"><a href="#SanitizerCoverage-插桩回调函数-1" class="headerlink" title="SanitizerCoverage 插桩回调函数"></a>SanitizerCoverage 插桩回调函数</h3><p>那接下来实践下 libfuzzer 中实现代码覆盖率的 SanitizerCoverage 技术。</p><p>命令行执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcrun clang -fembed-bitcode main.m -save-temps -v -fsanitize-coverage<span class="token operator">=</span>trace-pc-guard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 -fsanitize-coverage&#x3D;trace-pc-guard 这个编译 flag 插入不同级别的桩，会在程序控制流图的每条边插入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">__sanitizer_cov_trace_pc_guard<span class="token punctuation">(</span><span class="token operator">&amp;</span>guard_variable<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只对函数插桩，使用 <code>-fsanitize-coverage=func</code>,<code>trace-pc-guard</code>，只对基本块用 <code>-fsanite-coverage=bb</code>,<code>no-prune</code>,<code>trace-pc-guard</code>。swift 使用 <code>-sanitize-coverage=func</code> 和 <code>-sanitize=undefined</code> 编译 flags。</p><p>使用插桩函数回调，先在 Xcode 的 Other C Flags 里添加 <code>-fsanitize-coverage=trace-pc-guard</code>。swift 就是在 Other Swift Flags 里添加 <code>-sanitize-coverage=func</code> 和 <code>-sanitize=undefined</code> 。</p><p>在回调函数里实现自己要干的事情，比如对当前插桩地址符号化，代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>dlfcn<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token keyword">void</span> <span class="token function">__sanitizer_cov_trace_pc_guard_init</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>start<span class="token punctuation">,</span>           <span class="token class-name">uint32_t</span> <span class="token operator">*</span>stop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">uint64_t</span> N<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> stop <span class="token operator">||</span> <span class="token operator">*</span>start<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"INIT: %p %p\n"</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>x <span class="token operator">=</span> start<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> stop<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">,</span><span class="token operator">*</span>x <span class="token operator">=</span> <span class="token operator">++</span>N<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">__sanitizer_cov_trace_pc_guard</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>guard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>guard<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>PC <span class="token operator">=</span> <span class="token function">__builtin_return_address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Dl_info info<span class="token punctuation">;</span>    <span class="token function">dladdr</span><span class="token punctuation">(</span>PC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"调用了方法: %s \n"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>dli_sname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后就可以得到运行时调用了哪些方法。</p><p>有了这些数据就可以统计哪些方法调用了，调用了多少次。通过和全源码对比，取差集能够找到运行中没有执行的方法和代码块。其实利用 Fuzzing 的概念还可以做很多分析的工作，全面数据化观测代码执行情况。可以到我的 <a href="https://github.com/ming1016/GCDFetchFeed">GCDFetchFeed</a> 工程中，打开 AppDelegate.m 里的两个插桩回调方法的注释来试用。</p><p>停止试用插桩，可以用 <code>__attribute__((no_sanitize(&quot;coverage&quot;)))</code> 编译属性。或者通过黑名单或白名单，分别是 <code>-fsanitize-coverage-ignorelist=blocklist.txt</code> 和 <code>-fsanitize-coverage-allowlist=allowlist.txt</code>，范围可以试文件夹、单个文件或者单个方法。</p><p>allowlist.txt 示例：</p><pre class="line-numbers language-none"><code class="language-none"># 允许文件夹里所有文件src:bar&#x2F;*# 特定源文件src:foo&#x2F;a.cpp# 允许文件中所有函数fun:*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>blocklist.txt 示例：</p><pre class="line-numbers language-none"><code class="language-none"># 禁用特定源文件src:bar&#x2F;b.cpp# 禁用特定函数fun:*myFunc*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上线前检查出的没有用到的代码，并不表示上线后用户不会用到，比如 AB 实验、用户特殊设置、不常见 Case 等。这就可以利用 allowlist.txt 将部分不确定的代码放到线上去检测，或者通过自动插入埋点灰度检测，这些不确定的代码不是主链路的，因此检测影响范围会很低。</p><p>SanitizerCoverage 本身是一个 llvm pass，代码在 llvm 工程的 llvm-project&#x2F;llvm&#x2F;lib&#x2F;Transforms&#x2F;Instrumentation&#x2F;SanitizerCoverage.cpp 路径下，那么怎么实现一个自定义的 pass 呢？</p><p>先把 llvm 装到本地。</p><h3 id="安装-LLVM"><a href="#安装-LLVM" class="headerlink" title="安装 LLVM"></a>安装 LLVM</h3><h4 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h4><p>使用 homebrew，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> llvm@13<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>@13</code> 表示 llvm 的版本。安装后使用路径在是 <code>/usr/local/opt/llvm/</code>，比如 cmake 构建编译环境可以使用下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$LLVM_DIR</span><span class="token operator">=</span>/usr/local/opt/llvm/lib/cmake/llvm cmake <span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以用 Visual Studio Code 开发 pass，安装微软的 C&#x2F;C++ 的 extension，在 C&#x2F;C++ Configurations 里把 <code>/usr/local/opt/llvm/include/</code> 加入到包含路径中。</p><p>llvm 的更新使用 <code>brew upgrade llvm</code></p><p>llvm 也可以通过源码来安装，执行如下命令即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/llvm/llvm-project.git<span class="token builtin class-name">cd</span> llvm-project<span class="token function">git</span> checkout release/14.x<span class="token function">mkdir</span> build<span class="token builtin class-name">cd</span> buildcmake -DCMAKE_BUILD_TYPE<span class="token operator">=</span>Release -DLLVM_TARGETS_TO_BUILD<span class="token operator">=</span>host -DLLVM_ENABLE_PROJECTS<span class="token operator">=</span>clang <span class="token punctuation">..</span>/llvmcmake --build <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 cmake 参数 <code>-DLLVM_ENABLE_PROJECTS=clang</code> 表示也会构建 clang 工具。如果还要加上 lld 以在构建时能够用自己的 pass，可以直接加成 <code>-DLLVM_ENABLE_PROJECTS=&quot;clang;lld&quot;</code> 。</p><p>自定义安装目录的话，增加 <code>-DCMAKE_INSTALL_PREFIX=/home/user/custom-llvm</code> 。然后在设置路径 <code>export PATH=$PATH:/home/user/custom-llvm/bin</code> 。</p><p>-G 编译选项选择 Ninja 编译速度快。</p><p>各种设置整到一起：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake -G <span class="token string">"Ninja"</span> -DCMAKE_BUILD_TYPE<span class="token operator">=</span>Release -DLLVM_TARGETS_TO_BUILD<span class="token operator">=</span>host -DLLVM_ENABLE_PROJECTS<span class="token operator">=</span><span class="token string">"clang;lld"</span> -DCMAKE_INSTALL_PREFIX<span class="token operator">=</span>/Users/mingdai/Downloads/PTest/my-llvm-bin <span class="token punctuation">..</span>/llvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自制-Pass"><a href="#自制-Pass" class="headerlink" title="自制 Pass"></a>自制 Pass</h3><h4 id="Pass-介绍"><a href="#Pass-介绍" class="headerlink" title="Pass 介绍"></a>Pass 介绍</h4><p>llvm 属于 <a href="https://en.wikipedia.org/wiki/Multi-pass_compiler">multi-pass</a> 编译器，LLVM Pass 管理器是处理 pass 执行的注册和时序安排。曾有两个 pass 管理器，一个是 New Pass 管理器也叫 Pass 管理器，另一个是 Legacy Pass 管理器。New Pass 目前是默认的管理器，Legacy Pass 在 LLVM 14 中被废弃。Legacy 和 New 两个 pass 管理器在使用上最大的区别就是，Legacy 会注册一个新的命令选项，而 New Pass 只用定义一个 pass。另外 Legacy 需要实现 print 成员方法来打印，需要在通过 opt 通过传递 -analyze 命令行选项来运行，而 New Pass 管理器是不用的，只需要实现 printing pass。</p><p>总的来说<br>Legacy</p><ul><li>基于继承性</li><li>分析和打印 pass 之间没有区别</li><li>注册时加载所有需要的 pass</li><li>不变的 pass 执行调度</li><li>Transformation passes 定义了它们在执行前保证保留的内容</li></ul><p>Legacy 的 pass 类</p><ul><li><code>llvm::Pass</code><ul><li><code>llvm::ModulePass</code></li><li><code>llvm::FunctionPass</code></li><li><code>llvm::PassRegistry</code></li></ul></li></ul><p>New</p><ul><li>基于 CRTP、mixin 和 concept-model 的 idiom-based</li><li>在执行过程中，根据需要有条件的加载依赖的 pass（更快、更有效）</li><li>Transformation passes 在执行后返回它们所保留的内容</li></ul><p>New 的 pass 类</p><ul><li><code>llvm::PassInfoMixin&lt;DerivedT&gt;</code></li><li><code>llvm::AnalysisInfoMixin&lt;DerivedT&gt;</code></li><li><code>llvm::FunctionAnalysisManager</code><ul><li>别名类型 <code>llvm::AnalysisManager&lt;llvm::Function&gt;</code></li></ul></li><li><code>llvm::ModuleAnalysisManager</code><ul><li>别名类型 <code>llvm::AnalysisManager&lt;llvm::Module&gt;</code></li></ul></li><li><code>llvm::PreservedAnalysis</code></li></ul><p>LLVM Pass 可以对 LLVM IR 进行优化。优化表现在 Pass 可以对 IR 进行分析和转换，因此 Pass 主要也是分为分析（analysis）和转换（transform）两类。</p><p>分析里有数据流分析技术，分为以下三种：</p><ul><li>Reaching-Definition Analysis 到达定值分析</li><li>Live-Variable Analysis 活跃变量分析</li><li>Available-Expression Analysis 可用表达式分析</li></ul><p>一些常用的优化方法，比如删除计算结果不会使用的语句、删除归纳变量、删除公共子表达式、进入循环前就对不管循环多少次都是同样结果的表达式进行求值、快的操作替换慢操作、用可推导出值是常量的表达式来替代表达式等。</p><p>编写优化的几个方法。完整代码参看<a href="https://github.com/Kiprey/Skr_Learning/tree/master/week7-8/Assignment1-Introduction_to_LLVM">这里</a>。</p><p>插入新指令：</p><ul><li>直接通过类或命名的构造函数。</li><li>使用 llvm::IRBuilder&lt;&gt; 模板类。</li></ul><p>删除指令：</p><ul><li>llvm::Instruction::eraseFromParent() 成员函数</li></ul><p>替换存在指令：</p><ul><li>llvm::ReplaceInstWithInst() 函数<ul><li><code>#include &quot;llvm/Transforms/Utils/BasicBlockUtils.h&quot;</code></li></ul></li></ul><p>直接改指令</p><ul><li>llvm::User::setOperand() 成员函数</li></ul><p>Value ⇒ ConstantInt 类型转换：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Type _t;ConstantInt* val &#x3D; dyn_cast&lt;ConstantInt&gt;(_t);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取 ConstantInt 类的值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ConstantInt* const_int;uint64_t val &#x3D; const_int-&gt;getZExtValue();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>替换某个指令</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Instruction inst;&#x2F;&#x2F; 替换，只是替换了引用，并没删inst.replaceAllUsesWith(val);&#x2F;&#x2F; 删除if(inst-&gt;isSafeToRemove())    inst-&gt;eraseFromParent();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的 IR 代码</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; 执行前%12 &#x3D; load i32, i32* %2, align 4%13 &#x3D; add nsw i32 %12, 0store i32 %13, i32* %3, align 4; 只替换指令引用%12 &#x3D; load i32, i32* %2, align 4%13 &#x3D; add nsw i32 %12, 0          store i32 %12, i32* %3, align 4%12 &#x3D; load i32, i32* %2, align 4store i32 %12, i32* %3, align 4Instruction referencing instruction not embedded in a basic block!  %12 &#x3D; load i32, i32* %2, align 4  &lt;badref&gt; &#x3D; add nsw i32 %12, 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立新指令</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 取出第一个操作数Value* val &#x3D; inst.getOperand(0);&#x2F;&#x2F; 确定新指令的插入位置IRBuilder&lt;&gt; builder(&amp;inst);&#x2F;&#x2F; val &lt;&lt; 1Value* newInst &#x3D; builder.CreateShl(val, 1);&#x2F;&#x2F; 替换指令inst.replaceAllUsesWith(newInst);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Analysis pass 的 print pass 是基于一个 Transformation pass，会请求原始 pass 分析的结果，并打印这些结果。会注册一个命令行选项 <code>print&lt;analysis-pass-name&gt;</code>。</p><p>实现 pass 要选择是 Analysis 还是 Transformation，也就是要对进行输入 IR 的分析还是进行转换来决定采用哪种。选择 Transformation 通常继承 PassInfoMixin。Analysis 继承 AnalysisInfoMixin。</p><p>pass 生成的插件分为动态和静态的。静态插件不需要在运行时用 -load-pass-plugin 选项进行加载，但需要在 llvm 工程中设置 CMake 重新构建 opt。</p><p>做自己 pass 前可以先了解下 llvm 内部的 <a href="https://llvm.org/docs/Passes.html">pass</a> 示例，可以先从两个最基本的 <a href="https://github.com/llvm/llvm-project/blob/release/13.x/llvm/lib/Transforms/Hello">Hello</a> 和 <a href="https://github.com/llvm/llvm-project/tree/release/13.x/llvm/examples/Bye">Bye</a> 来。比较实用的是一些做优化的 pass，这些 pass 也是学习写 pass ，了解编译器如何工作的重要资源。许多 pass 都实现了编译器开发理论中著名的概念。比如优化 memcpy 调用（比如用 memset 替换）的 <a href="https://github.com/llvm/llvm-project/blob/release/14.x/llvm/lib/Transforms/Scalar/MemCpyOptimizer.cpp">memcpyopt</a> 、简化 CFG <a href="https://github.com/llvm/llvm-project/tree/release/13.x/llvm/examples/IRTransforms">IRTransforms</a>、总是内联用 alwaysinline 修饰的函数的 <a href="https://github.com/llvm/llvm-project/blob/release/14.x/llvm/lib/Transforms/IPO/AlwaysInliner.cpp">always-inline</a> 、死代码消除的 <a href="https://github.com/llvm/llvm-project/blob/release/14.x/llvm/lib/Transforms/Scalar/DCE.cpp">dce</a> 和删除未使用的循环的 <a href="https://github.com/llvm/llvm-project/blob/release/14.x/llvm/lib/Transforms/Scalar/LoopDeletion.cpp">loop-deletion</a>。</p><h4 id="Xcode-开发模式"><a href="#Xcode-开发模式" class="headerlink" title="Xcode 开发模式"></a>Xcode 开发模式</h4><p>在下好的 LLVM 源码中找到 <code>llvm/lib/Transforms</code> 目录，创建一个 MingPass 目录，在这个目录下创建 <code>MingPass.cpp</code> 和 <code>MingPass.exports</code> ，还有 cmake 文件 <code>CMakeLists.txt</code> ，<code>CMakeLists.txt</code> 内容写成：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">if<span class="token punctuation">(</span> NOT LLVM_REQUIRES_RTTI <span class="token punctuation">)</span>if<span class="token punctuation">(</span> NOT LLVM_REQUIRES_EH <span class="token punctuation">)</span>  set<span class="token punctuation">(</span>LLVM_EXPORTED_SYMBOL_FILE <span class="token variable">$</span><span class="token punctuation">&#123;</span>CMAKE_CURRENT_SOURCE_DIR<span class="token punctuation">&#125;</span>/MingPass.exports<span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>if<span class="token punctuation">(</span>WIN32 OR CYGWIN<span class="token punctuation">)</span>set<span class="token punctuation">(</span>LLVM_LINK_COMPONENTS Core Support<span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>set<span class="token punctuation">(</span>LLVM_LINK_COMPONENTS Demangle<span class="token punctuation">)</span>add_llvm_library<span class="token punctuation">(</span> LLVMMingPass MODULE BUILDTREE_ONLYMingPass.cppDEPENDSintrinsics_genPLUGIN_TOOLopt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>llvm/lib/Transforms/CMakelists.txt</code> 里加上 <code>add_subdirectory(MingPass)</code> 。<code>MingPass.cpp</code> 里编写实际的 pass 代码。</p><p>使用 <code>cmake -G &quot;Xcode&quot;</code> 构建 LLVM 工程，打开 <code>LLVM.xcodeproj</code> ，选择 MingPass 这个 target，使用 <code>command+b</code> 进行编译，会生成 <code>MingPass.dylib</code> 产物。</p><p>下载和 Xcode 对应 clang 版本。在工程中创建 <code>Config.xcconfig</code> 文件，内容如下：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">LLVM_DIR <span class="token operator">=</span> <span class="token variable">$HOME/Downloads/PTest/LLVMSource</span>PASS_DYLIB <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>LLVM_DIR<span class="token punctuation">)</span>/build_dir/build_xcode/Debug/lib/LLVMMingPass.dylibOTHER_CFLAGS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>inherited<span class="token punctuation">)</span> -Xclang -load -Xclang <span class="token variable">$</span><span class="token punctuation">(</span>PASS_DYLIB<span class="token punctuation">)</span>OTHER_CPLUSPLUSFLAGS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>inherited<span class="token punctuation">)</span> -Xclang -load -Xclang <span class="token variable">$</span><span class="token punctuation">(</span>PASS_DYLIB<span class="token punctuation">)</span>COMPILER_INDEX_STORE_ENABLE <span class="token operator">=</span> NOCC <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>LLVM_DIR<span class="token punctuation">)</span>/clang-13.0.0/bin/clangCXX <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>LLVM_DIR<span class="token punctuation">)</span>/clang-13.0.0/bin/clang++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自制插入指令-pass"><a href="#自制插入指令-pass" class="headerlink" title="自制插入指令 pass"></a>自制插入指令 pass</h4><p>接下来，怎么在运行时插入指令来获取我们需要代码使用情况。完整代码可以在这里 <a href="https://github.com/ming1016/DaiMingCreationToolbox/tree/main/Project/UseCompiler/MingPass">MingPass</a> 拉下代码参考进行修改调试。</p><p>个 pass 功能是在运行时环境直接在特定位置执行指定的函数。先写个要执行的函数，新建个文件 loglib.m，代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">runtimeLog</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"计算结果: %i\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再到 MingPass.cpp 中包含模块头文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"llvm/IR/Module.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会用到 Module::getOrInsertFunction 函数来给 loglib.m 的 runtimeLog 做声明。</p><p>更改 runOnFunction 函数，代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">virtual bool runOnFunction(Function &amp;F) &#123;    &#x2F;&#x2F; 从运行时库中获取函数    LLVMContext &amp;Context &#x3D; F.getContext();    std::vector&lt;Type*&gt; paramTypes &#x3D; &#123;Type::getInt32Ty(Context)&#125;;    Type *retType &#x3D; Type::getVoidTy(Context);    FunctionType *funcType &#x3D; FunctionType::get(retType, paramTypes, false);    FunctionCallee logFunc &#x3D; F.getParent()-&gt;getOrInsertFunction(&quot;runtimeLog&quot;, funcType);      for (auto &amp;BB : F) &#123;  for (auto &amp;I : BB) &#123;      if (auto *op &#x3D; dyn_cast&lt;BinaryOperator&gt;(&amp;I)) &#123;    IRBuilder&lt;&gt; builder(op);                  &#x2F;&#x2F; 在 op 后面加入新指令    builder.SetInsertPoint(&amp;BB, ++builder.GetInsertPoint());    &#x2F;&#x2F; 在函数中插入新指令    Value* args[] &#x3D; &#123;op&#125;;    builder.CreateCall(logFunc, args);    return true;      &#125; &#x2F;&#x2F; end if  &#125;    &#125;    return false;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 build 目录下 make 出 pass 的 so 后，链接 main.m 和 loglib.m 的产物成可执行文件，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang -c loglib.m/usr/local/opt/llvm/bin/clang -flegacy-pass-manager -Xclang -load -Xclang build/src/libMingPass.so -c main.mclang main.o loglib.o./a.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入数字4后，打印如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">4</span>计算结果: <span class="token number">6</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="更多自制-pass"><a href="#更多自制-pass" class="headerlink" title="更多自制 pass"></a>更多自制 pass</h4><p>可以在<a href="https://github.com/ming1016/DaiMingCreationToolbox/tree/main/Project/UseCompiler/LeanLLVMPass">这里</a>查看，代码里有详细注释。这里先留个白，后面再添加内容。</p><h4 id="IR"><a href="#IR" class="headerlink" title="IR"></a>IR</h4><p>你会发现开发 pass 需要更多的了解 IR，才可以更好的控制 LLVM 前端处理的高级语言。接下来我会说下那些高级语言的特性是怎么在 IR 里表现的。先介绍下 IR。</p><h5 id="IR-介绍"><a href="#IR-介绍" class="headerlink" title="IR 介绍"></a>IR 介绍</h5><p>LLVM IR(Intermediate Representation) 可以称为中间代码，是 LLVM 整个编译过程的中间表示。</p><p>llvm ir 的基础块里的指令是不可跳转到基础块的中间或尾部，只能从基础块的第一个指令进入基础块。</p><p>下面是 ir 的几个特点：</p><ul><li>llvm ir  不是机器代码而是生成机器代码之前的一种有些看起来像高级语言的，比如函数和强类型，有些看起来像低级程序集，比如分支和基本块。</li><li>llvm ir 是强类型。</li><li>llvm 没有 sign 和 unsign 整数区别。</li><li>全局符号用 @ 符号开头。</li><li>本地符号用 % 符号开头。</li><li>必须定义和声明所有符号。</li></ul><p>IR 指令</p><p><em>常用指令</em></p><ul><li>alloca：分配栈空间</li><li>load：从栈和全局内存读值</li><li>store：将值写到栈或全局内存</li><li>br：分支（条件或非条件）</li><li>call：调用函数</li><li>ret：从一个函数返回，可能会带上一个返回值</li><li>icmp&#x2F;fcmp：比较整型或浮点值</li><li>add&#x2F;sub&#x2F;mul：整数二进制算术运算</li><li>fadd&#x2F;fsub&#x2F;fmul：浮点二进制算术运算</li><li>sdiv&#x2F;udiv&#x2F;fdiv：有符号位整数&#x2F;无符号位整数&#x2F;浮点除法</li><li>shl&#x2F;shr：位向左&#x2F;向右</li><li>lshr&#x2F;ashr：逻辑&#x2F;算术右移</li><li>and&#x2F;or&#x2F;xor：位逻辑运算（没有 <code>not</code>！）</li></ul><p><em>常用特殊 ir 指令</em></p><ul><li>select：根据一个没有 IR 级别分支的条件选择一个值。</li><li>phi：根据当前基本块前身选择一个值。</li><li>getelementpointer：获取数组或结构体里子元素的地址（不是值）。官方说明[[<a href="https://llvm.org/docs/GetElementPtr.html][The">https://llvm.org/docs/GetElementPtr.html][The</a> Often Misunderstood GEP Instruction]]。</li><li>extractvalue：从一个数组或结构体中提取一个成员字段的值（不是地址）。</li><li>insertvalue：将一个值添加给数组或结构体的成员字段。</li></ul><p><em>ir 转换指令</em></p><ul><li>bitcast：将一个值转成给定类型而不改变它的位。</li><li>trunc&#x2F;fptrunc：将一个类型的整数&#x2F;浮点值截断为一个更小的整数&#x2F;浮点类型。</li><li>zext&#x2F;sext&#x2F;fpext：将一个值扩展到一个更大的整数&#x2F;浮点类型上。</li><li>fptoui&#x2F;fptosi：将一个浮点值转换为无符号&#x2F;有符号位的整数类型。</li><li>uitofp&#x2F;sitofp：将一个无符号&#x2F;有符号位整数值转换为浮点类型。</li><li>ptrtoint：将指针转成整数。</li><li>inttoptr：将整数值转成指针类型。</li></ul><p>ir 库的 header 地址在 <code>include/llvm/IR</code> ，源文件在 <code>lib/IR</code> ，文档 <a href="https://llvm.org/doxygen/namespacellvm.html">llvm Namespace Reference</a>。所有类和函数都在 llvm 命名空间里。</p><p>主要基础类的说明如下：</p><ul><li>llvm::Module：ir 的容器类的最高级。</li><li>llvm::Value：所有可作为其他值或指令操作数的基类。<ul><li>llvm::Constant<ul><li>llvm::ConstantDataArray (Constants.h)</li><li>llvm::ConstantInt (Constants.h)</li><li>llvm::ConstantFP (Constants.h)</li><li>llvm::ConstantStruct (Constants.h)</li><li>llvm::ConstantPointerNull (Constants.h)</li><li>llvm::Function</li><li>llvm::GlobalVariable</li></ul></li><li>llvm::BasicBlock</li><li>llvm::Instruction<ul><li>Useful X-macro header: Instruction.def</li><li>llvm::BinaryOperator (InstrTypes.h)<ul><li>add, sub, mul, sdiv, udiv, srem, urem</li><li>fadd, fsub, fmul, fdiv, frem</li><li>shl, lshr, ashr, and, or, xor</li></ul></li><li>llvm::CmpInst (InstrTypes.h)<ul><li>llvm::ICmpInst (Instructions.h)</li><li>llvm::FCmpInst (Instructions.h)</li></ul></li><li>llvm::UnaryInstruction (InstrTypes.h)<ul><li>llvm::CastInst (Instrtypes.h)</li></ul></li></ul></li><li>llvm::BitCastInst (Instructions.h)</li></ul></li><li>llvm::Type：代表所有的 IR 数据类型，包括原始类型，结构类型和函数类型。</li></ul><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p>下面 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> variable <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    variable <span class="token operator">=</span> variable <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> variable<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的 ir 代码如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@variable &#x3D; global i32 21define i32 @main() &#123;    %1 &#x3D; load i32, i32* @variable  ; load the global variable    %2 &#x3D; mul i32 %1, 2    store i32 %2, i32* @variable   ; store instruction to write to global variable    ret i32 %2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码，你可以看到全局变量是 @ 字符前缀，main 函数也是 @ 符号作为前缀，因此 main 函数也是 llvm 中的全局变量。llvm 将全局变量看成指针，因此访问全局变量时，必须用 load 指令显示取消对全局变量的引用，同样的，你要用 store 指令显示存储全局变量的值。</p><h5 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h5><p>本地变量有两种，一种是临时变量，也可以说是寄存器，另一种是堆栈分配的局部变量。</p><p>临时变量或寄存器是通过为变量引入一个新的符号来创建的：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%reg &#x3D; add i32 4, 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>堆栈分配的局部变量是通过在堆上分配变量来创建的。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%stack &#x3D; alloca i32<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>几乎每条指令都会返回一个值，该值通常分配给一个临时变量。由于 llvm ir 的 SSA 形式，临时变量只能分配一次。因此下面的代码就会出错：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%tmp &#x3D; add i32 4, 2%tmp &#x3D; add i32 4, 1  ; Error here<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为符合 SSA，一般会是下面的代码：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%tmp.0 &#x3D; add i32 4, 2%tmp.1 &#x3D; add i32 4, 1  ; fine now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>简化为：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%0 &#x3D; add i32 4, 2%1 &#x3D; add i32 4, 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种局部变量的数量基本是无限的。因为真实机器的寄存器数量有限，因此编译器后端可能需要将其中一些临时寄存器放在堆栈上。</p><p>alloca 产生一个指向已分配类型的指针。必须要显示的使用 load 或 store 指令来分别读取和写入值。</p><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><p>有两种常量，一种是不占用分配内存的常量，另一种是占用分配内存的常量。</p><p>不占用分配内存的常量没有等效 llvm ir，他们是在编译前端将常量值插入到使用他们的位置。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%1 &#x3D; add i32 %0, 17     ; 17 就是内联的常量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>占用分配内存的常量使用 constant 关键字定义：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@hello &#x3D; internal constant [6 x i8] c&quot;hello\00&quot;%struct &#x3D; type &#123; i32, i8 &#125;@struct_constant &#x3D; internal constant %struct &#123; i32 16, i8 4 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看出常量实际也是个全局变量，可见性可以用 private 和 internal 来限制，这样它在当前模式之外是不可见的。</p><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>在 LLVM 中有两种实现字符串类型的方法：</p><ul><li>在 LLVM IR 中编写实现</li><li>用生成 IR 的高级语言编写实现</li></ul><p>LLVM IR 中有一个简单但有用的字符串类型。</p><p>我们将创建一个动态的、可变的字符串类型，它可以被添加，也可以插入，转换大小写等等，这取决于定义了哪些支持函数来操作字符串类型。</p><p>这一切都归结为为类制作合适的类型定义，然后定义一组丰富的函数来对类型定义进行操作</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">    store i8* %output, i8** %1    ;this-&gt;maxlen &#x3D; %value (value that was passed into @malloc is the new maxlen)    %4 &#x3D; getelementptr %String* this, i32 0, i32 2    store i32 %value, i32* %4    ret void&#125;define fastcc void @String_Add_Char(%String* %this, i8 %value) &#123;    ; Check if we need to grow the string.    %1 &#x3D; getelementptr %String* %this, i32 0, i32 1    %length &#x3D; load i32* %1    %2 &#x3D; getelementptr %String* %this, i32 0, i32 2    %maxlen &#x3D; load i32* %2    ; if length &#x3D;&#x3D; maxlen:    %3 &#x3D; icmp eq i32 %length, %maxlen    br i1 %3, label %grow_begin, label %grow_closegrow_begin:    %4 &#x3D; getelementptr %String* %this, i32 0, i32 3    %factor &#x3D; load i32* %4    %5 &#x3D; add i32 %maxlen, %factor    call void @String_Resize(%String* %this, i32 %5)    br label %grow_closegrow_close:    %6 &#x3D; getelementptr %String* %this, i32 0, i32 0    %buffer &#x3D; load i8** %6    %7 &#x3D; getelementptr i8* %buffer, i32 %length    store i8 %value, i8* %7    %8 &#x3D; add i32 %length, 1    store i32 %8, i32* %1    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h5><p>下面的 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Foo</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> x<span class="token punctuation">;</span>  <span class="token keyword">double</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的 ir 代码如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%Foo &#x3D; type &#123;    i64,       ; index 0 &#x3D; x    double     ; index 1 &#x3D; y&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 struct 的结构成员是从0开始的数字进行索引。</p><p>下面是嵌套结构的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">FooBar</span><span class="token punctuation">&#123;</span>    Foo x<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> c<span class="token punctuation">;</span>    Foo<span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的 ir 代码：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%FooBar &#x3D; type &#123;    %Foo,         ; index 0 &#x3D; x    i8*,          ; index 1 &#x3D; c    %Foo*         ; index 2 &#x3D; y&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不完整结构类型，对于隐藏结构细节非常有用。比如下面的 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的 ir 代码：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%Foo &#x3D; type opaquedeclare void @Bar(%Foo)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ir 的结构成员是通过索引而不是名称来记录的，getelementptr(GEP) 是专门用来计算指向任何结构成员的指针。比如下面 c++ 代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Foo&#123;    int a;    char *b;    double c;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应 ir 是：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%Foo &#x3D; type &#123;    i32,        ; 0: a    i8*,        ; 1: b    double      ; 2: c&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GEP 索引如 ir 代码中的注释所示。现在访问 b 成员，c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Foo foo<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>bptr <span class="token operator">=</span> <span class="token operator">&amp;</span>foo<span class="token punctuation">.</span>b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>先在堆栈上使用 alloca 指令分配对象，访问 b 成员，使用 GEP 指令计算指向内存位置的指针。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%foo &#x3D; alloca %Foo; char **bptr &#x3D; &amp;foo.b%1 &#x3D; getelementptr %Foo, %Foo* %foo, i32 0, i32 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果创建一个 Foo 对象数组，如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Foo bar[100];bar[17].c &#x3D; 0.0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会转成以下 ir 代码：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; Foo bar[100]%bar &#x3D; alloca %Foo, i32 100; bar[17].c &#x3D; 0.0%2 &#x3D; getelementptr %Foo, %Foo* %bar, i32 17, i32 2store double 0.0, double* %2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上面代码所示，它首先会分配一个指向 100 个 Foo 对象的指针。然后用 GEP 指令检索数组中第17个条目的第二个元素。</p><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><p>有九种不同类型的转换</p><ul><li>Bitwise casts (type casts)</li><li>Zero-extending casts (unsigned upcasts).</li><li>Sign-extending casts (signed upcasts).</li><li>Truncasting casts (signed and unsigned downcasts).</li><li>Floating-point extending casts (float upcasts).</li><li>Floating-point truncasting casts (float downcasts)</li><li>Pointer-to-integer casts.</li><li>Integer-to-pointer casts.</li><li>Address-space casts (pointer casts).</li></ul><p><em>Bitwise Casts</em><br>bitwise cast 是按位强制转换。比如可以将指向字节的指针位转换为指向某个结构的指针。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Foo<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Foo <span class="token operator">*</span>foo <span class="token operator">=</span> <span class="token punctuation">(</span>Foo <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换成对应的 ir：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%Foo &#x3D; type &#123; i32 &#125;declare i8* @malloc(i32)declare void @free(i8*)define void @allocate() nounwind &#123;    %1 &#x3D; call i8* @malloc(i32 4)    %foo &#x3D; bitcast i8* %1 to %Foo*    %2 &#x3D; getelementptr %Foo, %Foo* %foo, i32 0, i32 0    store i32 12, i32* %2    call void @free(i8* %1)    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Zero-Extending Casts(Unsigned Upcasts)</em><br>比如下面的 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">uint8 byte <span class="token operator">=</span> <span class="token number">117</span><span class="token punctuation">;</span>uint32 word<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* The compiler automatically upcasts the byte to a word. */</span>    word <span class="token operator">=</span> byte<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 zext 指令：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@byte &#x3D; global i8 117@word &#x3D; global i32 0define void @main() nounwind &#123;    %1 &#x3D; load i8, i8* @byte    %2 &#x3D; zext i8 %1 to i32    store i32 %2, i32* @word    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Sign-Extending Casts (Signed Upcasts)</em><br>将 zext 替换成 sext 指令即可。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@char &#x3D; global i8 -17@int  &#x3D; global i32 0define void @main() nounwind &#123;    %1 &#x3D; load i8, i8* @char    %2 &#x3D; sext i8 %1 to i32    store i32 %2, i32* @int    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Truncating Casts (Signed and Unsigned Downcasts)</em><br>signed 和 unsigned 整数都使用相同的指令 trunc 来减少相关数字的大小。这是因为 llvm ir 假设所有有符号整数值都是二进制补码格式，因此 turn 注意处理这两种情况：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@int &#x3D; global i32 -1@char &#x3D; global i8 0define void @main() nounwind &#123;    %1 &#x3D; load i32, i32* @int    %2 &#x3D; trunc i32 %1 to i8    store i8 %2, i8* @char    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Floating-Point Extending Casts (Float Upcasts)</em><br>浮点数可以使用 fpext 指令进行扩展，比如下面的 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span> small <span class="token operator">=</span> <span class="token number">1.25</span><span class="token punctuation">;</span><span class="token keyword">double</span> large<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* The compiler inserts an implicit float upcast. */</span>    large <span class="token operator">=</span> small<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会变成：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@small &#x3D; global float 1.25@large &#x3D; global double 0.0define void @main() nounwind &#123;    %1 &#x3D; load float, float* @small    %2 &#x3D; fpext float %1 to double    store double %2, double* @large    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Floating-Point Truncating Casts (Float Downcasts)</em><br>浮点数可以截断为更小的大小：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@large &#x3D; global double 1.25@small &#x3D; global float 0.0define void @main() nounwind &#123;    %1 &#x3D; load double, double* @large    %2 &#x3D; fptrunc double %1 to float    store float %2, float* @small    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Pointer-to-Integer Casts</em><br>使用 ptrtoint 指令将指针类型转换为整数类型。</p><p><em>Integer-to-Pointer Casts</em><br>使用 inttoptr 指令将整数转换成指针。</p><h5 id="函数和声明"><a href="#函数和声明" class="headerlink" title="函数和声明"></a>函数和声明</h5><p>函数定义取决于 calling convention、excption-aware 和模块是否对外公开。</p><p>下面是一个简单的 c 函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">17</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>会转换成</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @Bar() nounwind &#123;    ret i32 17&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>私有函数定义如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define private i32 @Foo() nounwind &#123;    ret i32 17&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ir 的私有函数只是 llvm 模块级的私有函数，并不是和高级语言 private 关键字定义的函数对应。</p><p>函数原型在 ir 里使用 declare 来声明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应使用 declare 声明为：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">declare i32 @Bar(i32 %value)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可变参数的函数，要用省略号定义或声明它，然后需要使用特殊的函数调用语法。示例如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">declare i32 @printf(i8*, ...) nounwind@.textstr &#x3D; internal constant [20 x i8] c&quot;Argument count: %d\0A\00&quot;define i32 @main(i32 %argc, i8** %argv) nounwind &#123;    ; printf(&quot;Argument count: %d\n&quot;, argc)    %1 &#x3D; call i32 (i8*, ...) @printf(i8* getelementptr([20 x i8], [20 x i8]* @.textstr, i32 0, i32 0), i32 %argc)    ret i32 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数重载不是在 ir 里处理的，是在源语言上处理的。重载的函数名称不同，示例如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">*</span>b <span class="token operator">+</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面 c 代码对应 ir 是：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @_Z8functionii(i32 %a, i32 %b) #0 &#123;; [...]  ret i32 %5&#125;define double @_Z8functionddd(double %a, double %b, double %x) #0 &#123;; [...]  ret double %8&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见在 ir 里，重载函数的名称和功能都是不同的。</p><p>类或结构体通常是按值传递，在传递对象时隐式克隆对象。比如下面的 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token keyword">double</span> y<span class="token punctuation">;</span>    <span class="token keyword">double</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Point <span class="token function">add_points</span><span class="token punctuation">(</span>Point a<span class="token punctuation">,</span> Point b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Point p<span class="token punctuation">;</span>  p<span class="token punctuation">.</span>x <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">+</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  p<span class="token punctuation">.</span>y <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">+</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>  p<span class="token punctuation">.</span>z <span class="token operator">=</span> a<span class="token punctuation">.</span>z <span class="token operator">+</span> b<span class="token punctuation">.</span>z<span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应 ir 是：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%struct.Point &#x3D; type &#123; double, double, double &#125;define void @add_points(%struct.Point* noalias sret %agg.result,                        %struct.Point* byval align 8 %a,                        %struct.Point* byval align 8 %b) #0 &#123;; there is no alloca here for Point p;; p.x &#x3D; a.x + b.x;  %1 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %a, i32 0, i32 0  %2 &#x3D; load double, double* %1, align 8  %3 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %b, i32 0, i32 0  %4 &#x3D; load double, double* %3, align 8  %5 &#x3D; fadd double %2, %4  %6 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %agg.result, i32 0, i32 0  store double %5, double* %6, align 8; p.y &#x3D; a.y + b.y;  %7 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %a, i32 0, i32 1  %8 &#x3D; load double, double* %7, align 8  %9 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %b, i32 0, i32 1  %10 &#x3D; load double, double* %9, align 8  %11 &#x3D; fadd double %8, %10  %12 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %agg.result, i32 0, i32 1  store double %11, double* %12, align 8; p.z &#x3D; a.z + b.z;  %13 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %a, i32 0, i32 2  %14 &#x3D; load double, double* %13, align 8  %15 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %b, i32 0, i32 2  %16 &#x3D; load double, double* %15, align 8  %17 &#x3D; fadd double %14, %16  %18 &#x3D; getelementptr inbounds %struct.Point, %struct.Point* %agg.result, i32 0, i32 2  store double %17, double* %18, align 8; there is no real returned value, because the previous stores directly wrote; to the caller allocated value via %agg.result  ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 add_points 函数返回的是 void，另外添加了一个参数，这个参数是指向返回结果的指针，有调用者来分配。这个指针是 noalias 属性，sret 属性表明这是返回值。参数是 byval 属性，表示他们是按值传递的结构。</p><p>下面代码是展示如何调用 add_points 函数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Point a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  Point b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  Point c <span class="token operator">=</span> <span class="token function">add_points</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编成 ir 代码如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @main() #1 &#123;; these are the a, b, c in the scope of main  %a &#x3D; alloca %struct.Point, align 8  %b &#x3D; alloca %struct.Point, align 8  %c &#x3D; alloca %struct.Point, align 8; these are copies, which are passed as arguments  %1 &#x3D; alloca %struct.Point, align 8  %2 &#x3D; alloca %struct.Point, align 8; copy the global initializer main::a to %a  %3 &#x3D; bitcast %struct.Point* %a to i8*  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast (%struct.Point* @main.a to i8*), i64 24, i32 8, i1 false); copy the global initializer main::b to %b  %4 &#x3D; bitcast %struct.Point* %b to i8*  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* bitcast (%struct.Point* @main.b to i8*), i64 24, i32 8, i1 false); clone a to %1  %5 &#x3D; bitcast %struct.Point* %1 to i8*  %6 &#x3D; bitcast %struct.Point* %a to i8*  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 24, i32 8, i1 false); clone b to %1  %7 &#x3D; bitcast %struct.Point* %2 to i8*  %8 &#x3D; bitcast %struct.Point* %b to i8*  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 24, i32 8, i1 false); call add_points with the cloned values  call void @add_points(%struct.Point* sret %c, %struct.Point* byval align 8 %1, %struct.Point* byval align 8 %2)  ; [...]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到调用者为返回值 %c 分配空间，并且确保在实际通过引用传递参数前克隆参数 a 和 b。</p><p>异常处理函数，可以返回一个指向异常实例的指针，创建一个 setjmp&#x2F;longjmp 帧，或者简单指定 uwtable 属性。</p><p>函数指针的表达方式和 c 差不多，比如下面 c 代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>Function<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应 ir 为：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@Function &#x3D; global i32(i8*)* null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Unions"><a href="#Unions" class="headerlink" title="Unions"></a>Unions</h5><p>llvm 不支持 unions，下面的 c++ 代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">union Foo&#123;    int a;    char *b;    double c;&#125;;Foo Union;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应 ir 为：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%union.Foo &#x3D; type &#123; double &#125;@Union &#x3D; %union.Foo &#123; 0.0 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其它成员没有了，ir 要访问他们要用 bitcast 指令将指向 union 的指针转换为你想要的指针。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%1 &#x3D; bitcast %union.Foo* @Union to i32*store i32 1, i32* %1%2 &#x3D; bitcast %union.Foo* @Union to i8**store i8* null, i8** %2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实际上 unions 只不过是一块使用不同隐式指针强制转换访问的内存。处理 unions 没有类型安全。前端语言需要对 unions 做支持，可以简单的分配 unions 的总大小，也就是最大成员的大小，然后根据需要生成代码来重新解释分配的内存。</p><h5 id="if-then-else-分支"><a href="#if-then-else-分支" class="headerlink" title="if-then-else 分支"></a>if-then-else 分支</h5><p>llvm ir 是按顺序执行的指令序列组成。这些指令组合在一起形成基本块，每个基本块都以改变程序控制流的指令结束。</p><p>下面是个简单的 if-then-else 分支：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 ir 中，控制流是通过在基本块之间跳转实现的。这些基本块包含不改变控制流的指令序列。每个基本块都以改变程序控制流的指令结束。最常见的分支指令是 br。br 可以带上条件，然后它实现了一个简单的 if-then-else 。如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">br i1 %cond, label %iftrue, label %iffalse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>br 也可以实现无条件跳转到某个目的地：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">br label %dest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前面的 c 函数对应的 ir 代码如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @max(i32 %a, i32 %b) &#123;entry:  %retval &#x3D; alloca i32, align 4  %0 &#x3D; icmp sgt i32 %a, %b  br i1 %0, label %btrue, label %bfalsebtrue:                                      ; preds &#x3D; %2  store i32 %a, i32* %retval, align 4  br label %endbfalse:                                     ; preds &#x3D; %2  store i32 %b, i32* %retval, align 4  br label %endend:                                     ; preds &#x3D; %btrue, %bfalse  %1 &#x3D; load i32, i32* %retval, align 4  ret i32 %1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码所示，共有4个基本块，第一个是函数入口，使用 alloca 在堆栈上分配空间，用作较大的临时存储，然后使用 icmp 指令比较两个参数 %a 和 %b。结果是一个布尔标志 i1，将其用于 br 指令的条件。然后根据所采用的分支，将 %a 或 %b 存储到临时 %retval 变量中。每个分支都以无条件分支到最后一个基本块 %end 结束。来自 %retval 的值被加载并返回。</p><p>通过 opt -dot-cfg input.ll 可以获得 CFG 流程图。</p><p>select 指令可以进行更高级别优化，不生成分支，缩短代码，比如上面的 ir 代码优化后为：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @max(i32 %a, i32 %b) &#123;  %1 &#x3D; icmp sgt i32 %a, %b  %2 &#x3D; select i1 %1, i32 %a, i32 %b  ret i32 %2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="静态单一赋值表（SSA-Form）和-PHI"><a href="#静态单一赋值表（SSA-Form）和-PHI" class="headerlink" title="静态单一赋值表（SSA Form）和 PHI"></a>静态单一赋值表（SSA Form）和 PHI</h5><p>下面是一个 c 函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的 llvm ir 代码如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @max(i32 %a, i32 %b) &#123;entry:  %retval &#x3D; alloca i32, align 4  %0 &#x3D; icmp sgt i32 %a, %b  br i1 %0, label %btrue, label %bfalsebtrue:                                      ; preds &#x3D; %2  store i32 %a, i32* %retval, align 4  br label %endbfalse:                                     ; preds &#x3D; %2  store i32 %b, i32* %retval, align 4  br label %endend:                                     ; preds &#x3D; %btrue, %bfalse  %1 &#x3D; load i32, i32* %retval, align 4  ret i32 %1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 max 函数使用 alloc 在堆栈上分配空间，其中存储了较大的值。在一个分支中，%a 被存储，而在另一个分支中，%b 被存储到堆栈分配的内存中。尽可能避免使用内存 load&#x2F;store 操作，而是更多的使用寄存器。所以按下面方式来写：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @max(i32 %a, i32 %b) &#123;entry:  %0 &#x3D; icmp sgt i32 %a, %b  br i1 %0, label %btrue, label %bfalsebtrue:  %retval &#x3D; %a  br label %endbfalse:  %retval &#x3D; %b  br label %endend:  ret i32 %retval&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这不是有效的 LLVM IR，因为 LLVM IR 是静态单已分配形式，也就是 SSA。SSA 形式要求每个变量只分配一次。SSA 形式支持并简化了大量的编译器优化，并且是命令式编程语言解释器中中间表示的实际上的标准。</p><p>那怎么用 SSA 形式 LLVM IR 实现上述代码？答案是神奇的 phi 指令。phi 指令以 SSA 理论中使用的 φ 函数命名。这个函数会根据控制流神奇的选择正确的值。在 LLVM 中，你必须手动指定值的名称和前一个基本块。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">end:  %retval &#x3D; phi i32 [%a, %btrue], [%b, %bfalse]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里我们指示 phi 指令在前一个基本块为 %btrue 时选择 %a。如果之前的基本块是 %bfalse，那么将使用 %b。然后将该值分配给一个新变量 %retval。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define i32 @max(i32 %a, i32 %b) &#123;entry:  %0 &#x3D; icmp sgt i32 %a, %b  br i1 %0, label %btrue, label %bfalsebtrue:                                      ; preds &#x3D; %2  br label %endbfalse:                                     ; preds &#x3D; %2  br label %endend:                                     ; preds &#x3D; %btrue, %bfalse  %retval &#x3D; phi i32 [%a, %btrue], [%b, %bfalse]  ret i32 %retval&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>后端的 PHI</em></p><p>让我们看看 @max 函数现在如何映射到实际的机器代码。查看的是 x86 64 位生成的代码，用不同优化级别进行编译。非优化后端命令 llc -O0 -filetype&#x3D;asm。得到的结果是：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">max:                                    # @max# %bb.0:                                # %entry    cmpl    %esi, %edi                  # %edi &#x3D; %a, %esi &#x3D; %b    jle     .LBB0_2# %bb.1:                                # %btrue    movl    %edi, -4(%rsp)              # mov src, dst    jmp     .LBB0_3.LBB0_2:                                # %bfalse    movl    %esi, -4(%rsp)              # mov src, dst    jmp     .LBB0_3.LBB0_3:                                # %end    movl    -4(%rsp), %eax              # return value in eax    retq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数 %a 和 %b 分别在 %edi 和 %esi 中传递。我们可以看到编译后端生成的代码使用堆栈来存储更大的值。因此，当我们编写 LLVM IR 时，编译器后端生成的代码并不是我们所想的。原因是编译器后端需要用真机指令来实现 phi 指令。通常这是通过分配给一个寄存器或存储到一个公共堆栈位置来完成的。通常编译器后端将使用堆栈来实现 phi 指令。但是，如果我们在后端使用更多优化，也就是 llc -O1，可以获得更优化的版本：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">max:                                    # @max# %bb.0:                                # %entry    cmpl    %esi, %edi    jg      .LBB0_2# %bb.1:                                # %bfalse    movl    %esi, %edi.LBB0_2:                                # %end    movl    %edi, %eax    retq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 phi 函数是通过使用 %edi 寄存器实现的。在一个分支中，%edi 已经包含所需的值，所以什么都没发生。在另一个分支中，%esi 被复制到 %edi。在 %end 基本块中，%edi 包含来自两个分支的所需值。这更像是我们的想法。我们可以看到优化是需要在整个编译管道中的应用的东西。</p><h5 id="Lambda-函数"><a href="#Lambda-函数" class="headerlink" title="Lambda 函数"></a>Lambda 函数</h5><p>lambda 函数是一个匿名函数，它可以自由引用包含函数中的局部变量，也包括参数变量。Lambda 的实现和 Pascal 的嵌套函数一样，只是编译器负责为 lambda 函数生成内部名称。有几种不同的方法可以实现 lambda 函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int foo(int a)&#123;  auto function &#x3D; [a](int x) &#123; return x + a; &#125;;  return function(10);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的问题是 lambda 函数引用了调用者的一个局部变量，即 a，即使 lambda 函数是它自己的函数。这可以通过将局部变量作为隐式参数传递给 lambda 函数来轻松解决：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">define internal i32 @lambda(i32 %a, i32 %x) &#123;  %1 &#x3D; add i32 %a, %x  ret i32 %1&#125;define i32 @foo(i32 %a) &#123;  %1 &#x3D; call i32 @lambda(i32 %a, i32 10)  ret i32 %1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，如果 lambda 函数使用多个变量，你可以将他们包装在一个结构中，然后将指针传递给 lambda 函数：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">extern int integer_parse();int foo(int a, int b)&#123;  int c &#x3D; integer_parse();  auto function &#x3D; [a, b, c](int x) &#123; return (a + b - c) * x; &#125;;  return function(10);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应 IR 是：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; ModuleID &#x3D; &#39;lambda_func_1_cleaned.ll&#39;source_filename &#x3D; &quot;lambda_func_1_cleaned.ll&quot;target datalayout &#x3D; &quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;target triple &#x3D; &quot;x86_64-unknown-linux-gnu&quot;%lambda_args &#x3D; type &#123; i32, i32, i32 &#125;declare i32 @integer_parse()define i32 @lambda(%lambda_args* %args, i32 %x) &#123;  %1 &#x3D; getelementptr %lambda_args, %lambda_args* %args, i32 0, i32 0  %a &#x3D; load i32, i32* %1  %2 &#x3D; getelementptr %lambda_args, %lambda_args* %args, i32 0, i32 1  %b &#x3D; load i32, i32* %2  %3 &#x3D; getelementptr %lambda_args, %lambda_args* %args, i32 0, i32 2  %c &#x3D; load i32, i32* %3  %4 &#x3D; add i32 %a, %b  %5 &#x3D; sub i32 %4, %c  %6 &#x3D; mul i32 %5, %x  ret i32 %6&#125;define i32 @foo(i32 %a, i32 %b) &#123;  %args &#x3D; alloca %lambda_args  %1 &#x3D; getelementptr %lambda_args, %lambda_args* %args, i32 0, i32 0  store i32 %a, i32* %1  %2 &#x3D; getelementptr %lambda_args, %lambda_args* %args, i32 0, i32 1  store i32 %b, i32* %2  %c &#x3D; call i32 @integer_parse()  %3 &#x3D; getelementptr %lambda_args, %lambda_args* %args, i32 0, i32 2  store i32 %c, i32* %3  %4 &#x3D; call i32 @lambda(%lambda_args* %args, i32 10)  ret i32 %4&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然，这个主题有一些可能的变化：</p><ul><li>你可以将所有隐式作为参数参数当成参数来传递。</li><li>你可以将结构中所有隐式参数作为显示参数传递。</li><li>你可以传入一个指向调用者帧的指针，并让 lambda 函数从输入帧中提取参数和局部变量。</li></ul><h5 id="生成器-Generators"><a href="#生成器-Generators" class="headerlink" title="生成器 Generators"></a>生成器 Generators</h5><p>生成器是一个函数，它以这样的一种方式重复生成一个值，使函数的状态在函数的重复调用中保持不变，包括函数在生产值时的局部偏移量。</p><p>实现生成器最直接的方法就是将其所有状态变量，包括参数、局部变量和返回值都包装到一个 ad-hoc 结构中，然后将该结构的地址传递给生成器。</p><p>某种程度上说，你需要在每次调用时跟踪你正在执行的生成器是哪个块。这可以通过多种方式完成。我们在这展示的方式是使用 LLVM 的 blockaddress 指令来保存下一个应该执行的本地代码块的地址。其它实现使用简单的状态变量，然后根据状态变量的值进行类似开关的调度。在这两种情况下，最终结果是相同的，也就是为生成器中的每个本地块执行不同的代码块。</p><p>重要的是将迭代器视为一种微线程，每当再次调用迭代器时，它就会恢复。换句话说，我们需要保存迭代器每次通过多远的地址，以便它可以恢复，就好像发生了微观线程切换一样。所以我们在返回指令之后保存指令的地址，这样我们就可以继续运行，就好像我们一开始就没有返回一样。</p><p>下面是一段简化的伪代码。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;generator int foo()&#123;    yield 1;    yield 2;    yield 3;&#125;int main()&#123;    foreach (int i in foo())  printf(&quot;Value: %d\n&quot;, i);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的 IR 如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%foo_context &#x3D; type &#123;    i8*,      ; 0: block (state)    i32       ; 1: value (result)&#125;define void @foo_setup(%foo_context* %context) nounwind &#123;    ; set up &#39;block&#39;    %1 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.yield1), i8** %1    ret void&#125;; The boolean returned indicates if a result was available or not.; Once no more results are available, the caller is expected to not call; the iterator again.define i1 @foo_yield(%foo_context* %context) nounwind &#123;    ; dispatch to the active generator block    %1 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    %2 &#x3D; load i8** %1    indirectbr i8* %2, [ label %.yield1, label %.yield2, label %.yield3, label %.done ].yield1:    ; store the result value (1)    %3 &#x3D; getelementptr %foo_context* %context, i32 0, i32 1    store i32 1, i32* %3    ; make &#39;block&#39; point to next block to execute    %4 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.yield2), i8** %4    ret i1 1.yield2:    ; store the result value (2)    %5 &#x3D; getelementptr %foo_context* %context, i32 0, i32 1    store i32 2, i32* %5    ; make &#39;block&#39; point to next block to execute    %6 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.yield3), i8** %6    ret i1 1.yield3:    ; store the result value (3)    %7 &#x3D; getelementptr %foo_context* %context, i32 0, i32 1    store i32 3, i32* %7    ; make &#39;block&#39; point to next block to execute    %8 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.done), i8** %8    ret i1 1.done:    ret i1 0&#125;declare i32 @printf(i8*, ...) nounwind@.string &#x3D; internal constant [11 x i8] c&quot;Value: %d\0A\00&quot;define void @main() nounwind &#123;    ; allocate and initialize generator context structure    %context &#x3D; alloca %foo_context    call void @foo_setup(%foo_context* %context)    br label %.head.head:    ; foreach (int i in foo())    %1 &#x3D; call i1 @foo_yield(%foo_context* %context)    br i1 %1, label %.body, label %.tail.body:    %2 &#x3D; getelementptr %foo_context* %context, i32 0, i32 1    %3 &#x3D; load i32* %2    %4 &#x3D; call i32 (i8*, ...)* @printf(i8* getelementptr([11 x i8]* @.string, i32 0, i32 0), i32 %3)    br label %.head.tail:    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是一个涉及局部变量的稍微复杂的示例：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;generator int foo(int start, int after)&#123;    for (int index &#x3D; start; index &lt; after; index++)    &#123;        if (index % 2 &#x3D;&#x3D; 0)            yield index + 1;        else            yield index - 1;    &#125;&#125;int main(void)&#123;    foreach (int i in foo(0, 5))        printf(&quot;Value: %d\n&quot;, i);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成 IR 代码为：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%foo_context &#x3D; type &#123;    i8*,      ; 0: block (state)    i32,      ; 1: start (argument)    i32,      ; 2: after (argument)    i32,      ; 3: index (local)    i32       ; 4: value (result)&#125;define void @foo_setup(%foo_context* %context, i32 %start, i32 %after) nounwind &#123;    ; set up &#39;block&#39;    %1 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.init), i8** %1    ; set up &#39;start&#39;    %2 &#x3D; getelementptr %foo_context* %context, i32 0, i32 1    store i32 %start, i32* %2    ; set up &#39;after&#39;    %3 &#x3D; getelementptr %foo_context* %context, i32 0, i32 2    store i32 %after, i32* %3    ret void&#125;define i1 @foo_yield(%foo_context* %context) nounwind &#123;    ; dispatch to the active generator block    %1 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    %2 &#x3D; load i8** %1   indirectbr i8* %2, [ label %.init, label %.loop_close, label %.end ].init:    ; copy argument &#39;start&#39; to the local variable &#39;index&#39;    %3 &#x3D; getelementptr %foo_context* %context, i32 0, i32 1    %start &#x3D; load i32* %3    %4 &#x3D; getelementptr %foo_context* %context, i32 0, i32 3    store i32 %start, i32* %4    br label %.head.head:    ; for (; index &lt; after; )    %5 &#x3D; getelementptr %foo_context* %context, i32 0, i32 3    %index &#x3D; load i32* %5    %6 &#x3D; getelementptr %foo_context* %context, i32 0, i32 2    %after &#x3D; load i32* %6    %again &#x3D; icmp slt i32 %index, %after    br i1 %again, label %.loop_begin, label %.exit.loop_begin:    %7 &#x3D; srem i32 %index, 2    %8 &#x3D; icmp eq i32 %7, 0    br i1 %8, label %.even, label %.odd.even:    ; store &#39;index + 1&#39; in &#39;value&#39;    %9 &#x3D; add i32 %index, 1    %10 &#x3D; getelementptr %foo_context* %context, i32 0, i32 4    store i32 %9, i32* %10    ; make &#39;block&#39; point to the end of the loop (after the yield)    %11 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.loop_close), i8** %11    ret i1 1.odd:    ; store &#39;index - 1&#39; in value    %12 &#x3D; sub i32 %index, 1    %13 &#x3D; getelementptr %foo_context* %context, i32 0, i32 4    store i32 %12, i32* %13    ; make &#39;block&#39; point to the end of the loop (after the yield)    %14 &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.loop_close), i8** %14    ret i1 1.loop_close:    ; increment &#39;index&#39;    %15 &#x3D; getelementptr %foo_context* %context, i32 0, i32 3    %16 &#x3D; load i32* %15    %17 &#x3D; add i32 %16, 1    store i32 %17, i32* %15    br label %.head.exit:    ; make &#39;block&#39; point to the %.end label    %x &#x3D; getelementptr %foo_context* %context, i32 0, i32 0    store i8* blockaddress(@foo_yield, %.end), i8** %x    br label %.end.end:    ret i1 0&#125;declare i32 @printf(i8*, ...) nounwind@.string &#x3D; internal constant [11 x i8] c&quot;Value: %d\0A\00&quot;define i32 @main() nounwind &#123;    ; allocate and initialize generator context structure    %context &#x3D; alloca %foo_context    call void @foo_setup(%foo_context* %context, i32 0, i32 5)    br label %.head.head:    ; foreach (int i in foo(0, 5))    %1 &#x3D; call i1 @foo_yield(%foo_context* %context)    br i1 %1, label %.body, label %.tail.body:    %2 &#x3D; getelementptr %foo_context* %context, i32 0, i32 4    %3 &#x3D; load i32* %2    %4 &#x3D; call i32 (i8*, ...)* @printf(i8* getelementptr([11 x i8]* @.string, i32 0, i32 0), i32 %3)    br label %.head.tail:    ret i32 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上述操作的另一种可能方法是为每个状态生成一个 LLVM IR 函数，然后存储一个函数指针。</p><p>在上下文结构中，每当需要调用新的状态或函数时都会更新。</p><h5 id="面向对象结构"><a href="#面向对象结构" class="headerlink" title="面向对象结构"></a>面向对象结构</h5><p>接下来研究各种面向对象的结构，看怎么映射到 LLVM IR。</p><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><p>一个类只不过是一个结构，它具有一组相关函数，这些函数接受一个隐式的第一个参数，即指向该结构的指针。因此将一个类映射到 LLVM IR 很简单：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stddef.h&gt;class Foo&#123;public:    Foo()    &#123;  _length &#x3D; 0;    &#125;    size_t GetLength() const    &#123;  return _length;    &#125;    void SetLength(size_t value)    &#123;  _length &#x3D; value;    &#125;private:    size_t _length;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先将这段代码转换成两个独立的部分：</p><ul><li>结构定义</li><li>方法列表，包括构造函数</li></ul><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; The structure definition for class Foo.%Foo &#x3D; type &#123; i32 &#125;; The default constructor for class Foo.define void @Foo_Create_Default(%Foo* %this) nounwind &#123;    %1 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 0    store i32 0, i32* %1    ret void&#125;; The Foo::GetLength() method.define i32 @Foo_GetLength(%Foo* %this) nounwind &#123;    %1 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 0    %2 &#x3D; load i32, i32* %1    ret i32 %2&#125;; The Foo::SetLength() method.define void @Foo_SetLength(%Foo* %this, i32 %value) nounwind &#123;    %1 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 0    store i32 %value, i32* %1    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们确保调用了构造函数 Foo_Create_Default。</p><p>每当创建结构的实例时：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Foo foo;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%foo &#x3D; alloca %Foocall void @Foo_Create_Default(%Foo* %foo)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="虚拟方法"><a href="#虚拟方法" class="headerlink" title="虚拟方法"></a>虚拟方法</h5><p>虚方法只不过是编译器控制的函数指针。每个虚方法都记录在 vtable 中，它是给定类所需的所有函数指针的结构：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Foo &#123;public:  virtal int GetLengthTimesTwo() const &#123;    return _length * 2;  &#125;  void SetLength(size_t value) &#123;    _length &#x3D; value;  &#125;private:  int _length;&#125;;int main() &#123;  Foo foo;  foo.setLength(4);  return foo.GetLengthTimesTwo();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这变成：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%Foo_vtable_type &#x3D; type &#123; i32(%Foo*)* &#125;%Foo &#x3D; type &#123; %Foo_vtable_type*, i32 &#125;define i32 @Foo_GetLengthTimesTwo(%Foo* %this) nounwind &#123;    %1 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 1    %2 &#x3D; load i32, i32* %1    %3 &#x3D; mul i32 %2, 2    ret i32 %3&#125;@Foo_vtable_data &#x3D; global %Foo_vtable_type &#123;    i32(%Foo*)* @Foo_GetLengthTimesTwo&#125;define void @Foo_Create_Default(%Foo* %this) nounwind &#123;    %1 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 0    store %Foo_vtable_type* @Foo_vtable_data, %Foo_vtable_type** %1    %2 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 1    store i32 0, i32* %2    ret void&#125;define void @Foo_SetLength(%Foo* %this, i32 %value) nounwind &#123;    %1 &#x3D; getelementptr %Foo, %Foo* %this, i32 0, i32 1    store i32 %value, i32* %1    ret void&#125;define i32 @main(i32 %argc, i8** %argv) nounwind &#123;    %foo &#x3D; alloca %Foo    call void @Foo_Create_Default(%Foo* %foo)    call void @Foo_SetLength(%Foo* %foo, i32 4)    %1 &#x3D; getelementptr %Foo, %Foo* %foo, i32 0, i32 0    %2 &#x3D; load %Foo_vtable_type*, %Foo_vtable_type** %1    %3 &#x3D; getelementptr %Foo_vtable_type, %Foo_vtable_type* %2, i32 0, i32 0    %4 &#x3D; load i32(%Foo*)*, i32(%Foo*)** %3    %5 &#x3D; call i32 %4(%Foo* %foo)    ret i32 %5&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，一些 C++ 编译器将 _vtable 存储在结构中的负偏移量处，这样 memeset(this, 0, sizeof(*this))之类的东西就可以工作，即使在 OOP 上下文中应始终避免使用此类命令。</p><p><em>Rust 特征和 VTable</em><br>与 C++ 相比，Rust 确实具有完全不同的对象模型。但是，当涉及到动态调度的低级细节时，他们非常相似。我们将探讨 rust 文档中的一个示例，以及 rustc 编译器发出什么样的 llvm IR。rust 和 C++ 都使用虚拟方法进行动态调度。但是，在 rust 中，高级语言中没有虚拟方法之类的东西。相反，我们可以为我们的数据类型实现 trait，然后实现一个接口，该接口接受所有实现 trait 的数据类型并动态分派到正确的 trait 实现，也就是下面示例中 dyn Trait 语法。</p><p>编译器必须在运行时动态决定使用哪个函数。编译器只知道存储在 components 向量中的对象确实满足特征 Draw。作为对不太熟悉 rust 的人的附注：将对象包装在 Box 中本质上是将对象放在堆上，有点类似于 C++ 中的 unique_ptr 并有效地允许我们放置 trait 对象，也就是本例中为 dyn Drawable 在向量中。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; test::Screen::run; Function Attrs: nonlazybind uwtabledefine void @&quot;Screen::run&quot;(%Screen* %self) &#123;start:;; (omitting the initial prologue and setup code);; this is the start of the for loop in Screen::run calling the next method;; on the iterator for the first time and checking whether it is None (or;; null in llvm here);; %5 contains the pointer to the first component in the vector here  %6 &#x3D; icmp eq i64* %5, null  br i1 %6, label %end, label %forloopend:                                              ; preds &#x3D; %forloop, %start  ret voidforloop:                                          ; preds &#x3D; %start, %forloop  %7 &#x3D; phi i64* [ %next_component, %forloop ], [ %5, %start ];; here the boxed pointer is retrieved and dereferenced to retrieve the;; vtable pointer  %8 &#x3D; bitcast i64* %7 to &#123;&#125;**  %self_ptr &#x3D; load &#123;&#125;*, &#123;&#125;** %8  %9 &#x3D; getelementptr inbounds i64, i64* %7, i64 1  %vtable_ptr &#x3D; bitcast i64* %9 to void (&#123;&#125;*)***  %vtable &#x3D; load void (&#123;&#125;*)**, void (&#123;&#125;*)*** %vtable_ptr;; 3 is the index into the vtable struct, which refers to the draw implementation for this particular struct  %trait_method_ptr &#x3D; getelementptr inbounds void (&#123;&#125;*)*, void (&#123;&#125;*)** %vtable, i64 3  %trait_method &#x3D; load void (&#123;&#125;*)*, void (&#123;&#125;*)** %vmethod;; indirect call to trait method  call void %trait_method(&#123;&#125;* %self_ptr);; retrieve the next object  %next_component &#x3D; call i64* @&quot;&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next&quot;(&#123; i64*, i64* &#125;* %iter)  %14 &#x3D; icmp eq i64* %next_component, null  br i1 %14, label %end, label %forloop&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 llvm 模块的全局变量中，我们可以看到如下所示的 vtable。Button 和 SelectBox 都有关联的 vtable。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@vtable.screen &#x3D; private unnamed_addr constant  ;; the Type of the constant vtable structure  &#123; void (%SelectBox*)*, i64, i64, void (%SelectBox*)* &#125;  &#123;    ;; first entry is the function to drop the object    void (%SelectBox*)* @&quot;core::ptr::drop_in_place&lt;test::SelectBox&gt;&quot;,  ;; destructor    i64 32, ;; size    i64 8,  ;; alignment    ;; last in the vtable is the pointer to the SelectBox::draw implementation    void (%SelectBox*)* @&quot;&lt;test::SelectBox as test::Draw&gt;::draw&quot;  &#125;;; the vtable for Button is structured basically the same@vtable.button &#x3D; private unnamed_addr constant    &#123; void (%Button*)*, i64, i64, void (%Button*)* &#125;    &#123;  void (%Button*)* @&quot;core::ptr::drop_in_place&lt;test::Button&gt;&quot;,  i64 32, i64 8,  void (%Button*)* @&quot;&lt;test::Button as test::Draw&gt;::draw&quot;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这篇博文 <a href="https://alschwalm.com/blog/static/2017/03/07/exploring-dynamic-dispatch-in-rust/">Exploring Dynamic Dispatch in Rust</a> 更详细的解释 vtable 和动态调度以及他们在 rust 和 C++ 中的区别。</p><h5 id="单一继承"><a href="#单一继承" class="headerlink" title="单一继承"></a>单一继承</h5><p>单继承非常简单：每个结构体或类在内存中按声明顺序依次排列。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Base &#123;  public:    void SetA(int value) &#123;_a &#x3D; value;    &#125;  private:    int _a;&#125;;class Derived: public Base &#123;  public:    void SetB(int value) &#123;SetA(value);_b &#x3D; value;    &#125;  protected:    int _b;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里 a 和 b 将在内存中彼此跟随，因此从一个类继承只是一个简单的问题。</p><p>将基类声明为继承类中的第一个成员。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%Base &#x3D; type &#123;    i32         ; &#39;_a&#39; in class Base&#125;define void @Base_SetA(%Base* %this, i32 %value) nounwind &#123;    %1 &#x3D; getelementptr %Base, %Base* %this, i32 0, i32 0    store i32 %value, i32* %1    ret void&#125;%Derived &#x3D; type &#123;    i32,        ; &#39;_a&#39; from class Base    i32         ; &#39;_b&#39; from class Derived&#125;define void @Derived_SetB(%Derived* %this, i32 %value) nounwind &#123;    %1 &#x3D; bitcast %Derived* %this to %Base*    call void @Base_SetA(%Base* %1, i32 %value)    %2 &#x3D; getelementptr %Derived, %Derived* %this, i32 0, i32 1    store i32 %value, i32* %2    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，基类简单的成为派生类的类型声明的普通成员。</p><p>然后编译器必须在派生类被引用为其基类时插入适当的类型转换，如上所示，使用 bitcast 运算符。</p><h5 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h5><p>多重继承也不是很难，只是在每个派生类内部按顺序排列多个继承的结构，同时考虑到多次继承的数据成员的重复性。</p><p>下面的 c++ 代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class BaseA&#123;public:    void SetA(int value)    &#123;  _a &#x3D; value;    &#125;private:    int _a;&#125;;class BaseB: public BaseA&#123;public:    void SetB(int value)    &#123;  SetA(value);  _b &#x3D; value;    &#125;private:    int _b;&#125;;class Derived:    public BaseA,    public BaseB&#123;public:    void SetC(int value)    &#123;  SetB(value);  _c &#x3D; value;    &#125;private:    &#x2F;&#x2F; Derived now has two &#39;_a&#39; members and one &#39;_b&#39; member.    int _c;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等效 LLVM IR：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">%BaseA &#x3D; type &#123;    i32         ; &#39;_a&#39; from BaseA&#125;define void @BaseA_SetA(%BaseA* %this, i32 %value) nounwind &#123;    %1 &#x3D; getelementptr %BaseA, %BaseA* %this, i32 0, i32 0    store i32 %value, i32* %1    ret void&#125;%BaseB &#x3D; type &#123;    i32,        ; &#39;_a&#39; from BaseA    i32         ; &#39;_b&#39; from BaseB&#125;define void @BaseB_SetB(%BaseB* %this, i32 %value) nounwind &#123;    %1 &#x3D; bitcast %BaseB* %this to %BaseA*    call void @BaseA_SetA(%BaseA* %1, i32 %value)    %2 &#x3D; getelementptr %BaseB, %BaseB* %this, i32 0, i32 1    store i32 %value, i32* %2    ret void&#125;%Derived &#x3D; type &#123;    i32,        ; &#39;_a&#39; from BaseA    i32,        ; &#39;_a&#39; from BaseB    i32,        ; &#39;_b&#39; from BaseB    i32         ; &#39;_c&#39; from Derived&#125;define void @Derived_SetC(%Derived* %this, i32 %value) nounwind &#123;    %1 &#x3D; bitcast %Derived* %this to %BaseB*    call void @BaseB_SetB(%BaseB* %1, i32 %value)    %2 &#x3D; getelementptr %Derived, %Derived* %this, i32 0, i32 2    store i32 %value, i32* %2    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，只要将 baseB 作为 BaseB 的实例引用，编译器就会提供所需的类型转换和指针算术。请注意，他所需要的只是从一个类到另一个类的位转换以及及时 getelementptr 的最后一个参数的调整。</p><h5 id="虚拟继承"><a href="#虚拟继承" class="headerlink" title="虚拟继承"></a>虚拟继承</h5><p>虚拟继承实际上非常简单，因为它要求将相同的基类合并到一个实例中。比如下面的 c++ 代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class BaseA&#123;public:    int a;&#125;;class BaseB: public BaseA&#123;public:    int b;&#125;;class BaseC: public BaseA&#123;public:    int c;&#125;;class Derived:    public virtual BaseB,    public virtual BaseC&#123;    int d;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dervied 将只包含一个 BaseA 实例，即使它的继承图规定它应该有两个继承。</p><p>结果如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Derived&#123;public:    int a;    int b;    int c;    int d;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 a 的第二个实例被默认的忽略，因为它会导致 BaseA 的多个实例存在于 Derived 中。</p><h5 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口 Interface"></a>接口 Interface</h5><p>接口只不过是没有数据成员的基类，其中所有方法都是纯虚拟的，也就是没有主体。因此转化 IR 的方式和将虚拟成员函数转换为 LLVM IR 的方式是一样的。</p><h5 id="Boxing-和-Unboxing"><a href="#Boxing-和-Unboxing" class="headerlink" title="Boxing 和 Unboxing"></a>Boxing 和 Unboxing</h5><p>Boxing 是将非对象原始值转换成对象的过程。创建一个包装类，你可以用非对象值实例化和初始化它。</p><p>Unboxing 是 boxing 的逆过程。你通过从 box 对象中检索 box 的值，将一个完整的对象降级为一个纯标量值。</p><p>下面是 Boxing 和 Unboxing 对应的 IR 代码：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@Boxee &#x3D; global i32 17%Integer &#x3D; type &#123; i32 &#125;define void @Integer_Create(%Integer* %this, i32 %value) nounwind &#123;    ; you might set up a vtable and associated virtual methods here    %1 &#x3D; getelementptr %Integer, %Integer* %this, i32 0, i32 0    store i32 %value, i32* %1    ret void&#125;define i32 @Integer_GetValue(%Integer* %this) nounwind &#123;    %1 &#x3D; getelementptr %Integer, %Integer* %this, i32 0, i32 0    %2 &#x3D; load i32, i32* %1    ret i32 %2&#125;define i32 @main() nounwind &#123;    ; box @Boxee in an instance of %Integer    %1 &#x3D; load i32, i32* @Boxee    %2 &#x3D; alloca %Integer    call void @Integer_Create(%Integer* %2, i32 %1)    ; unbox @Boxee from an instance of %Integer    %3 &#x3D; call i32 @Integer_GetValue(%Integer* %2)    ret i32 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="New-运算符"><a href="#New-运算符" class="headerlink" title="New 运算符"></a>New 运算符</h5><p>new 运算符通常只不过是 C malloc 函数的类型安全版本，在 C++ 的某些实现中，它们可以互换调用，而不会导致看不见或不需要的副作用。</p><p><em>实例的 new 操作符</em><br>new X 对应的 llvm ir 代码如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">declare i8* @malloc(i32) nounwind%X &#x3D; type &#123; i8 &#125;define void @X_Create_Default(%X* %this) nounwind &#123;    %1 &#x3D; getelementptr %X, %X* %this, i32 0, i32 0    store i8 0, i8* %1    ret void&#125;define void @main() nounwind &#123;    %1 &#x3D; call i8* @malloc(i32 1)    %2 &#x3D; bitcast i8* %1 to %X*    call void @X_Create_Default(%X* %2)    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>new X(Y,Z) 形式的调用是相同的，除了 X 和 Z 作为参数传递给构造函数。</p><p><em>数组的 new 运算符</em><br>代码 new X[100] 被映射到一个循环中，一次初始化每个数组元素：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">declare i8* @malloc(i32) nounwind%X &#x3D; type &#123; i32 &#125;define void @X_Create_Default(%X* %this) nounwind &#123;    %1 &#x3D; getelementptr %X, %X* %this, i32 0, i32 0    store i32 0, i32* %1    ret void&#125;define void @main() nounwind &#123;    %n &#x3D; alloca i32                  ; %n &#x3D; ptr to the number of elements in the array    store i32 100, i32* %n    %i &#x3D; alloca i32                  ; %i &#x3D; ptr to the loop index into the array    store i32 0, i32* %i    %1 &#x3D; load i32, i32* %n           ; %1 &#x3D; *%n    %2 &#x3D; mul i32 %1, 4               ; %2 &#x3D; %1 * sizeof(X)    %3 &#x3D; call i8* @malloc(i32 %2)    ; %3 &#x3D; malloc(100 * sizeof(X))    %4 &#x3D; bitcast i8* %3 to %X*       ; %4 &#x3D; (X*) %3    br label %.loop_head.loop_head:                         ; for (; %i &lt; %n; %i++)    %5 &#x3D; load i32, i32* %i    %6 &#x3D; load i32, i32* %n    %7 &#x3D; icmp slt i32 %5, %6    br i1 %7, label %.loop_body, label %.loop_tail.loop_body:    %8 &#x3D; getelementptr %X, %X* %4, i32 %5    call void @X_Create_Default(%X* %8)    %9 &#x3D; add i32 %5, 1    store i32 %9, i32* %i    br label %.loop_head.loop_tail:    ret void&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-调用-LLVM-接口"><a href="#C-调用-LLVM-接口" class="headerlink" title="C 调用 LLVM 接口"></a>C 调用 LLVM 接口</h3><p>项目在：<a href="https://github.com/ming1016/DaiMingCreationToolbox/tree/main/Project/UseCompiler/CLLVMCase">CLLVMCase</a></p><p>这是代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*int sum(int a, int b) &#123;    return a + b;&#125;,*/</span><span class="token keyword">void</span> <span class="token function">csum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    LLVMModuleRef module <span class="token operator">=</span> <span class="token function">LLVMModuleCreateWithName</span><span class="token punctuation">(</span><span class="token string">"sum_module"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LLVMTypeRef param_types<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function">LLVMInt32Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">LLVMInt32Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token comment">// 函数参数依次是函数的类型，参数类型向量，函数数，表示函数是否可变的布尔值。</span>    LLVMTypeRef ftype <span class="token operator">=</span> <span class="token function">LLVMFunctionType</span><span class="token punctuation">(</span><span class="token function">LLVMInt32Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param_types<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LLVMValueRef sum <span class="token operator">=</span> <span class="token function">LLVMAddFunction</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token string">"sum"</span><span class="token punctuation">,</span> ftype<span class="token punctuation">)</span><span class="token punctuation">;</span>      LLVMBasicBlockRef entry <span class="token operator">=</span> <span class="token function">LLVMAppendBasicBlock</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token string">"entry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LLVMBuilderRef builder <span class="token operator">=</span> <span class="token function">LLVMCreateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LLVMPositionBuilderAtEnd</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// IR 的表现形式有三种，一种是内存中的对象集，一种是文本语言，比如汇编，一种是二进制编码字节 bitcode。</span>      LLVMValueRef tmp <span class="token operator">=</span> <span class="token function">LLVMBuildAdd</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> <span class="token function">LLVMGetParam</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">LLVMGetParam</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LLVMBuildRet</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">char</span> <span class="token operator">*</span>error <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">LLVMVerifyModule</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> LLVMAbortProcessAction<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LLVMDisposeMessage</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 可执行引擎，如果支持 JIT 就用它，否则用 Interpreter。</span>    LLVMExecutionEngineRef engine<span class="token punctuation">;</span>    error <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">LLVMLinkInMCJIT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LLVMInitializeNativeTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LLVMCreateExecutionEngineForModule</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>engine<span class="token punctuation">,</span> module<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Could not create execution engine: %s\n"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>  <span class="token function">LLVMDisposeMessage</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">long</span> <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> y <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>      <span class="token comment">// LLVM 提供了工厂函数来创建值，这些值可以被传递给函数。</span>    LLVMGenericValueRef args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function">LLVMCreateGenericValueOfInt</span><span class="token punctuation">(</span><span class="token function">LLVMInt32Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">LLVMCreateGenericValueOfInt</span><span class="token punctuation">(</span><span class="token function">LLVMInt32Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token function">LLVMInitializeNativeAsmPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LLVMInitializeNativeAsmParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 函数调用</span>    LLVMGenericValueRef result <span class="token operator">=</span> <span class="token function">LLVMRunFunction</span><span class="token punctuation">(</span>engine<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">LLVMGenericValueToInt</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 生成 bitcode 文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LLVMWriteBitcodeToFile</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token string">"sum.bc"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Could not write bitcode to file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token function">LLVMDisposeBuilder</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LLVMDisposeExecutionEngine</span><span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Swift-调用-LLVM-接口"><a href="#Swift-调用-LLVM-接口" class="headerlink" title="Swift 调用 LLVM 接口"></a>Swift 调用 LLVM 接口</h3><p>llvm 的接口还可以通过 swift 来调用。</p><p>先创建一个 module.modulemap 文件，创建 LLVMC.h 和 LLVMC.c 文件，自动生成 SwiftLLVMCase-Bridging-Header.h。设置 header search paths 为 llvm 所在路径 <code>/usr/local/opt/llvm/include</code> ，library search paths 设置为 <code>/usr/local/opt/llvm/lib</code> 。将 <code>/usr/local/opt/llvm/lib/libLLVM.dylib</code> 加到 Linked Frameworks and Libraries 里。</p><p>module.modulemap 内容</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">module llvm <span class="token punctuation">[</span>extern_c<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    header <span class="token string">"LLVMC.h"</span>    export <span class="token operator">*</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>LLVMC.h 里设置要用到的 llvm 的头文件，比如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LLVMC_h</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LLVMC_h</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Analysis.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/BitReader.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/BitWriter.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Core.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Disassembler.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/ExecutionEngine.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/IRReader.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Initialization.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Linker.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Object.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Support.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Target.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/TargetMachine.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Transforms/IPO.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Transforms/PassManagerBuilder.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Transforms/Scalar.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/Transforms/Vectorize.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;llvm-c/lto.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* LLVMC_h */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 swift 中写如下代码试试</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Foundation</span><span class="token keyword">import</span> llvm<span class="token keyword">func</span> <span class="token function-definition function">hiIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token class-name">LLVMModuleCreateWithName</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"HiModule"</span></span><span class="token punctuation">)</span>    <span class="token class-name">LLVMDumpModule</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span>    <span class="token class-name">LLVMDisposeModule</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">hiIR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">;</span> ModuleID <span class="token operator">=</span> <span class="token string">'HiModule'</span>source_filename <span class="token operator">=</span> <span class="token string">"HiModule"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面一个简单的 c 函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 llvm 的接口写对应的 IR 代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">cSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"CSum"</span></span><span class="token punctuation">)</span>    <span class="token keyword">let</span> bd <span class="token operator">=</span> <span class="token class-name">IRBuilder</span><span class="token punctuation">(</span>module<span class="token punctuation">:</span> m<span class="token punctuation">)</span>    <span class="token keyword">let</span> f1 <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"sum"</span></span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token class-name">FunctionType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">IntType</span><span class="token punctuation">.</span>int32<span class="token punctuation">,</span> <span class="token class-name">IntType</span><span class="token punctuation">.</span>int32<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">IntType</span><span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 添加基本块</span>    <span class="token keyword">let</span> entryBB <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">appendBasicBlock</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"entry"</span></span><span class="token punctuation">)</span>    bd<span class="token punctuation">.</span><span class="token function">positionAtEnd</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> entryBB<span class="token punctuation">)</span>      <span class="token keyword">let</span> a <span class="token operator">=</span> f1<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> f1<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token keyword">let</span> tmp <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">buildAdd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    bd<span class="token punctuation">.</span><span class="token function">buildRet</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>      m<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dump 出对应 IR 如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; ModuleID &#x3D; &#39;CSum&#39;source_filename &#x3D; &quot;CSum&quot;define i32 @sum(i32 %0, i32 %1) &#123;entry:%2 &#x3D; add i32 %0, %1ret i32 %2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于控制流函数，比如下面的 swift 函数：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">giveMeNumber</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> isBig <span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> re <span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">if</span> <span class="token operator">!</span>isBig <span class="token punctuation">&#123;</span>  <span class="token comment">// the fibonacci series (sort of)</span>  re <span class="token operator">=</span> <span class="token number">3</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// the fibonacci series (sort of) backwards</span>  re <span class="token operator">=</span> <span class="token number">4</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> re<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 llvm 接口编写 IR，代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">controlFlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"CF"</span></span><span class="token punctuation">)</span>    <span class="token keyword">let</span> bd <span class="token operator">=</span> <span class="token class-name">IRBuilder</span><span class="token punctuation">(</span>module<span class="token punctuation">:</span> m<span class="token punctuation">)</span>    <span class="token keyword">let</span> f1 <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"calculateFibs"</span></span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token class-name">FunctionType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">IntType</span><span class="token punctuation">.</span>int1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">FloatType</span><span class="token punctuation">.</span>double<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> entryBB <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">appendBasicBlock</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"entry"</span></span><span class="token punctuation">)</span>    bd<span class="token punctuation">.</span><span class="token function">positionAtEnd</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> entryBB<span class="token punctuation">)</span>      <span class="token comment">// 给本地变量分配空间 let retVal : Double</span>    <span class="token keyword">let</span> local <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">buildAlloca</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token class-name">FloatType</span><span class="token punctuation">.</span>double<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"local"</span></span><span class="token punctuation">)</span>      <span class="token comment">// 条件比较 if !backward</span>    <span class="token keyword">let</span> test <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">buildICmp</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>parameters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">IntType</span><span class="token punctuation">.</span>int1<span class="token punctuation">.</span><span class="token function">zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>equal<span class="token punctuation">)</span>      <span class="token comment">// 创建 block</span>    <span class="token keyword">let</span> thenBB <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">appendBasicBlock</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"then"</span></span><span class="token punctuation">)</span>    <span class="token keyword">let</span> elseBB <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">appendBasicBlock</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"else"</span></span><span class="token punctuation">)</span>    <span class="token keyword">let</span> mergeBB <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">appendBasicBlock</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"merge"</span></span><span class="token punctuation">)</span>      bd<span class="token punctuation">.</span><span class="token function">buildCondBr</span><span class="token punctuation">(</span>condition<span class="token punctuation">:</span> test<span class="token punctuation">,</span> then<span class="token punctuation">:</span> thenBB<span class="token punctuation">,</span> <span class="token keyword">else</span><span class="token punctuation">:</span> elseBB<span class="token punctuation">)</span>      <span class="token comment">// 指到 then block</span>    bd<span class="token punctuation">.</span><span class="token function">positionAtEnd</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> thenBB<span class="token punctuation">)</span>    <span class="token keyword">let</span> thenVal <span class="token operator">=</span> <span class="token class-name">FloatType</span><span class="token punctuation">.</span>double<span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">89</span><span class="token punctuation">)</span>    bd<span class="token punctuation">.</span><span class="token function">buildBr</span><span class="token punctuation">(</span>mergeBB<span class="token punctuation">)</span> <span class="token comment">// 到 merge block</span>      <span class="token comment">// 指到 else block</span>    bd<span class="token punctuation">.</span><span class="token function">positionAtEnd</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> elseBB<span class="token punctuation">)</span>    <span class="token keyword">let</span> elseVal <span class="token operator">=</span> <span class="token class-name">FloatType</span><span class="token punctuation">.</span>double<span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">109</span><span class="token punctuation">)</span>    bd<span class="token punctuation">.</span><span class="token function">buildBr</span><span class="token punctuation">(</span>mergeBB<span class="token punctuation">)</span> <span class="token comment">// 到 merge block</span>      <span class="token comment">// 指到 merge block</span>    bd<span class="token punctuation">.</span><span class="token function">positionAtEnd</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> mergeBB<span class="token punctuation">)</span>    <span class="token keyword">let</span> phi <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">buildPhi</span><span class="token punctuation">(</span><span class="token class-name">FloatType</span><span class="token punctuation">.</span>double<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"phi_example"</span></span><span class="token punctuation">)</span>    phi<span class="token punctuation">.</span><span class="token function">addIncoming</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">(</span>thenVal<span class="token punctuation">,</span> thenBB<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>elseVal<span class="token punctuation">,</span> elseBB<span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 赋值给本地变量</span>    bd<span class="token punctuation">.</span><span class="token function">buildStore</span><span class="token punctuation">(</span>phi<span class="token punctuation">,</span> to<span class="token punctuation">:</span> local<span class="token punctuation">)</span>    <span class="token keyword">let</span> ret <span class="token operator">=</span> bd<span class="token punctuation">.</span><span class="token function">buildLoad</span><span class="token punctuation">(</span>local<span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token class-name">FloatType</span><span class="token punctuation">.</span>double<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"ret"</span></span><span class="token punctuation">)</span>    bd<span class="token punctuation">.</span><span class="token function">buildRet</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>      m<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出对应 IR 代码：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">; ModuleID &#x3D; &#39;CF&#39;source_filename &#x3D; &quot;CF&quot;define double @giveMeNumber(i1 %0) &#123;entry:  %local &#x3D; alloca i32, align 4  %1 &#x3D; icmp eq i1 %0, false  br i1 %1, label %then, label %elsethen:                                             ; preds &#x3D; %entry  br label %mergeelse:                                             ; preds &#x3D; %entry  br label %mergemerge:                                            ; preds &#x3D; %else, %then  %phi_example &#x3D; phi i32 [ 3, %then ], [ 4, %else ]  store i32 %phi_example, i32* %local, align 4  %ret &#x3D; load i32, i32* %local, align 4  ret i32 %ret&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有完整代码 <a href="https://github.com/ming1016/DaiMingCreationToolbox/tree/main/Project/UseCompiler/SwiftLLVMCase">SwiftLLVMCase</a>。</p><h2 id="动态执行代码"><a href="#动态执行代码" class="headerlink" title="动态执行代码"></a>动态执行代码</h2><h3 id="DYLD-INSERT-LIBRARIES"><a href="#DYLD-INSERT-LIBRARIES" class="headerlink" title="DYLD_INSERT_LIBRARIES"></a>DYLD_INSERT_LIBRARIES</h3><p>DYLD_INSERT_LIBRARIES 是一个环境变量，可以插入你的代码到没有源码的程序进程中。比如下面的代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">DYLD_INSERT_LIBRARIES</span><span class="token operator">=</span>@path/Frameworks/Interposing.framework/Interpos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以在 <code>+load</code> 方法中添加自己的代码。SwiftUI Preview 也是使用的这种方法。如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">DYLD_INSERT_LIBRARIES</span><span class="token operator">=</span>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot//System/Library/PrivateFrameworks/PreviewsInjection.framework/PreviewsInjection<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>dyld 有机会修改一个二进制地址用来指向你定义的函数地址。在 Mach-O 里新增一个用来记录替换函数和函数地址的 <code>(__DATA,__interpose)</code>。对应宏定义：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DYLD_INTERPOSE</span><span class="token expression"><span class="token punctuation">(</span>_replacement<span class="token punctuation">,</span>_replacee<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>   <span class="token expression"><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">static</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> replacement<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> replacee<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> _interpose_</span><span class="token punctuation">##</span><span class="token expression">_replacee </span><span class="token punctuation">\</span>            <span class="token expression"><span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span> <span class="token punctuation">(</span></span><span class="token string">"__DATA,__interpose"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_replacement<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_replacee <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dyld 还包含了一个 dyld_dynamic_interpose 函数用以在运行时插入函数。</p><h3 id="解释执行-bitcode（IR）"><a href="#解释执行-bitcode（IR）" class="headerlink" title="解释执行 bitcode（IR）"></a>解释执行 bitcode（IR）</h3><p>IR 的表现形式有三种，一种是内存中的对象集，一种是文本语言，一种是二进制编码字节 bitcode。</p><p>对于 Intel 芯片可以通过 <a href="https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html">Pin</a>，arm 架构可以用 <a href="https://github.com/DynamoRIO/dynamorio">DynamoRIO</a>，目前 DynamoRIO 只支持 Window、Linux 和 Android 系统，对 macOS 的支持还在进行中。另一种方式是通过基于 llvm 的 interpreter 开发来实现解释执行 bitcode，llvm 用很多 C++ 的接口在内存中操作，将可读的文本文件解析到内存中，编译过程文本的 IR 不会生成，只会生成一种紧凑的二进制表示，也就是 bitcode。下面具体说下怎么做。</p><p>先构建一个支持 libffi 的 llvm。编译 llvm 源码时加上 libffi 的选项来打开 DLLVM_ENABLE_FFI 的选项打开 libffi，编译命令如下：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">cmake -G Ninja -DLLVM_ENABLE_FFI:BOOL&#x3D;ON ..&#x2F;llvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个项目。cmake 文件里注意设置自己的编译生成的 llvm 路径，还有 llvm 源码路径，设置这个路径主要是为了用安装 llvm 时没有包含的 ExecutionEngine&#x2F;Interpreter&#x2F;Interpreter.h 头文件。</p><p>实现方式是通过访问 llvm 的 ExcutionEngine 进行 IR 指令解释执行。声明一个可访问 ExcutionEngine 内部的类 PInterpreter，代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 使用 public 访问内部class PInterpreter : public llvm::ExecutionEngine,         public llvm::InstVisitor&lt;llvm::Interpreter&gt; &#123;    public:    llvm::GenericValue ExitValue;    llvm::DataLayout TD;    llvm::IntrinsicLowering *IL;    std::vector&lt;llvm::ExecutionContext&gt; ECStack;    std::vector&lt;llvm::Function*&gt; AtExitHandlers;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后声明要用的方法。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class MInterpreter : public llvm::ExecutionEngine &#123;    public:    llvm::Interpreter *interp;    PInterpreter *pItp;    llvm::Module *module;      explicit MInterpreter(llvm::Module *M);    virtual ~MInterpreter();      virtual void run();    virtual void execute(llvm::Instruction &amp;I);      &#x2F;&#x2F; 入口    virtual int runMain(std::vector&lt;std::string&gt; args,      char * const *envp &#x3D; 0);      &#x2F;&#x2F; 遵循 ExecutionEngine 接口    llvm::GenericValue runFunction(  llvm::Function *F,  const std::vector&lt;llvm::GenericValue&gt; &amp;ArgValues    );    void *getPointerToNamedFunction(const std::string &amp;Name,            bool AbortOnFailure &#x3D; true);    void *recompileAndRelinkFunction(llvm::Function *F);    void freeMachineCodeForFunction(llvm::Function *F);    void *getPointerToFunction(llvm::Function *F);    void *getPointerToBasicBlock(llvm::BasicBlock *BB);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上面代码所示，因为要执行 IR，所以用到获取 IR 的函数和基本块地址的方法，getPointerToFunction 和 getPointerToBasicBlock。最后再执行指令时，先打印出指令，然后进行执行，代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class MingInterpreter : public MInterpreter &#123;    public:    MingInterpreter(Module *M) : MInterpreter(M) &#123;&#125;;    virtual void execute(Instruction &amp;I) &#123;  I.print(errs());  MInterpreter::execute(I);    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码参看 <a href="https://github.com/ming1016/DaiMingCreationToolbox/tree/main/Project/UseCompiler/MingInterpreter">MingInterpreter</a>。</p><p>项目是基于 c 语言，可以使用 llvm include 里的 llvm-c&#x2F;ExecutionEngine.h 接口头文件，使用 c 来编写。OC 和 Swift 项目还需要根据各自语言特性进行开发完善解释功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇还会持续更新，增加更多用 llvm 干的事情，直到本句话被删掉为止。欢迎关注本篇。&lt;/p&gt;
&lt;p&gt;目前在做一些编译相关调研。先前写过篇《
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="LLVM" scheme="http://ming1016.github.io/tags/LLVM/"/>
    
  </entry>
  
  <entry>
    <title>WWDC22 笔记</title>
    <link href="http://ming1016.github.io/2022/06/10/wwdc22-notes/"/>
    <id>http://ming1016.github.io/2022/06/10/wwdc22-notes/</id>
    <published>2022-06-10T04:13:57.000Z</published>
    <updated>2023-04-24T04:33:14.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>今年是 WWDC 的第39个年头了。今年的 WWDC.playground 活动()是 SwiftGG、T 沙龙和老司机技术一起会和社区开发者们一起聊聊这次 WWDC。WWDC.playground 活动在节日期间每天都会有直播，我会和 61、13 他们参加 6月11日晚上8点那场直播。现在那场直播的录播已经放了出来，地址是 <a href="https://www.bilibili.com/video/BV1iY4y1J7eV">WWDC22.playground - Day 5：回顾 WWDC22</a></p><p>下面我整理了一份今年 WWDC 的指南，也算提供个方便的入口吧。</p><ol><li><a href="https://www.apple.com/apple-events/">WWDC22 直播地址</a>、<a href="https://m.weibo.cn/p/2318180003_4873_423">微博直播</a>、<a href="https://www.youtube.com/watch?v=q5D55G7Ejs8">WWDC22 YouTube 地址</a></li><li><a href="https://developer.apple.com/wwdc22">Apple WWDC22 页面</a></li><li><a href="https://developer.apple.com/news/?id=v5kliro5">Apple WWDC22 指南</a></li><li><a href="https://apps.apple.com/us/app/apple-developer/id640199958">Apple Developer app</a> 观看 Session 的 Apple 出的 App。</li><li><a href="https://developer.apple.com/wwdc22/sessions/">Session 网页版</a></li><li><a href="https://developer.apple.com/wwdc22/digital-lounges/">Digital Lounge</a> 注册感兴趣的主题，到时候就可以和 Apple 工程师在 Slack 上一起看 Session，交流。</li><li><a href="https://developer.apple.com/wwdc22/labs/">Labs</a> 可以获得和 Apple 专家一对一指导。6号 keynote 完后就可以开始预约。</li><li><a href="https://developer.apple.com/wwdc22/beyond-wwdc/">Beyond WWDC22</a> 和去年一样，这里是 Apple 制作的世界各地的社区活动。</li><li><a href="https://discord.com/invite/YseNtkGS">weak self Discord WWDC22 Keynote Watch Party</a> 全球最多听众的 iOS 中文 Podcast 之一 weak self 的活动。</li><li><a href="https://www.swiftlyrush.com/category/wwdc22/">Swiftly Rush WWDC22</a></li><li><a href="https://iosfeeds.com/wwdc22">iOS Feeds 的 WWDC 2022 新闻聚合</a></li><li><a href="https://wwdc.io/">WWWDC.io App</a> 社区的看 Session 的 App。</li><li>Keynote 后的 Platforms State of the Union 这个主题是对后面一周 Session 的总结，开发者可以重点关注下。</li><li><a href="https://www.wwdcnotes.com/">WWDC Notes</a> 汇聚了大家的 Session 笔记，可以快速看到各个 Session 的重点。</li><li><a href="https://developer.apple.com/documentation/technologies">Technologies</a> 这里是 Apple 框架 API 分类地址，看完 Session 可以直接在这里找对应 API 的更新。还有个网站 <a href="http://codeworkshop.net/objc-diff/sdkdiffs/">Apple Platform SDK API Differences</a> 会列出新 SDK 里有哪些框架更新了。</li><li><a href="https://developer.apple.com/design/awards/">Apple Design Awards 提名作品</a></li></ol><p>Apple Design Awards 提名作品，我先列几个我喜欢的：</p><ol><li>procreate</li><li>Wylde Flowers</li><li>笼中窥梦</li><li>Gibbon: Beyond the Trees</li><li>Vectornator: Design Software</li><li>Wylde Flowers</li><li>Behind the Frame</li><li>MD Clock - Live in the present</li><li>专注面条</li><li>Townscaper</li></ol><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/wwdc22-notes/01.png" class="lozad post-image"src="/uploads/wwdc22-notes/01.png"></p><p>今天最让我印象深刻是 M2、Lock screen widgets、Stage manager、Swift Charts、WeatherKit、SwiftUI Navigation API、只要一个 1024x1024 App Icon、Sticky headers on Xcode scrolling、Xcode View Debugger 可以用于 SwiftUI 了，还有 iOS 16 原生的支持 Nintendo Switch Pro 手柄了。</p><p>后面我将更多内容使用点对点的分发，可以用 <a href="https://www.planetable.xyz/">Planet</a> 关注，我的 IPNS 是：k51qzi5uqu5dlorvgrleqaphsd1suegn8w40xwhxl0bgsyxw3zerivt59xbk74</p><p>Keynote 要点：</p><ul><li>iOS 16<ul><li>new lock screen</li><li>live activities</li><li>extend focus to lock screen</li><li>forcus filter for apps</li><li>dictation improvements</li><li>live text in video</li><li>visual lookup</li><li>maps<ul><li>multistop routing</li><li>transit(add card to wallet)</li><li>new details</li><li>lookaround api</li></ul></li><li>iCloud shared photo library</li><li>persanalized spatial audio</li><li>quick notes on iPhone</li><li>fitness app without watch</li><li>messages<ul><li>edit messages</li><li>delete messages</li><li>mark as unread</li><li>share play</li></ul></li><li>pay<ul><li>tap to pay on iPhone</li><li>order tracking</li></ul></li><li>carplay<ul><li>widgets</li><li>more personalization</li><li>multi-screen</li></ul></li><li>safety check<ul><li>quickly remove access for others</li></ul></li><li>home<ul><li>introduce matter as new standard</li><li>redesign of app</li></ul></li></ul></li><li>M2<ul><li>15.8 trillion operations per seconds</li><li>10-core GPU</li><li>macbook air and macbook pro 13”</li><li>better and faster</li><li>silent design</li><li>fast charge</li><li>new colors</li><li>magsafe</li><li>audio jack</li></ul></li><li>macOS Ventura<ul><li>improved spotlight</li><li>undo send and more</li><li>shared tab groups</li><li>passkeys</li><li>desk view</li><li>stage manager</li><li>continuity for facetime</li><li>use iPhone as camera on macbook</li></ul></li><li>iPadOS 16<ul><li>weather app</li><li>WeatherKit</li><li>collaborations api</li><li>freeform board</li><li>stage manager</li></ul></li><li>WatchOS 9<ul><li>four new watch faces</li><li>new ShareKit api</li><li>improved metrics for running</li><li>heart rate zones</li><li>create custom workouts</li></ul></li></ul><p>重要的几个信息：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2022/102/">Platforms State of the Union</a> 汇总 WWDC22 技术的 Session，必看。</li><li><a href="https://developer.apple.com/ios/">iOS 16 新 API 和功能</a> Apple 的整理。</li><li><a href="https://developer.apple.com/documentation/New-Technologies-WWDC22">New Technologies WWDC22</a> Apple 整理的 WWDC22 上的新技术。</li><li><a href="https://developer.apple.com/sample-code/wwdc/2022/">WWDC22 Sample Code</a>  </li><li><a href="https://developer.apple.com/documentation/ios-ipados-release-notes/ios-ipados-16-release-notes">iOS and iPadOS 16 release notes</a> 系统接口更新说明，包括 SwiftUI 更新了啥。</li><li><a href="https://developer.apple.com/download/applications/">下载 Xcode 14 beta</a> 直接在开发者官方下载地方下。7个G，这次做了裁剪，手表和电视都做成了可选。</li><li><a href="https://webkit.org/blog/12824/news-from-wwdc-webkit-features-in-safari-16-beta/">Webkit 大量更新</a></li></ul><p>大赞的库：</p><ul><li><a href="https://developer.apple.com/xcode/swiftui/">SwiftUI 更新介绍</a></li><li><a href="https://developer.apple.com/documentation/Charts">Swift Charts</a> 今年 WWDC 的惊喜。Swifty Rush 的文章介绍 <a href="https://www.swiftlyrush.com/swift-charts-with-swiftui/">Swift Charts with SwiftUI</a>。</li><li>Navigation API 又一个惊喜。从以前的 Navigation 迁移到新 API 的文档说明 <a href="https://developer.apple.com/documentation/swiftui/migrating-to-new-navigation-types?changes=latest_minor">Migrating to New Navigation Types</a>。可以看 <a href="https://developer.apple.com/documentation/swiftui/navigationstack?changes=latest_minor">NavigationStack</a> 、<a href="https://developer.apple.com/documentation/swiftui/navigationsplitview">NavigationSplitView</a>。相关 Session 是 <a href="https://developer.apple.com/videos/play/wwdc2022/10054/">The SwiftUI cookbook for navigation</a>。Natalia Panferova 的文章的介绍 <a href="https://nilcoalescing.com/blog/SwiftUINavigation2022/">Overview of the New SwiftUI Navigation APIs</a></li><li>macOS Window 支持，等到了。参看这个示例 <a href="https://developer.apple.com/documentation/swiftui/bringing_multiple_windows_to_your_swiftui_app">Bringing multiple windows to your SwiftUI app</a>。</li><li><a href="https://developer.apple.com/documentation/RegexBuilder">RegexBuilder</a>  构建正则表达式的 DSL</li><li>Live Text API</li><li><a href="https://developer.apple.com/weatherkit/get-started/">Weatherkit 指南</a> 每月在 500k 次调用内是免费。</li><li><a href="https://developer.apple.com/documentation/RoomPlan">RoomPlan 接口文档</a> 用摄像头扫描物理环境，创建房间的 3D 模型。<a href="https://developer.apple.com/augmented-reality/roomplan/">Introducing RoomPlan</a> 介绍 RoomPlan。</li><li><a href="https://developer.apple.com/documentation/spatial">Spatial</a> 轻量 3D 数学库。</li><li>Passkey (FIDO) 原理和 Web3 钱包核心逻辑差不多。</li><li>DriverKit 安全的 USB 和 PCI 硬件设备连接到 iPad 的库。</li></ul><p>好用的功能和组件：</p><ul><li><a href="https://developer.apple.com/documentation/uikit/uicalendarview">UICalendarView</a> 日历视图</li><li><a href="https://developer.apple.com/documentation/backgroundassets/badownloadmanager">BADownloadManager</a> 下载队列管理器。</li><li><a href="https://developer.apple.com/documentation/swiftui/scene/backgroundtask(_:action:)?changes=latest_minor">backgroundTask(_:action:)</a> </li><li>ImageRenderer 将 View 生成图片。</li><li>presentationDetents 优秀。示例 <a href="https://www.swiftlyrush.com/using-presentation-detents-in-swiftui/">Using Presentation Detents in SwiftUI</a></li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0180-string-index-overhaul.md">String Index 升级</a></li></ul><p>一些方便上手的例子：</p><ul><li><a href="https://developer.apple.com/documentation/Xcode/configuring-a-multiplatform-app-target">Configuring a multiplatform app</a> 单代码，多平台 in Xcode 14。</li><li><a href="https://developer.apple.com/documentation/swiftui/food_truck_building_a_swiftui_multiplatform_app/">Food Truck: Building a SwiftUI multiplatform app</a> 示例了 NavigationSplitView、Layout、Chart 和 WeatherKit 的运用。</li></ul><p>一些感兴趣的 Session：</p><ul><li><a href="https://developer.apple.com/wwdc22/topics/">Session 按主题分类</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/110354/">What’s new in Swift</a></li><li><a href="https://developer.apple.com/wwdc22/topics/swift/">Swift Session、Lab 和 Digital Lounges 合集</a> Apple 专门为 Swift 制作的 WWDC22 页面。</li><li><a href="https://developer.apple.com/videos/play/wwdc2022/110350/">Visualize and optimize Swift concurrency</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/110362/">Link fast: Improve build and launch times</a> 构建和启动加快</li><li><a href="https://developer.apple.com/videos/play/wwdc2022/110364/">Demystify parallelization in Xcode builds</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/10002/">Create macOS or Linux virtual machines</a></li></ul><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/wwdc22-notes/02.jpg" class="lozad post-image"src="/uploads/wwdc22-notes/02.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/wwdc22-notes/03.jpg" class="lozad post-image"src="/uploads/wwdc22-notes/03.jpg"></p><p>WWDC.playground 很精彩，怎么感觉昨天的 WWDC.playground 像是听了一期枫言枫语呢。预感 11 号可能会变成为一期 weak self 呢。</p><p>昨天老司机还整理了份 WWDC22 Session 观看介绍的<a href="https://wwdc-reference.feishu.cn/wiki/wikcnXl4ioToZuW4yvfAqUoNQFS?sheet=Lqblfd&table=tblGVOzKgFhVpBWg&view=vewysxfUqf">列表</a></p><p>Apple 出的内容看不够的话，可使用 <a href="https://iosfeeds.com/wwdc22">Follow WWDC 2022 News!</a> 来看最新的 WWDC 相关的社区文章。</p><p>下面是我今天的一些记录。</p><h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h3><p>代码补全的更新。以前多个可选参数的体验很差，这次输入参数比如 frame 里的 maxWidth，会只显示当前要补全的参数。而且速度快了很多。</p><p>以前是编完源码再生成 module，然后 link编好的文件，最后再 link。现在整个过程改成并行执行，同时 link 还快了两倍。结果是比以前快了25%，核越多效果越明显。还有可可视化整个过程。</p><p>多平台以前是多个 tagets，现在是在一个 target 里管理。</p><p>Hangs 是官方线上主线程被卡了的检查工具，在 Organizer 里查看对应问题堆栈也很方便。</p><p>当然最爱的还是 sticky headers，秒杀其它编辑器 （虽然我还是觉得 Emacs 最好，由于会暴露年龄，一般我都不说）。</p><p>还有内存也好了很多，总体来说，这次 Xcode 更新很棒。</p><p>完整 <a href="https://developer.apple.com/documentation/xcode-release-notes/xcode-14-release-notes">Xcode release notes</a> </p><h3 id="WidgetKit"><a href="#WidgetKit" class="headerlink" title="WidgetKit"></a>WidgetKit</h3><p>WidgetKit 将 WatchOS 上的 Circular、Rectangle 还有 Inline 带到了 iOS 和其他平台。</p><h3 id="WeatherKit"><a href="#WeatherKit" class="headerlink" title="WeatherKit"></a>WeatherKit</h3><p>安全方便获得用户位置信息，只用于天气。</p><h3 id="VisionKit"><a href="#VisionKit" class="headerlink" title="VisionKit"></a>VisionKit</h3><p>Live Text API，感觉这类库都是为了以后出眼镜做铺垫的。</p><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>macOS 支持window，menuBar也支持了。</p><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><p>distrubuted actor 更安全，还可以在设备间（<code>本地设备&lt;-&gt;本地设备</code>，<code>本地设备&lt;-&gt;服务器</code>）进行通信保护。</p><p>泛型新语法 some 和 any 关键字写起来真的简化了很多。</p><p>Swift 的更新了什么，除了 Session 外，还可以参看 Paul Hudson 这篇文章 <a href="https://www.hackingwithswift.com/articles/249/whats-new-in-swift-5-7">What’s new in Swift 5.7</a> ，还有 Donny Wals 的这篇 <a href="https://www.donnywals.com/whats-the-difference-between-any-and-some-in-swift-5-7/">What’s the difference between any and some in Swift 5.7?</a> 。</p><h3 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h3><p>SwiftUI里没有用属性包装的属性也能够和视图变化绑定了。</p><p>关于 SwiftUI 的更新，Paul Hudson 写了很多例子 <a href="https://www.hackingwithswift.com/articles/250/whats-new-in-swiftui-for-ios-16">What’s new in SwiftUI for iOS 16</a> 。</p><p>Reda Lemeden 整理了 WWDC22 SwiftUI 的所有相关内容 <a href="https://redalemeden.com/collections/swiftui-2022/">SwiftUI @ WWDC 2022</a> 。可见社区对 SwiftUI 热情依然是最高的。</p><h3 id="SPM"><a href="#SPM" class="headerlink" title="SPM"></a>SPM</h3><p>Swift Package Plugin，本来用其他语言，比如 ruby 、python 或 shell 做的事情，现在可以通过 Swift 语言来完成了，写的 plugin 还可以方便的在 Xcode 中使用。</p><h3 id="虚机"><a href="#虚机" class="headerlink" title="虚机"></a>虚机</h3><p>使用 Virtualization 框架，享受 Rosetta 2 的优势，运行 x86-64 Linux 系统。</p><p>Apple 出虚机可运行 Linux 系统这点可以看得出 Apple 对开源的拥抱，原因还有一点是 Swift 也可以用在 Linux 服务器上了，Apple 用心良苦，也是想让开发者用本打算买其它硬件的钱来买 Apple 的硬件吧，更好的榨干 Apple 硬件过于优秀的性能，如同新出 Stage Manager 通过投到大屏来榨干 M1 的 iPad 性能。 不光是这样，还有文件，也就是存储设备也只需要一份了，更方便，还有苹果特有的 Trackpad 和 Magic mouse 也能够用于 Linux 系统中。</p><p>虚机运行 Linux 和 macOS 的区别是，启动 Linux 使用的是 EFI Boot Loader 来加载 Linux 文件，VirtioGraphicDevice 进行 Linux 系统图形界面的设置和渲染。使用Rosetta 运行 Linux 系统，运行 Linux 就是比其它虚机要快。</p><p>介绍的 session <a href="https://developer.apple.com/wwdc22/10002">Create macOS or Linux virtual machines</a> ，代码说明 <a href="https://developer.apple.com/documentation/virtualization/running_gui_linux_in_a_virtual_machine_on_a_mac">Running GUI Linux in a virtual machine on a Mac</a>，相关主题 <a href="https://developer.apple.com/documentation/virtualization">Virtualization</a></p><h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/wwdc22-notes/04.png" class="lozad post-image"src="/uploads/wwdc22-notes/04.png"></p><p>今晚五神会现身 WWDC.playground 。内容涉及 SwiftUI 和 AR，不要错过。</p><h3 id="今日零散记录"><a href="#今日零散记录" class="headerlink" title="今日零散记录"></a>今日零散记录</h3><p>从 Apple 推出 WeatherKit 可以看出，Apple 喜欢把关键和有想象空间盈利价值的技术掌握在自己手上，WeatherKit 提供大量数据，包括分钟、小时、每日预报，还有提前警报，这些信息的商业价值本就很大。</p><p>今天看了 WeatherKit、Swift Chart 还有 SwiftUI 的 Layout，感觉 Apple 的接口设计能力很值得学习，可能具备了这些能力才能更好地沟通。</p><p>swift-algorithms 可以使用 .indexed() 来替代 zip。</p><p>Federico Zanetello 对 Platforms State of the Union 这个 Session 做的<a href="https://www.wwdcnotes.com/notes/wwdc22/102/">笔记</a> 。</p><p>应用层面，今天还有好多 Swift Chart 的介绍。</p><h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><p>Grid、Layout、ViewThatFits、AnyLayout，特别是 Grid 还统一了 HStack 和 VStack。这些布局方式，让先前复杂的要借助 GeometryReader，且容易出错的布局有了更易的写法。Layout 协议可以为 layout 创建自定义属性，另外布局计算也会被缓存。</p><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p><a href="https://developer.apple.com/videos/play/wwdc2022/110362/">Link fast: Improve build and launch time</a> 详细讲了 Apple 今年怎么改进了 link，思路很棒，很值得学习。</p><p>Static linking 和 Dynamic linking ，也就是静态链接和动态链接。</p><p>静态链接就是链接各个编译好的源文件以及链接源文件和编译好的库文件，通过将函数名放到符号表，链接新文件时确定先前是否有包含的 undefined 符号，给函数的数据指令分配地址，最后生成一个有 TEXT、DATA、LINKEDIT 段的可执行文件。</p><p>今年 Apple  通过利用多核优势让静态链接快了两倍。</p><p>具体做法是，并行的拷贝文件内容。并行构建 LINKEDIT 段的各个不同部分。并行改变 UUID 计算和 codesigning 哈希。然后是提高 exports-trie 构建器的算法。使用最新的 Crypto 库利用硬件加速的优势加速 UUID 计算。提高其它静态库处理算法库，debug-notes 生成也更快了。</p><p>Apple 推荐静态库最佳实践是：</p><p>使用 <code>-all_load</code> 或 <code>-force_load</code> 可以让 .a 文件像 .o 文件那样并行处理，不过开启这个选项需要先处理重复的符号。另外一个副作用是会将一些被判断无用的代码也被链接进来，使包体变大，因此开启之前可以先使用静态分析工具分析处理，这个过程定期做就行，不用放到每次编译过程中。演讲者推荐使用 <code>-dead_strip</code> 选项，但是这样做并没有真实去掉费代码，以后这些代码还是会被编译分析，如果只是暂时不用，可以先注释掉。</p><p>使用 <code>-no_exported_symbols</code> 选项。链接器生成的 LINKEDIT 段的一部分是 exports trie，这是一个前缀树，对所有导出的符号名称、地址和标志进行编码。动态库 是会导出符号的，但运行的二进制文件其实是不用这些符号的，因此可以用 <code>-no_exported_symbols</code> 选项来跳过 LINKEDIT 中 trie 数据结构的创建，这样链接起来就快多了。如果程序导出符号是一百万个，这个选项就可以减少 2 到 3 秒的时间。但需要注意的是，如果要加载插件链接回主程序就需要所有的导出的 trie 数据，无法用这个选项。</p><p>另外一个是 <code>-no_deduplicate</code> 选项。先前 Apple 给链接器加了个 pass 用来合并函数的指令相同，函数名不相同，这个 pass 会对每个函数的指令进行递归散列，用这种方式来找重复指令，这样做比较费 CPU，由于调试时其实是不需要关注包大小，因此可以加上 <code>-no_deduplicate</code> 选项来跳过这个 pass。</p><p>这些选项在 Xcode 的 Other Linker Flags 里进行设置即可。</p><p>动态库也就是 dylib，其它平台就是 DSO 或 DLL。 动态链接器不是将代码从库里考到主二进制里，而是记录某种承诺，记录从动态库中使用符号名称，还有库路径。这样做好处就是好复用动态库，不用拷贝多份。虚拟内存看到多进程使用相同动态库，就会重新给这个动态库用相同的物理内存页。</p><p>动态库好处是构建快了，启动加载慢了，多个动态库不光要加载，还要在启动时链接。也就是把链接成本从本地构建换到了用户启动时。动态库还有个缺点是基于动态库的程序会有更多的 dirty 页，因为静态链接时会把全局数据放到主程序同一个 DATA 页中，动态库的话，每个都在自己的 DATA 页中。</p><p>动态库工作的原理是，可执行的二进制会有不同权限的段，至少会有 TEXT、DATA 和 LINKEDIT。分段总是操作系统页大小的倍数。TEXT 段有执行的权限，CPU 可以将页上的字节当做机器代码指令。运行时，dyld 会根据每个段权限将可执行文件 mmap() 到内存，这些段是页大小和页对齐的，虚拟内存系统可以直接将程序或动态库文件设置为 VM 范围的备份存储。在这些页的内存访问前是不会被加载到 RAM 里，就会触发一个页 fault，导致 VM 去读取文件的子范围，将内存填充到需要 RAM 页中。光映射不够，还要用某种方式“wired up”或绑到动态库上。比如要调用动态库上的某个函数，会转换成调用 site，调用 site 成为一个在相同 TEXT 段合成的 sub 的调用，相对地址在构建时就知道了，就意味着可以正确的形成 BL 指令。这样做的好处是，stub 从 DATA 加载一个指针并跳到对应的位置，不用在运行时修改 TEXT 段，dyld 只在运行时改 DATA 段。dyld 所进行的修改很简单，就是在 DATA 段里设置了一个指针而已。</p><p>当 dyld 或应用程序的指针指向自己时要 rebase，ASLR 使 dyld 以随机地址加载动态库，内部指针不能在构建时设置，dyld 在启动时 rebase 这些指针，磁盘上，如果动态库在地址零出被加载，这些指针包含它们的目标地址。LINKEDIT 需要记录的就是每个重定位的位置。然后，dyld 只需将动态库的实际加载地址添加到每个 rebase 位置。还有种修改方式是绑定，绑定就是符号引用，符号存储在 LINKEDIT 中，dyld 在动态库的 exports tire 中找实际地址，然后 dyld 将该值存储在绑定指定的位置。</p><p>今年 Apple 发布了一个新的修改方式 chained fixups。较前面两种的优势就是可以使 LINKEDIT 更小。新格式只存储每个 DATA 页中第一个 fixup 位置和一个导入的符号列表。其它信息编码到 DATA 段。iOS 13.4 就开始支持了。</p><p>下面先说下 dyld 原理介绍。</p><p>dyld 从主可执行文件开始，解析 mach-o 找依赖动态库，对动态库进行 mmap()。然后对每个动态库进行遍历并解析 mach-o 结构，根据需要加载其它动态库。加载完毕，dyld 会查找所有需要绑定符号，并在修改时使用这些地址。最后修改完，dyld 自下而上运行初始化程序。先前做的优化是只要程序和动态库，dyld 很多步骤都可以在首次启动时被缓存。</p><p>今年 Apple 做了更多的优化，这个优化叫 page-in linking，就是 dyld 在启动时做的 DATA 页面修改放到 page-in 时，也可以理解为懒修改。以前，在 mmap() 区域的某些页面中第一次使用某些地址会触发内核读入该页面。现在如果它是一个数据页，内核会应用改页需要的修改。这种机制减少了 dirty 内存和启动时间。意味着 DATA_CONST 也是干净的，可以像 TEXT 页一样被 evicted 和重新创建，以减少内存压力。需要注意的是 page-in linking 只用于启动，dlopen() 不支持。你看，Apple 优化启动的思路也是按需加载。</p><p>Apple 还提供了追踪 dyld 运行情况的 dyld_usage 工具。检查磁盘和 dyld 缓存中的二进制文件的 dyld_info 工具。</p><h3 id="今日推荐-Session"><a href="#今日推荐-Session" class="headerlink" title="今日推荐 Session"></a>今日推荐 Session</h3><p>除了 link 外，还有 <a href="https://developer.apple.com/videos/play/wwdc2022/110356/">Meet distributed actors in Swift</a> 也是比看的，Mike Ash 和 Doug Gregor 一年的心血就在这了。</p><h2 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/wwdc22-notes/05.png" class="lozad post-image"src="/uploads/wwdc22-notes/05.png"></p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>性能的 <a href="https://developer.apple.com/videos/play/wwdc2022/110363">Improve app size and runtime performance</a> Session 值得一看。</p><p>今年苹果通过更有效的检查 Swift 协议，使 OC 消息发送调用更小，使 autorelease elision 更快更小这几个个方面来让 App 体积更小，性能更高。</p><p>Swift 协议检查。</p><p>一个协议通过 as 操作符检查传递值是否符合协议，这种检查会在编译器的构建时间被优化掉，所以往往需要在运行时借助之前计算协议检查元数据来看对象是否真的符合了协议。一些元数据是在编译时建的，但还有很多元数据只能在启动时建立，特别是使用泛型时。协议多了，会增加耗时，差不多会多一半启动时间。</p><p>今年 Apple 推出新的 Swift 运行时，可以提前计算 Swift 协议元数据，作为 App 可执行文件和它在启动时使用的任何动态库的 dyld 闭包的一部分。这个是在系统上的，因此，只要是使用了今年最新系统的 App 都会享受这个优化，可以理解为，新系统上启动老 App 也会快些。</p><p>消息发送。</p><p>Xcode 14 中新的编译器和链接器已经将 ARM64 的消息发送调用从 12 字节减少到 8 字节。因此如果你的 App 都是 OC 代码的话，使用 Xcode 14 编出来的二进制文件可以少 2%。老系统也有效。</p><p>使用 objc_stubs_small 选项可以只优化大小，获得最大的大小优化。objc_msgSend 调动有 8 个字节指令，也就是2个指令是专门用来准备 selector 的，对于任何特定的 selector，总是相同的代码，由于始终是相同的代码，那么就可以对其共享，每个 selector 只 emit 一次，而不是每次发送消息时都 emit。共享这段代码地方是一个叫 selector stub 的函数。</p><p>ARC 会在编译器插入大量的 c 的 retain&#x2F;release 函数调用。这些调用遵守平台应用二进制接口（ABI）所定义的 c 语言 call convention。也就意味着我们要更多代码来完成这些调用，用来传递正确寄存器的指针。Apple 今年推出了自定义的 call convention 根据指针位置，适时使用正确变量而不用移动它，从而摆脱了调用里的多余代码。Apple 果然是坚持用户体验优先，为了更好体验不惜修改 c 的 ABI。</p><p>autorelease elision 。</p><p>App 今年对 objc 运行时进行了修改，使 autorelease elision 更小更快。deployment target 为 iOS 16 今年新系统时才可享用哦。</p><p>Apple 怎么做的呢？</p><p>ARC 在调用方插入一个 retain，在被调用的函数中插入一个 release。当我们返回我们的临时对象时，我们需要在函数中先释放它，因为它要离开 scope。在它还没有任何其它引用时还不能这么做，不然返回前他就会被销毁。Apple 现在使用一个新的 convention ，让其可以返回临时对象。做法是当返回一个自动释放值，编译器会发出一个特殊标记，这个标记会告诉运行时这是符合自动释放条件的。它的后面是 retain，我们会在后面执行。获取返回地址，也就是一个指针，将它先保存起来，然后离开运行时的自动释放调用。在运行时，可以将保留时得到的指正和先前做自动释放时保存的指针进行比较，这样标记指令不再是数据之间的比较，比较指针内存访问少。比较成功就可以省去 autorelease&#x2F;retain。</p><p>autorelease elision 的优化同样也可以减少 2% 大小。感谢 Apple 为了用户和开发者 OKR 的付出。</p><h3 id="SwiftUI-1"><a href="#SwiftUI-1" class="headerlink" title="SwiftUI"></a>SwiftUI</h3><p>new navigation api，看完感觉我做的小册子还有幻灯应用要花些时间好好改改了。</p><p>接下来，有活干了。</p><h3 id="WWDC-playground"><a href="#WWDC-playground" class="headerlink" title="WWDC.playground"></a>WWDC.playground</h3><p>明天的 WWDC.playground 嘉宾有谜底科技和 weak self，欢迎来捧场。</p><p>下面是按分类做的记录：</p><h2 id="Swift-1"><a href="#Swift-1" class="headerlink" title="Swift"></a>Swift</h2><p>String Index 大升级 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0180-string-index-overhaul.md">String Index Overhaul</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.apple.com/wwdc22/topics/swift/">WWDC22 Swift 专题</a></li><li><a href="https://developer.apple.com/swift/">Swift 主题</a></li><li><a href="https://developer.apple.com/videos/swift">Swift Session</a></li><li><a href="https://developer.apple.com/documentation/Swift">Swift 文档</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/110354/">What’s new in Swift</a></li></ul><h3 id="Regex"><a href="#Regex" class="headerlink" title="Regex"></a>Regex</h3><p>标准库多了个 <code>Regex&lt;Output&gt;</code> 类型，Regex 语法与 Perl、Python、Ruby、Java、NSRegularExpression 和许多其他语言兼容。可以用 <code>let regex = try! Regex(&quot;a[bc]+&quot;)</code> 或 <code>let regex = /a[bc]+/</code> 写法来使用。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0350-regex-type-overview.md">SE-0350 Regex Type and Overview</a> 引入 Regex 类型。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0351-regex-builder.md">SE-0351 Regex builder DSL</a> 使用 result builder 来构建正则表达式的 DSL。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0354-regex-literals.md">SE-0354 Regex Literals</a> 简化的正则表达式。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0357-regex-string-processing-algorithms.md">SE-0357 Regex-powered string processing algorithms</a> 提案里有基于正则表达式的新字符串处理算法。</p><p><a href="https://developer.apple.com/documentation/RegexBuilder">RegexBuilder 文档</a></p><p>session <a href="https://developer.apple.com/videos/play/wwdc2022-110357">Meet Swift Regex</a> 、<a href="https://developer.apple.com/videos/play/wwdc2022-110358">Swift Regex: Beyond the basics</a></p><p>Regex 示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"I am not a good painter"</span></span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">ranges</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token operator">/</span>good<span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> regGood <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">Regex</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"[a-z]ood"</span></span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">replacing</span><span class="token punctuation">(</span>regGood<span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"bad"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">trimmingPrefix</span><span class="token punctuation">(</span><span class="token operator">/</span>i am <span class="token operator">/</span><span class="token punctuation">.</span><span class="token function">ignoresCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">let</span> reg1 <span class="token operator">=</span> <span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">.+?</span><span class="token punctuation">)</span> <span class="token function">read</span> <span class="token punctuation">(</span><span class="token punctuation">\</span>d<span class="token operator">+</span><span class="token punctuation">)</span> books<span class="token operator">./</span><span class="token keyword">let</span> reg2 <span class="token operator">=</span> <span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">?&lt;</span>name<span class="token operator">></span><span class="token operator">.+?</span><span class="token punctuation">)</span> <span class="token function">read</span> <span class="token punctuation">(</span><span class="token operator">?&lt;</span>books<span class="token operator">></span><span class="token punctuation">\</span>d<span class="token operator">+</span><span class="token punctuation">)</span> books<span class="token operator">./</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Jack read 3 books."</span></span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> r1 <span class="token operator">=</span> <span class="token keyword">try</span> reg1<span class="token punctuation">.</span><span class="token function">wholeMatch</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> r2 <span class="token operator">=</span> <span class="token keyword">try</span> reg2<span class="token punctuation">.</span><span class="token function">wholeMatch</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"name:"</span></span> <span class="token operator">+</span> r2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"books:"</span></span> <span class="token operator">+</span> r2<span class="token punctuation">.</span>books<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 regex builders 的官方示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// Text to parse:</span><span class="token comment">// CREDIT  03/02/2022  Payroll from employer     $200.23</span><span class="token comment">// CREDIT  03/03/2022  Suspect A           $2,000,000.00</span><span class="token comment">// DEBIT   03/03/2022  Ted's Pet Rock Sanctuary    $2,000,000.00</span><span class="token comment">// DEBIT   03/05/2022  Doug's Dugout Dogs      $33.27</span><span class="token keyword">import</span> <span class="token class-name">RegexBuilder</span><span class="token keyword">let</span> fieldSeparator <span class="token operator">=</span> <span class="token operator">/</span><span class="token punctuation">\</span>s<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token punctuation">\</span>t<span class="token operator">/</span><span class="token keyword">let</span> transactionMatcher <span class="token operator">=</span> <span class="token class-name">Regex</span> <span class="token punctuation">&#123;</span>  <span class="token operator">/</span><span class="token constant">CREDIT</span><span class="token operator">|</span><span class="token constant">DEBIT</span><span class="token operator">/</span>  fieldSeparator  <span class="token class-name">One</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">.</span>numeric<span class="token punctuation">,</span> locale<span class="token punctuation">:</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"en_US"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeZone<span class="token punctuation">:</span> <span class="token punctuation">.</span>gmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 👈🏻 we define which data locale/timezone we want to use</span>  fieldSeparator  <span class="token class-name">OneOrMore</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">NegativeLookahead</span> <span class="token punctuation">&#123;</span> fieldSeparator <span class="token punctuation">&#125;</span> <span class="token comment">// 👈🏻 we stop as soon as we see one field separator</span>    <span class="token class-name">CharacterClass</span><span class="token punctuation">.</span>any  <span class="token punctuation">&#125;</span>  fieldSeparator  <span class="token class-name">One</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">localizedCurrency</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"USD"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"en_US"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在正则表达式中捕获数据，使用 Capture：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> fieldSeparator <span class="token operator">=</span> <span class="token operator">/</span><span class="token punctuation">\</span>s<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token punctuation">\</span>t<span class="token operator">/</span><span class="token keyword">let</span> transactionMatcher <span class="token operator">=</span> <span class="token class-name">Regex</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Capture</span> <span class="token punctuation">&#123;</span> <span class="token operator">/</span><span class="token constant">CREDIT</span><span class="token operator">|</span><span class="token constant">DEBIT</span><span class="token operator">/</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 👈🏻</span>  fieldSeparator  <span class="token class-name">Capture</span> <span class="token punctuation">&#123;</span> <span class="token class-name">One</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">.</span>numeric<span class="token punctuation">,</span> locale<span class="token punctuation">:</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"en_US"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeZone<span class="token punctuation">:</span> <span class="token punctuation">.</span>gmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 👈🏻</span>  fieldSeparator  <span class="token class-name">Capture</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 👈🏻</span>    <span class="token class-name">OneOrMore</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">NegativeLookahead</span> <span class="token punctuation">&#123;</span> fieldSeparator <span class="token punctuation">&#125;</span>      <span class="token class-name">CharacterClass</span><span class="token punctuation">.</span>any    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  fieldSeparator  <span class="token class-name">Capture</span> <span class="token punctuation">&#123;</span> <span class="token class-name">One</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">localizedCurrency</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"USD"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"en_US"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 👈🏻</span><span class="token punctuation">&#125;</span><span class="token comment">// transactionMatcher: Regex&lt;(Substring, Substring, Date, Substring, Decimal)></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型与协议"><a href="#泛型与协议" class="headerlink" title="泛型与协议"></a>泛型与协议</h3><p>session <a href="https://developer.apple.com/videos/play/wwdc2022/110352/">Embrace Swift generics</a> 、<a href="https://developer.apple.com/videos/play/wwdc2022-110353">Design protocol interfaces in Swift</a></p><p>swift 5.6 和之前编写泛型接口如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">feed</span><span class="token operator">&lt;</span><span class="token class-name">A</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token omit keyword">_</span> animal<span class="token punctuation">:</span> <span class="token class-name">A</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">A</span><span class="token punctuation">:</span> <span class="token class-name">Animal</span><span class="token comment">// 👆🏻👇🏻 Equivalents</span><span class="token keyword">func</span> <span class="token function-definition function">feed</span><span class="token operator">&lt;</span><span class="token class-name">A</span><span class="token punctuation">:</span> <span class="token class-name">Animal</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token omit keyword">_</span> animal<span class="token punctuation">:</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>swift 5.7 可以这样写：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">feed</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> animal<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>some 关键字可以用于参数和结构类型。some 会保证类型关系，而 any 会持有任意具体类型，删除类型关系。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0347-type-inference-from-default-exprs.md">SE-0347 Type inference from default expressions</a> 扩展 Swift 泛型参数类型的默认值能力。如下代码示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">suffledArray</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Sequence</span><span class="token operator">></span><span class="token punctuation">(</span>from options<span class="token punctuation">:</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Array</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">shuffled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">suffledArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">suffledArray</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0341-opaque-parameters.md">SE-0341 Opaque Parameter Declarations</a> 使用 some 参数简化泛型参数声明。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0328-structural-opaque-result-types.md">SE-0328 Structural opaque result types</a> 扩大不透明结果返回类型可以使用的范围。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0360-opaque-result-types-with-availability.md">SE-0360 Opaque result types with limited availability</a> 可用性有限的不透明结果类型，比如 <code>if #available(macOS 13.0, *) &#123;&#125;</code> 就可以根据系统不同版本返回不同类型，新版本出现新类型的 View 就可以和以前的 View 类型区别开。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md">SE-0309 Unlock existentials for all protocols</a> 改进了 existentials 和 泛型的交互。这样就可以更方便的检查 Any 类型的两个值是否相等</p><p>any 关键字充当的是类型擦除的助手，是通过告知编译器你使用 existential 作为类型，此语法可兼容以前系统。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0346-light-weight-same-type-syntax.md">SE-0346 Lightweight same-type requirements for primary associated types</a> 引入一种新语法，用于符合泛型参数并通过相同类型要求约束关联类型。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0358-primary-associated-types-in-stdlib.md">SE-0358 Primary Associated Types in the Standard Library</a> 引入主要关联类型概念，并将其带入了标准库。这些关联类型很像泛型，允许开发者将给定关联类型的类型指定为通用约束。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0353-constrained-existential-types.md">SE-0353 Constrained Existential Types</a> 基于 SE-0309 和 SE-0346 提案，在 existential 类型的上下文中重用轻量关联类型的约束。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0352-implicit-open-existentials.md">SE-0352 Implicitly Opened Existentials</a>  允许 Swift 在很多情况下使用协议调用泛型函数。</p><p>Swift 论坛上一个对 any 和 some 关键字语法使用场景的讨论，<a href="https://forums.swift.org/t/do-any-and-some-help-with-protocol-oriented-testing-at-all/58113">Do <code>any</code> and <code>some</code> help with “Protocol Oriented Testing” at all?</a> 。</p><h3 id="Swift-Concurrency"><a href="#Swift-Concurrency" class="headerlink" title="Swift Concurrency"></a>Swift Concurrency</h3><p>session <a href="https://developer.apple.com/videos/play/wwdc2022-110351">Eliminate data races using Swift Concurrency</a> 、<a href="https://developer.apple.com/videos/play/wwdc2022-110350">Visualize and optimize Swift concurrency</a> 、<a href="https://developer.apple.com/videos/play/wwdc2022-110355">Meet Swift Async Algorithms</a> 。</p><p>表示持续时间有了新的放来来表达，对应提案是 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0329-clock-instant-duration.md">SE-0329 Clock, Instant, and Duration</a> ，continuous clock 是在系统睡眠状态还会增加时间，suspending clock 在系统睡眠状态不会增加时间。Instants 表示一个确定的时间。Duration 表示两个时间经历了多久。</p><p>新增 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0338-clarify-execution-non-actor-async.md">SE-0338 Clarify the Execution of Non-Actor-Isolated Async Functions</a> 通过收紧可发送性检查的规则来避免潜在的数据竞争。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0343-top-level-concurrency.md">SE-0343 Concurrency in Top-level Code</a> 这个提案主要是更好地支持命令行工具的开发，可以直接将 concurrency 代码写到 main.swift 文件里。</p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0340-swift-noasync.md">SE-0340 Unavailable From Async Attribute</a> 提供 noasync 语法以允许我们将类型和函数标记为在异步上下文不可用。</p><p>Task 是按顺序执行的，是异步的，在 await 时可以暂停任意次数。task 是自包含的，有自己的资源，可以独立于任何其他 task 独立运行。task 通过在 body 末尾返回一个值来传递对象，值类型没问题，如果是引用类型有可能出现数据竞争。</p><p>通过 Sendable 协议 Swift 可以帮助告诉我们什么时候 task 之间共享数据是安全的。Sendable 描述的类型可以跨隔离 domain，不会有数据竞争，Swift 编译器会在构建时检查数据竞争。task 的返回类型要符合 Sendable。</p><p>引用类型只能在很少的情况下符合 Sendable。比如 final class 只有不可变的存储。对于自己内部同步的引用类型，比如锁，可以用 <code>@unchecked Sendable</code> 。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">class</span> <span class="token class-name">ConcurrentCache</span><span class="token operator">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span> <span class="token operator">&amp;</span> <span class="token class-name">Sendable</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">:</span> <span class="token class-name">Sendable</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token attribute atrule">@unchecked</span> <span class="token class-name">Sendable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> lock<span class="token punctuation">:</span> <span class="token class-name">NSLock</span>  <span class="token keyword">var</span> storage<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Key</span><span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">]</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Actor 提供了一种隔离状态的方法可以消除数据竞争。使用 task 来执行 actor 定义的代码。一次只能在一个 actor 上执行一个 task。actor 也是依赖 Sendable。actor 是引用类型，但隔离了他们所有属性和代码来防止并发访问。<code>@MainActor</code> 表示的是主线程，你要在应用中更新 UI 时来用它。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@MainActor</span> <span class="token keyword">func</span> <span class="token function-definition function">updateView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span class="token class-name">Task</span> <span class="token punctuation">&#123;</span> <span class="token attribute atrule">@MainActor</span> <span class="token keyword">in</span>  <span class="token comment">// update UI here</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@MainActor</code> 也可以用于类，类的属性和方法只能在主 main actor 上访问，除非标记为 <code>nonisolated</code> 。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token attribute atrule">@MainActor</span><span class="token keyword">class</span> <span class="token class-name">ChickenValley</span><span class="token punctuation">:</span> <span class="token class-name">Sendable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> flock<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Chicken</span><span class="token punctuation">]</span>  <span class="token keyword">var</span> food<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Pineapple</span><span class="token punctuation">]</span>  <span class="token keyword">func</span> <span class="token function-definition function">advanceTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> chicken <span class="token keyword">in</span> flock <span class="token punctuation">&#123;</span>      chicken<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token operator">&amp;</span>food<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Distributed-Actors"><a href="#Distributed-Actors" class="headerlink" title="Distributed Actors"></a>Distributed Actors</h3><p>actor 具有分布式形式工作能力，也就是可以 RPC 通过网络读取和写入属性或者调用方法。设计为保护在跨多个进程中的低级别数据竞争。Distributed actors 可以在两个进程间建立通道，隔离它们状态，并在它们之间异步通信。每个 distributed actors 在 actor 初始化时分配一个不可以手动创建的 id，在它所属整个 distributed actor 系统中唯一标识所指 actor，这样无论 distributed actors 在哪，都可以以相同的方式与之交互。</p><p>session <a href="https://developer.apple.com/videos/play/wwdc2022/110356/">Meet distributed actors in Swift</a> 。这里有个 distributed actors 的代码示例 <a href="https://developer.apple.com/documentation/swift/tictacfish_implementing_a_game_using_distributed_actors">TicTacFish: Implementing a game using distributed actors</a></p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0336-distributed-actor-isolation.md">SE-0336 Distributed Actor Isolation</a> 和 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0344-distributed-actor-runtime.md">SE-0344 Distributed Actor Runtime</a> 是两个 Distributed Actors 的相关提案。</p><p>Apple 提供了一个参考的服务端 cluster actor 系统实现示例，<a href="https://github.com/apple/swift-distributed-actors">cluster actor system implementation</a> 。</p><h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0345-if-let-shorthand.md">SE-0345 if let shorthand for shadowing an existing optional variable</a> 引入的新语法，用于 unwrapping optinal。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> s1<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"hey"</span></span><span class="token keyword">let</span> s2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"u"</span></span><span class="token keyword">if</span> <span class="token keyword">let</span> s1 <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">guard</span> <span class="token keyword">let</span> s1<span class="token punctuation">,</span> <span class="token keyword">let</span> s2 <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> <span class="token string-literal"><span class="token string">" "</span></span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0326-extending-multi-statement-closure-inference.md">SE-0326</a> 提高了 Swift 对闭包使用参数和类型推断的能力。如下代码：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> r <span class="token operator">=</span> a<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>    <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 大于等于2"</span></span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 小于2"</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Result-Builders"><a href="#Result-Builders" class="headerlink" title="Result Builders"></a>Result Builders</h3><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0348-buildpartialblock.md">SE-0348 buildPartialBlock for result builders</a>  简化了实现复杂 result buiders 所需的重载。</p><h3 id="Swift-DocC"><a href="#Swift-DocC" class="headerlink" title="Swift-DocC"></a>Swift-DocC</h3><p>现在支持 Swift、OC 和 C，文档标记一样。<code>.doccarchive</code> 包含可部署的网站内容，兼容大多数托管服务，比如 Github pages。部署到在线服务上可参考 <a href="https://apple.github.io/swift-docc-plugin/documentation/swiftdoccplugin/generating-documentation-for-hosting-online/">Generating Documentation for Hosting Online</a> 和 <a href="https://apple.github.io/swift-docc-plugin/documentation/swiftdoccplugin/publishing-to-github-pages/">Publishing to GitHub Pages</a> 文档。</p><p>和 SPM 集成参看 <a href="https://apple.github.io/swift-docc-plugin/documentation/swiftdoccplugin/">SwiftDocCPlugin</a> 。</p><p>session 有 <a href="https://developer.apple.com/videos/play/wwdc2022-110368">What’s new in Swift -DocC</a> 和 <a href="https://developer.apple.com/videos/play/wwdc2022-110369">Improve the discoverability of your Swift-DocC content</a></p><p><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0356-swift-snippets.md">SE-0356 Swift Snippets</a>  代码片段用于示例文档的提案。</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>session <a href="https://developer.apple.com/videos/play/wwdc2022-110370">Debug Swift debugging with LLDB</a></p><p>编译器编译 swift 文件生成 <code>.o</code> 文件会有 <code>__debug_info</code> 段，其中有可以映射到源文件和行号的地址。debug 信息可以链接到 <code>.dSYM</code> 包。debug 信息链接器叫 dsymutil，dsymutil 可以为每个动态库、framework 或 dylib 和可执行文件打包一个 debug 信息存档（<code>.dSYM</code> 包）。</p><p>image 和路径怎么重映射。使用 <code>image list nameOfFramework</code> 来检查 LLDB 是否找到了我们应用程序里嵌入的第三方框架的 debug dSYM。使用 <code>image lookup 0xMemoryAddressHere</code> 获取当前地址更多信息。要重新映射源文件 <code>.dSYM</code> 路径，使用 <code>settings set target.source-map old/path new/path</code>。每个 <code>.dSYM</code> 都有一个 <code>UUID.plist</code>，我们可以在其中设置 DBGSourcePathRemapping 这个字典。</p><p>Xcode 14 新增 <code>swift-healthcheck</code> 命令，这个命令可以了解 module 为何导入失败。</p><p>LLDB 怎么找到 Swift module？每个 <code>.dSYM</code> 包都可以包含二级制 swift module，其中可能包含桥头文件、swift 接口文件 <code>.swiftinterface</code>，还有 debug 信息。静态存档不是由链接器生成的，需要向链接器注册 swift module，使用 <code>ld ... -add-ast-path /path/to/My.swiftmodule</code> ，动态库和可执行文件的话，Xcode 会自动完成此操作。可以使用 dsymutil 来 dump 你可执行文件的符号表，并用 grep 找 swiftmodule，命令是 <code>dsymutil -s MyApp | grep .swiftmodule</code> 。</p><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>相关提案包括 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0349-unaligned-loads-and-stores.md">SE-0349 Unaligned Loads and Stores from Raw Memory</a> 、<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0334-pointer-usability-improvements.md">SE-0334 Pointer API Usability Improvements</a> 、<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0333-with-memory-rebound.md">SE-0333 Expand usability of withMemoryRebound</a></p><p>Set 使用新的 Temporary Buffers 功能，让 intersect 速度提升了 4 到 6 倍。</p><h2 id="SwiftUI-2"><a href="#SwiftUI-2" class="headerlink" title="SwiftUI"></a>SwiftUI</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://twitter.com/kuba_suder">Kuba Suder</a> 做了一个 <a href="https://mackuba.eu/swiftui/changelog">SwiftUI Index&#x2F;Changelog</a> ，从官方文档中提取版本信息，一目了然 SwiftUI 每个版本 view，modifier 还有属性做了哪些增加和改变。当然也包括这次 SwiftUI 4 的更新。还有份对今年更新整理的 cheat sheet <a href="https://bigmountainstudio.github.io/What-is-new-in-SwiftUI/">What’s New In SwiftUI for iOS Cheat Sheet - WWDC22</a> 。</p><p>SwiftUI 4 做了大量细节更新，比如添加了后台任务函数 <a href="https://developer.apple.com/documentation/swiftui/scene/backgroundtask(_:action:)?changes=latest_minor">backgroundTask(_:action:)</a> 。List 改用 UICollectionView。AnyLayout 让 HStack 和 VStack 之间可以自由切换。<code>scrollDismissesKeyboard()</code> modifier 可以让键盘在滚动时自动 dismiss。<code>scrollIndicators()</code> modifier 可以隐藏 ScrollView 和 List 等视图的滚动指示。defersSystemGestures() modifier 允许我们的手势优先于系统的内置手势。颜色的 <code>.gradient </code> 可以获得很简单的渐变，<code>Rectangle().fill(.red.gradient)</code>，还有 <code>.shadow</code> 用来创建投影 <code>Rectangle().fill(.red.shadow(.drop(color: .black, radius: 10)))</code>，还有 <code>.inner</code> 内阴影。<code>lineLimit()</code> modifier 支持范围设置。还有一些 modifier 支持 toggle 参数，比如 <code>.bold()</code> 和 <code>.italic()</code> 等，这样利于运行时进行调整。</p><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.apple.com/wwdc22/topics/swiftui-ui-frameworks/">WWDC22 SwiftUI 和 UI 库相关专题</a></li><li>官方教程 <a href="https://developer.apple.com/tutorials/swiftui-concepts">Learnning SwiftUI</a></li><li><a href="https://developer.apple.com/xcode/swiftui/">SwiftUI 主题</a></li><li><a href="https://developer.apple.com/videos/swiftui-ui-frameworks">SwiftUI Session</a></li><li><a href="https://developer.apple.com/documentation/SwiftUI">SwiftUI 文档</a></li><li><a href="https://developer.apple.com/tutorials/swiftui-concepts">Learning SwiftUI</a> 一年一度官方入门教程</li><li><a href="https://developer.apple.com/documentation/swiftui/food_truck_building_a_swiftui_multiplatform_app">Food Truck: Building a SwiftUI multiplatform app</a> 一套代码适配 Mac、iPad 和 iPhone 的官方示例</li><li><a href="https://redalemeden.com/collections/swiftui-2022/">Reda Lemeden 整理的 WWDC22 所有 SwiftUI 相关内容</a></li></ul><p>session：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2022-10052">What’s new in SwiftUI</a></li></ul><p>社区整理的和 SwiftUI 的 digital lounges 内容：</p><ul><li><a href="https://onmyway133.com/posts/wwdc-swiftui-lounge/">WWDC swiftui-lounge</a></li><li><a href="https://swiftui-lab.com/digital-lounges-2022/">WWDC 2022: Lessons from the SwiftUI Digital Lounges</a> javier 整理的，做了详细的分类</li><li><a href="https://midnight-beanie-ccb.notion.site/swiftui-lounge-wwdc22-e20094b91f074398ba395c3fa245e63d">#swiftui-lounge #wwdc22</a></li></ul><h3 id="Navigation-接口"><a href="#Navigation-接口" class="headerlink" title="Navigation 接口"></a>Navigation 接口</h3><p>控制导航启动状态、管理 size class 之间的 transition 和响应 deep link。</p><p>Navigation bar 有新的默认行为，如果没有提供标题，导航栏默认为 inline  title 显示模式。使用 <code>navigationBarTitleDisplayMode(_:)</code> 改变显示模式。如果 navigation bar  没有标题、工具栏项或搜索内容，它就会自动隐藏。使用 <code>.toolbar(.visible)</code> modifier 显示一个空 navigation bar。</p><p>参考：</p><ul><li><a href="https://developer.apple.com/documentation/swiftui/migrating-to-new-navigation-types?changes=latest_minor">Migrating to New Navigation Types</a> 官方迁移指南</li><li><a href="https://developer.apple.com/documentation/swiftui/navigationstack?changes=latest_minor">NavigationStack</a></li><li><a href="https://developer.apple.com/documentation/swiftui/navigationsplitview">NavigationSplitView</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/10054/">The SwiftUI cookbook for navigation</a></li></ul><p>NavigationStack 的示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PNavigationStack</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token comment">// 深层链接</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> $a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..&lt;</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 行"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.circle"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 行内容"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"NavigationStack Demo"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 path 设置了 stack 的深度路径。</p><p>NavigationSplitView 两栏的例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PNavigationSplitViewTwoColumn</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> choice<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationSplitView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $choice<span class="token punctuation">,</span> rowContent<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> detail<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>choice <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NavigationSplitView 三栏的例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PNavigationSplitViewThreeColumn</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Group</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span><span class="token punctuation">,</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>        <span class="token keyword">var</span> subs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> gps <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token class-name">Group</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"One"</span></span><span class="token punctuation">,</span> subs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"o1"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"o2"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"o3"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Group</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">,</span> subs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"t1"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"t2"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"t3"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> choiceGroup<span class="token punctuation">:</span> <span class="token class-name">Group</span><span class="token operator">?</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> choiceSub<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> cv <span class="token operator">=</span> <span class="token class-name">NavigationSplitViewVisibility</span><span class="token punctuation">.</span>automatic        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationSplitView</span><span class="token punctuation">(</span>columnVisibility<span class="token punctuation">:</span> $cv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>gps<span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $choiceGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationSplitViewColumnWidth</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>choiceGroup<span class="token operator">?</span><span class="token punctuation">.</span>subs <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $choiceSub<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> detail<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>choiceSub <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点击"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cv <span class="token operator">=</span> <span class="token punctuation">.</span>all            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">navigationSplitViewStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>prominentDetail<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>navigationSplitViewColumnWidth() </code> 是用来自定义宽的，<code>navigationSplitViewStyle</code> 设置为 <code>.prominentDetail</code> 是让 detail 的视图尽量保持其大小。</p><p>SwiftUI 新加了个<a href="https://developer.apple.com/documentation/swiftui/presentedwindowcontent/toolbar(_:in:)">功能</a>可以配置是否隐藏 Tabbar，这样在从主页进入下一级时就可以选择不显示底部标签栏了，示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toolbar</span><span class="token punctuation">(</span><span class="token punctuation">.</span>hidden<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>tabBar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相比较以前 NavigationView 增强的是 destination 可以根据值的不同类型展示不同的目的页面，示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PNavigationStackDestination</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"字符串"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"字符串"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"红色"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"不同类型 Destination"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c <span class="token keyword">in</span>                c<span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 的 detail"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Swift-Charts"><a href="#Swift-Charts" class="headerlink" title="Swift Charts"></a>Swift Charts</h3><p>可视化数据，使用 SwiftUI 语法来创建。还可以使用 ChartRenderer 接口将图标渲染成图。</p><p>官方文档 <a href="https://developer.apple.com/documentation/Charts">Swift Charts</a></p><p>入门参看 <a href="https://developer.apple.com/videos/play/wwdc2022/10136/">Hello Swift Charts</a></p><p>Apple 文章 <a href="https://developer.apple.com/documentation/Charts/Creating-a-chart-using-Swift-Charts">Creating a chart using Swift Charts</a></p><p>高级定制和创建更精细图表，可以看这个 session <a href="https://developer.apple.com/videos/play/wwdc2022/10137">Swift Charts: Raise the bar</a> 这个 session 也会提到如何在图表中进行交互。这里是 session 对应的代码示例 <a href="https://developer.apple.com/documentation/charts/visualizing_your_app_s_data">Visualizing your app’s data</a> 。</p><p>图表设计的 session，<a href="https://developer.apple.com/videos/play/wwdc2022-110340">Design an effective chart</a> 和 <a href="https://developer.apple.com/videos/play/wwdc2022-110342">Design app experiences with charts</a> 。</p><p>下面是一个简单的代码示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Charts</span><span class="token keyword">struct</span> <span class="token class-name">PChartModel</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> day<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> amount<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">..&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">PChartModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">PChartModel</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token punctuation">.</span>gregorian<span class="token punctuation">)</span>        <span class="token keyword">let</span> days <span class="token operator">=</span> calendar<span class="token punctuation">.</span>shortWeekdaySymbols        <span class="token keyword">return</span> days<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> day <span class="token keyword">in</span>            <span class="token class-name">PChartModel</span><span class="token punctuation">(</span>day<span class="token punctuation">:</span> day<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PlayCharts</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Chart</span><span class="token punctuation">(</span><span class="token class-name">PChartModel</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> v <span class="token keyword">in</span>            <span class="token class-name">BarMark</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"天"</span></span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"数量"</span></span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PSwiftCharts</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">CData</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span>        <span class="token keyword">let</span> v<span class="token punctuation">:</span> <span class="token class-name">Double</span>    <span class="token punctuation">&#125;</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">CData</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Chart</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>            <span class="token class-name">LineMark</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Index"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Value"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token class-name">BarMark</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Index"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> yStart<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"开始"</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> yEnd<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"结束"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Value"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end Chart</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BarMark 用于创建条形图，LineMark 用于创建折线图。SwiftUI Charts 框架还提供 PointMark、AxisMarks、AreaMark、RectangularMark 和 RuleMark 用于创建不同类型的图表。注释使用 <code>.annotation</code> modifier，修改颜色可以使用 <code>.foregroundStyle</code> modifier。<code>.lineStyle</code> modifier 可以修改线宽。</p><p>AxisMarks 的示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">MonthlySalesChart</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Chart</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>month<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BarMark</span><span class="token punctuation">(</span>                x<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Month"</span></span><span class="token punctuation">,</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>month<span class="token punctuation">,</span> unit<span class="token punctuation">:</span> <span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">,</span>                y<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Sales"</span></span><span class="token punctuation">,</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>sales<span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>chartXAxis <span class="token punctuation">&#123;</span>            <span class="token class-name">AxisMarks</span><span class="token punctuation">(</span>values<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">stride</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value <span class="token keyword">in</span>                <span class="token keyword">if</span> value<span class="token punctuation">.</span><span class="token keyword">as</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>isFirstMonthOfQuarter <span class="token punctuation">&#123;</span>                    <span class="token class-name">AxisGridLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>                    <span class="token class-name">AxisTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>                    <span class="token class-name">AxisValueLabel</span><span class="token punctuation">(</span>                        format<span class="token punctuation">:</span> <span class="token punctuation">.</span>dateTime<span class="token punctuation">.</span><span class="token function">month</span><span class="token punctuation">(</span><span class="token punctuation">.</span>narrow<span class="token punctuation">)</span>                    <span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">AxisGridLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可交互图表示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">InteractiveBrushingChart</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> range<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Chart</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">LineMark</span><span class="token punctuation">(</span>                    x<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Month"</span></span><span class="token punctuation">,</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>day<span class="token punctuation">,</span> unit<span class="token punctuation">:</span> <span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">,</span>                    y<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Sales"</span></span><span class="token punctuation">,</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>sales<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">interpolationMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span>catmullRom<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">symbol</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">strokeBorder</span><span class="token punctuation">(</span>lineWidth<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token operator">=</span> range <span class="token punctuation">&#123;</span>                <span class="token class-name">RectangleMark</span><span class="token punctuation">(</span>                    xStart<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Selection Start"</span></span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">,</span>                    xEnd<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Selection End"</span></span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>chartOverlay <span class="token punctuation">&#123;</span> proxy <span class="token keyword">in</span>            <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> nthGeoItem <span class="token keyword">in</span>                <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>clear<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentShape</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">gesture</span><span class="token punctuation">(</span><span class="token class-name">DragGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span>onChanged <span class="token punctuation">&#123;</span> value <span class="token keyword">in</span>                            <span class="token comment">// Find the x-coordinates in the chart’s plot area.</span>                            <span class="token keyword">let</span> xStart <span class="token operator">=</span> value<span class="token punctuation">.</span>startLocation<span class="token punctuation">.</span>x <span class="token operator">-</span> nthGeoItem<span class="token punctuation">[</span>proxy<span class="token punctuation">.</span>plotAreaFrame<span class="token punctuation">]</span><span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x                            <span class="token keyword">let</span> xCurrent <span class="token operator">=</span> value<span class="token punctuation">.</span>location<span class="token punctuation">.</span>x <span class="token operator">-</span> nthGeoItem<span class="token punctuation">[</span>proxy<span class="token punctuation">.</span>plotAreaFrame<span class="token punctuation">]</span><span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x                            <span class="token comment">// Find the date values at the x-coordinates.</span>                            <span class="token keyword">if</span> <span class="token keyword">let</span> dateStart<span class="token punctuation">:</span> <span class="token class-name">Date</span> <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>atX<span class="token punctuation">:</span> xStart<span class="token punctuation">)</span><span class="token punctuation">,</span>                               <span class="token keyword">let</span> dateCurrent<span class="token punctuation">:</span> <span class="token class-name">Date</span> <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>atX<span class="token punctuation">:</span> xCurrent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                range <span class="token operator">=</span> <span class="token punctuation">(</span>dateStart<span class="token punctuation">,</span> dateCurrent<span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token punctuation">.</span>onEnded <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> range <span class="token operator">=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#125;</span> <span class="token comment">// Clear the state on gesture end.</span>                    <span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>社区做的更多 Swift Charts 范例 <a href="https://github.com/jordibruin/Swift-Charts-Examples">Swift Charts Examples</a> 。</p><h3 id="Advanced-layout-control"><a href="#Advanced-layout-control" class="headerlink" title="Advanced layout control"></a>Advanced layout control</h3><p>session <a href="https://developer.apple.com/videos/play/wwdc2022-10056">Compose custom layouts with SwiftUI</a> </p><p>提供了新的 Grid 视图来同时满足 VStack 和 HStack。还有一个更低级别 Layout 接口，可以完全控制构建应用所需的布局。另外还有 ViewThatFits 可以自动选择填充可用空间的方式。</p><p>Grid 示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Grid</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">GridRow</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"One"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"One"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"One"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">GridRow</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token class-name">GridRow</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Three"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Three"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">gridCellColumns</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>gridCellColumns()</code>  modifier 可以让一个单元格跨多列。</p><p>ViewThatFits 的新视图，允许根据适合的大小放视图。ViewThatFits 会自动选择对于当前屏幕大小合适的子视图进行显示。Ryan Lintott 的<a href="https://twitter.com/ryanlintott/status/1534706352177700871">示例效果</a> ，对应示例代码 <a href="https://gist.github.com/ryanlintott/d03140dd155d0493a758dcd284e68eaa">LayoutThatFits.swift</a> 。</p><p>新的 Layout 协议可以观看 Swift Talk 第 308 期 <a href="https://talk.objc.io/episodes/S01E308-the-layout-protocol">The Layout Protocol</a> 。</p><p>通过符合 Layout 协议，我们可以自定义一个自定义的布局容器，直接参与 SwiftUI 的布局过程。新的 ProposedViewSize 结构，它是容器视图提供的大小。 <code>Layout.Subviews</code> 是布局视图的子视图代理集合，我们可以在其中为每个子视图请求各种布局属性。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">protocol</span> <span class="token class-name">Layout</span><span class="token punctuation">:</span> <span class="token class-name">Animatable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">var</span> layoutProperties<span class="token punctuation">:</span> <span class="token class-name">LayoutProperties</span> <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">associatedtype</span> <span class="token class-name">Cache</span> <span class="token operator">=</span> <span class="token class-name">Void</span>  <span class="token keyword">typealias</span> <span class="token class-name">Subviews</span> <span class="token operator">=</span> <span class="token class-name">LayoutSubviews</span>  <span class="token keyword">func</span> <span class="token function-definition function">updateCache</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Cache</span><span class="token punctuation">,</span> subviews<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Subviews</span><span class="token punctuation">)</span>  <span class="token keyword">func</span> <span class="token function-definition function">spacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Subviews</span><span class="token punctuation">,</span> cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Cache</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">ViewSpacing</span>  <span class="token comment">/// We return our view size here, use the passed parameters for computing the</span>  <span class="token comment">/// layout.</span>  <span class="token keyword">func</span> <span class="token function-definition function">sizeThatFits</span><span class="token punctuation">(</span>    proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>     subviews<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Subviews</span><span class="token punctuation">,</span>     cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Cache</span> <span class="token comment">// 👈🏻 use this for calculated data shared among Layout methods</span>  <span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGSize</span>    <span class="token comment">/// Use this to tell your subviews where to appear.</span>  <span class="token keyword">func</span> <span class="token function-definition function">placeSubviews</span><span class="token punctuation">(</span>    <span class="token keyword">in</span> bounds<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">,</span> <span class="token comment">// 👈🏻 region where we need to place our subviews into, origin might not be .zero</span>    proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>     subviews<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Subviews</span><span class="token punctuation">,</span>     cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Cache</span>  <span class="token punctuation">)</span>    <span class="token comment">// ... there are more a couple more optional methods</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面例子是一个自定义的水平 stack 视图，为其所有子视图提供其最大子视图的宽度：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">MyEqualWidthHStack</span><span class="token punctuation">:</span> <span class="token class-name">Layout</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/// Returns a size that the layout container needs to arrange its subviews.</span>  <span class="token comment">/// - Tag: sizeThatFitsHorizontal</span>  <span class="token keyword">func</span> <span class="token function-definition function">sizeThatFits</span><span class="token punctuation">(</span>    proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>    subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span>    cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span>  <span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGSize</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">guard</span> <span class="token operator">!</span>subviews<span class="token punctuation">.</span>isEmpty <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">.</span>zero <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> maxSize <span class="token operator">=</span> <span class="token function">maxSize</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> spacing <span class="token operator">=</span> <span class="token function">spacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> totalSpacing <span class="token operator">=</span> spacing<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">+</span> <span class="token short-argument">$1</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> maxSize<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token class-name">CGFloat</span><span class="token punctuation">(</span>subviews<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> totalSpacing<span class="token punctuation">,</span>      height<span class="token punctuation">:</span> maxSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/// Places the stack's subviews.</span>  <span class="token comment">/// - Tag: placeSubviewsHorizontal</span>  <span class="token keyword">func</span> <span class="token function-definition function">placeSubviews</span><span class="token punctuation">(</span>    <span class="token keyword">in</span> bounds<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">,</span>    proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>    subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span>    cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">guard</span> <span class="token operator">!</span>subviews<span class="token punctuation">.</span>isEmpty <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> maxSize <span class="token operator">=</span> <span class="token function">maxSize</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> spacing <span class="token operator">=</span> <span class="token function">spacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> placementProposal <span class="token operator">=</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> maxSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> maxSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>    <span class="token keyword">var</span> nextX <span class="token operator">=</span> bounds<span class="token punctuation">.</span>minX <span class="token operator">+</span> maxSize<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> subviews<span class="token punctuation">.</span>indices <span class="token punctuation">&#123;</span>      subviews<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">place</span><span class="token punctuation">(</span>        at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> nextX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> bounds<span class="token punctuation">.</span>midY<span class="token punctuation">)</span><span class="token punctuation">,</span>        anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">,</span>        proposal<span class="token punctuation">:</span> placementProposal<span class="token punctuation">)</span>      nextX <span class="token operator">+=</span> maxSize<span class="token punctuation">.</span>width <span class="token operator">+</span> spacing<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/// Finds the largest ideal size of the subviews.</span>  <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">maxSize</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGSize</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> subviewSizes <span class="token operator">=</span> subviews<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">sizeThatFits</span><span class="token punctuation">(</span><span class="token punctuation">.</span>unspecified<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> maxSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span> <span class="token operator">=</span> subviewSizes<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> currentMax<span class="token punctuation">,</span> subviewSize <span class="token keyword">in</span>      <span class="token class-name">CGSize</span><span class="token punctuation">(</span>        width<span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>currentMax<span class="token punctuation">.</span>width<span class="token punctuation">,</span> subviewSize<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>currentMax<span class="token punctuation">.</span>height<span class="token punctuation">,</span> subviewSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> maxSize  <span class="token punctuation">&#125;</span>  <span class="token comment">/// Gets an array of preferred spacing sizes between subviews in the</span>  <span class="token comment">/// horizontal dimension.</span>  <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">spacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">CGFloat</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    subviews<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> index <span class="token keyword">in</span>      <span class="token keyword">guard</span> index <span class="token operator">&lt;</span> subviews<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> subviews<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>spacing<span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span>        to<span class="token punctuation">:</span> subviews<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>spacing<span class="token punctuation">,</span>        along<span class="token punctuation">:</span> <span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义 layout 只能访问子视图代理 <code>Layout.Subviews</code> ，而不是视图或数据模型。我们可以通过 LayoutValueKey 在每个子视图上存储自定义值，通过 <code>layoutValue(key:value:)</code> modifier 设置。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">Rank</span><span class="token punctuation">:</span> <span class="token class-name">LayoutValueKey</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">let</span> defaultValue<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">func</span> <span class="token function-definition function">rank</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> value<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 👈🏻 convenience method</span>    <span class="token function">layoutValue</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token class-name">Rank</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> value<span class="token punctuation">)</span> <span class="token comment">// 👈🏻 the new modifier</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们就可以通过 Layout 方法中的 <code>Layout.Subviews</code> 代理读取自定义 <code>LayoutValueKey</code> 值：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">placeSubviews</span><span class="token punctuation">(</span>  <span class="token keyword">in</span> bounds<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">,</span>  proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>  subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span>  cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ranks <span class="token operator">=</span> subviews<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> subview <span class="token keyword">in</span>    subview<span class="token punctuation">[</span><span class="token class-name">Rank</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token comment">// 👈🏻</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要在布局之间变化使用动画，需要用 AnyLayout，代码示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PAnyLayout</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isVertical <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> layout <span class="token operator">=</span> isVertical <span class="token operator">?</span> <span class="token class-name">AnyLayout</span><span class="token punctuation">(</span><span class="token class-name">VStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">AnyLayout</span><span class="token punctuation">(</span><span class="token class-name">HStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layout <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"star"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Starming.com"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Click"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            withAnimation <span class="token punctuation">&#123;</span>                isVertical<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end button</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时 Text 和图片也支持了样式布局变化，代码示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PTextTransitionsView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> expandMessage <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> mintWithShadow<span class="token punctuation">:</span> <span class="token class-name">AnyShapeStyle</span> <span class="token operator">=</span> <span class="token class-name">AnyShapeStyle</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>mint<span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> primaryWithoutShadow<span class="token punctuation">:</span> <span class="token class-name">AnyShapeStyle</span> <span class="token operator">=</span> <span class="token class-name">AnyShapeStyle</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>primary<span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Dai Ming Swift Pamphlet"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span>expandMessage <span class="token operator">?</span> <span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>heavy<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>body<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span>expandMessage <span class="token operator">?</span> mintWithShadow <span class="token punctuation">:</span> primaryWithoutShadow<span class="token punctuation">)</span>            <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span> withAnimation <span class="token punctuation">&#123;</span> expandMessage<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> expandMessage <span class="token operator">?</span> <span class="token number">150</span> <span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">drawingGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cyan<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分享接口"><a href="#分享接口" class="headerlink" title="分享接口"></a>分享接口</h3><p>Transferable 协议使数据可以用于剪切板、拖放和 Share Sheet。</p><p>可以在自己应用程序之间或你的应用和其他应用之间发送或接受可传输项目。</p><p>支持 SwiftUI 来使用。</p><p>官方文档 <a href="https://developer.apple.com/documentation/CoreTransferable">Core Transferable</a></p><p>session <a href="https://developer.apple.com/videos/play/wwdc2022-10062">Meet Transferable</a></p><p>新增一个专门用来接受 Transferable 的按钮视图 PasteButton，使用示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PPasteButton</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"戴铭"</span></span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"输入"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $s<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>roundedBorder<span class="token punctuation">)</span>        <span class="token class-name">PasteButton</span><span class="token punctuation">(</span>payloadType<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> str <span class="token keyword">in</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> first <span class="token operator">=</span> str<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span>            s <span class="token operator">=</span> first        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ShareLink"><a href="#ShareLink" class="headerlink" title="ShareLink"></a>ShareLink</h3><p>ShareLink 视图可以让你轻松共享数据。示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PShareLink</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://ming1016.github.io/"</span></span><span class="token punctuation">)</span><span class="token operator">!</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ShareLink</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> url<span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的博客"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token class-name">ShareLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的博客"</span></span><span class="token punctuation">,</span> item<span class="token punctuation">:</span> url<span class="token punctuation">)</span>        <span class="token class-name">ShareLink</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的博客"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"swift"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="锁屏的-Widget"><a href="#锁屏的-Widget" class="headerlink" title="锁屏的 Widget"></a>锁屏的 Widget</h3><p>和 WatchOS 一样，可以瞟一眼就获取信息。</p><p>官方指南 <a href="https://developer.apple.com/documentation/WidgetKit/Creating-lock-screen-widgets-and-watch-complications">Creating Lock Screen Widgets and Watch Complications</a></p><h3 id="Bottom-Sheet"><a href="#Bottom-Sheet" class="headerlink" title="Bottom Sheet"></a>Bottom Sheet</h3><p>SwiftUI 新推出的 <code>presentationDetents()</code> modifier 可以创建一个可以定制的 bottom sheet。示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PSheet</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShow <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"显示 Sheet"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            isShow<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isShow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这里是 Sheet 的内容"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">presentationDetents</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>medium<span class="token punctuation">,</span> <span class="token punctuation">.</span>large<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>detent 默认值是 <code>.large</code>。也可以提供一个百分比，比如 <code>.presentationDetents([.fraction(0.7)])</code>，或者直接指定高度 <code>.presentationDetents([.height(100)])</code>。</p><p>presentationDragIndicator modifier 可以用来显示隐藏拖动标识。</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>list 支持 Section footer。</p><p>list 分隔符可以自定义，使用  <code>HorizontalEdge.leading</code> 和 <code>HorizontalEdge.trailing</code> 。</p><p>list 不使用 UITableView 了。</p><p>今年 list 还新增了一个 <a href="https://developer.apple.com/documentation/swiftui/editoperations">EditOperation</a> 可以自动生成移动和删除，新增了 edits 参数，传入 <code>[.delete, .move]</code> 数组即可。这也是一个演示如何更好扩展和配置功能的方式。</p><h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><p>新增 modifier</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">scrollDisabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollDismissesKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">.</span>interactively<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollIndicators</span><span class="token punctuation">(</span><span class="token punctuation">.</span>visible<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h3><p>支持多行，使用 Axis.vertical 以允许多行。TextField 超过行限制可以变成滚动视图。</p><p>今年 TextField 可以嵌到 <code>.alert</code> 里了。</p><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><p><code>.searchable</code> 支持 token 和 scope，示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PSearchTokensAndScopes</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">enum</span> <span class="token class-name">AttendanceScope</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> inPerson<span class="token punctuation">,</span> online    <span class="token punctuation">&#125;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> queryText<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> queryTokens<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">InvitationToken</span><span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scope<span class="token punctuation">:</span> <span class="token class-name">AttendanceScope</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token function">invitationCountView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $queryText<span class="token punctuation">,</span> tokens<span class="token punctuation">:</span> $queryTokens<span class="token punctuation">,</span> scope<span class="token punctuation">:</span> $scope<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> token <span class="token keyword">in</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>diplayName<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> token<span class="token punctuation">.</span>systemImage<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> scopes<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"In Person"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">AttendanceScope</span><span class="token punctuation">.</span>inPerson<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Online"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">AttendanceScope</span><span class="token punctuation">.</span>online<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Gauge"><a href="#Gauge" class="headerlink" title="Gauge"></a>Gauge</h3><p>SwiftUI 引入一个新显示进度的视图 Gauge。</p><p>简单示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PGauge</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> progress <span class="token operator">=</span> <span class="token number">0.45</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Gauge</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> progress<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"进度"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> currentValueLabel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>progress<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>percent<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> minimumValueLabel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>percent<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> maximumValueLabel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>percent<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">Gauge</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> progress<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token punctuation">&#125;</span> currentValueLabel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>progress<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>percent<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>footnote<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">gaugeStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>accessoryCircularCapacity<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cyan<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Group-Form"><a href="#Group-Form" class="headerlink" title="Group Form"></a>Group Form</h3><p>Form 今年也得到了增强，示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LabeledContent</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Location"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">AddressView</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">DatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Date"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $date<span class="token punctuation">)</span>        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Description"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $eventDescription<span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">.</span>vertical<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">lineLimit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> reservesSpace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Vibe"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Accent color"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $accent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Theme</span><span class="token punctuation">.</span>allCases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> accent <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>accent<span class="token punctuation">.</span>rawValue<span class="token punctuation">.</span>capitalized<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span>accent<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Color scheme"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $scheme<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Light"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">ColorScheme</span><span class="token punctuation">.</span>light<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Dark"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">ColorScheme</span><span class="token punctuation">.</span>dark<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>macOS<span class="token punctuation">)</span></span>        <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>inline<span class="token punctuation">)</span><span class="token directive property"><span class="token directive-name">#endif</span></span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $extraGuests<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Allow extra guests"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"The more the merrier!"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> extraGuests <span class="token punctuation">&#123;</span>            <span class="token class-name">Stepper</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Guests limit"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $spacesCount<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span>number<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Decorations"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selectedDecorations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">DisclosureGroup</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Balloons 🎈"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $includeBalloons<span class="token punctuation">)</span>                        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        decorationThemes<span class="token punctuation">[</span><span class="token punctuation">.</span>balloon<span class="token punctuation">]</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>swatch <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Decoration</span><span class="token punctuation">.</span>balloon<span class="token punctuation">)</span>                                        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Confetti 🎊"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $includeConfetti<span class="token punctuation">)</span>                        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        decorationThemes<span class="token punctuation">[</span><span class="token punctuation">.</span>confetti<span class="token punctuation">]</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>swatch <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Decoration</span><span class="token punctuation">.</span>confetti<span class="token punctuation">)</span>                                        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Inflatables 🪅"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $includeInflatables<span class="token punctuation">)</span>                        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        decorationThemes<span class="token punctuation">[</span><span class="token punctuation">.</span>inflatables<span class="token punctuation">]</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>swatch <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Decoration</span><span class="token punctuation">.</span>inflatables<span class="token punctuation">)</span>                                        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Party Horns 🥳"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $includeBlowers<span class="token punctuation">)</span>                        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        decorationThemes<span class="token punctuation">[</span><span class="token punctuation">.</span>noisemakers<span class="token punctuation">]</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>swatch <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Decoration</span><span class="token punctuation">.</span>noisemakers<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"All Decorations"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> <span class="token punctuation">[</span>                        $includeBalloons<span class="token punctuation">,</span> $includeConfetti<span class="token punctuation">,</span>                        $includeInflatables<span class="token punctuation">,</span> $includeBlowers                    <span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Decoration</span><span class="token punctuation">.</span>all<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>macOS<span class="token punctuation">)</span></span>                <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>checkbox<span class="token punctuation">)</span><span class="token directive property"><span class="token directive-name">#endif</span></span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Decoration theme"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> themes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Blue"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Theme</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Black"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Theme</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Gold"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Theme</span><span class="token punctuation">.</span>gold<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"White"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Theme</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>macOS<span class="token punctuation">)</span></span>            <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>radioGroup<span class="token punctuation">)</span><span class="token directive property"><span class="token directive-name">#endif</span></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">formStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>grouped<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><p><code>.buttonStyle</code> 可组合，示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PButtonStyleComposition</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isT <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"标签"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Swift"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $isT<span class="token punctuation">)</span>                    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"SwiftUI"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $isT<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Swift Chart"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $isT<span class="token punctuation">)</span>                    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Navigation API"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $isT<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>button<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>bordered<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Tap-Location"><a href="#Tap-Location" class="headerlink" title="Tap Location"></a>Tap Location</h3><p>可以获取点击的位置，示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">onTapGesture</span><span class="token punctuation">(</span>coordinateSpace<span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> location <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Tap in </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">location</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 coordinateSpace 指定为 <code>.global</code> 表示位置是相对屏幕左上角，默认是相对当前视图的左上角的位置。</p><h3 id="选择多个日期"><a href="#选择多个日期" class="headerlink" title="选择多个日期"></a>选择多个日期</h3><p>MultiDatePicker 视图会显示一个日历，用户可以选择多个日期，可以设置选择范围。示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PMultiDatePicker</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>calendar<span class="token punctuation">)</span> <span class="token keyword">var</span> cal    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> dates<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">DateComponents</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MultiDatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择个日子"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $dates<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now<span class="token operator">...</span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        dates<span class="token punctuation">.</span>compactMap <span class="token punctuation">&#123;</span> c <span class="token keyword">in</span>            cal<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span>c<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> <span class="token punctuation">.</span>long<span class="token punctuation">,</span> time<span class="token punctuation">:</span> <span class="token punctuation">.</span>omitted<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PhotosPick"><a href="#PhotosPick" class="headerlink" title="PhotosPick"></a>PhotosPick</h3><p>支持图片选择，示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">PhotosUI</span><span class="token keyword">import</span> <span class="token class-name">CoreTransferable</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@ObservedObject</span> <span class="token keyword">var</span> viewModel<span class="token punctuation">:</span> <span class="token class-name">FilterModel</span> <span class="token operator">=</span> <span class="token punctuation">.</span>shared        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Gallery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Birthday Filter"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>                    <span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span>                        selection<span class="token punctuation">:</span> $viewModel<span class="token punctuation">.</span>imageSelection<span class="token punctuation">,</span>                        matching<span class="token punctuation">:</span> <span class="token punctuation">.</span>images                    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Pick a photo"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"plus.app"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                        viewModel<span class="token punctuation">.</span><span class="token function">applyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Apply Filter"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"camera.filters"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3><p>今年 iOS 和 iPadOS 也可以使用去年只能在 macOS 上使用的 Table了，据 digital lounges 里说，iOS table 的性能和 list 差不多，table 默认为 plian list。我想 iOS 上加上 table 只是为了兼容 macOS 代码吧。</p><p>table 使用示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Table</span><span class="token punctuation">(</span>attendeeStore<span class="token punctuation">.</span>attendees<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TableColumn</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Name"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> attendee <span class="token keyword">in</span>        <span class="token class-name">AttendeeRow</span><span class="token punctuation">(</span>attendee<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">TableColumn</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"City"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>city<span class="token punctuation">)</span>    <span class="token class-name">TableColumn</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Status"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> attendee <span class="token keyword">in</span>        <span class="token class-name">StatusRow</span><span class="token punctuation">(</span>attendee<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">contextMenu</span><span class="token punctuation">(</span>forSelectionType<span class="token punctuation">:</span> <span class="token class-name">Attendee</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> selection <span class="token keyword">in</span>    <span class="token keyword">if</span> selection<span class="token punctuation">.</span>isEmpty <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"New Invitation"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">addInvitation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> selection<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Mark as VIP"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">markVIPs</span><span class="token punctuation">(</span>selection<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Mark as VIPs"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">markVIPs</span><span class="token punctuation">(</span>selection<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h3><p>对 toolbar 的自定义，示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">toolbar</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"toolbar"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"new"</span></span><span class="token punctuation">,</span> placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>secondaryAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"New Invitation"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"envelope"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">toolbarRole</span><span class="token punctuation">(</span><span class="token punctuation">.</span>editor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SF-Symbol"><a href="#SF-Symbol" class="headerlink" title="SF Symbol"></a>SF Symbol</h3><p>SF Symbol 支持变量值，可以通过设置 variableValue 来填充不同部分，比如 wifi 图标，不同值会亮不同部分，<code>Image(systemName: &quot;wifi&quot;, variableValue: 0.5)</code> 。</p><h3 id="Gradient-和-Shadow"><a href="#Gradient-和-Shadow" class="headerlink" title="Gradient 和 Shadow"></a>Gradient 和 Shadow</h3><p>下面是个简单示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PGradientAndShadow</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"bird"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">backgroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cyan<span class="token punctuation">.</span>gradient<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Paul Hudson 使用 Core Motion 做了一个阴影随设备倾斜而变化的效果，非常棒，<a href="https://www.hackingwithswift.com/articles/253/how-to-use-inner-shadows-to-simulate-depth-with-swiftui-and-core-motion">How to use inner shadows to simulate depth with SwiftUI and Core Motion</a> 。</p><h3 id="嵌入-UIKit"><a href="#嵌入-UIKit" class="headerlink" title="嵌入 UIKit"></a>嵌入 UIKit</h3><p>示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift">cell<span class="token punctuation">.</span>contentConfiguration <span class="token operator">=</span> <span class="token class-name">UIHostingConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"wand.and.stars"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Like magic!"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>purple<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="macOS-1"><a href="#macOS-1" class="headerlink" title="macOS"></a>macOS</h3><p>支持了 window，可以控制位置和大小。官方代码示例 <a href="https://developer.apple.com/documentation/swiftui/bringing_multiple_windows_to_your_swiftui_app">Bringing multiple windows to your SwiftUI app</a></p><p>openWindow 代码示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PartyPlanner</span><span class="token punctuation">:</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Scene</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WindowGroup</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Party Planner"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PartyPlannerHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Party Budget"</span></span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"budget"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Budget View"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"0"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">defaultPosition</span><span class="token punctuation">(</span><span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">defaultSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">220</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">DetailView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openWindow<span class="token punctuation">)</span> <span class="token keyword">var</span> openWindow    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Detail View"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                    <span class="token function">openWindow</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"budget"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"dollarsign"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>session <a href="https://developer.apple.com/videos/play/wwdc2022-10061">Bring multiple windows to your SwiftUI app</a> 两个新 Scene 类型。WindowGroup 允许多 window。MenuBarExtra。可编程方式打开新 window 和 document。</p><p>MenuBarExtra 代码示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PartyPlanner</span><span class="token punctuation">:</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Scene</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Party Budget"</span></span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"budget"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Budget View"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">MenuBarExtra</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Bulletin Board"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"quote.bubble"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BulletinBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">menuBarExtraStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>window<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>讲和 AppKit 混编的 session <a href="https://developer.apple.com/videos/play/wwdc2022/10075/">Use SwiftUI with AppKit</a></p><p><a href="https://developer.apple.com/videos/play/wwdc2022-10059">The craft of SwiftUI API design: Progressive disclosure</a> 使用 windows 还有 MenuBarExtra，使用 modifier 来自定义应用程序 window 的 presentation 和行为。</p><p>使用 <code>.dropDestination</code> 来支持拖动。示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">dropDestination</span><span class="token punctuation">(</span>payloadType<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> receivedImages<span class="token punctuation">,</span> location <span class="token keyword">in</span>        <span class="token keyword">guard</span> <span class="token keyword">let</span> image <span class="token operator">=</span> receivedImages<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>        viewModel<span class="token punctuation">.</span>imageState <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>今年有新的 <a href="https://developer.apple.com/documentation/swiftui/formstyle/columns">FormStyle</a> ，示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Notify Me About:"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $notifyMeAbout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Direct Messages"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">NotifyMeAboutType</span><span class="token punctuation">.</span>directMessages<span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Mentions"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">NotifyMeAboutType</span><span class="token punctuation">.</span>mentions<span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Anything"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">NotifyMeAboutType</span><span class="token punctuation">.</span>anything<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Play notification sounds"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $playNotificationSounds<span class="token punctuation">)</span>    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Send read receipts"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $sendReadReceipts<span class="token punctuation">)</span>    <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Profile Image Size:"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $profileImageSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Large"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">ProfileImageSize</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Medium"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">ProfileImageSize</span><span class="token punctuation">.</span>medium<span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Small"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">ProfileImageSize</span><span class="token punctuation">.</span>small<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>inline<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">formStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Apple 自身在 macOS 系统中使用了多少 SwiftUI 呢？邮件、iWork 和  Keychain Access 的部分视图使用了，笔记、照片 和 Xcode 部分功能及新增功能的完整界面都是用的 SwiftUI，另外控制中心、字体册和系统设置的大部分都是用 SwiftUI 开发了。</p><h3 id="ImageRenderer"><a href="#ImageRenderer" class="headerlink" title="ImageRenderer"></a>ImageRenderer</h3><p>可以将 SwiftUI 的 View 生成图片。</p><p>官方参考文档 <a href="https://developer.apple.com/documentation/swiftui/imagerenderer">ImageRenderer</a></p><h3 id="后台任务"><a href="#后台任务" class="headerlink" title="后台任务"></a>后台任务</h3><p>session <a href="https://developer.apple.com/videos/play/wwdc2022-10142">Efficiency awaits: Background tasks in SwiftUI</a> 了解如何使用 SwiftUI 后台任务 API 简洁地处理任务。展示如何使用 Swift Concurrency 来处理网络响应、后台刷新等——同时保持性能和功率。</p><h2 id="Xcode-14"><a href="#Xcode-14" class="headerlink" title="Xcode 14"></a>Xcode 14</h2><p>Xcode 14 里有新的 Swift 5.7，其中对泛型和协议有很大的改进。</p><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.apple.com/wwdc22/topics/developer-tools/#current">WWDC22 开发工具专题</a></li><li><a href="https://developer.apple.com/documentation/Xcode/configuring-a-multiplatform-app-target">配置多平台应用程序</a></li><li><a href="https://developer.apple.com/documentation/Xcode/documenting-apps-frameworks-and-packages">使用 DocC 给应用程序、框架、包创建文档</a></li><li><a href="https://developer.apple.com/documentation/Xcode/enabling-developer-mode-on-a-device">在设备上启用开发者模式</a></li><li><a href="https://developer.apple.com/documentation/Xcode-Release-Notes/xcode-14-release-notes">Xcode 14 Beta Release Notes</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/110427/">What’s new in Xcode</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/110364/">Demystify parallelization in Xcode builds</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-110371">Use Xcode to develop a multiplatform app</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-110360">Use Xcode for server-side development</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-110367">Simplify C++ templates with concepts</a></li></ul><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><p>编出来的二进制小 30%。</p><p>改进了并行性，构建提速 25%。</p><p>改进了在 iOS 设备上调试 Swift 程序的性能。</p><p>提供单一图标大小，Xcode 完成剩下的。</p><p>更智能的代码完成，滚动时置顶类、结构体和函数名。错误消息在重新处理时会变暗。</p><p>Xcode 搜索和替换栏中可以使用正则表达式。相信以后社区会出现很多好用的正则表达式分享。</p><p>Xcode Organizer 中新增 Hang 报告，用来提供主线程上发生挂起的调用堆栈信息，以及提供设备和 iOS 版本信息等统计信息。</p><p>Xcode 14 现在支持为 iPadOS 开发 DriverKit 驱动程序。</p><p>创建新 C++ 项目，Clang 默认使用 C++20。已经实现了几篇 C++20 和 C++2b 论文。</p><p>iOS、tvOS 和 watchOS 的构建默认不再包含 bitcode。</p><p>legacy 构建系统被删除，LLVM 14 也不再支持 legacy。</p><p>Xcode 中的 Swift-DocC 现支持 OC 和 C 的 API 构建文档。生成的 Swift-DocC 文档网站包括一个新的导航侧边栏，用于浏览和过滤文档。可将 Swift-DocC 部署到 GitHub Pages。</p><h3 id="性能问题修复"><a href="#性能问题修复" class="headerlink" title="性能问题修复"></a>性能问题修复</h3><p>代码完成不再自动导入模块。</p><p>提高了复杂表达式 SwiftUI 中代码完成的速度和准确性。</p><p>修复了包含大量错误或警告的文件时导致性能下降的问题。</p><p>修复了 minimap 在长文件时性能问题。</p><h3 id="源码编辑器"><a href="#源码编辑器" class="headerlink" title="源码编辑器"></a>源码编辑器</h3><p>滚动编辑器时，Xcode 会将代码结构的元素固定到编辑器顶部。</p><p>支持了 Regex 表达式语法高亮。<code>Editor &gt; Refactoring &gt; Convert to Regex Builder</code> 可以将正则文本转成等效 Regex builder。</p><p>可以输入匹配参数来选择代码完成中默认参数的任意组合。</p><p>Swift 中代码完成提供基于变量名的 map、filter 和 contains 的 snippet。</p><p>提高 Swift 代码完成的准确性。</p><p>SwiftUI 的代码完成，现在有了 List 和 ForEach 的 snippet。</p><p>Xcode 14 还要很多贴心代码完成改进，比如写 struct 的 init 可以自动完成。Codable 的 encode 也可以自动完成。</p><h3 id="Xcode-Preview"><a href="#Xcode-Preview" class="headerlink" title="Xcode Preview"></a>Xcode Preview</h3><p>Preview 增强，默认是交互式的。</p><p>创建新项目会自动 resume。大量编辑时也不会暂停。会动态调整更新频率。</p><h3 id="Swift-Packages"><a href="#Swift-Packages" class="headerlink" title="Swift Packages"></a>Swift Packages</h3><p>引入新参数 moduleAliases 来为冲突的模块定义唯一名称，并以新名称构建而不用改代码。注意的是起别名的模块要是纯 Swift 模块。</p><p>允许使用 Swift Package command plugins。Xcode 为 Swift Package plugins 提供了 XcodeProjectPlugin 接口，这个接口扩展了 Swift Package Manager 的 PackagePlugin 接口。用这个接口可以获得 Xcode 项目结构的简化描述。</p><p>session 有 <a href="https://developer.apple.com/videos/play/wwdc2022-110359">Meet Swift Package plugins</a> 和 <a href="https://developer.apple.com/videos/play/wwdc2022-110401">Create Swift Package plugins</a> 。</p><h3 id="Instrument"><a href="#Instrument" class="headerlink" title="Instrument"></a>Instrument</h3><p>Hang Tracing 工具，可以显示应用程序的主线程什么时候无法长时间处理传入事件，从而导致 UI 卡住。</p><p>Runloop 工具，显示 runloop 的使用和单独的迭代，视觉上区分了进程中所有 runloop 的 runloop sleep 和 busy interval。</p><p>Instrument 新模板更方便调试 distributed actors 和其它 Swift concurrency 特性。</p><p>memory graph 调试器可以显示 memory graph 的所有传入和传出引用。</p><p>Instrument 现有一个新的 Swift Concurrency 模板，用于跟踪 swift  concurrency 的使用。这个模板包括 Swift Tasks 工具，可显示随时间变化的 task 的状态，总结 task 状态，提供详细的 task 描述，task 关系和 task 创建 callstacks 的调用树结构。还有 Swift Actors 工具，可以跟踪 actor 之间的 task 行为，显示每个 actor 的 task 队列，并帮助诊断 actor-isolated 代码等问题。</p><p>Instrument 里的代码查看更好显示包含了性能数据。Interleave 模式，可以同时查看源码和关联的反汇编。源码查看现在会在源码和反汇编判断显示 CPU 计数器，PMC 事件和动态公式。</p><p>修复了很多 Swift 相关显示不友好的问题。</p><h2 id="多端"><a href="#多端" class="headerlink" title="多端"></a>多端</h2><p>官方例子 <a href="https://developer.apple.com/documentation/Xcode/configuring-a-multiplatform-app-target">Configuring a multiplatform app</a> 。一个示例了 NavigationSplitView、Layout、Chart 和 WeatherKit 的运用的官方例子 <a href="https://developer.apple.com/documentation/swiftui/food_truck_building_a_swiftui_multiplatform_app/">Food Truck: Building a SwiftUI multiplatform app</a></p><h3 id="Session-笔记"><a href="#Session-笔记" class="headerlink" title="Session 笔记"></a>Session 笔记</h3><p><a href="https://www.wwdcnotes.com/notes/wwdc22/110371/">https://www.wwdcnotes.com/notes/wwdc22/110371/</a></p><p>下面是 App Intents、WidgetKit 相关内容，这些都属于 App Services，WWDC22 专门整理了 <a href="https://developer.apple.com/wwdc22/topics/app-services/">App Service 专题</a> 。新系统服务比如 Messages collaboration、网络、CloudKit 的 <a href="https://developer.apple.com/wwdc22/topics/system-services/#current">System Service 主题</a> 。</p><h2 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h2><p>iOS 16 和 WatchOS 9 可以使用同一套代码编写 widget。iOS 新增场景是锁屏和 Live Activities（晚些时候推出）。</p><p>利用 Smart Stack，让 widget 出现到栈顶，可以使用 <a href="https://developer.apple.com/documentation/widgetkit/timelineentryrelevance">TimelineEntryRelevance</a> 。</p><p>官方参考：</p><ul><li><a href="https://developer.apple.com/widgets/">WidgetKit 主题</a></li><li><a href="https://developer.apple.com/videos/all-videos/?q=WidgetKit">WidgetKit Session</a></li></ul><p>介绍怎么将 widgets 添加到 lock screen 的 session <a href="https://developer.apple.com/videos/play/wwdc2022-10050">Complications and widgets: Reloaded</a> 。对应的实例代码 <a href="https://developer.apple.com/documentation/widgetkit/adding_widgets_to_the_lock_screen_and_watch_faces">Adding widgets to the Lock Screen and watch faces</a></p><h2 id="App-Intents"><a href="#App-Intents" class="headerlink" title="App Intents"></a>App Intents</h2><p>打通 App Shortcuts，从 Shortcuts 应用、Spotlight 和 Siri 运行你的 App 特定任务。</p><p>对应 Session</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2022/10032/">Dive into App Intents</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-10170">Implement App Shortcuts with App Intents</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-10121">Meet Focus filters</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-10169">Design App Shortcuts</a></li></ul><p>文档 <a href="https://developer.apple.com/documentation/AppIntents">App Intents</a></p><p>官方几篇 App Intents 文章：</p><ul><li><a href="https://developer.apple.com/documentation/AppIntents/Providing-your-app-s-capabilities-to-system-services">Providing your app’s capabilities to system services</a></li><li><a href="https://developer.apple.com/documentation/AppIntents/Integrating-custom-types-into-your-intents">Integrating custom data types into your intents</a></li><li><a href="https://developer.apple.com/documentation/AppIntents/app-intents">App intents</a></li><li><a href="https://developer.apple.com/documentation/AppIntents/focus">Focus</a></li></ul><p>对于 Shortcut 的使用少数派有篇很棒的文章 《<a href="https://sspai.com/post/73645">iOS 快捷指令搭配 Notion API，更快速地编辑内容</a>》 。</p><h2 id="WeatherKit-1"><a href="#WeatherKit-1" class="headerlink" title="WeatherKit"></a>WeatherKit</h2><p>Apple 收购 Dark Sky 后带来了 WeatherKit 和 WeatherKit REST API。有着易用的 Swift 接口，还有配套的 REST API。WeatherKit 内置了 async&#x2F;await 支持。</p><p><a href="https://developer.apple.com/weatherkit/get-started/">WeatherKit 指南</a><br><a href="https://developer.apple.com/documentation/WeatherKit">WeatherKit 文档</a></p><p>session <a href="https://developer.apple.com/videos/play/wwdc2022/10003/">Meet WeatherKit</a> 。一个 Apple 提供的天气代码示例 <a href="https://developer.apple.com/documentation/weatherkit/fetching_weather_forecasts_with_weatherkit">Fetching weather forecasts with WeatherKit</a> 。</p><h2 id="HealthKit"><a href="#HealthKit" class="headerlink" title="HealthKit"></a>HealthKit</h2><p>提供了更详细的睡眠和锻炼数据。session 介绍 <a href="https://developer.apple.com/videos/play/wwdc2022-10005">What’s new in HealthKit</a></p><h2 id="Vision"><a href="#Vision" class="headerlink" title="Vision"></a>Vision</h2><p>更新介绍 session <a href="https://developer.apple.com/videos/play/wwdc2022-o">What’s new in Vision</a></p><p>VisionKit 现在有一个结合 AVCapture 和 Vision 的数据扫描仪进行实时捕捉。 session <a href="https://developer.apple.com/videos/play/wwdc2022-10025">Capture machine-readable codes and text with VisionKit</a> 。</p><h3 id="Live-Text-接口"><a href="#Live-Text-接口" class="headerlink" title="Live Text 接口"></a>Live Text 接口</h3><p>视觉库的应用接口。可以从照片和暂停视频中获取文本。</p><p>官方参考：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2022/10026/">Add Live Text interaction to your app</a></li><li><a href="https://developer.apple.com/documentation/visionkit/enabling_live_text_interactions_with_images">Enabling Live Text interactions with images</a></li><li><a href="https://developer.apple.com/documentation/visionkit/scanning_data_with_the_camera">Scanning data with the camera</a></li></ul><h3 id="ScreenCaptureKit"><a href="#ScreenCaptureKit" class="headerlink" title="ScreenCaptureKit"></a>ScreenCaptureKit</h3><p>creenCaptureKit 框架可以给你的 macOS 程序添加对高性能屏幕录制的支持。文档地址：<a href="https://developer.apple.com/documentation/screencapturekit">ScreenCaptureKit</a></p><h2 id="App-Store"><a href="#App-Store" class="headerlink" title="App Store"></a>App Store</h2><h3 id="内购"><a href="#内购" class="headerlink" title="内购"></a>内购</h3><p>可以将 App Store Connect 内购产品同步到 Xcode。</p><p>新测试功能，比如在沙盒和 Xcode 里请求测试通知和测试其它应用内购买场景。</p><p>官方参考：</p><ul><li><a href="https://developer.apple.com/wwdc22/topics/app-store-distribution-marketing/#current">WWDC22 的 App Store 发布和市场的专题</a></li><li><a href="https://developer.apple.com/storekit/">StoreKit2 主题</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/10039/">What’s new in StoreKit testing</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-10007">What’s new with in-app purchase</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-110404">Implement proactive in-app purchase restore</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-10040">Explore in-app purchase integration and migration</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-10044">Discover Benchmarks in App Analytics</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-10038">What’s new with SKAdNetwork</a></li><li><a href="https://developer.apple.com/documentation/appstoreservernotifications/">App Store Server Notifications V2</a></li><li><a href="https://developer.apple.com/documentation/appstoreserverapi/">App Store Server API</a></li><li><a href="https://developer.apple.com/app-store-connect/analytics/">App Analytics</a></li><li><a href="https://developer.apple.com/app-store/ad-attribution/">SKAdNetwork 主题</a> <a href="https://developer.apple.com/videos/play/wwdc2022/10038/">What’s new with SKAdNetwork</a></li><li><a href="https://developer.apple.com/app-store/subscriptions/">自动更新订阅</a></li><li><a href="https://help.apple.com/app-store-connect/#/devc9870599e">管理自动续期订阅的定价</a></li></ul><p>这里有个 Kevin 开源的微信支付 SDK <a href="https://github.com/kevinzhow/wechatpay-swift">wechatpay-swift</a></p><h3 id="全球化"><a href="#全球化" class="headerlink" title="全球化"></a>全球化</h3><p>session <a href="https://developer.apple.com/videos/play/wwdc2022-10110">Build global apps: Localization by example</a></p><h3 id="request-review"><a href="#request-review" class="headerlink" title="request review"></a>request review</h3><p>你可以用 requestReview 这个 environment 键提示用户对你的 App 进行评论。示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PRequestReview</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>requestReview<span class="token punctuation">)</span> <span class="token keyword">var</span> rr    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"来评论吧"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">rr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Apple 的最佳实践例子 <a href="https://developer.apple.com/documentation/storekit/requesting_app_store_reviews">Requesting App Store Reviews</a> 。</p><h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.apple.com/videos/play/wwdc2022-10043">What’s new in App Store Connect</a></li><li><a href="https://developer.apple.com/documentation/storekit">StoreKit 文档</a> 应用内购和 App Store 互动</li><li><a href="https://developer.apple.com/documentation/appstoreserverapi">App Store Server API</a> 管理 App Store 交易</li><li><a href="https://developer.apple.com/documentation/appstoreservernotifications">App Store Server Notifications</a> 实时监控应用内购事件</li><li><a href="https://developer.apple.com/documentation/notaryapi">Notary API</a> 对 macOS 软件进行公证</li></ul><h3 id="审核"><a href="#审核" class="headerlink" title="审核"></a>审核</h3><p>这次审核，规则 4.2.3 中取消二进制要有启动时足够的内容，这可能是因为 Background Assets 的推出可以让用户更快更聪明的下载。另外 5.3.3 放宽了彩排等限制。</p><h2 id="性能-1"><a href="#性能-1" class="headerlink" title="性能"></a>性能</h2><p>Apple 除了做编译优化体积外，还提供了一个 <a href="https://developer.apple.com/documentation/backgroundassets">Background Assets</a> 在应用安装后、应用更新时以及应用保留在设备上时定期在后台下载资源，看起来类似 ODR。Background Assets 的 session <a href="https://developer.apple.com/videos/play/wwdc2022-110403">Meet Background Assets</a> 。</p><p>官方参考：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2022/110362/">Link fast: Improve build and launch times</a></li><li><a href="https://developer.apple.com/documentation/metrickit">MetricKit</a></li><li><a href="https://developer.apple.com/documentation/metrickit/mxmetricmanager">MXMetricManager</a> 管理自定义指标</li><li><a href="https://developer.apple.com/documentation/metrickit/mxapplaunchdiagnostic">MXAppLaunchDiagnostic</a> 启动诊断</li><li><a href="https://developer.apple.com/documentation/metrickit/mxapplaunchmetric">MXAppLaunchMetric</a> 启动相关指标</li><li><a href="https://developer.apple.com/videos/play/wwdc2022/110363">Improve app size and runtime performance</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-10082">Track down hangs with Xcode and on-device detection</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022-10083">Power down: Improve battery consumption</a></li></ul><h2 id="硬件和虚机"><a href="#硬件和虚机" class="headerlink" title="硬件和虚机"></a>硬件和虚机</h2><p>官方参考：</p><ul><li><a href="https://developer.apple.com/documentation/virtualization">Virtualization 文档</a> 创建虚拟机并运行基于 macOS 和 Linux 的操作系统</li><li><a href="https://developer.apple.com/documentation/driverkit">DriverKit 文档</a> 开发在用户空间运行的设备驱动程序</li><li><a href="https://developer.apple.com/documentation/scsiperipheralsdriverkit">SCSIPeripheralsDriverKit</a></li><li><a href="https://developer.apple.com/documentation/devicediscoveryextension">DeviceDiscoveryExtension</a></li><li><a href="https://developer.apple.com/documentation/virtualization/running_gui_linux_in_a_virtual_machine_on_a_mac">Running GUI Linux in a virtual machine on a Mac (示例代码)</a></li></ul><p>session 有：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2022-110373">Bring your driver to iPad with DriverKit</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/10002/">Create macOS or Linux virtual machines</a></li></ul><p>虚机的应用可见 <a href="https://github.com/insidegui/VirtualBuddy">insidegui&#x2F;VirtualBuddy</a> 这个开源项目。</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>session <a href="https://developer.apple.com/videos/play/wwdc2022-10078">Reduce networking delays for a more responsive app</a> 和 <a href="https://developer.apple.com/videos/play/wwdc2022-110339">Build device-to-device interactions with Network Framework</a></p><h2 id="Metal-3"><a href="#Metal-3" class="headerlink" title="Metal 3"></a>Metal 3</h2><p>利用多核优势，高分辨率图形渲染更快，资源加载更快。使用 GPU 训练机器学习网络。WWDC22 期间社区有个给背景添加雨水效果有些流行，作者放出了代码，介绍了如何将 Metal 引入 SwiftUI 工作流，<a href="https://github.com/dejager/atmos">Atmos</a> 。</p><p>官方参考：</p><ul><li><a href="https://developer.apple.com/metal/">Metal 主题</a></li><li><a href="https://developer.apple.com/videos/all-videos/?q=Metal">Metal Session</a></li></ul><h2 id="RoomPlan"><a href="#RoomPlan" class="headerlink" title="RoomPlan"></a>RoomPlan</h2><p>ARKit 支持的新 Swift 接口。使用摄像头和 LiDAR 创建 3D 平面图。另外还有一个视觉库的代码例子很有趣，就是从视频中检测人物行为，<a href="https://developer.apple.com/documentation/createml/detecting_human_actions_in_a_live_video_feed">Detecting Human Actions in a Live Video Feed</a> 。</p><p>官方参考：</p><ul><li><a href="https://developer.apple.com/augmented-reality/roomplan/">RoomPlan 主题</a></li><li><a href="https://developer.apple.com/documentation/RoomPlan">RoomPlan 文档</a></li></ul><p>session <a href="https://developer.apple.com/videos/play/wwdc2022/10127/">Create parametric 3D room scans with RoomPlan</a> 。官方示例代码 <a href="https://developer.apple.com/documentation/roomplan/create_a_3d_model_of_an_interior_room_by_guiding_the_user_through_an_ar_experience">Create a 3D model of an interior room by guiding the user through an AR experience</a></p><h2 id="Passkeys"><a href="#Passkeys" class="headerlink" title="Passkeys"></a>Passkeys</h2><p>身份验证，使用行业标准。</p><p>官方参考：</p><ul><li><a href="https://developer.apple.com/passkeys/">Passkeys 主题</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/10092/">Meet passkeys</a></li></ul><h2 id="交互设计"><a href="#交互设计" class="headerlink" title="交互设计"></a>交互设计</h2><p>Apple 的人机界面交互指南 <a href="https://developer.apple.com/design/human-interface-guidelines/guidelines/overview/">Human Interface Guidelines</a> 。内容超级详细，涉及程序界面方方面面。</p><p>官方参考：</p><ul><li><a href="https://developer.apple.com/design/whats-new/">Human Interface Guidelines &gt; What’s New</a> 内有图标模板等，各类 Session 汇总</li></ul><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://developer.apple.com/sample-code/wwdc/2022/">WWDC22 Sample Code</a></li><li><a href="https://developer.apple.com/documentation/iOS-iPadOS-Release-Notes/ios-ipados-16-release-notes">iOS 和 iPadOS 16 Beta Release Note</a></li><li><a href="https://developer.apple.com/documentation/macOS-Release-Notes/macos-13-release-notes">macOS 13 Ventura Beta Release Notes</a></li><li><a href="https://developer.apple.com/wwdc22/topics/">WWDC22 按主题分类</a></li><li><a href="https://marcoeidinger.github.io/appleframeworks/">Public Apple Frameworks</a> 查看 Apple 框架在不同平台可用性的汇总</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一天&quot;&gt;&lt;a href=&quot;#第一天&quot; class=&quot;headerlink&quot; title=&quot;第一天&quot;&gt;&lt;/a&gt;第一天&lt;/h2&gt;&lt;p&gt;今年是 WWDC 的第39个年头了。今年的 WWDC.playground 活动()是 SwiftGG、T 沙龙和老司机技术一起会和
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
      <category term="WWDC" scheme="http://ming1016.github.io/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>在苹果加速器活动做的 SwiftUI 开发分享</title>
    <link href="http://ming1016.github.io/2022/03/25/develop-with-swiftui/"/>
    <id>http://ming1016.github.io/2022/03/25/develop-with-swiftui/</id>
    <published>2022-03-25T05:04:49.000Z</published>
    <updated>2023-04-24T04:33:14.373Z</updated>
    
    <content type="html"><![CDATA[<p>受 Apple 加速器 SwiftUI 活动邀请，做了个分享，还和喵神、61、浙剑、思琪等社区大神参与了圆桌讨论。这次完善了 SwiftUI 做的幻灯片，比去年要好一点，增加了解释执行代码交互功能。</p><p>为这次幻灯画了几张图，在新西兰认识的画家，指导我了些画法，用其完成了幻灯里的图。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/20.PNG" class="lozad post-image"src="/uploads/develop-with-swiftui/20.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/21.PNG" class="lozad post-image"src="/uploads/develop-with-swiftui/21.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/22.png" class="lozad post-image"src="/uploads/develop-with-swiftui/22.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/24.PNG" class="lozad post-image"src="/uploads/develop-with-swiftui/24.PNG"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/25.PNG" class="lozad post-image"src="/uploads/develop-with-swiftui/25.PNG"></p><h2 id="macOS-多栏"><a href="#macOS-多栏" class="headerlink" title="macOS 多栏"></a>macOS 多栏</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/06.png" class="lozad post-image"src="/uploads/develop-with-swiftui/06.png"></p><p>内容有 macOS 多栏、Toolbar、文件夹嵌套、文本和代码编辑器、网格视图和斜45度视觉。</p><p>macOS 的多栏只需要使用 NavigationView 就可以了，闭包里的第一个视图就是 Sidebar，后面的视图可以作为占位视图，显示一些初始信息，通过 Sidebar 的 NavigationLink 来设置第二栏的视图就好了，第三栏通过第二栏来指定。</p><p>如果想要隐藏收起 Sidebar 需要先获取 SplitViewController，然后调用 toggleSidebar 方法就可以了。如果想要收起最右侧视图或任意一栏视图，可以在 SplitViewController 的 splitViewItems 里找到对应的 Item，比如最右一栏就是 splitViewItems.last。调用找到视图的 animator().isCollapsed.toggle() 就可以了。</p><p>如果只想让其中一栏全屏显示，先在 splitViewItems 找到那一栏，然后调用对应 ViewController 里 View 的 enterFullScreenMode 方法，要注意的是，设置的 Options 需要包含 .autoHideDock 和 .autoHideMenuBar，否则就没法退出全屏了。由于全屏后会将视图放到另一个 Window 中，因此退出全屏可以直接调用当前 key window 的 contentView 的 exitFullScreenMode() 方法。</p><h2 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/18.png" class="lozad post-image"src="/uploads/develop-with-swiftui/18.png"></p><p>一般的 macOS 程序多栏顶部会有一些功能按钮，以方便用户了解到程序的主要高频功能，比如 Xcode 的调试和 Target 选择按钮，Keynote 的播放、添加幻灯片、缩放文本、形状、表格、图表等按钮。这些按钮都可以通过 Toolbar 来实现。Toolbar 根据摆放位置和语义设置了一组 Options，通过 Options 统一了多平台的表现形式，比如默认位置的 option 就是 .automatic，中间位置就是 .principal，macOS Touch Bar iOS 的虚拟键盘上的按钮用的就是 .keyboard。另外还有很多语义表示，用于放置到不同平台特定的位置，比如用于导航的按钮在 macOS 上会出现在最左侧，用的就是 .navigation 这种语义的 Options。</p><h2 id="文件夹嵌套结构"><a href="#文件夹嵌套结构" class="headerlink" title="文件夹嵌套结构"></a>文件夹嵌套结构</h2><p>得益于 keypaths 在 SwiftUI 中的应用，文件夹嵌套结构实现起来简单了太多。给 List 的 children 参数指定嵌套模型的嵌套键值路径即可，比如模型结构如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - 目录结构数据模型</span><span class="token keyword">struct</span> <span class="token constant">POM</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token comment">// 文字</span>  <span class="token keyword">var</span> i<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token comment">// 图标</span>  <span class="token keyword">var</span> sub<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token constant">POM</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中嵌套键值是 sub，那么 children 参数只需要添上 <code>\.sub</code> ，List 内部会处理嵌套逻辑并展示出来。如果 List 表现出来的效果并不能够满足你，你也可以自己定制视图和交互。比如点击文件夹名字也能够展开子内容，List 默认只有点击左侧箭头才能够展开。</p><p>自定义嵌套视图底层可以使用 DisclosureGroup，DisclosureGroup 能够展示自定义视图内容，还有一个 isExpanded 值绑定参数用来显示和隐藏内容。在遍历已展示视图时，通过 keypaths 发现嵌套值不为空时就读取子内容，同时默认 isExpanded 值为 false 就会显示不展开的箭头符号，将文件夹名字做成按钮，点击按钮触发 isExpanded.toggle()，如 isExpanded 为 false 就置为 true，即展开文件夹，反之就会收起文件夹。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/07.png" class="lozad post-image"src="/uploads/develop-with-swiftui/07.png"></p><h2 id="文本和代码编辑器"><a href="#文本和代码编辑器" class="headerlink" title="文本和代码编辑器"></a>文本和代码编辑器</h2><p>文本和代码编辑器也是 macOS 上很常见的效率工具的核心功能，包含的技术点较多，比如调试和代码分析会用到编译器这里就不展开说了。感兴趣可以参看<a href="https://ming1016.github.io/2017/03/01/deeply-analyse-llvm/">深入剖析 iOS 编译 Clang &#x2F; LLVM</a>、<a href="https://ming1016.github.io/2017/04/01/slides-of-deeply-analyse-llvm/">深入剖析 iOS 编译 Clang &#x2F; LLVM 直播的 Slides</a>、<a href="https://ming1016.github.io/2017/05/27/slides-of-learn-what-interesting-things-you-can-do-with-iOS-compilation/">atSwift大会上分享《学习iOS编译原理能做哪些有意思的事情》的 Slides</a>、<a href="https://ming1016.github.io/2018/09/17/produce-slides-of-third-at-swift-conference/">这次swift大会分享准备的幻灯片和 demo</a>，这几篇。</p><p>文本或代码分析完后可以通过 Attribute 来进行富文本展示的设置，富文本属性都在 AttributeContainer 中设置，设置好的富文本直接通过 append 进行组合。编辑器其它的比如编辑、重做、存储或自定义的能力可以通过 NSViewRepresentable 来包装 Appkit 直接使用 Appkit 里的 NSTextView 的能力。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/12.png" class="lozad post-image"src="/uploads/develop-with-swiftui/12.png"></p><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/14.png" class="lozad post-image"src="/uploads/develop-with-swiftui/14.png"></p><h2 id="Vision"><a href="#Vision" class="headerlink" title="Vision"></a>Vision</h2><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-with-swiftui/17.png" class="lozad post-image"src="/uploads/develop-with-swiftui/17.png"></p><p>接下来详细的说下 SwiftUI 的视图组件的使用，这次的幻灯片程序用到的技术，除了解释执行代码的功能，其它基本都来自下面的内容。</p><p>已更新 WWDC22 内容。</p><h2 id="SwiftUI-组件"><a href="#SwiftUI-组件" class="headerlink" title="SwiftUI 组件"></a>SwiftUI 组件</h2><h3 id="视图组件使用"><a href="#视图组件使用" class="headerlink" title="视图组件使用"></a>视图组件使用</h3><h4 id="SwiftUI-对标的-UIKit-视图"><a href="#SwiftUI-对标的-UIKit-视图" class="headerlink" title="SwiftUI 对标的 UIKit 视图"></a>SwiftUI 对标的 UIKit 视图</h4><p>如下：</p><table><thead><tr><th>SwiftUI</th><th>UIKit</th></tr></thead><tbody><tr><td>Text 和 Label</td><td>UILabel</td></tr><tr><td>TextField</td><td>UITextField</td></tr><tr><td>TextEditor</td><td>UITextView</td></tr><tr><td>Button 和 Link</td><td>UIButton</td></tr><tr><td>Image</td><td>UIImageView</td></tr><tr><td>NavigationView</td><td>UINavigationController 和 UISplitViewController</td></tr><tr><td>ToolbarItem</td><td>UINavigationItem</td></tr><tr><td>ScrollView</td><td>UIScrollView</td></tr><tr><td>List</td><td>UITableView</td></tr><tr><td>LazyVGrid 和 LazyHGrid</td><td>UICollectionView</td></tr><tr><td>HStack 和 LazyHStack</td><td>UIStack</td></tr><tr><td>VStack 和 LazyVStack</td><td>UIStack</td></tr><tr><td>TabView</td><td>UITabBarController 和 UIPageViewController</td></tr><tr><td>Toggle</td><td>UISwitch</td></tr><tr><td>Slider</td><td>UISlider</td></tr><tr><td>Stepper</td><td>UIStepper</td></tr><tr><td>ProgressView</td><td>UIProgressView 和 UIActivityIndicatorView</td></tr><tr><td>Picker</td><td>UISegmentedControl</td></tr><tr><td>DatePicker</td><td>UIDatePicker</td></tr><tr><td>Alert</td><td>UIAlertController</td></tr><tr><td>ActionSheet</td><td>UIAlertController</td></tr><tr><td>Map</td><td>MapKit</td></tr></tbody></table><h4 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h4><p>基本用法</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/154473546-94ba6f9f-2ce3-44ef-a7c6-60d86df8c90f.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/154473546-94ba6f9f-2ce3-44ef-a7c6-60d86df8c90f.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - Text</span><span class="token keyword">struct</span> <span class="token class-name">PlayTextView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> manyString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"这是一段长文。总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么吧。"</span></span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"大标题"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"说点啥呢？"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tracking</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// 字间距</span>                    <span class="token punctuation">.</span><span class="token function">kerning</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// 尾部留白</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"划重点"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">underline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>heavy<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"可旋转的文字"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fixedSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"自定义系统字体大小"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"使用指定的字体"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Georgia"</span></span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"有阴影"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">italic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Gradient Background"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>gradient<span class="token punctuation">:</span> <span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>white<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token punctuation">.</span>red<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Gradient Background"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>gradient<span class="token punctuation">:</span> <span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>white<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token punctuation">.</span>purple<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>trailing<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"渐变透明材质风格"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                            <span class="token punctuation">.</span>regularMaterial<span class="token punctuation">,</span>                            <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span>                        <span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                    <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Angular Gradient Background"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">AngularGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token punctuation">.</span>green<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>red<span class="token punctuation">]</span><span class="token punctuation">,</span> center<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"带背景图片的"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>background <span class="token punctuation">&#123;</span>                        <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 设置 lineLimit 表示最多支持行数，依据情况依然有会被减少显示行数</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>manyString<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">lineLimit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 对行的限制，如果多余设定行数，尾部会显示...</span>                    <span class="token punctuation">.</span><span class="token function">lineSpacing</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 行间距</span>                    <span class="token punctuation">.</span><span class="token function">multilineTextAlignment</span><span class="token punctuation">(</span><span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token comment">// 对齐</span>                                <span class="token comment">// 使用 fixedSize 就可以在任何时候完整显示</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>manyString<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fixedSize</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> vertical<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 使用 AttributeString</span>            <span class="token class-name">PTextViewAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 使用 Markdown</span>            <span class="token class-name">PTextViewMarkdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 时间</span>            <span class="token class-name">PTextViewDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 插值</span>            <span class="token class-name">PTextViewInterpolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>font 字体设置的样式对应 weight 和 size 可以在官方交互文档中查看 <a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/typography/#dynamic-type-sizes">Typography</a></p><p>markdown 使用</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - Markdown</span><span class="token keyword">struct</span> <span class="token class-name">PTextViewMarkdown</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> mdaStr<span class="token punctuation">:</span> <span class="token class-name">AttributedString</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> mda <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span>localized<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"这是一个 **Attribute** ~string~"</span></span><span class="token punctuation">)</span>                <span class="token comment">/// 自定义的属性语法是^[string](key：value)</span>        mda <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span>localized<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"^[这是](p2:'one')^[一](p3:&#123;k1:1,k2:2&#125;)个 **Attribute** ~string~"</span></span><span class="token punctuation">,</span> including<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>newScope<span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span>mda<span class="token punctuation">)</span>        <span class="token comment">/// 这是 &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">///     p2 = one</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// 一 &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">///     p3 = P3(k1: 1, k2: 2)</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// 个  &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// Attribute &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">///     NSInlinePresentationIntent = NSInlinePresentationIntent(rawValue: 2)</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">///   &#123;</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// string &#123;</span>        <span class="token comment">///     NSInlinePresentationIntent = NSInlinePresentationIntent(rawValue: 32)</span>        <span class="token comment">///     NSLanguage = en</span>        <span class="token comment">/// &#125;</span>                <span class="token comment">// 从文件中读取 Markdown 内容</span>        <span class="token keyword">let</span> mdUrl <span class="token operator">=</span> <span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>forResource<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">,</span> withExtension<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"md"</span></span><span class="token punctuation">)</span><span class="token operator">!</span>        mda <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> mdUrl<span class="token punctuation">,</span>options<span class="token punctuation">:</span> <span class="token class-name">AttributedString</span><span class="token punctuation">.</span><span class="token class-name">MarkdownParsingOptions</span><span class="token punctuation">(</span>interpretedSyntax<span class="token punctuation">:</span> <span class="token punctuation">.</span>inlineOnlyPreservingWhitespace<span class="token punctuation">)</span><span class="token punctuation">,</span> baseURL<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token comment">// .inlineOnlyPreservingWhitespace 支持 markdown 文件的换行</span>                        <span class="token comment">// Markdown 已转换成 AtrributedString 结构。</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> mda<span class="token punctuation">.</span>runs <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> ipi <span class="token operator">=</span> r<span class="token punctuation">.</span>inlinePresentationIntent <span class="token punctuation">&#123;</span>                <span class="token keyword">switch</span> ipi <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token punctuation">.</span>lineBreak<span class="token punctuation">:</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"paragrahp"</span></span><span class="token punctuation">)</span>                <span class="token keyword">case</span> <span class="token punctuation">.</span>code<span class="token punctuation">:</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is code"</span></span><span class="token punctuation">)</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> pi <span class="token operator">=</span> r<span class="token punctuation">.</span>presentationIntent <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> c <span class="token keyword">in</span> pi<span class="token punctuation">.</span>components <span class="token punctuation">&#123;</span>                    <span class="token keyword">switch</span> c<span class="token punctuation">.</span>kind <span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token punctuation">.</span>paragraph<span class="token punctuation">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is paragraph"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">codeBlock</span><span class="token punctuation">(</span><span class="token keyword">let</span> lang<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">lang <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> code"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token keyword">let</span> level<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"this is </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">level</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> level"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span>                        <span class="token keyword">break</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> mda    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>mdaStr<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AttributedString 的使用</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - AttributedString</span><span class="token keyword">struct</span> <span class="token class-name">PTextViewAttribute</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> aStr<span class="token punctuation">:</span> <span class="token class-name">AttributedString</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这是一个 "</span></span><span class="token punctuation">)</span>        <span class="token keyword">var</span> c1 <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c1<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span>footnote        c1<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>secondary        a1<span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span>                <span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Attribute "</span></span><span class="token punctuation">)</span>        <span class="token keyword">var</span> c2 <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c2<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span>title        a2<span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span>                <span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"String "</span></span><span class="token punctuation">)</span>        <span class="token keyword">var</span> c3 <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c3<span class="token punctuation">.</span>baselineOffset <span class="token operator">=</span> <span class="token number">10</span>        c3<span class="token punctuation">.</span>appKit<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>yellow <span class="token comment">// 仅在 macOS 里显示的颜色</span>        c3<span class="token punctuation">.</span>swiftUI<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>secondary        c3<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span>footnote        a3<span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span>        <span class="token comment">// a3 使用自定义属性</span>        a3<span class="token punctuation">.</span>p1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"This is a custom property."</span></span>                <span class="token comment">// formatter 的支持</span>        <span class="token keyword">var</span> a4 <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>dateTime                                        <span class="token punctuation">.</span><span class="token function">hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">minute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span><span class="token function">weekday</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token punctuation">.</span>attributed        <span class="token punctuation">)</span>                <span class="token keyword">let</span> c4AMPM <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dateField</span><span class="token punctuation">(</span><span class="token punctuation">.</span>amPM<span class="token punctuation">)</span>        <span class="token keyword">let</span> c4AMPMColor <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span>                a4<span class="token punctuation">.</span><span class="token function">replaceAttributes</span><span class="token punctuation">(</span>c4AMPM<span class="token punctuation">,</span> with<span class="token punctuation">:</span> c4AMPMColor<span class="token punctuation">)</span>        <span class="token keyword">let</span> c4Week <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dateField</span><span class="token punctuation">(</span><span class="token punctuation">.</span>weekday<span class="token punctuation">)</span>        <span class="token keyword">let</span> c4WeekColor <span class="token operator">=</span> <span class="token class-name">AttributeContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>purple<span class="token punctuation">)</span>        a4<span class="token punctuation">.</span><span class="token function">replaceAttributes</span><span class="token punctuation">(</span>c4Week<span class="token punctuation">,</span> with<span class="token punctuation">:</span> c4WeekColor<span class="token punctuation">)</span>                a1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span>        a1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span>        a1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span>                                <span class="token comment">// Runs 视图</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> a1<span class="token punctuation">.</span>runs <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/// 这是一个  &#123;</span>        <span class="token comment">///     SwiftUI.Font = Font(provider: SwiftUI.(unknown context at $7ff91d4a5e90).FontBox&lt;SwiftUI.Font.(unknown context at $7ff91d4ad5d8).TextStyleProvider>)</span>        <span class="token comment">///     SwiftUI.ForegroundColor = secondary</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// Attribute  &#123;</span>        <span class="token comment">///     SwiftUI.Font = Font(provider: SwiftUI.(unknown context at $7ff91d4a5e90).FontBox&lt;SwiftUI.Font.(unknown context at $7ff91d4ad5d8).TextStyleProvider>)</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// String  &#123;</span>        <span class="token comment">///     SwiftUI.ForegroundColor = secondary</span>        <span class="token comment">///     SwiftUI.BaselineOffset = 10.0</span>        <span class="token comment">///     NSColor = sRGB IEC61966-2.1 colorspace 1 1 0 1</span>        <span class="token comment">///     SwiftUI.Font = Font(provider: SwiftUI.(unknown context at $7ff91d4a5e90).FontBox&lt;SwiftUI.Font.(unknown context at $7ff91d4ad5d8).TextStyleProvider>)</span>        <span class="token comment">///     p1 = This is a custom property.</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// Tue &#123;</span>        <span class="token comment">///     SwiftUI.ForegroundColor = purple</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">///   &#123;</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// 5 &#123;</span>        <span class="token comment">///     Foundation.DateFormatField = hour</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// : &#123;</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// 16 &#123;</span>        <span class="token comment">///     Foundation.DateFormatField = minute</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">///   &#123;</span>        <span class="token comment">/// &#125;</span>        <span class="token comment">/// PM &#123;</span>        <span class="token comment">///     SwiftUI.ForegroundColor = green</span>        <span class="token comment">/// &#125;</span>                <span class="token keyword">return</span> a1    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>aStr<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定 AttributedString 属性</span><span class="token keyword">struct</span> PAKP1<span class="token punctuation">:</span> <span class="token class-name">AttributedStringKey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">typealias</span> <span class="token class-name">Value</span> <span class="token operator">=</span> <span class="token class-name">String</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p1"</span></span>        <span class="token punctuation">&#125;</span><span class="token keyword">struct</span> PAKP2<span class="token punctuation">:</span> <span class="token class-name">CodableAttributedStringKey</span><span class="token punctuation">,</span> <span class="token class-name">MarkdownDecodableAttributedStringKey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> P2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Codable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p2"</span></span>    <span class="token keyword">typealias</span> <span class="token class-name">Value</span> <span class="token operator">=</span> P2<span class="token punctuation">&#125;</span><span class="token keyword">struct</span> PAKP3<span class="token punctuation">:</span> <span class="token class-name">CodableAttributedStringKey</span><span class="token punctuation">,</span> <span class="token class-name">MarkdownDecodableAttributedStringKey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">struct</span> P3<span class="token punctuation">:</span> <span class="token class-name">Codable</span><span class="token punctuation">,</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> k1<span class="token punctuation">:</span> <span class="token class-name">Int</span>        <span class="token keyword">let</span> k2<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">typealias</span> <span class="token class-name">Value</span> <span class="token operator">=</span> P3    <span class="token keyword">static</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">AttributeScopes</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">NewScope</span><span class="token punctuation">:</span> <span class="token class-name">AttributeScope</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> p1<span class="token punctuation">:</span> PAKP1        <span class="token keyword">let</span> p2<span class="token punctuation">:</span> PAKP2        <span class="token keyword">let</span> p3<span class="token punctuation">:</span> PAKP3    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> newScope<span class="token punctuation">:</span> <span class="token class-name">NewScope</span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NewScope</span><span class="token punctuation">.</span><span class="token keyword">self</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">AttributeDynamicLookup</span><span class="token punctuation">&#123;</span>    <span class="token keyword">subscript</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">(</span>dynamicMember keyPath<span class="token punctuation">:</span><span class="token class-name">KeyPath</span><span class="token operator">&lt;</span><span class="token class-name">AttributeScopes</span><span class="token punctuation">.</span><span class="token class-name">NewScope</span><span class="token punctuation">,</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">T</span> <span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span><span class="token class-name">AttributedStringKey</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间的显示</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - 时间</span><span class="token keyword">struct</span> <span class="token class-name">PDateTextView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> date<span class="token punctuation">:</span> <span class="token class-name">Date</span> <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> df<span class="token punctuation">:</span> <span class="token class-name">DateFormatter</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> df <span class="token operator">=</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        df<span class="token punctuation">.</span>dateStyle <span class="token operator">=</span> <span class="token punctuation">.</span>long        df<span class="token punctuation">.</span>timeStyle <span class="token operator">=</span> <span class="token punctuation">.</span>short        <span class="token keyword">return</span> df    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> dv<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> df<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> date<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>dv<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>locale<span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"zh_cn"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插值使用</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">// MARK: - 插值</span><span class="token keyword">struct</span> <span class="token class-name">PTextViewInterpolation</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> nf<span class="token punctuation">:</span> <span class="token class-name">NumberFormatter</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">NumberFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>numberStyle <span class="token operator">=</span> <span class="token punctuation">.</span>currencyPlural        <span class="token keyword">return</span> f    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"图文 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"sun.min"</span></span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"💰 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token number">999</span> <span class="token keyword">as</span> <span class="token class-name">NSNumber</span><span class="token punctuation">,</span> formatter<span class="token punctuation">:</span> nf</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>locale<span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"zh_cn"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"数组： </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"红字：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">red<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"变红了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">，带图标的字：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">sun<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"天晴"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 扩展 LocalizedStringKey.StringInterpolation 自定义插值</span><span class="token keyword">extension</span> <span class="token class-name">LocalizedStringKey</span><span class="token punctuation">.</span><span class="token class-name">StringInterpolation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 特定类型处理</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> value <span class="token punctuation">&#123;</span>            <span class="token function">appendLiteral</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span>            <span class="token function">appendInterpolation</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string-literal"><span class="token string">" "</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 实现不同情况处理，可以简化设置修改器设置</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span>red value<span class="token punctuation">:</span> <span class="token class-name">LocalizedStringKey</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">appendInterpolation</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token punctuation">(</span>sun value<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">appendInterpolation</span><span class="token punctuation">(</span><span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"sun.max.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">appendLiteral</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h4><p>使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayLinkView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openURL<span class="token punctuation">)</span> <span class="token keyword">var</span> openURL    <span class="token keyword">var</span> aStr<span class="token punctuation">:</span> <span class="token class-name">AttributedString</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的博客"</span></span><span class="token punctuation">)</span>        a<span class="token punctuation">.</span>link <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://ming1016.github.io/"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> a    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 普通</span>            <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"前往 www.starming.com"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"http://www.starming.com"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderedProminent<span class="token punctuation">)</span>            <span class="token class-name">Link</span><span class="token punctuation">(</span>destination<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://twitter.com/daiming_cn"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"My Twitter"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"message.circle.fill"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// AttributedString 链接</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>aStr<span class="token punctuation">)</span>                        <span class="token comment">// markdown 链接</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"[Go Ming's GitHub](https://github.com/ming1016)"</span></span><span class="token punctuation">)</span>                        <span class="token comment">// 控件使用 OpenURL</span>            <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"小册子源码"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://github.com/KwaiAppTeam/SwiftPamphletApp"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openURL<span class="token punctuation">,</span> <span class="token class-name">OpenURLAction</span> <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>                    <span class="token keyword">return</span> <span class="token punctuation">.</span>systemAction                    <span class="token comment">/// return .handled 不会返回系统打开浏览器动作，只会处理 return 前的事件。</span>                    <span class="token comment">/// .discard 和 .handled 类似。</span>                    <span class="token comment">/// .systemAction(URL(string: "https://www.anotherurl.com")) 可以返回另外一个 url 来替代指定的url</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                        <span class="token comment">// 扩展 View 后更简洁的使用 OpenURL</span>            <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的微博"</span></span><span class="token punctuation">,</span> destination<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://weibo.com/allstarming"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>goOpenURL <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>                    <span class="token function">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>absoluteString<span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token punctuation">.</span>systemAction                <span class="token punctuation">&#125;</span>                        <span class="token comment">// 根据内容返回不同链接</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭博客有好几个，存在[GitHub Page](github)、[自建服务器](starming)和[知乎](zhihu)上"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openURL<span class="token punctuation">,</span> <span class="token class-name">OpenURLAction</span> <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>                    <span class="token keyword">switch</span> url<span class="token punctuation">.</span>absoluteString <span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">"github"</span></span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">systemAction</span><span class="token punctuation">(</span><span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://ming1016.github.io/"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">"starming"</span></span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">systemAction</span><span class="token punctuation">(</span><span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"http://www.starming.com"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">"zhihu"</span></span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">systemAction</span><span class="token punctuation">(</span><span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://www.zhihu.com/people/starming/posts"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token punctuation">.</span>handled                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">// View 支持 openURL 的能力</span>    <span class="token keyword">func</span> <span class="token function-definition function">goUrl</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> url<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token omit keyword">_</span> accepted<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">openURL</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> completion<span class="token punctuation">:</span> done<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 为 View 扩展一个 OpenURL 方法</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">goOpenURL</span><span class="token punctuation">(</span>done<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">OpenURLAction</span><span class="token punctuation">.</span><span class="token class-name">Result</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>openURL<span class="token punctuation">,</span> <span class="token class-name">OpenURLAction</span><span class="token punctuation">(</span>handler<span class="token punctuation">:</span> done<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>View 的 onOpenURL 方法可以处理 Universal Links。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">V</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>onOpenURL <span class="token punctuation">&#123;</span> url <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>absoluteString<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/154474725-d696d50b-9da7-4a0d-808f-07894a9597cb.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/154474725-d696d50b-9da7-4a0d-808f-07894a9597cb.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayLabelView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一个 Label"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"bolt.circle"</span></span><span class="token punctuation">)</span>                        <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"只显示 icon"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"heart.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>iconOnly<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span>                        <span class="token comment">// 自建 Label</span>            <span class="token class-name">Label</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"自建 Label"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> icon<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 自定义 LabelStyle</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"有边框的 Label"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"b.square.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>border<span class="token punctuation">)</span>                        <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"仅标题有边框"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"text.bubble"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderOnlyTitle<span class="token punctuation">)</span>                        <span class="token comment">// 扩展的 Label</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"扩展的 Label"</span></span><span class="token punctuation">,</span> originalSystemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.sun.bolt.fill"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// 对 Label 做扩展</span><span class="token keyword">extension</span> <span class="token class-name">Label</span> <span class="token keyword">where</span> <span class="token class-name">Title</span> <span class="token operator">==</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Icon</span> <span class="token operator">==</span> <span class="token class-name">Image</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> title<span class="token punctuation">:</span> <span class="token class-name">LocalizedStringKey</span><span class="token punctuation">,</span> originalSystemImage systemImageString<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> icon<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> systemImageString<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span> <span class="token comment">// 让 SFSymbol 显示本身的颜色</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 添加自定义 LabelStyle，用来加上边框</span><span class="token keyword">struct</span> <span class="token class-name">BorderLabelStyle</span><span class="token punctuation">:</span> <span class="token class-name">LabelStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Label</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token comment">// 样式擦除器，防止样式被 .iconOnly、.titleOnly 这样的 LabelStyle 擦除了样式。</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">LabelStyle</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">BorderLabelStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">var</span> border<span class="token punctuation">:</span> <span class="token class-name">BorderLabelStyle</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BorderLabelStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 只给标题加边框</span><span class="token keyword">struct</span> <span class="token class-name">BorderOnlyTitleLabelStyle</span><span class="token punctuation">:</span> <span class="token class-name">LabelStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>icon            configuration<span class="token punctuation">.</span>title                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">labelStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">LabelStyle</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">BorderOnlyTitleLabelStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">var</span> borderOnlyTitle<span class="token punctuation">:</span> <span class="token class-name">BorderOnlyTitleLabelStyle</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BorderOnlyTitleLabelStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TextEditor"><a href="#TextEditor" class="headerlink" title="TextEditor"></a>TextEditor</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/154667163-e906dfd4-074e-4c04-9c80-94af86df4ba6.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/154667163-e906dfd4-074e-4c04-9c80-94af86df4ba6.png"></p><p>对应的代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> <span class="token class-name">CodeEditorView</span><span class="token keyword">struct</span> <span class="token class-name">PlayTextEditorView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// for TextEditor</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> txt<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"一段可编辑文字...\n"</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment">// for CodeEditorView</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">var</span> colorScheme<span class="token punctuation">:</span> <span class="token class-name">ColorScheme</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> codeMessages<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Located</span><span class="token operator">&lt;</span><span class="token class-name">Message</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token class-name">Set</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@SceneStorage</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"editLocation"</span></span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">var</span> editLocation<span class="token punctuation">:</span> <span class="token class-name">CodeEditor</span><span class="token punctuation">.</span><span class="token class-name">Location</span> <span class="token operator">=</span> <span class="token class-name">CodeEditor</span><span class="token punctuation">.</span><span class="token class-name">Location</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 使用 SwiftUI 自带 TextEditor</span>        <span class="token class-name">TextEditor</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $txt<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">lineSpacing</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">disableAutocorrection</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> txt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                count <span class="token operator">=</span> txt<span class="token punctuation">.</span>count            <span class="token punctuation">&#125;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"字数：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>footnote<span class="token punctuation">)</span>                <span class="token comment">// 使用的 CodeEditorView 显示和编辑代码高亮的代码，还有 minimap</span>        <span class="token class-name">CodeEditor</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"""static func number() &#123;    // Int    let i1 = 100    let i2 = 22    print(i1 / i2) // 向下取整得 4    // Float    let f1: Float = 100.0    let f2: Float = 22.0    print(f1 / f2) // 4.5454545        let f4: Float32 = 5.0    let f5: Float64 = 5.0    print(f4, f5) // 5.0 5.0 5.0    // Double    let d1: Double = 100.0    let d2: Double = 22.0    print(d1 / d2) // 4.545454545454546    // 字面量    print(Int(0b10101)) // 0b 开头是二进制    print(Int(0x00afff)) // 0x 开头是十六进制    print(2.5e4) // 2.5x10^4 十进制用 e    print(0xAp2) // 10*2^2  十六进制用 p    print(2_000_000) // 2000000        // isMultiple(of:) 方法检查一个数字是否是另一个数字的倍数    let i3 = 36    print(i3.isMultiple(of: 9)) // true&#125;"""</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   messages<span class="token punctuation">:</span> $codeMessages<span class="token punctuation">,</span>                   language<span class="token punctuation">:</span> <span class="token punctuation">.</span>swift<span class="token punctuation">,</span>                   layout<span class="token punctuation">:</span> <span class="token class-name">CodeEditor</span><span class="token punctuation">.</span><span class="token class-name">LayoutConfiguration</span><span class="token punctuation">(</span>showMinimap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>codeEditorTheme<span class="token punctuation">,</span> colorScheme <span class="token operator">==</span> <span class="token punctuation">.</span>dark <span class="token operator">?</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span>defaultDark <span class="token punctuation">:</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span>defaultLight<span class="token punctuation">)</span>                <span class="token comment">// 包装的 NSTextView</span>        <span class="token class-name">HSplitView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PNSTextView</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"左边写...\n"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> onDidChange<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">in</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Typing </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> times."</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">PNSTextView</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"右边写...\n"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end HSplitView</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自己包装 NSTextView</span><span class="token keyword">struct</span> <span class="token class-name">PNSTextView</span><span class="token punctuation">:</span> <span class="token class-name">NSViewRepresentable</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> onBeginEditing<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> onCommit<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> onDidChange<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span><span class="token punctuation">,</span><span class="token omit keyword">_</span>  <span class="token keyword">in</span> <span class="token punctuation">&#125;</span>        <span class="token comment">// 返回要包装的 NSView</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeNSView</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">PNSTextConfiguredView</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">PNSTextConfiguredView</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> text<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>delegate <span class="token operator">=</span> context<span class="token punctuation">.</span>coordinator        <span class="token keyword">return</span> t    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">updateNSView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> view<span class="token punctuation">:</span> <span class="token class-name">PNSTextConfiguredView</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        view<span class="token punctuation">.</span>text <span class="token operator">=</span> text        view<span class="token punctuation">.</span>selectedRanges <span class="token operator">=</span> context<span class="token punctuation">.</span>coordinator<span class="token punctuation">.</span>sRanges    <span class="token punctuation">&#125;</span>        <span class="token comment">// 回调</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeCoordinator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">TextViewDelegate</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TextViewDelegate</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理 delegate 回调</span><span class="token keyword">extension</span> <span class="token class-name">PNSTextView</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">TextViewDelegate</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span><span class="token punctuation">,</span> <span class="token class-name">NSTextViewDelegate</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> tView<span class="token punctuation">:</span> <span class="token class-name">PNSTextView</span>        <span class="token keyword">var</span> sRanges<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">NSValue</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">var</span> typeCount<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> v<span class="token punctuation">:</span> <span class="token class-name">PNSTextView</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>tView <span class="token operator">=</span> v        <span class="token punctuation">&#125;</span>        <span class="token comment">// 开始编辑</span>        <span class="token keyword">func</span> <span class="token function-definition function">textDidBeginEditing</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> notification<span class="token punctuation">:</span> <span class="token class-name">Notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> textView <span class="token operator">=</span> notification<span class="token punctuation">.</span>object <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">NSTextView</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span>text <span class="token operator">=</span> textView<span class="token punctuation">.</span>string            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span><span class="token function">onBeginEditing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 每次敲字</span>        <span class="token keyword">func</span> <span class="token function-definition function">textDidChange</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> notification<span class="token punctuation">:</span> <span class="token class-name">Notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> textView <span class="token operator">=</span> notification<span class="token punctuation">.</span>object <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">NSTextView</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            typeCount <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span>text <span class="token operator">=</span> textView<span class="token punctuation">.</span>string            <span class="token keyword">self</span><span class="token punctuation">.</span>sRanges <span class="token operator">=</span> textView<span class="token punctuation">.</span>selectedRanges            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span><span class="token function">onDidChange</span><span class="token punctuation">(</span>textView<span class="token punctuation">.</span>string<span class="token punctuation">,</span> typeCount<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 提交</span>        <span class="token keyword">func</span> <span class="token function-definition function">textDidEndEditing</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> notification<span class="token punctuation">:</span> <span class="token class-name">Notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> textView <span class="token operator">=</span> notification<span class="token punctuation">.</span>object <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">NSTextView</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span>text <span class="token operator">=</span> textView<span class="token punctuation">.</span>string            <span class="token keyword">self</span><span class="token punctuation">.</span>tView<span class="token punctuation">.</span><span class="token function">onCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 配置 NSTextView</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PNSTextConfiguredView</span><span class="token punctuation">:</span> <span class="token class-name">NSView</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">weak</span> <span class="token keyword">var</span> delegate<span class="token punctuation">:</span> <span class="token class-name">NSTextViewDelegate</span><span class="token operator">?</span>        <span class="token keyword">private</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> tv<span class="token punctuation">:</span> <span class="token class-name">NSTextView</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> contentSize <span class="token operator">=</span> sv<span class="token punctuation">.</span>contentSize        <span class="token keyword">let</span> textStorage <span class="token operator">=</span> <span class="token class-name">NSTextStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">let</span> layoutManager <span class="token operator">=</span> <span class="token class-name">NSLayoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        textStorage<span class="token punctuation">.</span><span class="token function">addLayoutManager</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span>                <span class="token keyword">let</span> textContainer <span class="token operator">=</span> <span class="token class-name">NSTextContainer</span><span class="token punctuation">(</span>containerSize<span class="token punctuation">:</span> sv<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size<span class="token punctuation">)</span>        textContainer<span class="token punctuation">.</span>widthTracksTextView <span class="token operator">=</span> <span class="token boolean">true</span>        textContainer<span class="token punctuation">.</span>containerSize <span class="token operator">=</span> <span class="token class-name">NSSize</span><span class="token punctuation">(</span>            width<span class="token punctuation">:</span> contentSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span>greatestFiniteMagnitude        <span class="token punctuation">)</span>                layoutManager<span class="token punctuation">.</span><span class="token function">addTextContainer</span><span class="token punctuation">(</span>textContainer<span class="token punctuation">)</span>                <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">NSTextView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">,</span> textContainer<span class="token punctuation">:</span> textContainer<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>delegate        t<span class="token punctuation">.</span>isEditable <span class="token operator">=</span> <span class="token boolean">true</span>        t<span class="token punctuation">.</span>allowsUndo <span class="token operator">=</span> <span class="token boolean">true</span>                t<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">systemFont</span><span class="token punctuation">(</span>ofSize<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>textColor <span class="token operator">=</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>labelColor        t<span class="token punctuation">.</span>drawsBackground <span class="token operator">=</span> <span class="token boolean">true</span>        t<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>textBackgroundColor                t<span class="token punctuation">.</span>maxSize <span class="token operator">=</span> <span class="token class-name">NSSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span>greatestFiniteMagnitude<span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span>greatestFiniteMagnitude<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>minSize <span class="token operator">=</span> <span class="token class-name">NSSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> contentSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>autoresizingMask <span class="token operator">=</span> <span class="token punctuation">.</span>width        t<span class="token punctuation">.</span>isHorizontallyResizable <span class="token operator">=</span> <span class="token boolean">false</span>        t<span class="token punctuation">.</span>isVerticallyResizable   <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token keyword">return</span> t    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> sv<span class="token punctuation">:</span> <span class="token class-name">NSScrollView</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">NSScrollView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>drawsBackground <span class="token operator">=</span> <span class="token boolean">true</span>        s<span class="token punctuation">.</span>borderType <span class="token operator">=</span> <span class="token punctuation">.</span>noBorder        s<span class="token punctuation">.</span>hasVerticalScroller <span class="token operator">=</span> <span class="token boolean">true</span>        s<span class="token punctuation">.</span>hasHorizontalRuler <span class="token operator">=</span> <span class="token boolean">false</span>        s<span class="token punctuation">.</span>translatesAutoresizingMaskIntoConstraints <span class="token operator">=</span> <span class="token boolean">false</span>        s<span class="token punctuation">.</span>autoresizingMask <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token punctuation">.</span>height<span class="token punctuation">]</span>        <span class="token keyword">return</span> s    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">didSet</span> <span class="token punctuation">&#123;</span>            tv<span class="token punctuation">.</span>string <span class="token operator">=</span> text        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> selectedRanges<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">NSValue</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">didSet</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">guard</span> selectedRanges<span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            tv<span class="token punctuation">.</span>selectedRanges <span class="token operator">=</span> selectedRanges        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>coder<span class="token punctuation">:</span> <span class="token class-name">NSCoder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Error coder"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">init</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewWillDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewWillDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        sv<span class="token punctuation">.</span>translatesAutoresizingMaskIntoConstraints <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token function">addSubview</span><span class="token punctuation">(</span>sv<span class="token punctuation">)</span>        <span class="token class-name">NSLayoutConstraint</span><span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            sv<span class="token punctuation">.</span>topAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> topAnchor<span class="token punctuation">)</span><span class="token punctuation">,</span>            sv<span class="token punctuation">.</span>trailingAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> trailingAnchor<span class="token punctuation">)</span><span class="token punctuation">,</span>            sv<span class="token punctuation">.</span>bottomAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> bottomAnchor<span class="token punctuation">)</span><span class="token punctuation">,</span>            sv<span class="token punctuation">.</span>leadingAnchor<span class="token punctuation">.</span><span class="token function">constraint</span><span class="token punctuation">(</span>equalTo<span class="token punctuation">:</span> leadingAnchor<span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>        sv<span class="token punctuation">.</span>documentView <span class="token operator">=</span> tv    <span class="token punctuation">&#125;</span> <span class="token comment">// end viewWillDraw</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SwiftUI 中用 NSView，可以通过 NSViewRepresentable 来包装视图，这个协议主要是实现 makeNSView、updateNSView 和 makeCoordinator 三个方法。makeNSView 要求返回需要包装的 NSView。每当 SwiftUI 的状态变化时触发 updateNSView 方法的调用。为了实现 NSView 里的 delegate 和 SwiftUI 通信，就要用 makeCoordinator 返回一个用于处理 delegate 的实例。</p><h4 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/154916174-2e9b1bd8-992a-485e-803a-07da59d0c7e3.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/154916174-2e9b1bd8-992a-485e-803a-07da59d0c7e3.png"></p><p>使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayTextFieldView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Starming"</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> showT <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isEditing <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> placeholder <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"输入些文字..."</span></span>        <span class="token attribute atrule">@FocusState</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isFocus<span class="token punctuation">:</span> <span class="token class-name">Bool</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TextField</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $t<span class="token punctuation">)</span>                        <span class="token comment">// 样式设置</span>            <span class="token class-name">TextField</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $t<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>roundedBorder<span class="token punctuation">)</span> <span class="token comment">// textFieldStyle 有三个预置值 automatic、plain 和 roundedBorder。</span>                <span class="token punctuation">.</span><span class="token function">multilineTextAlignment</span><span class="token punctuation">(</span><span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token comment">// 对齐方式</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span> weight<span class="token punctuation">:</span> <span class="token punctuation">.</span>heavy<span class="token punctuation">,</span> design<span class="token punctuation">:</span> <span class="token punctuation">.</span>rounded<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token punctuation">.</span>teal<span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>brown<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textCase</span><span class="token punctuation">(</span><span class="token punctuation">.</span>uppercase<span class="token punctuation">)</span>            <span class="token comment">// 多视图组合</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"lock.circle"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                <span class="token class-name">TextField</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $t<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">submitLabel</span><span class="token punctuation">(</span><span class="token punctuation">.</span>done<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onSubmit <span class="token punctuation">&#123;</span>                        showT <span class="token operator">=</span> t                        isFocus <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                        t <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>newValue<span class="token punctuation">.</span><span class="token keyword">prefix</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 限制字数</span>                    <span class="token punctuation">&#125;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"eye.slash"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>showT<span class="token punctuation">)</span>            <span class="token comment">// 自定义 textFieldStyle 样式</span>            <span class="token class-name">TextField</span><span class="token punctuation">(</span>placeholder<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $t<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token class-name">PClearTextStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">focused</span><span class="token punctuation">(</span>$isFocus<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PClearTextStyle</span><span class="token punctuation">:</span> <span class="token class-name">TextFieldStyle</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@ViewBuilder</span>    <span class="token keyword">func</span> <span class="token function-definition function">_body</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">TextField</span><span class="token operator">&lt;</span>_Label<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> mirror <span class="token operator">=</span> <span class="token class-name">Mirror</span><span class="token punctuation">(</span>reflecting<span class="token punctuation">:</span> configuration<span class="token punctuation">)</span>        <span class="token keyword">let</span> bindingText<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> mirror<span class="token punctuation">.</span><span class="token function">descendant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"_text"</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span>        configuration            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>trailing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    bindingText<span class="token punctuation">.</span>wrappedValue <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"clear"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                <span class="token keyword">let</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> mirror<span class="token punctuation">.</span><span class="token function">descendant</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"_text"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"_value"</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> <span class="token class-name">String</span>        configuration            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">strokeBorder</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>count <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token punctuation">.</span>pink <span class="token punctuation">:</span> <span class="token punctuation">.</span>gray<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end func</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前iOS 和 iPadOS上支持的键盘有：</p><ul><li>asciiCapable：能显示标准 ASCII 字符的键盘</li><li>asciiCapableNumberPad：只输出 ASCII 数字的数字键盘</li><li>numberPad：用于输入 PIN 码的数字键盘</li><li>numbersAndPunctuation：数字和标点符号的键盘</li><li>decimalPad：带有数字和小数点的键盘</li><li>phonePad：电话中使用的键盘</li><li>namePhonePad：用于输入人名或电话号码的小键盘</li><li>URL：用于输入URL的键盘</li><li>emailAddress：用于输入电子邮件地址的键盘</li><li>twitter：用于Twitter文本输入的键盘，支持@和#字符简便输入</li><li>webSearch：用于网络搜索词和URL输入的键盘</li></ul><p>可以通过 keyboardType 修改器来指定。</p><p>支持多行，使用 Axis.vertical 以允许多行。TextField 超过行限制可以变成滚动视图。</p><p>今年 TextField 可以嵌到 <code>.alert</code> 里了。</p><h4 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155062538-108a79b4-3e5c-417b-867a-3f7e58316664.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155062538-108a79b4-3e5c-417b-867a-3f7e58316664.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayButtonView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> asyncAction<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-></span> <span class="token class-name">Void</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>nanoseconds<span class="token punctuation">:</span> <span class="token number">300_000_000</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isFollowed<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 常用方式</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Clicked"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"ladybug.fill"</span></span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Report Bug"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 图标</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>systemIconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"ladybug.fill"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bug"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span> <span class="token comment">// 无背景</span>            <span class="token punctuation">.</span><span class="token function">simultaneousGesture</span><span class="token punctuation">(</span><span class="token class-name">LongPressGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEnded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"长按"</span></span><span class="token punctuation">)</span> <span class="token comment">// macOS 暂不支持</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">simultaneousGesture</span><span class="token punctuation">(</span><span class="token class-name">TapGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onEnded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"短按"</span></span><span class="token punctuation">)</span> <span class="token comment">// macOS 暂不支持</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token comment">// iOS 15 修改器的使用。role 在 macOS 上暂不支持</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"要删除了"</span></span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token punctuation">.</span>destructive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"删除"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>purple<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">controlSize</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span> <span class="token comment">// .regular 是默认大小</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderedProminent<span class="token punctuation">)</span> <span class="token comment">// borderedProminent 可显示 tint 的设置。还有 bordered、plain 和 borderless 可选。</span>            <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">accentColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buttonBorderShape</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token comment">// 会依据 controlSize 调整边框样式</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>ultraThinMaterial<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 添加材质就像在视图和背景间加了个透明层达到模糊的效果。效果由高到底分别是.ultraThinMaterial、.thinMaterial、.regularMaterial、.thickMaterial、.ultraThickMaterial。</span>                        <span class="token comment">// 风格化</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"风格化"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token class-name">PStarmingButtonStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token comment">// 自定义 Button</span>            <span class="token class-name">PCustomButton</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点一下触发"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Clicked!"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 自定义 ButtonStyle</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Double Clicked!"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点两下触发"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token class-name">PCustomPrimitiveButtonStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 将 Text 视图加上另一个 Text 视图中，类型仍还是 Text。</span>            <span class="token class-name">PCustomButton</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点我 "</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">underline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"别犹豫"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"🤫悄悄说声，有惊喜"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>footnote<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"多 Text 组合标题按钮点击！"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">// 异步按钮</span>            <span class="token class-name">ButtonAsync</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">await</span> <span class="token function">asyncAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                isFollowed <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> isFollowed <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"已关注"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"关注"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">disabled</span><span class="token punctuation">(</span>isFollowed<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token class-name">PCustomButtonStyle</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">:</span> isFollowed <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token punctuation">.</span>gray <span class="token punctuation">:</span> <span class="token punctuation">.</span>pink<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>skeumorphismBG<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 异步操作的按钮</span><span class="token keyword">struct</span> <span class="token class-name">ButtonAsync</span><span class="token operator">&lt;</span><span class="token class-name">Label</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> doAsync<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">var</span> label<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Label</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isRunning <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 避免连续点击造成重复执行事件</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>            isRunning <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">await</span> <span class="token function">doAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                isRunning <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span>isRunning <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> isRunning <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ProgressView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">disabled</span><span class="token punctuation">(</span>isRunning<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 扩展 Button</span><span class="token comment">// 使用 SFSymbol 做图标</span><span class="token keyword">extension</span> <span class="token class-name">Button</span> <span class="token keyword">where</span> <span class="token class-name">Label</span> <span class="token operator">==</span> <span class="token class-name">Image</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>systemIconName<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> systemIconName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 Button</span><span class="token keyword">struct</span> <span class="token class-name">PCustomButton</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> desTextView<span class="token punctuation">:</span> <span class="token class-name">Text</span>    <span class="token keyword">let</span> act<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> des<span class="token punctuation">:</span> <span class="token class-name">LocalizedStringKey</span><span class="token punctuation">,</span> act<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>desTextView <span class="token operator">=</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>act <span class="token operator">=</span> act    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>            <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            desTextView<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>starming<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">PCustomButton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> desTextView<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> act<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>desTextView <span class="token operator">=</span> desTextView        <span class="token keyword">self</span><span class="token punctuation">.</span>act <span class="token operator">=</span> act    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 点语法使用自定义样式</span><span class="token keyword">extension</span> <span class="token class-name">ButtonStyle</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">PCustomButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> starming<span class="token punctuation">:</span> <span class="token class-name">PCustomButtonStyle</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PCustomButtonStyle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - ButtonStyle</span><span class="token keyword">struct</span> <span class="token class-name">PCustomButtonStyle</span><span class="token punctuation">:</span> <span class="token class-name">ButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> cornerRadius<span class="token punctuation">:</span><span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> backgroundColor<span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token punctuation">.</span>pink    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            configuration<span class="token punctuation">.</span>label            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> cornerRadius<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token punctuation">.</span>white <span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">0.5</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">0.99</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - PrimitiveButtonStyle</span><span class="token keyword">struct</span> <span class="token class-name">PCustomPrimitiveButtonStyle</span><span class="token punctuation">:</span> <span class="token class-name">PrimitiveButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 双击触发</span>        configuration<span class="token punctuation">.</span>label            <span class="token punctuation">.</span><span class="token function">onTapGesture</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                configuration<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token comment">// 手势识别</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">gesture</span><span class="token punctuation">(</span>                <span class="token class-name">LongPressGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">onEnded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                        configuration<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 风格化</span><span class="token keyword">struct</span> <span class="token class-name">PStarmingButtonStyle</span><span class="token punctuation">:</span> <span class="token class-name">ButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> backgroundColor <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>skeumorphismBG    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            configuration<span class="token punctuation">.</span>label            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>white<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">7</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">7</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">5</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">blendMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>overlay<span class="token punctuation">)</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token number">0.98</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> skeumorphismBG <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>hex<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"f0f0f3"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>hex<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> rgbValue<span class="token punctuation">:</span> <span class="token class-name">UInt64</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token class-name">Scanner</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> hex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scanHexInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rgbValue<span class="token punctuation">)</span>        <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token punctuation">(</span>rgbValue <span class="token operator">&amp;</span> <span class="token number">0xff0000</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span>        <span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token punctuation">(</span>rgbValue <span class="token operator">&amp;</span> <span class="token number">0xff00</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">8</span>        <span class="token keyword">let</span> b <span class="token operator">=</span> rgbValue <span class="token operator">&amp;</span> <span class="token number">0xff</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0xff</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0xff</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0xff</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>.buttonStyle</code> 可组合，示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PButtonStyleComposition</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isT <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"标签"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Swift"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $isT<span class="token punctuation">)</span>                    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"SwiftUI"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $isT<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Swift Chart"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $isT<span class="token punctuation">)</span>                    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Navigation API"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $isT<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>button<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>bordered<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tap Location 可以获取点击的位置，示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">onTapGesture</span><span class="token punctuation">(</span>coordinateSpace<span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> location <span class="token keyword">in</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Tap in </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">location</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 coordinateSpace 指定为 <code>.global</code> 表示位置是相对屏幕左上角，默认是相对当前视图的左上角的位置。</p><h4 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155676571-726c15d1-e4a2-4493-8fb0-c37c1c61c88c.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155676571-726c15d1-e4a2-4493-8fb0-c37c1c61c88c.jpeg"></p><p>用 ProgressViewStyle 协议，可以创建自定义的进度条视图。在 WatchOS 上会多一个 Guage 视图。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayProgressView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> v<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 默认旋转</span>            <span class="token class-name">ProgressView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 有进度条</span>            <span class="token class-name">ProgressView</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> v <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>                        <span class="token class-name">ProgressView</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> v <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"music.note.tv"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">progressViewStyle</span><span class="token punctuation">(</span><span class="token class-name">CircularProgressViewStyle</span><span class="token punctuation">(</span>tint<span class="token punctuation">:</span> <span class="token punctuation">.</span>pink<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment">// 自定义样式</span>            <span class="token class-name">ProgressView</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> v <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">progressViewStyle</span><span class="token punctuation">(</span><span class="token class-name">PCProgressStyle1</span><span class="token punctuation">(</span>borderWidth<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token class-name">ProgressView</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> v <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">progressViewStyle</span><span class="token punctuation">(</span><span class="token class-name">PCProgressStyle2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">)</span>                        <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $v<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">,</span> step<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 自定义 Progress 样式</span><span class="token keyword">struct</span> <span class="token class-name">PCProgressStyle1</span><span class="token punctuation">:</span> <span class="token class-name">ProgressViewStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> lg <span class="token operator">=</span> <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>    <span class="token keyword">var</span> borderWidth<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> fc <span class="token operator">=</span> configuration<span class="token punctuation">.</span>fractionCompleted <span class="token operator">??</span> <span class="token number">0</span>                <span class="token keyword">return</span> <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>                    <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>lg<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token class-name">CGFloat</span><span class="token punctuation">(</span>fc<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>lg<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> borderWidth<span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token comment">// end ZStack</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCProgressStyle2</span><span class="token punctuation">:</span> <span class="token class-name">ProgressViewStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> lg <span class="token operator">=</span> <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>orange<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token punctuation">.</span>green<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>purple<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>        <span class="token keyword">var</span> borderWidth<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">20</span>        <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> fc <span class="token operator">=</span> configuration<span class="token punctuation">.</span>fractionCompleted <span class="token operator">??</span> <span class="token number">0</span>                <span class="token keyword">func</span> <span class="token function-definition function">strokeStyle</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> g<span class="token punctuation">:</span> <span class="token class-name">GeometryProxy</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">StrokeStyle</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StrokeStyle</span><span class="token punctuation">(</span>lineWidth<span class="token punctuation">:</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span> lineCap<span class="token punctuation">:</span> <span class="token punctuation">.</span>round<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>                <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Group</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>lg<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">strokeStyle</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>borderWidth<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>                        <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> fc<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>lg<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token function">strokeStyle</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>borderWidth<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token number">90</span> <span class="token operator">+</span> <span class="token number">360</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token function">min</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> g<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"读取 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">(</span>fc <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> %"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// end ZStack</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SwiftUI 引入一个新显示进度的视图 Gauge。</p><p>简单示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PGauge</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> progress <span class="token operator">=</span> <span class="token number">0.45</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Gauge</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> progress<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"进度"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> currentValueLabel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>progress<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>percent<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> minimumValueLabel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>percent<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> maximumValueLabel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>percent<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">Gauge</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> progress<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token punctuation">&#125;</span> currentValueLabel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>progress<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>percent<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>footnote<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">gaugeStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>accessoryCircularCapacity<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cyan<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155683776-0f0acdee-c7c1-44e3-a68b-38f778863821.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155683776-0f0acdee-c7c1-44e3-a68b-38f778863821.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayImageView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cyan<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>                <span class="token comment">// SF Symbols</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"scissors"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">imageScale</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>                <span class="token comment">// SF Symbols 多色时使用原色</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"thermometer.sun.fill"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">imageScale</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ControlGroup"><a href="#ControlGroup" class="headerlink" title="ControlGroup"></a>ControlGroup</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayControlGroupView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ControlGroup</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"plus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"plus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"minus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"minus"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">controlGroupStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token comment">// .automatic 是默认样式，还有 .navigation</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GroupBox"><a href="#GroupBox" class="headerlink" title="GroupBox"></a>GroupBox</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155317172-dc137c38-64d0-415a-8412-e3f479f2bd91.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155317172-dc137c38-64d0-415a-8412-e3f479f2bd91.png"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayGroupBoxView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GroupBox</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这是 GroupBox 的内容"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"标题一"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"t.square.fill"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token class-name">GroupBox</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"还是 GroupBox 的内容"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"标题二"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"t.square.fill"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">groupBoxStyle</span><span class="token punctuation">(</span><span class="token class-name">PCGroupBoxStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCGroupBoxStyle</span><span class="token punctuation">:</span> <span class="token class-name">GroupBoxStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>label                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            configuration<span class="token punctuation">.</span>content        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><p>Stack View 有 VStack、HStack 和 ZStack</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155077158-f6efd3bb-4b82-48ac-b5e6-792dd833dfda.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155077158-f6efd3bb-4b82-48ac-b5e6-792dd833dfda.jpeg"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayStackView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 默认是 VStack 竖排</span>                <span class="token comment">// 横排</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"左"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"右"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// Z 轴排</span>        <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"logo"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的开发小册子"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token class-name">Color</span><span class="token punctuation">.</span>cyan            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一段文字"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Advanced-layout-control"><a href="#Advanced-layout-control" class="headerlink" title="Advanced layout control"></a>Advanced layout control</h4><p>session <a href="https://developer.apple.com/videos/play/wwdc2022-10056">Compose custom layouts with SwiftUI</a> </p><p>提供了新的 Grid 视图来同时满足 VStack 和 HStack。还有一个更低级别 Layout 接口，可以完全控制构建应用所需的布局。另外还有 ViewThatFits 可以自动选择填充可用空间的方式。</p><p>Grid 示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Grid</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">GridRow</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"One"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"One"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"One"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">GridRow</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token class-name">GridRow</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Three"</span></span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Three"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">gridCellColumns</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>gridCellColumns()</code>  modifier 可以让一个单元格跨多列。</p><p>ViewThatFits 的新视图，允许根据适合的大小放视图。ViewThatFits 会自动选择对于当前屏幕大小合适的子视图进行显示。Ryan Lintott 的<a href="https://twitter.com/ryanlintott/status/1534706352177700871">示例效果</a> ，对应示例代码 <a href="https://gist.github.com/ryanlintott/d03140dd155d0493a758dcd284e68eaa">LayoutThatFits.swift</a> 。</p><p>新的 Layout 协议可以观看 Swift Talk 第 308 期 <a href="https://talk.objc.io/episodes/S01E308-the-layout-protocol">The Layout Protocol</a> 。</p><p>通过符合 Layout 协议，我们可以自定义一个自定义的布局容器，直接参与 SwiftUI 的布局过程。新的 ProposedViewSize 结构，它是容器视图提供的大小。 <code>Layout.Subviews</code> 是布局视图的子视图代理集合，我们可以在其中为每个子视图请求各种布局属性。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">public</span> <span class="token keyword">protocol</span> <span class="token class-name">Layout</span><span class="token punctuation">:</span> <span class="token class-name">Animatable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">var</span> layoutProperties<span class="token punctuation">:</span> <span class="token class-name">LayoutProperties</span> <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">associatedtype</span> <span class="token class-name">Cache</span> <span class="token operator">=</span> <span class="token class-name">Void</span>  <span class="token keyword">typealias</span> <span class="token class-name">Subviews</span> <span class="token operator">=</span> <span class="token class-name">LayoutSubviews</span>  <span class="token keyword">func</span> <span class="token function-definition function">updateCache</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Cache</span><span class="token punctuation">,</span> subviews<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Subviews</span><span class="token punctuation">)</span>  <span class="token keyword">func</span> <span class="token function-definition function">spacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Subviews</span><span class="token punctuation">,</span> cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Cache</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">ViewSpacing</span>  <span class="token comment">/// We return our view size here, use the passed parameters for computing the</span>  <span class="token comment">/// layout.</span>  <span class="token keyword">func</span> <span class="token function-definition function">sizeThatFits</span><span class="token punctuation">(</span>    proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>     subviews<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Subviews</span><span class="token punctuation">,</span>     cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Cache</span> <span class="token comment">// 👈🏻 use this for calculated data shared among Layout methods</span>  <span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGSize</span>    <span class="token comment">/// Use this to tell your subviews where to appear.</span>  <span class="token keyword">func</span> <span class="token function-definition function">placeSubviews</span><span class="token punctuation">(</span>    <span class="token keyword">in</span> bounds<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">,</span> <span class="token comment">// 👈🏻 region where we need to place our subviews into, origin might not be .zero</span>    proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>     subviews<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Subviews</span><span class="token punctuation">,</span>     cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Cache</span>  <span class="token punctuation">)</span>    <span class="token comment">// ... there are more a couple more optional methods</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面例子是一个自定义的水平 stack 视图，为其所有子视图提供其最大子视图的宽度：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">MyEqualWidthHStack</span><span class="token punctuation">:</span> <span class="token class-name">Layout</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/// Returns a size that the layout container needs to arrange its subviews.</span>  <span class="token comment">/// - Tag: sizeThatFitsHorizontal</span>  <span class="token keyword">func</span> <span class="token function-definition function">sizeThatFits</span><span class="token punctuation">(</span>    proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>    subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span>    cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span>  <span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGSize</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">guard</span> <span class="token operator">!</span>subviews<span class="token punctuation">.</span>isEmpty <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">.</span>zero <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> maxSize <span class="token operator">=</span> <span class="token function">maxSize</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> spacing <span class="token operator">=</span> <span class="token function">spacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> totalSpacing <span class="token operator">=</span> spacing<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">+</span> <span class="token short-argument">$1</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>      width<span class="token punctuation">:</span> maxSize<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token class-name">CGFloat</span><span class="token punctuation">(</span>subviews<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> totalSpacing<span class="token punctuation">,</span>      height<span class="token punctuation">:</span> maxSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/// Places the stack's subviews.</span>  <span class="token comment">/// - Tag: placeSubviewsHorizontal</span>  <span class="token keyword">func</span> <span class="token function-definition function">placeSubviews</span><span class="token punctuation">(</span>    <span class="token keyword">in</span> bounds<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">,</span>    proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>    subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span>    cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">guard</span> <span class="token operator">!</span>subviews<span class="token punctuation">.</span>isEmpty <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> maxSize <span class="token operator">=</span> <span class="token function">maxSize</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> spacing <span class="token operator">=</span> <span class="token function">spacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> subviews<span class="token punctuation">)</span>    <span class="token keyword">let</span> placementProposal <span class="token operator">=</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> maxSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> maxSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span>    <span class="token keyword">var</span> nextX <span class="token operator">=</span> bounds<span class="token punctuation">.</span>minX <span class="token operator">+</span> maxSize<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> subviews<span class="token punctuation">.</span>indices <span class="token punctuation">&#123;</span>      subviews<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">place</span><span class="token punctuation">(</span>        at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> nextX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> bounds<span class="token punctuation">.</span>midY<span class="token punctuation">)</span><span class="token punctuation">,</span>        anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">,</span>        proposal<span class="token punctuation">:</span> placementProposal<span class="token punctuation">)</span>      nextX <span class="token operator">+=</span> maxSize<span class="token punctuation">.</span>width <span class="token operator">+</span> spacing<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/// Finds the largest ideal size of the subviews.</span>  <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">maxSize</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGSize</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> subviewSizes <span class="token operator">=</span> subviews<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">sizeThatFits</span><span class="token punctuation">(</span><span class="token punctuation">.</span>unspecified<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> maxSize<span class="token punctuation">:</span> <span class="token class-name">CGSize</span> <span class="token operator">=</span> subviewSizes<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> currentMax<span class="token punctuation">,</span> subviewSize <span class="token keyword">in</span>      <span class="token class-name">CGSize</span><span class="token punctuation">(</span>        width<span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>currentMax<span class="token punctuation">.</span>width<span class="token punctuation">,</span> subviewSize<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token function">max</span><span class="token punctuation">(</span>currentMax<span class="token punctuation">.</span>height<span class="token punctuation">,</span> subviewSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> maxSize  <span class="token punctuation">&#125;</span>  <span class="token comment">/// Gets an array of preferred spacing sizes between subviews in the</span>  <span class="token comment">/// horizontal dimension.</span>  <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">spacing</span><span class="token punctuation">(</span>subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">[</span><span class="token class-name">CGFloat</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    subviews<span class="token punctuation">.</span>indices<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> index <span class="token keyword">in</span>      <span class="token keyword">guard</span> index <span class="token operator">&lt;</span> subviews<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> subviews<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>spacing<span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span>        to<span class="token punctuation">:</span> subviews<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>spacing<span class="token punctuation">,</span>        along<span class="token punctuation">:</span> <span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义 layout 只能访问子视图代理 <code>Layout.Subviews</code> ，而不是视图或数据模型。我们可以通过 LayoutValueKey 在每个子视图上存储自定义值，通过 <code>layoutValue(key:value:)</code> modifier 设置。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">Rank</span><span class="token punctuation">:</span> <span class="token class-name">LayoutValueKey</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">let</span> defaultValue<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">func</span> <span class="token function-definition function">rank</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> value<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 👈🏻 convenience method</span>    <span class="token function">layoutValue</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token class-name">Rank</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> value<span class="token punctuation">)</span> <span class="token comment">// 👈🏻 the new modifier</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，我们就可以通过 Layout 方法中的 <code>Layout.Subviews</code> 代理读取自定义 <code>LayoutValueKey</code> 值：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">placeSubviews</span><span class="token punctuation">(</span>  <span class="token keyword">in</span> bounds<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">,</span>  proposal<span class="token punctuation">:</span> <span class="token class-name">ProposedViewSize</span><span class="token punctuation">,</span>  subviews<span class="token punctuation">:</span> <span class="token class-name">Subviews</span><span class="token punctuation">,</span>  cache<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ranks <span class="token operator">=</span> subviews<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> subview <span class="token keyword">in</span>    subview<span class="token punctuation">[</span><span class="token class-name">Rank</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token comment">// 👈🏻</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要在布局之间变化使用动画，需要用 AnyLayout，代码示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PAnyLayout</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isVertical <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> layout <span class="token operator">=</span> isVertical <span class="token operator">?</span> <span class="token class-name">AnyLayout</span><span class="token punctuation">(</span><span class="token class-name">VStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">AnyLayout</span><span class="token punctuation">(</span><span class="token class-name">HStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layout <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"star"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Starming.com"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Click"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            withAnimation <span class="token punctuation">&#123;</span>                isVertical<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end button</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时 Text 和图片也支持了样式布局变化，代码示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PTextTransitionsView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> expandMessage <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> mintWithShadow<span class="token punctuation">:</span> <span class="token class-name">AnyShapeStyle</span> <span class="token operator">=</span> <span class="token class-name">AnyShapeStyle</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>mint<span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> primaryWithoutShadow<span class="token punctuation">:</span> <span class="token class-name">AnyShapeStyle</span> <span class="token operator">=</span> <span class="token class-name">AnyShapeStyle</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>primary<span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Dai Ming Swift Pamphlet"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span>expandMessage <span class="token operator">?</span> <span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>heavy<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>body<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span>expandMessage <span class="token operator">?</span> mintWithShadow <span class="token punctuation">:</span> primaryWithoutShadow<span class="token punctuation">)</span>            <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span> withAnimation <span class="token punctuation">&#123;</span> expandMessage<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> expandMessage <span class="token operator">?</span> <span class="token number">150</span> <span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">drawingGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cyan<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h4><p>控制导航启动状态、管理 size class 之间的 transition 和响应 deep link。</p><p>Navigation bar 有新的默认行为，如果没有提供标题，导航栏默认为 inline  title 显示模式。使用 <code>navigationBarTitleDisplayMode(_:)</code> 改变显示模式。如果 navigation bar  没有标题、工具栏项或搜索内容，它就会自动隐藏。使用 <code>.toolbar(.visible)</code> modifier 显示一个空 navigation bar。</p><p>参考：</p><ul><li><a href="https://developer.apple.com/documentation/swiftui/migrating-to-new-navigation-types?changes=latest_minor">Migrating to New Navigation Types</a> 官方迁移指南</li><li><a href="https://developer.apple.com/documentation/swiftui/navigationstack?changes=latest_minor">NavigationStack</a></li><li><a href="https://developer.apple.com/documentation/swiftui/navigationsplitview">NavigationSplitView</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2022/10054/">The SwiftUI cookbook for navigation</a></li></ul><p>NavigationStack 的示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PNavigationStack</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token comment">// 深层链接</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> $a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..&lt;</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 行"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.circle"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 行内容"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"NavigationStack Demo"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 path 设置了 stack 的深度路径。</p><p>NavigationSplitView 两栏的例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PNavigationSplitViewTwoColumn</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> choice<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationSplitView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $choice<span class="token punctuation">,</span> rowContent<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> detail<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>choice <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NavigationSplitView 三栏的例子：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PNavigationSplitViewThreeColumn</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Group</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span><span class="token punctuation">,</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>        <span class="token keyword">var</span> subs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> gps <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token class-name">Group</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"One"</span></span><span class="token punctuation">,</span> subs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"o1"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"o2"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"o3"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Group</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Two"</span></span><span class="token punctuation">,</span> subs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"t1"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"t2"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"t3"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> choiceGroup<span class="token punctuation">:</span> <span class="token class-name">Group</span><span class="token operator">?</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> choiceSub<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> cv <span class="token operator">=</span> <span class="token class-name">NavigationSplitViewVisibility</span><span class="token punctuation">.</span>automatic        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationSplitView</span><span class="token punctuation">(</span>columnVisibility<span class="token punctuation">:</span> $cv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>gps<span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $choiceGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationSplitViewColumnWidth</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>choiceGroup<span class="token operator">?</span><span class="token punctuation">.</span>subs <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $choiceSub<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> detail<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>choiceSub <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"点击"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cv <span class="token operator">=</span> <span class="token punctuation">.</span>all            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">navigationSplitViewStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>prominentDetail<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>navigationSplitViewColumnWidth() </code> 是用来自定义宽的，<code>navigationSplitViewStyle</code> 设置为 <code>.prominentDetail</code> 是让 detail 的视图尽量保持其大小。</p><p>SwiftUI 新加了个<a href="https://developer.apple.com/documentation/swiftui/presentedwindowcontent/toolbar(_:in:)">功能</a>可以配置是否隐藏 Tabbar，这样在从主页进入下一级时就可以选择不显示底部标签栏了，示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toolbar</span><span class="token punctuation">(</span><span class="token punctuation">.</span>hidden<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>tabBar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相比较以前 NavigationView 增强的是 destination 可以根据值的不同类型展示不同的目的页面，示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PNavigationStackDestination</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"字符串"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"字符串"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"红色"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"不同类型 Destination"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c <span class="token keyword">in</span>                c<span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationDestination</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 的 detail"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对 toolbar 的自定义，示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">toolbar</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"toolbar"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"new"</span></span><span class="token punctuation">,</span> placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>secondaryAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"New Invitation"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"envelope"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">toolbarRole</span><span class="token punctuation">(</span><span class="token punctuation">.</span>editor<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是废弃的 NavigationView 的用法。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155517358-4e5d54b8-0284-4fde-bf09-4b5e22e0e9a5.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155517358-4e5d54b8-0284-4fde-bf09-4b5e22e0e9a5.jpeg"></p><p>对应代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayNavigationView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> lData <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>pink<span class="token punctuation">,</span> <span class="token punctuation">.</span>orange<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token class-name">List</span><span class="token punctuation">(</span>lData<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">NavigationLink</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">PNavDetailView</span><span class="token punctuation">(</span>contentStr<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>mint<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"一个 NavigationView 的示例"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>white<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">safeAreaInset</span><span class="token punctuation">(</span>edge<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bottom1"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bottom2"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bottom3"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"数字列表"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>            <span class="token comment">// placement 共有 keyboard、destructiveAction、cancellationAction、confirmationAction、status、primaryAction、navigation、principal、automatic 这些</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>primaryAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"primaryAction"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>ultraThinMaterial<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 通过 ToolbarItemGroup 可以简化相同位置 ToolbarItem 的编写。</span>            <span class="token class-name">ToolbarItemGroup</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>navigation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"返回"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"前进"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">PCToolbar</span><span class="token punctuation">(</span>doDestruct<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"删除了"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> doCancel<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"取消了"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> doConfirm<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确认了"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"status"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>principal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"principal"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>keyboard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Touch Bar Button"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end toolbar</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - NavigationView 的目的页面</span><span class="token keyword">struct</span> <span class="token class-name">PNavDetailView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>presentationMode<span class="token punctuation">)</span> <span class="token keyword">var</span> pMode<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">PresentationMode</span><span class="token operator">></span>    <span class="token keyword">var</span> contentStr<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>contentStr<span class="token punctuation">)</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"返回"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    pMode<span class="token punctuation">.</span>wrappedValue<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end ZStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 toolbar</span><span class="token comment">// 通过 ToolbarContent 创建可重复使用的 toolbar 组</span><span class="token keyword">struct</span> <span class="token class-name">PCToolbar</span><span class="token punctuation">:</span> <span class="token class-name">ToolbarContent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> doDestruct<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token keyword">let</span> doCancel<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>    <span class="token keyword">let</span> doConfirm<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">ToolbarContent</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>destructiveAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"删除"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> doDestruct<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancellationAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"取消"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> doCancel<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ToolbarItem</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>confirmationAction<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确定"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> doConfirm<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>toolbar 的位置设置可选项如下：</p><ul><li>primaryAction：放置到最主要位置，macOS 就是放在 toolbar 的最左边</li><li>automatic：根据平台不同放到默认位置</li><li>confirmationAction：一些确定的动作</li><li>cancellationAction：取消动作</li><li>destructiveAction：删除的动作</li><li>status：状态变化，比如检查更新等动作</li><li>navigation：导航动作，比如浏览器的前进后退</li><li>principal：突出的位置，iOS 和 macOS 会出现在中间的位置</li><li>keyboard：macOS 会出现在 Touch Bar 里。iOS 会出现在弹出的虚拟键盘上。</li></ul><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155293565-d85080c1-2304-491b-be72-20aa921f7067.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155293565-d85080c1-2304-491b-be72-20aa921f7067.jpeg"></p><p>List 除了能够展示数据外，还有下拉刷新、过滤搜索和侧滑 Swipe 动作提供更多 Cell 操作的能力。</p><p>通过 List 的可选子项参数提供数据模型的关键路径来制定子项路劲，还可以实现大纲视图，使用 DisclosureGroup 和 OutlineGroup  可以进一步定制大纲视图。</p><p>下面是 List 使用，包括了 DisclosureGroup 和 OutlineGroup 的演示代码：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayListView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> l<span class="token punctuation">:</span> <span class="token constant">PLVM</span> <span class="token operator">=</span> <span class="token function">PLVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>        <span class="token keyword">var</span> outlineModel <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"文件夹一"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"folder.fill"</span></span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"个人"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"person.crop.circle.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"群组"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"person.2.circle.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"加好友"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"person.badge.plus"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"文件夹二"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"folder.fill"</span></span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"晴天"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"sun.max.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"夜间"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"moon.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"雨天"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.rain.fill"</span></span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"雷加雨"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.bolt.rain.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"太阳雨"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.sun.rain.fill"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"文件夹三"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"folder.fill"</span></span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"电话"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"phone"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"拍照"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"camera.circle.fill"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">POutlineModel</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"提醒"</span></span><span class="token punctuation">,</span> iconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"bell"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// List 通过$语法可以将集合的元素转换成可绑定的值</span>            <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>$l<span class="token punctuation">.</span>ls<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> $d <span class="token keyword">in</span>                    <span class="token class-name">PRowView</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> d<span class="token punctuation">.</span>s<span class="token punctuation">,</span> i<span class="token punctuation">:</span> d<span class="token punctuation">.</span>i<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">listRowInsets</span><span class="token punctuation">(</span><span class="token class-name">EdgeInsets</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> leading<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> bottom<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> trailing<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">listRowBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span>refreshable <span class="token punctuation">&#123;</span>                <span class="token comment">// 下拉刷新</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $s<span class="token punctuation">)</span> <span class="token comment">// 搜索</span>            <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"搜索关键字：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">s</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 自定义 List</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">PCustomListView</span><span class="token punctuation">(</span>$l<span class="token punctuation">.</span>ls<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> $d <span class="token keyword">in</span>                    <span class="token class-name">PRowView</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> d<span class="token punctuation">.</span>s<span class="token punctuation">,</span> i<span class="token punctuation">:</span> d<span class="token punctuation">.</span>i<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 添加数据</span>                <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                    l<span class="token punctuation">.</span>ls<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">PLModel</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"More"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"添加"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 使用大纲</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>outlineModel<span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> i<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 自定义大纲视图</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"可点击标题展开"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>                <span class="token class-name">PCOutlineListView</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> outlineModel<span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> i<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token class-name">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 使用 OutlineGroup 实现大纲视图</span>            <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"OutlineGroup 实现大纲"</span></span><span class="token punctuation">)</span>                                <span class="token class-name">OutlineGroup</span><span class="token punctuation">(</span>outlineModel<span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> i<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                                <span class="token comment">// OutlineGroup 和 List 结合</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"OutlineGroup 和 List 结合"</span></span><span class="token punctuation">)</span>                <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>outlineModel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                        <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">OutlineGroup</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>children <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                                <span class="token class-name">Label</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> i<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Label</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> s<span class="token punctuation">.</span>iconName<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>                <span class="token punctuation">&#125;</span> <span class="token comment">// end List</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end HStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义大纲视图</span><span class="token keyword">struct</span> <span class="token class-name">PCOutlineListView</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">D</span><span class="token punctuation">:</span> <span class="token class-name">RandomAccessCollection</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> v<span class="token punctuation">:</span> <span class="token class-name">PCOutlineView</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">></span>        <span class="token keyword">init</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> <span class="token class-name">D</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token class-name">KeyPath</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token operator">?></span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token class-name">PCOutlineView</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> d<span class="token punctuation">,</span> c<span class="token punctuation">:</span> c<span class="token punctuation">,</span> content<span class="token punctuation">:</span> content<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>            v        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCOutlineView</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">D</span><span class="token punctuation">:</span> <span class="token class-name">RandomAccessCollection</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> d<span class="token punctuation">:</span> <span class="token class-name">D</span>    <span class="token keyword">let</span> c<span class="token punctuation">:</span> <span class="token class-name">KeyPath</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">,</span> <span class="token class-name">D</span><span class="token operator">?></span>    <span class="token keyword">let</span> content<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> isExpanded <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 控制初始是否展开的状态</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> sub <span class="token operator">=</span> i<span class="token punctuation">[</span>keyPath<span class="token punctuation">:</span> c<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">PCDisclosureGroup</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">PCOutlineView</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> sub<span class="token punctuation">,</span> c<span class="token punctuation">:</span> c<span class="token punctuation">,</span> content<span class="token punctuation">:</span> content<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token function">content</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">content</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end if</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PCDisclosureGroup</span><span class="token operator">&lt;</span><span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">C</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> isExpanded <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> content<span class="token punctuation">:</span> <span class="token class-name">C</span>    <span class="token keyword">var</span> label<span class="token punctuation">:</span> <span class="token class-name">L</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DisclosureGroup</span><span class="token punctuation">(</span>isExpanded<span class="token punctuation">:</span> $isExpanded<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            content        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                isExpanded<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                label            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 大纲模式数据模型</span><span class="token keyword">struct</span> <span class="token class-name">POutlineModel</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> iconName<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">POutlineModel</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - List 的抽象，数据兼容任何集合类型</span><span class="token keyword">struct</span> <span class="token class-name">PCustomListView</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">:</span> <span class="token class-name">RandomAccessCollection</span> <span class="token operator">&amp;</span> <span class="token class-name">MutableCollection</span> <span class="token operator">&amp;</span> <span class="token class-name">RangeReplaceableCollection</span><span class="token punctuation">,</span> <span class="token class-name">Content</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token keyword">where</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Binding</span> <span class="token keyword">var</span> data<span class="token punctuation">:</span> <span class="token class-name">D</span>    <span class="token keyword">var</span> content<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> data<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token operator">></span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">D</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>_data <span class="token operator">=</span> data        <span class="token keyword">self</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>$data<span class="token punctuation">,</span> content<span class="token punctuation">:</span> content<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onMove <span class="token punctuation">&#123;</span> indexSet<span class="token punctuation">,</span> offset <span class="token keyword">in</span>                        data<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>fromOffsets<span class="token punctuation">:</span> indexSet<span class="token punctuation">,</span> toOffset<span class="token punctuation">:</span> offset<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span>onDelete <span class="token punctuation">&#123;</span> indexSet <span class="token keyword">in</span>                        data<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>atOffsets<span class="token punctuation">:</span> indexSet<span class="token punctuation">)</span> <span class="token comment">// macOS 暂不支持</span>                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第一栏，共 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">data<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 项"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> footer<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"The End"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">listStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>plain<span class="token punctuation">)</span> <span class="token comment">// 有.automatic、.inset、.plain、sidebar，macOS 暂不支持的有.grouped 和 .insetGrouped</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - Cell 视图</span><span class="token keyword">struct</span> <span class="token class-name">PRowView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">："</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 数据模型设计</span><span class="token keyword">struct</span> <span class="token class-name">PLModel</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">&#125;</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token constant">PLVM</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> ls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">PLModel</span><span class="token punctuation">]</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">PLModel</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">20</span> <span class="token punctuation">&#123;</span>            ls<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">PLModel</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">:</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>list 支持 Section footer。</p><p>list 分隔符可以自定义，使用  <code>HorizontalEdge.leading</code> 和 <code>HorizontalEdge.trailing</code> 。</p><p>list 不使用 UITableView 了。</p><p>今年 list 还新增了一个 <a href="https://developer.apple.com/documentation/swiftui/editoperations">EditOperation</a> 可以自动生成移动和删除，新增了 edits 参数，传入 <code>[.delete, .move]</code> 数组即可。这也是一个演示如何更好扩展和配置功能的方式。</p><p><code>.searchable</code> 支持 token 和 scope，示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PSearchTokensAndScopes</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">enum</span> <span class="token class-name">AttendanceScope</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> inPerson<span class="token punctuation">,</span> online    <span class="token punctuation">&#125;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> queryText<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> queryTokens<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">InvitationToken</span><span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scope<span class="token punctuation">:</span> <span class="token class-name">AttendanceScope</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token function">invitationCountView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $queryText<span class="token punctuation">,</span> tokens<span class="token punctuation">:</span> $queryTokens<span class="token punctuation">,</span> scope<span class="token punctuation">:</span> $scope<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> token <span class="token keyword">in</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>diplayName<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> token<span class="token punctuation">.</span>systemImage<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> scopes<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"In Person"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">AttendanceScope</span><span class="token punctuation">.</span>inPerson<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Online"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">AttendanceScope</span><span class="token punctuation">.</span>online<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="LazyVStack-和-LazyHStack"><a href="#LazyVStack-和-LazyHStack" class="headerlink" title="LazyVStack 和 LazyHStack"></a>LazyVStack 和 LazyHStack</h4><p>LazyVStack 和 LazyHStack 里的视图只有在滚到时才会被创建。</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayLazyVStackAndLazyHStackView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LazyVStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">300</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">PLHSRowView</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> i<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PLHSRowView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 个"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"第 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 个初始化了"</span></span><span class="token punctuation">)</span> <span class="token comment">// 用来查看什么时候创建的。</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="LazyVGrid-和-LazyHGrid"><a href="#LazyVGrid-和-LazyHGrid" class="headerlink" title="LazyVGrid 和 LazyHGrid"></a>LazyVGrid 和 LazyHGrid</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/155708552-35396dcd-f120-4498-a793-a65abd68c0a6.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/155708552-35396dcd-f120-4498-a793-a65abd68c0a6.jpeg"></p><p>列的设置有三种，这三种也可以组合用。</p><ul><li>GridItem(.fixed(10)) 会固定设置有多少列。</li><li>GridItem(.flexible()) 会充满没有使用的空间。</li><li>GridItem(.adaptive(minimum: 10)) 表示会根据设置大小自动设置有多少列展示。</li></ul><p>示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayLazyVGridAndLazyHGridView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span><span class="token class-name">Color</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string-literal"><span class="token string">"red"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>red<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"orange"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>orange<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"yellow"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"green"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>green<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"mint"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>mint<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"teal"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>teal<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"cyan"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>cyan<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"blue"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"indigo"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>indigo<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"purple"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"pink"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>pink<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"brown"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>brown<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"gray"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>gray<span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"black"</span></span> <span class="token punctuation">:</span> <span class="token punctuation">.</span>black    <span class="token punctuation">]</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span> pinnedViews<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>sectionHeaders<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Section</span><span class="token punctuation">(</span>header<span class="token punctuation">:</span>                            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"🎨调色板"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> maxHeight<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                                                <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> k <span class="token keyword">in</span>                        colors<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token operator">...</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>                            <span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Section</span><span class="token punctuation">(</span>header<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"图标集"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">aspectRatio</span><span class="token punctuation">(</span>contentMode<span class="token punctuation">:</span> <span class="token punctuation">.</span>fit<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p>今年 iOS 和 iPadOS 也可以使用去年只能在 macOS 上使用的 Table了，据 digital lounges 里说，iOS table 的性能和 list 差不多，table 默认为 plian list。我想 iOS 上加上 table 只是为了兼容 macOS 代码吧。</p><p>table 使用示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Table</span><span class="token punctuation">(</span>attendeeStore<span class="token punctuation">.</span>attendees<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TableColumn</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Name"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> attendee <span class="token keyword">in</span>        <span class="token class-name">AttendeeRow</span><span class="token punctuation">(</span>attendee<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">TableColumn</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"City"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>city<span class="token punctuation">)</span>    <span class="token class-name">TableColumn</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Status"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> attendee <span class="token keyword">in</span>        <span class="token class-name">StatusRow</span><span class="token punctuation">(</span>attendee<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">contextMenu</span><span class="token punctuation">(</span>forSelectionType<span class="token punctuation">:</span> <span class="token class-name">Attendee</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> selection <span class="token keyword">in</span>    <span class="token keyword">if</span> selection<span class="token punctuation">.</span>isEmpty <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"New Invitation"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">addInvitation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> selection<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Mark as VIP"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">markVIPs</span><span class="token punctuation">(</span>selection<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Mark as VIPs"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">markVIPs</span><span class="token punctuation">(</span>selection<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h4><p>ScrollView 使用 scrollTo 可以直接滚动到指定的位置。ScrollView 还可以透出偏移量，利用偏移量可以定义自己的动态视图，比如向下向上滚动视图时有不同效果，到顶部显示标题视图等。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayScrollView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scrollOffset<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token punctuation">.</span>zero        <span class="token keyword">var</span> infoView<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>"移动了 <span class="token punctuation">\</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">(</span>scrollOffset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">precision</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">fractionLength</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rounded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>"<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 标准用法</span>        <span class="token class-name">ScrollViewReader</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>            <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"跳到150"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                withAnimation <span class="token punctuation">&#123;</span>                    s<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end Button</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end ScrollViewReader</span>                <span class="token comment">// 自定义的 ScrollView 透出 offset 供使用</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PCScrollView</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> whenMoved<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> d <span class="token keyword">in</span>                scrollOffset <span class="token operator">=</span> d            <span class="token punctuation">&#125;</span>            infoView                    <span class="token punctuation">&#125;</span> <span class="token comment">// end ZStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 ScrollView</span><span class="token keyword">struct</span> <span class="token class-name">PCScrollView</span><span class="token operator">&lt;</span><span class="token class-name">C</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> c<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">C</span>    <span class="token keyword">let</span> whenMoved<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span>        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token attribute atrule">@ViewBuilder</span> c<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">C</span><span class="token punctuation">,</span> whenMoved<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">CGFloat</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c        <span class="token keyword">self</span><span class="token punctuation">.</span>whenMoved <span class="token operator">=</span> whenMoved    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> offsetReader<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> g <span class="token keyword">in</span>            <span class="token class-name">Color</span><span class="token punctuation">.</span>clear                <span class="token punctuation">.</span><span class="token function">preference</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token class-name">OffsetPreferenceKey</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> g<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"frameLayer"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minY<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>            offsetReader            <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">coordinateSpace</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"frameLayer"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">onPreferenceChange</span><span class="token punctuation">(</span><span class="token class-name">OffsetPreferenceKey</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> perform<span class="token punctuation">:</span> whenMoved<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">OffsetPreferenceKey</span><span class="token punctuation">:</span> <span class="token class-name">PreferenceKey</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">var</span> defaultValue<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token punctuation">.</span>zero  <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">reduce</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">CGFloat</span><span class="token punctuation">,</span> nextValue<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">CGFloat</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增 modifier</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">ScrollView</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">scrollDisabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollDismissesKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">.</span>interactively<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollIndicators</span><span class="token punctuation">(</span><span class="token punctuation">.</span>visible<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浮层"><a href="#浮层" class="headerlink" title="浮层"></a>浮层</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/156135869-7451bbc9-95b9-445f-8721-66f0aedbed70.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/156135869-7451bbc9-95b9-445f-8721-66f0aedbed70.png"></p><p>浮层有 HUD、ContextMenu、Sheet、Alert、ConfirmationDialog、Popover、ActionSheet 等几种方式。这些方式实现代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlaySuperposedLayerView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> hudVM <span class="token operator">=</span> <span class="token function">PHUDVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShow <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShowAlert <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShowConfirmationDialog <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShowPopover <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                                    <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span>contextMenu <span class="token punctuation">&#123;</span>                            <span class="token comment">// 在 macOS 上右键会出现的菜单</span>                            <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is clicked"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Click </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"列表"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>                <span class="token class-name">ToolbarItemGroup</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>automatic<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 Sheet"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShow <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                                        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 Alert"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShowAlert <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                                        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 confirmationDialog"</span></span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token punctuation">.</span>destructive<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShowConfirmationDialog <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                                        <span class="token comment">// Popover 样式默认是弹出窗口置于按钮上方，指向底部。</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 Popover"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShowPopover <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">popover</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isShowPopover<span class="token punctuation">,</span> attachmentAnchor<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token punctuation">.</span>trailing<span class="token punctuation">)</span><span class="token punctuation">,</span> arrowEdge<span class="token punctuation">:</span> <span class="token punctuation">.</span>trailing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Popover 的内容"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                                    <span class="token punctuation">&#125;</span> <span class="token comment">// end ToolbarItemGroup</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end toolbar</span>            <span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isShowAlert<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Alert</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"弹框标题"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"弹框内容"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isShow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"dismiss"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> content<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Sheet"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"brain.head.profile"</span></span><span class="token punctuation">)</span>                    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"关闭"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isShow <span class="token operator">=</span> <span class="token boolean">false</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">confirmationDialog</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确定删除？"</span></span><span class="token punctuation">,</span> isPresented<span class="token punctuation">:</span> $isShowConfirmationDialog<span class="token punctuation">,</span> titleVisibility<span class="token punctuation">:</span> <span class="token punctuation">.</span>hidden<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"确定"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// do good thing</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>defaultAction<span class="token punctuation">)</span> <span class="token comment">// 使用 keyboardShortcut 可以设置成为默认选项样式</span>                                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"不不"</span></span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// good choice</span>                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span> message<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这个东西还有点重要哦"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                hudVM<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"您有一条新的短消息"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"ellipsis.bubble"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"查看 HUD"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"switch.2"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">environmentObject</span><span class="token punctuation">(</span>hudVM<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">hud</span><span class="token punctuation">(</span>isShow<span class="token punctuation">:</span> $hudVM<span class="token punctuation">.</span>isShow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span>hudVM<span class="token punctuation">.</span>title<span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> hudVM<span class="token punctuation">.</span>systemImage<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 供全局使用的 HUD</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token constant">PHUDVM</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> isShow<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> systemImage<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>        <span class="token keyword">func</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title        <span class="token keyword">self</span><span class="token punctuation">.</span>systemImage <span class="token operator">=</span> systemImage        withAnimation <span class="token punctuation">&#123;</span>            isShow <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 扩展 View 使其能够有 HUD 的能力</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">hud</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">(</span>        isShow<span class="token punctuation">:</span> <span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">Bool</span><span class="token operator">></span><span class="token punctuation">,</span>        <span class="token attribute atrule">@ViewBuilder</span> v<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">V</span>    <span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">self</span>                        <span class="token keyword">if</span> isShow<span class="token punctuation">.</span>wrappedValue <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">&#123;</span>                <span class="token function">PHUD</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> v<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token class-name">AnyTransition</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>edge<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">combined</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token punctuation">.</span>opacity<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>                        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            withAnimation <span class="token punctuation">&#123;</span>                                isShow<span class="token punctuation">.</span>wrappedValue <span class="token operator">=</span> <span class="token boolean">false</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">zIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义 HUD</span><span class="token keyword">struct</span> <span class="token constant">PHUD</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">:</span> <span class="token class-name">View</span><span class="token operator">></span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">let</span> v<span class="token punctuation">:</span> <span class="token class-name">V</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        v            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>                <span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SwiftUI 新推出的 <code>presentationDetents()</code> modifier 可以创建一个可以定制的 bottom sheet。示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PSheet</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShow <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"显示 Sheet"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            isShow<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isShow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这里是 Sheet 的内容"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">presentationDetents</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>medium<span class="token punctuation">,</span> <span class="token punctuation">.</span>large<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>detent 默认值是 <code>.large</code>。也可以提供一个百分比，比如 <code>.presentationDetents([.fraction(0.7)])</code>，或者直接指定高度 <code>.presentationDetents([.height(100)])</code>。</p><p>presentationDragIndicator modifier 可以用来显示隐藏拖动标识。</p><h4 id="TabView"><a href="#TabView" class="headerlink" title="TabView"></a>TabView</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayTabView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selection <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TabView</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"首页"</span></span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">hidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"二栏"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"three"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>tabItem <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"三栏"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"four"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"five"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"six"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"seven"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"eight"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"nine"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"ten"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end TabView</span>                                    <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"上一页"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> selection <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                        selection <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cancelAction<span class="token punctuation">)</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"下一页"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> selection <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token punctuation">&#123;</span>                        selection <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>defaultAction<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end HStack</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.tabViewStyle(PageTabViewStyle(indexDisplayMode: .never)) 可以实现 UIPageViewController 的效果，如果要给小白点加上背景，可以多添加一个 .indexViewStyle(PageIndexViewStyle(backgroundDisplayMode: .always)) 修改器。</p><h4 id="Swift-Charts"><a href="#Swift-Charts" class="headerlink" title="Swift Charts"></a>Swift Charts</h4><p>可视化数据，使用 SwiftUI 语法来创建。还可以使用 ChartRenderer 接口将图标渲染成图。</p><p>官方文档 <a href="https://developer.apple.com/documentation/Charts">Swift Charts</a></p><p>入门参看 <a href="https://developer.apple.com/videos/play/wwdc2022/10136/">Hello Swift Charts</a></p><p>Apple 文章 <a href="https://developer.apple.com/documentation/Charts/Creating-a-chart-using-Swift-Charts">Creating a chart using Swift Charts</a></p><p>高级定制和创建更精细图表，可以看这个 session <a href="https://developer.apple.com/videos/play/wwdc2022/10137">Swift Charts: Raise the bar</a> 这个 session 也会提到如何在图表中进行交互。这里是 session 对应的代码示例 <a href="https://developer.apple.com/documentation/charts/visualizing_your_app_s_data">Visualizing your app’s data</a> 。</p><p>图表设计的 session，<a href="https://developer.apple.com/videos/play/wwdc2022-110340">Design an effective chart</a> 和 <a href="https://developer.apple.com/videos/play/wwdc2022-110342">Design app experiences with charts</a> 。</p><p>下面是一个简单的代码示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">Charts</span><span class="token keyword">struct</span> <span class="token class-name">PChartModel</span><span class="token punctuation">:</span> <span class="token class-name">Hashable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> day<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> amount<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">..&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">PChartModel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">PChartModel</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token punctuation">.</span>gregorian<span class="token punctuation">)</span>        <span class="token keyword">let</span> days <span class="token operator">=</span> calendar<span class="token punctuation">.</span>shortWeekdaySymbols        <span class="token keyword">return</span> days<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> day <span class="token keyword">in</span>            <span class="token class-name">PChartModel</span><span class="token punctuation">(</span>day<span class="token punctuation">:</span> day<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PlayCharts</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Chart</span><span class="token punctuation">(</span><span class="token class-name">PChartModel</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> v <span class="token keyword">in</span>            <span class="token class-name">BarMark</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"天"</span></span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"数量"</span></span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">PSwiftCharts</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">CData</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> i<span class="token punctuation">:</span> <span class="token class-name">Int</span>        <span class="token keyword">let</span> v<span class="token punctuation">:</span> <span class="token class-name">Double</span>    <span class="token punctuation">&#125;</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">CData</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Chart</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>            <span class="token class-name">LineMark</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Index"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Value"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token class-name">BarMark</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Index"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> yStart<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"开始"</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> yEnd<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"结束"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Value"</span></span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end Chart</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end body</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BarMark 用于创建条形图，LineMark 用于创建折线图。SwiftUI Charts 框架还提供 PointMark、AxisMarks、AreaMark、RectangularMark 和 RuleMark 用于创建不同类型的图表。注释使用 <code>.annotation</code> modifier，修改颜色可以使用 <code>.foregroundStyle</code> modifier。<code>.lineStyle</code> modifier 可以修改线宽。</p><p>AxisMarks 的示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">MonthlySalesChart</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Chart</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>month<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BarMark</span><span class="token punctuation">(</span>                x<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Month"</span></span><span class="token punctuation">,</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>month<span class="token punctuation">,</span> unit<span class="token punctuation">:</span> <span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">,</span>                y<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Sales"</span></span><span class="token punctuation">,</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>sales<span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>chartXAxis <span class="token punctuation">&#123;</span>            <span class="token class-name">AxisMarks</span><span class="token punctuation">(</span>values<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">stride</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value <span class="token keyword">in</span>                <span class="token keyword">if</span> value<span class="token punctuation">.</span><span class="token keyword">as</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>isFirstMonthOfQuarter <span class="token punctuation">&#123;</span>                    <span class="token class-name">AxisGridLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>                    <span class="token class-name">AxisTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>                    <span class="token class-name">AxisValueLabel</span><span class="token punctuation">(</span>                        format<span class="token punctuation">:</span> <span class="token punctuation">.</span>dateTime<span class="token punctuation">.</span><span class="token function">month</span><span class="token punctuation">(</span><span class="token punctuation">.</span>narrow<span class="token punctuation">)</span>                    <span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">AxisGridLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可交互图表示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">InteractiveBrushingChart</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> range<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Chart</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">LineMark</span><span class="token punctuation">(</span>                    x<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Month"</span></span><span class="token punctuation">,</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>day<span class="token punctuation">,</span> unit<span class="token punctuation">:</span> <span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">,</span>                    y<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Sales"</span></span><span class="token punctuation">,</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>sales<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">interpolationMethod</span><span class="token punctuation">(</span><span class="token punctuation">.</span>catmullRom<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">symbol</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">strokeBorder</span><span class="token punctuation">(</span>lineWidth<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token operator">=</span> range <span class="token punctuation">&#123;</span>                <span class="token class-name">RectangleMark</span><span class="token punctuation">(</span>                    xStart<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Selection Start"</span></span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">,</span>                    xEnd<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Selection End"</span></span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>gray<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span>chartOverlay <span class="token punctuation">&#123;</span> proxy <span class="token keyword">in</span>            <span class="token class-name">GeometryReader</span> <span class="token punctuation">&#123;</span> nthGeoItem <span class="token keyword">in</span>                <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>clear<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentShape</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">gesture</span><span class="token punctuation">(</span><span class="token class-name">DragGesture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span>onChanged <span class="token punctuation">&#123;</span> value <span class="token keyword">in</span>                            <span class="token comment">// Find the x-coordinates in the chart’s plot area.</span>                            <span class="token keyword">let</span> xStart <span class="token operator">=</span> value<span class="token punctuation">.</span>startLocation<span class="token punctuation">.</span>x <span class="token operator">-</span> nthGeoItem<span class="token punctuation">[</span>proxy<span class="token punctuation">.</span>plotAreaFrame<span class="token punctuation">]</span><span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x                            <span class="token keyword">let</span> xCurrent <span class="token operator">=</span> value<span class="token punctuation">.</span>location<span class="token punctuation">.</span>x <span class="token operator">-</span> nthGeoItem<span class="token punctuation">[</span>proxy<span class="token punctuation">.</span>plotAreaFrame<span class="token punctuation">]</span><span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x                            <span class="token comment">// Find the date values at the x-coordinates.</span>                            <span class="token keyword">if</span> <span class="token keyword">let</span> dateStart<span class="token punctuation">:</span> <span class="token class-name">Date</span> <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>atX<span class="token punctuation">:</span> xStart<span class="token punctuation">)</span><span class="token punctuation">,</span>                               <span class="token keyword">let</span> dateCurrent<span class="token punctuation">:</span> <span class="token class-name">Date</span> <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>atX<span class="token punctuation">:</span> xCurrent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                range <span class="token operator">=</span> <span class="token punctuation">(</span>dateStart<span class="token punctuation">,</span> dateCurrent<span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token punctuation">.</span>onEnded <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> range <span class="token operator">=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#125;</span> <span class="token comment">// Clear the state on gesture end.</span>                    <span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>社区做的更多 Swift Charts 范例 <a href="https://github.com/jordibruin/Swift-Charts-Examples">Swift Charts Examples</a> 。</p><h4 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/156289124-bde3c73e-2a81-4043-8682-ae55a820f1aa.png" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/156289124-bde3c73e-2a81-4043-8682-ae55a820f1aa.png"></p><p>Toggle 可以设置 toggleStyle，可以自定义样式。使用示例如下</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayToggleView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isEnable <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 普通样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"开了"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"关了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 按钮样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"打开了"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"关闭了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"cloud.moon"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tint</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">controlSize</span><span class="token punctuation">(</span><span class="token punctuation">.</span>large<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>button<span class="token punctuation">)</span>                <span class="token comment">// Switch 样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"开了"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"关了"</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token class-name">SwitchToggleStyle</span><span class="token punctuation">(</span>tint<span class="token punctuation">:</span> <span class="token punctuation">.</span>orange<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 自定义样式</span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $isEnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>isEnable <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"录音中"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"已静音"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token class-name">PCToggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义样式</span><span class="token keyword">struct</span> <span class="token class-name">PCToggleStyle</span><span class="token punctuation">:</span> <span class="token class-name">ToggleStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            configuration<span class="token punctuation">.</span>label            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> configuration<span class="token punctuation">.</span>isOn <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"mic.square.fill"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"mic.slash.circle.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                    configuration<span class="token punctuation">.</span>isOn<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/156298284-2fb37b3e-55f0-4918-ba8e-74f747bf3171.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/156298284-2fb37b3e-55f0-4918-ba8e-74f747bf3171.jpeg"></p><p>有 Picker 视图，还有颜色和时间选择的 ColorPicker 和 DatePicker。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayPickerView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> select <span class="token operator">=</span> <span class="token number">1</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> dateFt<span class="token punctuation">:</span> <span class="token class-name">DateFormatter</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> ft <span class="token operator">=</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ft<span class="token punctuation">.</span>dateStyle <span class="token operator">=</span> <span class="token punctuation">.</span>long        <span class="token keyword">return</span> ft    <span class="token punctuation">&#125;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 默认是下拉的风格</span>        <span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选区"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $select<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"1"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"2"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// Segment 风格，</span>        <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $select<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"one"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"two"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token class-name">SegmentedPickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 颜色选择器</span>        <span class="token class-name">ColorPicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选一个颜色"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $color<span class="token punctuation">,</span> supportsOpacity<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token comment">// 时间选择器</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DatePicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $date<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">...</span><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> displayedComponents<span class="token punctuation">:</span> <span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选时间"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">DatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选时间"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $date<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">datePickerStyle</span><span class="token punctuation">(</span><span class="token class-name">GraphicalDatePickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxHeight<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">)</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"时间：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">,</span> formatter<span class="token punctuation">:</span> dateFt</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择多个日期</p><p>MultiDatePicker 视图会显示一个日历，用户可以选择多个日期，可以设置选择范围。示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PMultiDatePicker</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>calendar<span class="token punctuation">)</span> <span class="token keyword">var</span> cal    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> dates<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">DateComponents</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MultiDatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"选择个日子"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $dates<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>now<span class="token operator">...</span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        dates<span class="token punctuation">.</span>compactMap <span class="token punctuation">&#123;</span> c <span class="token keyword">in</span>            cal<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span>c<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> <span class="token punctuation">.</span>long<span class="token punctuation">,</span> time<span class="token punctuation">:</span> <span class="token punctuation">.</span>omitted<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PhotosPick</p><p>支持图片选择，示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">PhotosUI</span><span class="token keyword">import</span> <span class="token class-name">CoreTransferable</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@ObservedObject</span> <span class="token keyword">var</span> viewModel<span class="token punctuation">:</span> <span class="token class-name">FilterModel</span> <span class="token operator">=</span> <span class="token punctuation">.</span>shared        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Gallery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Birthday Filter"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>toolbar <span class="token punctuation">&#123;</span>                    <span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span>                        selection<span class="token punctuation">:</span> $viewModel<span class="token punctuation">.</span>imageSelection<span class="token punctuation">,</span>                        matching<span class="token punctuation">:</span> <span class="token punctuation">.</span>images                    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Pick a photo"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"plus.app"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>                        viewModel<span class="token punctuation">.</span><span class="token function">applyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Apply Filter"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"camera.filters"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Slider"><a href="#Slider" class="headerlink" title="Slider"></a>Slider</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlaySliderView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $count<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Stepper"><a href="#Stepper" class="headerlink" title="Stepper"></a>Stepper</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayStepperView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stepper</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $count<span class="token punctuation">,</span> step<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"共</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> onEditingChanged<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> b <span class="token keyword">in</span>            <span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end Stepper</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h4><p>Form 今年也得到了增强，示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Form</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LabeledContent</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Location"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">AddressView</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">DatePicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Date"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $date<span class="token punctuation">)</span>        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Description"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $eventDescription<span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">.</span>vertical<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">lineLimit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> reservesSpace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Vibe"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Accent color"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $accent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Theme</span><span class="token punctuation">.</span>allCases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> accent <span class="token keyword">in</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span>accent<span class="token punctuation">.</span>rawValue<span class="token punctuation">.</span>capitalized<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span>accent<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Color scheme"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $scheme<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Light"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">ColorScheme</span><span class="token punctuation">.</span>light<span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Dark"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">ColorScheme</span><span class="token punctuation">.</span>dark<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>macOS<span class="token punctuation">)</span></span>        <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>inline<span class="token punctuation">)</span><span class="token directive property"><span class="token directive-name">#endif</span></span>        <span class="token class-name">Toggle</span><span class="token punctuation">(</span>isOn<span class="token punctuation">:</span> $extraGuests<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Allow extra guests"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"The more the merrier!"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> extraGuests <span class="token punctuation">&#123;</span>            <span class="token class-name">Stepper</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Guests limit"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $spacesCount<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span>number<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Decorations"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selectedDecorations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">DisclosureGroup</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Balloons 🎈"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $includeBalloons<span class="token punctuation">)</span>                        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        decorationThemes<span class="token punctuation">[</span><span class="token punctuation">.</span>balloon<span class="token punctuation">]</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>swatch <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Decoration</span><span class="token punctuation">.</span>balloon<span class="token punctuation">)</span>                                        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Confetti 🎊"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $includeConfetti<span class="token punctuation">)</span>                        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        decorationThemes<span class="token punctuation">[</span><span class="token punctuation">.</span>confetti<span class="token punctuation">]</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>swatch <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Decoration</span><span class="token punctuation">.</span>confetti<span class="token punctuation">)</span>                                        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Inflatables 🪅"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $includeInflatables<span class="token punctuation">)</span>                        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        decorationThemes<span class="token punctuation">[</span><span class="token punctuation">.</span>inflatables<span class="token punctuation">]</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>swatch <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Decoration</span><span class="token punctuation">.</span>inflatables<span class="token punctuation">)</span>                                        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Party Horns 🥳"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $includeBlowers<span class="token punctuation">)</span>                        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        decorationThemes<span class="token punctuation">[</span><span class="token punctuation">.</span>noisemakers<span class="token punctuation">]</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>swatch <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Decoration</span><span class="token punctuation">.</span>noisemakers<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"All Decorations"</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> <span class="token punctuation">[</span>                        $includeBalloons<span class="token punctuation">,</span> $includeConfetti<span class="token punctuation">,</span>                        $includeInflatables<span class="token punctuation">,</span> $includeBlowers                    <span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Decoration</span><span class="token punctuation">.</span>all<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>macOS<span class="token punctuation">)</span></span>                <span class="token punctuation">.</span><span class="token function">toggleStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>checkbox<span class="token punctuation">)</span><span class="token directive property"><span class="token directive-name">#endif</span></span>            <span class="token punctuation">&#125;</span>                        <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Decoration theme"</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> themes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Blue"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Theme</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Black"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Theme</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Gold"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Theme</span><span class="token punctuation">.</span>gold<span class="token punctuation">)</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"White"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token class-name">Theme</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token directive property"><span class="token directive-name">#if</span> os<span class="token punctuation">(</span>macOS<span class="token punctuation">)</span></span>            <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>radioGroup<span class="token punctuation">)</span><span class="token directive property"><span class="token directive-name">#endif</span></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">formStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>grouped<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h4><p>键盘快捷键的使用方法如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayKeyboard</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Button</span><span class="token punctuation">(</span>systemIconName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"camera.shutter.button"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"按了回车键"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>defaultAction<span class="token punctuation">)</span> <span class="token comment">// 回车</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"ESC"</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"按了 ESC"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cancelAction<span class="token punctuation">)</span> <span class="token comment">// ESC 键</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"CMD + p"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"按了 CMD + p"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p"</span></span><span class="token punctuation">)</span>                <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"SHIFT + p"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"按了 SHIFT + p"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">keyboardShortcut</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p"</span></span><span class="token punctuation">,</span> modifiers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>shift<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Transferable"><a href="#Transferable" class="headerlink" title="Transferable"></a>Transferable</h4><p>Transferable 协议使数据可以用于剪切板、拖放和 Share Sheet。</p><p>可以在自己应用程序之间或你的应用和其他应用之间发送或接受可传输项目。</p><p>支持 SwiftUI 来使用。</p><p>官方文档 <a href="https://developer.apple.com/documentation/CoreTransferable">Core Transferable</a></p><p>session <a href="https://developer.apple.com/videos/play/wwdc2022-10062">Meet Transferable</a></p><p>新增一个专门用来接受 Transferable 的按钮视图 PasteButton，使用示例如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PPasteButton</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"戴铭"</span></span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"输入"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $s<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>roundedBorder<span class="token punctuation">)</span>        <span class="token class-name">PasteButton</span><span class="token punctuation">(</span>payloadType<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> str <span class="token keyword">in</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> first <span class="token operator">=</span> str<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span>            s <span class="token operator">=</span> first        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ShareLink"><a href="#ShareLink" class="headerlink" title="ShareLink"></a>ShareLink</h4><p>ShareLink 视图可以让你轻松共享数据。示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PShareLink</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://ming1016.github.io/"</span></span><span class="token punctuation">)</span><span class="token operator">!</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ShareLink</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> url<span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的博客"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token class-name">ShareLink</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的博客"</span></span><span class="token punctuation">,</span> item<span class="token punctuation">:</span> url<span class="token punctuation">)</span>        <span class="token class-name">ShareLink</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"戴铭的博客"</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"swift"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视觉"><a href="#视觉" class="headerlink" title="视觉"></a>视觉</h3><h4 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayColor</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">edgesIgnoringSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">)</span> <span class="token comment">// Color 也是一个 View</span>                        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这是一个适配了暗黑的文字颜色"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>light<span class="token punctuation">:</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span> dark<span class="token punctuation">:</span> <span class="token punctuation">.</span>pink<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token punctuation">.</span>quaternaryLabelColor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 使用以前 NSColor</span>                                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"自定义颜色"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 暗黑适配颜色</span><span class="token keyword">struct</span> <span class="token class-name">PCColorModifier</span><span class="token punctuation">:</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\</span><span class="token punctuation">.</span>colorScheme<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">var</span> colorScheme    <span class="token keyword">var</span> light<span class="token punctuation">:</span> <span class="token class-name">Color</span>    <span class="token keyword">var</span> dark<span class="token punctuation">:</span> <span class="token class-name">Color</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> adaptColor<span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> colorScheme <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>light<span class="token punctuation">:</span>            <span class="token keyword">return</span> light        <span class="token keyword">case</span> <span class="token punctuation">.</span>dark<span class="token punctuation">:</span>            <span class="token keyword">return</span> dark        <span class="token attribute atrule">@unknown</span> <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> light        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        content<span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>adaptColor<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">foregroundColor</span><span class="token punctuation">(</span>light<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">,</span> dark<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">PCColorModifier</span><span class="token punctuation">(</span>light<span class="token punctuation">:</span> light<span class="token punctuation">,</span> dark<span class="token punctuation">:</span> dark<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h4><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://user-images.githubusercontent.com/251980/156332122-66813e4e-851c-4207-8cb9-b41ea0365008.jpeg" class="lozad post-image"src="https://user-images.githubusercontent.com/251980/156332122-66813e4e-851c-4207-8cb9-b41ea0365008.jpeg"></p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayEffect</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isHover <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token comment">// 材质</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"材质效果"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span>isHover <span class="token operator">?</span> <span class="token number">40</span> <span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>regularMaterial<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>continuous<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onHover <span class="token punctuation">&#123;</span> b <span class="token keyword">in</span>                        withAnimation <span class="token punctuation">&#123;</span>                            isHover <span class="token operator">=</span> b                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                                <span class="token comment">// 模糊</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"模糊效果"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span>background <span class="token punctuation">&#123;</span>                        <span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> opaque<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                                <span class="token comment">// 选择</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"3D 旋转"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">rotation3DEffect</span><span class="token punctuation">(</span><span class="token class-name">Angle</span><span class="token punctuation">(</span>degrees<span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">blendMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>hardLight<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>材质厚度从低到高有：</p><ul><li>.regularMaterial</li><li>.thinMaterial</li><li>.ultraThinMaterial</li><li>.thickMaterial</li><li>.ultraThickMaterial</li></ul><p>Gradient 和 Shadow 的 2022 的更新</p><p>下面是个简单示例：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PGradientAndShadow</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"bird"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">backgroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>cyan<span class="token punctuation">.</span>gradient<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Paul Hudson 使用 Core Motion 做了一个阴影随设备倾斜而变化的效果，非常棒，<a href="https://www.hackingwithswift.com/articles/253/how-to-use-inner-shadows-to-simulate-depth-with-swiftui-and-core-motion">How to use inner shadows to simulate depth with SwiftUI and Core Motion</a> 。</p><h4 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h4><p>SwiftUI 里实现动画的方式包括有 .animation 隐式动画、withAnimation 和 withTransaction 显示动画、matchedGeometryEffect Hero 动画和 TimelineView 等。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayAnimation</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isChange <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> anis<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Animation</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p2"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">interpolatingSpring</span><span class="token punctuation">(</span>stiffness<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> damping<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p4"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p5"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeIn</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p6"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">easeOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p7"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">interactiveSpring</span><span class="token punctuation">(</span>response<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> dampingFraction<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> blendDuration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p8"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string-literal"><span class="token string">"p9"</span></span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">repeatCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selection <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// animation 隐式动画和 withAnimation 显示动画</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>isChange <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"另一种状态"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"一种状态"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span>easeInOut<span class="token punctuation">,</span> value<span class="token punctuation">:</span> isChange<span class="token punctuation">)</span> <span class="token comment">// 受限的隐式动画，只绑定某个值。</span>            <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                <span class="token comment">// 使用 withAnimation 就是显式动画，效果等同 withTransaction(Transaction(animation: .default))</span>                withAnimation <span class="token punctuation">&#123;</span>                    isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 设置 Transaction。和隐式动画共存时，优先执行 withAnimation 或 Transaction。</span>                <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span>animation<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                t<span class="token punctuation">.</span>disablesAnimations <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 用来禁用隐式动画</span>                <span class="token function">withTransaction</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end onHover</span>                <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token number">60</span> <span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span>anis<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span>anis<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> isChange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token class-name">Button</span> <span class="token punctuation">&#123;</span>            isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"pause.fill"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"play.fill"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// matchedGeometryEffect 的使用</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"后台"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            placeStayView            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"前台"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>            placeShowView        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>                <span class="token comment">// 通过使用相同 matchedGeometryEffect 的 id，绑定两个元素变化。</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> isChange <span class="token punctuation">&#123;</span>                <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g1"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"转换"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isChange<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">!</span>isChange <span class="token punctuation">&#123;</span>                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g1"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">!</span>isChange <span class="token punctuation">&#123;</span>                    <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p19"</span></span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g1"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 使用 isSource，作为移动到相同 matchedGeometryEffect id 的方法。</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p19"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> isChange <span class="token operator">?</span> <span class="token string-literal"><span class="token string">"g2"</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">,</span> isSource<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                        <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p19"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"g2"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                                <span class="token comment">// 点击跟随的效果</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> i <span class="token operator">==</span> selection <span class="token operator">?</span> <span class="token number">200</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"h</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                        withAnimation <span class="token punctuation">&#123;</span>                            selection <span class="token operator">=</span> i                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>            <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>pink<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"h</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">selection</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">,</span> isSource<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>                <span class="token comment">// matchedGeometryEffect 还可以应用到 List 中，通过 Array enumerated 获得 index 作为 matchedGeometryEffect 的 id。右侧固定按钮可以直接让对应 id 的视图滚动到固定按钮的位置</span>                        <span class="token comment">// TimelineView</span>        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">periodic</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token punctuation">.</span>now<span class="token punctuation">,</span> by<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">t<span class="token punctuation">.</span>date</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token class-name">HStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">.</span><span class="token function">repeatCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> e<span class="token punctuation">)</span>                                <span class="token class-name">TimelineSubView</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> t<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token comment">// 需要传入 timeline 的时间给子视图才能够起作用。</span>                                <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// matchedGeometryEffect</span>        <span class="token comment">/// TimelineScheduler 的使用，TimelineScheduler 有以下类型</span>        <span class="token comment">/// .animation：制定更新的频率，可以控制暂停</span>        <span class="token comment">/// .everyMinute：每分钟更新一次</span>        <span class="token comment">/// .explicit：所有要更新的放到一个数组里</span>        <span class="token comment">/// .periodic：设置开始时间和更新频率</span>        <span class="token comment">/// 也可以自定义 TimelineScheduler</span>        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span>everySecond<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>            <span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">30</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>            <span class="token class-name">Image</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 自定义的 TimelineScheduler</span>        <span class="token class-name">TimelineView</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">everyLoop</span><span class="token punctuation">(</span>timeOffsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> t <span class="token keyword">in</span>            <span class="token class-name">TimelineSubView</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> t<span class="token punctuation">.</span>date<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// MARK: - TimelineSubView</span>    <span class="token keyword">struct</span> <span class="token class-name">TimelineSubView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> date <span class="token punctuation">:</span> <span class="token class-name">Date</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"let's go"</span></span>        <span class="token comment">// 顺序从数组中取值，取完再重头开始</span>        <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> idx<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">func</span> <span class="token function-definition function">advanceIndex</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            idx <span class="token operator">=</span> <span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> count            <span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> idx <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">HStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"p</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">idx</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeIn</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> date<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> newValue <span class="token keyword">in</span>                        <span class="token function">advanceIndex</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                        s <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">.</span>hour</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">.</span>minute</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">:</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">date<span class="token punctuation">.</span>second</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>                        <span class="token function">advanceIndex</span><span class="token punctuation">(</span>count<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                                    <span class="token class-name">Text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// MARK: - 用 matchedGeometryEffect 做动画</span>    <span class="token comment">/// matchedGeometryEffect 可以无缝的将一个图像变成另外一个图像。</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> placeStayItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"p1"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"p2"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"p3"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"p4"</span></span><span class="token punctuation">]</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> placeShowItems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token attribute atrule">@Namespace</span> <span class="token keyword">private</span> <span class="token keyword">var</span> mgeStore        <span class="token keyword">private</span> <span class="token keyword">var</span> placeStayView<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>placeStayItems<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                        withAnimation <span class="token punctuation">&#123;</span>                            placeStayItems<span class="token punctuation">.</span>removeAll <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">==</span> s <span class="token punctuation">&#125;</span>                            placeShowItems<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end LazyVGrid</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// private var placeStayView</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> placeShowView<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>placeShowItems<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> s <span class="token keyword">in</span>                <span class="token class-name">Image</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">matchedGeometryEffect</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> s<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> mgeStore<span class="token punctuation">)</span>                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">&#123;</span>                        withAnimation <span class="token punctuation">&#123;</span>                            placeShowItems<span class="token punctuation">.</span>removeAll <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token operator">==</span> s <span class="token punctuation">&#125;</span>                            placeStayItems<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>black<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>white<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end ForEach</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end LazyVGrid</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end private var placeShowView</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end struct PlayAnimation</span><span class="token comment">// MARK: - 扩展 TimelineSchedule</span><span class="token keyword">extension</span> <span class="token class-name">TimelineSchedule</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">PeriodicTimelineSchedule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> everySecond<span class="token punctuation">:</span> <span class="token class-name">PeriodicTimelineSchedule</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">get</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token punctuation">.</span>now<span class="token punctuation">,</span> by<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 自定义一个 TimelineSchedule</span><span class="token comment">// timeOffsets 用完，就会再重头重新再来一遍</span><span class="token keyword">struct</span> <span class="token class-name">PCLoopTimelineSchedule</span><span class="token punctuation">:</span> <span class="token class-name">TimelineSchedule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timeOffsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TimeInterval</span><span class="token punctuation">]</span>        <span class="token keyword">func</span> <span class="token function-definition function">entries</span><span class="token punctuation">(</span>from startDate<span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token punctuation">,</span> mode<span class="token punctuation">:</span> <span class="token class-name">TimelineScheduleMode</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Entries</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Entries</span><span class="token punctuation">(</span>last<span class="token punctuation">:</span> startDate<span class="token punctuation">,</span> offsets<span class="token punctuation">:</span> timeOffsets<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">struct</span> <span class="token class-name">Entries</span><span class="token punctuation">:</span> <span class="token class-name">Sequence</span><span class="token punctuation">,</span> <span class="token class-name">IteratorProtocol</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> last<span class="token punctuation">:</span> <span class="token class-name">Date</span>        <span class="token keyword">let</span> offsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TimeInterval</span><span class="token punctuation">]</span>        <span class="token keyword">var</span> idx<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Date</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>            idx <span class="token operator">=</span> <span class="token punctuation">(</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> offsets<span class="token punctuation">.</span>count            last <span class="token operator">=</span> last<span class="token punctuation">.</span><span class="token function">addingTimeInterval</span><span class="token punctuation">(</span>offsets<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> last        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end Struct Entries</span><span class="token punctuation">&#125;</span><span class="token comment">// 为自定义的 PCLoopTimelineSchedule 做一个 TimelineSchedule 的扩展函数，方便使用</span><span class="token keyword">extension</span> <span class="token class-name">TimelineSchedule</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">PCLoopTimelineSchedule</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">everyLoop</span><span class="token punctuation">(</span>timeOffsets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">TimeInterval</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">PCLoopTimelineSchedule</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>timeOffsets<span class="token punctuation">:</span> timeOffsets<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h4><p>Canvas 可以画路径、图片和文字、Symbols、可变的图形上下文、使用 CoreGraphics 代码和做动画。</p><p>图形上下文可以被 addFilter、clip、clipToLayer、concatenate、rotate、scaleBy、translateBy 这些方法来进行改变。</p><p>示例代码如下：</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">PlayCanvas</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Color</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 画路径</span>        <span class="token class-name">PCCanvasPathView</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token punctuation">.</span>rounded<span class="token punctuation">)</span>        <span class="token class-name">PCCanvasPathView</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token punctuation">.</span>ellipse<span class="token punctuation">)</span>        <span class="token class-name">PCCanvasPathView</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token punctuation">.</span>circle<span class="token punctuation">)</span>        <span class="token comment">// 图片和文字</span>        <span class="token class-name">PCCanvasImageAndText</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Starming"</span></span><span class="token punctuation">,</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">// Symbol，在 Canvas 里引用 SwiftUI 视图</span>        <span class="token class-name">Canvas</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">,</span> s <span class="token keyword">in</span>            <span class="token keyword">let</span> c0 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">!</span>            <span class="token keyword">let</span> c1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!</span>            <span class="token keyword">let</span> c2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!</span>            <span class="token keyword">let</span> c3 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">!</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c0<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>c3<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>topLeading<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> symbols<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i<span class="token punctuation">,</span> c <span class="token keyword">in</span>                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Symbol 动画和 SwiftUI 视图一样，不会受影响</span>        <span class="token class-name">Canvas</span> <span class="token punctuation">&#123;</span> c<span class="token punctuation">,</span> s <span class="token keyword">in</span>            <span class="token keyword">let</span> sb <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">resolveSymbol</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">!</span>            c<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> s<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> s<span class="token punctuation">.</span>height <span class="token operator">/</span>  <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> symbols<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PCForSymbolView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end var body</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 给 Symbol 用的视图</span><span class="token keyword">struct</span> <span class="token class-name">PCForSymbolView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> change <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"star.fill"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">rotationEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span>change <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>                <span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">linear</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span>autoreverses<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    change<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - 图片和文字</span><span class="token keyword">struct</span> <span class="token class-name">PCCanvasImageAndText</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">let</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Color</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> fontSize<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">42</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Canvas</span> <span class="token punctuation">&#123;</span> context<span class="token punctuation">,</span> size <span class="token keyword">in</span>            <span class="token keyword">let</span> midPoint <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> font <span class="token operator">=</span> <span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> fontSize<span class="token punctuation">)</span>            <span class="token keyword">var</span> resolved <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token punctuation">(</span>size<span class="token punctuation">.</span>width <span class="token operator">-</span> resolved<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> size<span class="token punctuation">.</span>width <span class="token operator">-</span> start<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                        resolved<span class="token punctuation">.</span>shading <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">linearGradient</span><span class="token punctuation">(</span><span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> colors<span class="token punctuation">)</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> start<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> end<span class="token punctuation">)</span>            context<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>resolved<span class="token punctuation">,</span> at<span class="token punctuation">:</span> midPoint<span class="token punctuation">,</span> anchor<span class="token punctuation">:</span> <span class="token punctuation">.</span>center<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// MARK: - Path</span><span class="token keyword">struct</span> <span class="token class-name">PCCanvasPathView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">enum</span> <span class="token class-name">PathType</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> rounded<span class="token punctuation">,</span> ellipse<span class="token punctuation">,</span> casual<span class="token punctuation">,</span> circle    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> t<span class="token punctuation">:</span> <span class="token class-name">PathType</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Canvas</span> <span class="token punctuation">&#123;</span> context<span class="token punctuation">,</span> size <span class="token keyword">in</span>                        <span class="token function">conf</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token operator">&amp;</span>context<span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">,</span> type<span class="token punctuation">:</span> t<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end Canvas</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">conf</span><span class="token punctuation">(</span> context<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">GraphicsContext</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token class-name">PathType</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>origin<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insetBy</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">switch</span> type <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>rounded<span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>roundedRect<span class="token punctuation">:</span> rect<span class="token punctuation">,</span> cornerRadius<span class="token punctuation">:</span> <span class="token number">35.0</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>ellipse<span class="token punctuation">:</span>            <span class="token keyword">let</span> cgPath <span class="token operator">=</span> <span class="token class-name">CGPath</span><span class="token punctuation">(</span>ellipseIn<span class="token punctuation">:</span> rect<span class="token punctuation">,</span> transform<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>            path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>cgPath<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>casual<span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token class-name">Path</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> points<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">CGPoint</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>                    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>                <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token punctuation">.</span>zero<span class="token punctuation">)</span>                <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">addLines</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>circle<span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> rect<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                        <span class="token keyword">let</span> gradient <span class="token operator">=</span> <span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> from <span class="token operator">=</span> rect<span class="token punctuation">.</span>origin        <span class="token keyword">let</span> to <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> rect<span class="token punctuation">.</span>width<span class="token punctuation">,</span> y<span class="token punctuation">:</span> rect<span class="token punctuation">.</span>height <span class="token operator">+</span> from<span class="token punctuation">.</span>y<span class="token punctuation">)</span>                <span class="token comment">// Stroke path</span>        context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">)</span>        context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">linearGradient</span><span class="token punctuation">(</span>gradient<span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> from<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> to<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SF-Symbol"><a href="#SF-Symbol" class="headerlink" title="SF Symbol"></a>SF Symbol</h4><p>SF Symbol 支持变量值，可以通过设置 variableValue 来填充不同部分，比如 wifi 图标，不同值会亮不同部分，<code>Image(systemName: &quot;wifi&quot;, variableValue: 0.5)</code> 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;受 Apple 加速器 SwiftUI 活动邀请，做了个分享，还和喵神、61、浙剑、思琪等社区大神参与了圆桌讨论。这次完善了 SwiftUI 做的幻灯片，比去年要好一点，增加了解释执行代码交互功能。&lt;/p&gt;
&lt;p&gt;为这次幻灯画了几张图，在新西兰认识的画家，指导我了些画法，用
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="SwiftUI" scheme="http://ming1016.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>2021年画的</title>
    <link href="http://ming1016.github.io/2022/02/26/draw-in-2021/"/>
    <id>http://ming1016.github.io/2022/02/26/draw-in-2021/</id>
    <published>2022-02-26T03:31:16.000Z</published>
    <updated>2023-04-24T04:33:14.374Z</updated>
    
    <content type="html"><![CDATA[<p>2021年画的画，选了50张，有在纸上画的，白板上画的，还有给文章配的图。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/02.jpg" class="lozad post-image"src="/uploads/draw-in-2021/02.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/04.jpg" class="lozad post-image"src="/uploads/draw-in-2021/04.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/05.png" class="lozad post-image"src="/uploads/draw-in-2021/05.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/06.png" class="lozad post-image"src="/uploads/draw-in-2021/06.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/07.jpg" class="lozad post-image"src="/uploads/draw-in-2021/07.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/08.jpg" class="lozad post-image"src="/uploads/draw-in-2021/08.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/09.png" class="lozad post-image"src="/uploads/draw-in-2021/09.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/10.png" class="lozad post-image"src="/uploads/draw-in-2021/10.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/11.png" class="lozad post-image"src="/uploads/draw-in-2021/11.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/12.png" class="lozad post-image"src="/uploads/draw-in-2021/12.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/13.png" class="lozad post-image"src="/uploads/draw-in-2021/13.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/14.png" class="lozad post-image"src="/uploads/draw-in-2021/14.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/15.png" class="lozad post-image"src="/uploads/draw-in-2021/15.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/16.png" class="lozad post-image"src="/uploads/draw-in-2021/16.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/17.png" class="lozad post-image"src="/uploads/draw-in-2021/17.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/18.png" class="lozad post-image"src="/uploads/draw-in-2021/18.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/19.png" class="lozad post-image"src="/uploads/draw-in-2021/19.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/20.png" class="lozad post-image"src="/uploads/draw-in-2021/20.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/21.png" class="lozad post-image"src="/uploads/draw-in-2021/21.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/22.png" class="lozad post-image"src="/uploads/draw-in-2021/22.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/23.png" class="lozad post-image"src="/uploads/draw-in-2021/23.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/24.png" class="lozad post-image"src="/uploads/draw-in-2021/24.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/25.png" class="lozad post-image"src="/uploads/draw-in-2021/25.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/26.png" class="lozad post-image"src="/uploads/draw-in-2021/26.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/27.png" class="lozad post-image"src="/uploads/draw-in-2021/27.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/28.png" class="lozad post-image"src="/uploads/draw-in-2021/28.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/29.png" class="lozad post-image"src="/uploads/draw-in-2021/29.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/30.png" class="lozad post-image"src="/uploads/draw-in-2021/30.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/31.png" class="lozad post-image"src="/uploads/draw-in-2021/31.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/33.png" class="lozad post-image"src="/uploads/draw-in-2021/33.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/34.png" class="lozad post-image"src="/uploads/draw-in-2021/34.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/35.png" class="lozad post-image"src="/uploads/draw-in-2021/35.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/36.png" class="lozad post-image"src="/uploads/draw-in-2021/36.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/37.png" class="lozad post-image"src="/uploads/draw-in-2021/37.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/38.png" class="lozad post-image"src="/uploads/draw-in-2021/38.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/39.png" class="lozad post-image"src="/uploads/draw-in-2021/39.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/41.png" class="lozad post-image"src="/uploads/draw-in-2021/41.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/55.png" class="lozad post-image"src="/uploads/draw-in-2021/55.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/51.jpeg" class="lozad post-image"src="/uploads/draw-in-2021/51.jpeg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/53.jpeg" class="lozad post-image"src="/uploads/draw-in-2021/53.jpeg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/43.jpg" class="lozad post-image"src="/uploads/draw-in-2021/43.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/44.jpeg" class="lozad post-image"src="/uploads/draw-in-2021/44.jpeg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/45.jpg" class="lozad post-image"src="/uploads/draw-in-2021/45.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/46.jpeg" class="lozad post-image"src="/uploads/draw-in-2021/46.jpeg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/47.jpg" class="lozad post-image"src="/uploads/draw-in-2021/47.jpg"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/48.png" class="lozad post-image"src="/uploads/draw-in-2021/48.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/draw-in-2021/49.jpg" class="lozad post-image"src="/uploads/draw-in-2021/49.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2021年画的画，选了50张，有在纸上画的，白板上画的，还有给文章配的图。&lt;/p&gt;
&lt;p&gt;&lt;img  srcset=&quot;data:image/svg+xml,%3Csvg%20xmlns=&#39;http://www.w3.org/2000/svg&#39;%20viewBox=&#39;0%20
      
    
    </summary>
    
      <category term="My-painting" scheme="http://ming1016.github.io/categories/My-painting/"/>
    
    
      <category term="Painting" scheme="http://ming1016.github.io/tags/Painting/"/>
    
      <category term="iPad" scheme="http://ming1016.github.io/tags/iPad/"/>
    
      <category term="Procreate" scheme="http://ming1016.github.io/tags/Procreate/"/>
    
  </entry>
  
  <entry>
    <title>Swift 演进之路</title>
    <link href="http://ming1016.github.io/2022/02/10/swift-evolutionary-path/"/>
    <id>http://ming1016.github.io/2022/02/10/swift-evolutionary-path/</id>
    <published>2022-02-10T10:28:39.000Z</published>
    <updated>2023-04-24T04:33:14.378Z</updated>
    
    <content type="html"><![CDATA[<p>已更新到 Swift 5.7。</p><p>本篇主要是对<a href="https://ming1016.github.io/2021/05/22/acfun-swift-practice/">《A站 的 Swift 实践》</a>文章中的一幅配图做了详细的扩展，能够更加全面和详细了解 Swift 语言的发展，文章中提到的 Swift 各版本的语法示例代码，及本文内容都可以在<a href="https://github.com/ming1016/SwiftPamphletApp">戴铭的开发小册子</a>里对应栏目里找到，这个假期我也对 Swift 小册子里栏目内容进行了些更新和补充。《A站 的 Swift 实践》文章的那个演进配图如下：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swift-evolutionary-path/01.png" class="lozad post-image"src="/uploads/swift-evolutionary-path/01.png"></p><p>文章内容如下：</p><h5 id="Swift-1-1"><a href="#Swift-1-1" class="headerlink" title="Swift 1.1"></a>Swift 1.1</h5><ul><li>countElements() 改成了 count()。</li><li>@NSApplicationMain 可以在 macOS 上使用。</li></ul><h5 id="Swift-1-2"><a href="#Swift-1-2" class="headerlink" title="Swift 1.2"></a>Swift 1.2</h5><ul><li>引入 Set 类型。</li><li>if let 可以放到一起，使用逗号分隔。</li><li>新增 zip() 和 flatMap()。</li><li>类增加静态方法和静态属性，使用 static 关键字描述。</li><li>as! 用于类型强转，失败会崩溃。</li><li>@noescape 用于描述作为参数闭包，用来告诉 Swift 闭包将在函数返回前使用。</li><li>常量可以延后初始化。</li></ul><h5 id="Swift-2-0"><a href="#Swift-2-0" class="headerlink" title="Swift 2.0"></a>Swift 2.0</h5><ul><li>增加 guard 关键字，用于解可选项值。</li><li>defer 关键字用来延迟执行，即使抛出错误了都会在最后执行。</li><li>ErrorType 协议，以及 throws、do、try 和 catch 的引入用来处理错误。</li><li>characters 加上 count，用来替代 count()。</li><li>#available 用来检查系统版本。</li></ul><h5 id="Swift-2-1"><a href="#Swift-2-1" class="headerlink" title="Swift 2.1"></a>Swift 2.1</h5><ul><li>字符串插值可以包含字符串字面符号。</li></ul><p><em>Swift 2.2</em></p><p>官方博客介绍：<a href="https://swift.org/blog/swift-2.2-released/">Swift 2.2 Released!</a>、<a href="https://swift.org/blog/swift-2.2-new-features/">New Features in Swift 2.2</a>、<a href="https://swift.org/blog/swift-2.2-release-process/">Swift 2.2 Release Process</a></p><ul><li><strong>FILE</strong>, <strong>LINE</strong> 和 <strong>FUNCTION</strong> 换成 #file，#line 和 #function。</li><li>废弃 ++ 和 – 操作符。</li><li>C 语言风格 for 循环废弃。</li><li>废弃变量参数，因为变量参数容易和 inout 搞混。</li><li>废弃字符串化的选择器，选择器不再能写成字符串了。</li><li>元组可直接比较是否相等。</li></ul><h5 id="Swift-3-0"><a href="#Swift-3-0" class="headerlink" title="Swift 3.0"></a>Swift 3.0</h5><p>官方博客介绍：<a href="https://swift.org/blog/swift-3.0-released/">Swift 3.0 Released!</a>、<a href="https://swift.org/blog/swift-3.0-preview-1-released/">Swift 3.0 Preview 1 Released!</a>、<a href="https://swift.org/blog/swift-3.0-release-process/">Swift 3.0 Release Process</a></p><ul><li>规范动词和名词来命名。</li><li>去掉 NS 前缀。</li><li>方法名描述参数部分变为参数名。</li><li>省略没必要的单词，命名做了简化呢。比如 stringByTrimmingCharactersInSet 就换成了 trimmingCharacters。</li><li>枚举的属性使用小写开头。</li><li>引入 C 函数的属性。</li></ul><h5 id="Swift-3-1"><a href="#Swift-3-1" class="headerlink" title="Swift 3.1"></a>Swift 3.1</h5><p>官方博客介绍：<a href="https://swift.org/blog/swift-3.1-released/">Swift 3.1 Released!</a>、<a href="https://swift.org/blog/swift-3.1-release-process/">Swift 3.1 Release Process</a></p><ul><li>序列新增 prefix(while:) 和 drop(while:) 方法，顺序遍历执行闭包里的逻辑判断，满足条件就返回，遇到不匹配就会停止遍历。prefix 返回满足条件的元素集合，drop 返回停止遍历之后那些元素集合。</li><li>泛型适用于嵌套类型。</li><li>类型的扩展可以使用约束条件，比如扩展数组时，加上元素为整数的约束，这样的扩展就只会对元素为整数的数组有效。</li></ul><h5 id="Swift-4-0"><a href="#Swift-4-0" class="headerlink" title="Swift 4.0"></a>Swift 4.0</h5><p>官方博客介绍：<a href="https://swift.org/blog/swift-4.0-released/">Swift 4.0 Released!</a>、<a href="https://swift.org/blog/swift-4.0-release-process/">Swift 4 Release Process</a></p><ul><li>加入 Codable 协议，更 Swifty 的编码和解码。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0167-swift-encoders.md">SE-0167 Swift Encoders</a></li><li>字符串加入三个双引号的支持，让多行字符串编写更加直观。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0168-multi-line-string-literals.md">SE-0168 Multi-Line String Literals</a></li><li>字符串变成集合，表示可以对字符串进行逐字遍历、map 和反转等操作。</li><li>keypaths 语法提升。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0161-key-paths.md">SE-0161 Smart KeyPaths: Better Key-Value Coding for Swift</a></li><li>集合加入 <code>..&lt;10</code> 这样语法的单边切片。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0172-one-sided-ranges.md">SE-0172 One-sided Ranges</a></li><li>字典新增 mapValues，可 map 字典的值。通过 grouping 可对字典进行分组生成新字典，键和值都可以。从字典中取值，如果键对应无值，则使用通过 default 指定的默认值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md">SE-0165 Dictionary &amp; Set Enhancements</a></li></ul><h5 id="Swift-4-1"><a href="#Swift-4-1" class="headerlink" title="Swift 4.1"></a>Swift 4.1</h5><p>官方博客介绍：<a href="https://swift.org/blog/swift-4.1-released/">Swift 4.1 Released!</a>、<a href="https://swift.org/blog/swift-4.1-release-process/">Swift 4.1 Release Process</a></p><ul><li>Hashable 也不需要返回一个唯一的 hashValue 哈希值属性。</li><li>Equatable 和 Hashable 自动合成的提案参见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md">SE-0185 Synthesizing Equatable and Hashable conformance</a>。</li><li>两个自定类型比较是否相等时，不再需要比较每个属性，Swift 会自动生成 &#x3D;&#x3D; 方法，你只需要声明 Equatable 协议。</li><li>引入 KeyDecodingStrategy属性，其中 .convertFromSnakeCase 可以将下划线的命名转化成驼峰的命名。</li><li>引入条件符合性，只有满足一定条件才符合协议。比如扩展数组要求当里面元素满足某协议数组才符合这个协议。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md">SE-0143 Conditional conformances</a>。</li><li>引入 canImport 宏条件关键字，判断是否可以使用某库，以前只能通过判断操作系统平台来判断。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md">SE-0075 Adding a Build Configuration Import Test</a>。</li><li>新增能够去除为零项目的 compactMap()。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0187-introduce-filtermap.md">SE-0187 Introduce Sequence.compactMap(_:)</a></li><li>关联类型可以创建递归约束，提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0157-recursive-protocol-constraints.md">SE-0157 Support recursive constraints on associated types</a></li><li>targetEnvironment 环境的判断，比如模拟器。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0190-target-environment-platform-condition.md">SE-0190 Target environment platform condition</a> 。</li></ul><h5 id="Swift-4-2"><a href="#Swift-4-2" class="headerlink" title="Swift 4.2"></a>Swift 4.2</h5><p>官方博客介绍：<a href="https://swift.org/blog/swift-4.2-released/">Swift 4.2 Released!</a>、<a href="https://swift.org/blog/4.2-release-process/">Swift 4.2 Release Process</a></p><ul><li>新增动态成员查询，@dynamicMemberLookup 新属性，指示访问属性时调用一个已实现的处理动态查找的下标方法 subscript(dynamicMemeber:)，通过指定属性字符串名返回值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md">SE-0195 Introduce User-defined “Dynamic Member Lookup” Types</a></li><li>集合新加 removeAll(where:) 方法，过滤满足条件所有元素。比 filter 更高效。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0197-remove-where.md">SE-0197 Adding in-place removeAll(where:) to the Standard Library</a></li><li>布尔值增加 toggle() 方法，用来切换布尔值。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0199-bool-toggle.md">SE-0199 Adding toggle to Bool</a></li><li>引入 CaseIterable 协议，可以将枚举中所有 case 生成 allCases 数组。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0194-derived-collection-of-enum-cases.md">SE-0194 Derived Collection of Enum Cases</a></li><li>引入 #warning 和 #error 两个新的编译器指令。#warning 会产生一个警告，#error 会直接让编译出错。比如必须要填写 token 才能编译的话可以在设置 token 的代码前加上 #error 和说明。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0196-diagnostic-directives.md">SE-0196 Compiler Diagnostic Directives</a></li><li>新增加密安全的随机 API。直接在数字类型上调用 random() 方法生成随机数。shuffle() 方法可以对数组进行乱序重排。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md">SE-0202 Random Unification</a></li><li>更简单更安全的哈希协议，引入新的 Hasher 结构，通过 combine() 方法为哈希值添加更多属性，调用 finalize() 方法生成最终哈希值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0206-hashable-enhancements.md">SE-0206 Hashable Enhancements</a></li><li>集合增加 allSatisfy() 用来判断集合中的元素是否都满足了一个条件。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0207-containsOnly.md">SE-0207 Add an allSatisfy algorithm to Sequence</a></li></ul><h5 id="Swift-5-0"><a href="#Swift-5-0" class="headerlink" title="Swift 5.0"></a>Swift 5.0</h5><p>官方博客介绍：<a href="https://swift.org/blog/swift-5-released/">Swift 5 Released!</a>、<a href="https://swift.org/blog/5.0-release-process/">Swift 5.0 Release Process</a></p><ul><li>@dynamicCallable 动态可调用类型。通过实现 dynamicallyCall 方法来定义变参的处理。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md">SE-0216 Introduce user-defined dynamically “callable” types</a></li><li>新加 Result 类型用来处理错误。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md">SE-0235 Add Result to the Standard Library</a></li><li>新增原始字符串能力，在字符串前加上一个或多个#符号。里面的双引号和转义符号将不再起作用了，如果想让转义符起作用，需要在转义符后面加上#符号。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md">SE-0200 Enhancing String Literals Delimiters to Support Raw Text</a></li><li>自定义字符串插值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md">SE-0228 Fix ExpressibleByStringInterpolation</a></li><li>枚举新增 @unknown 用来区分固定的枚举和可能改变的枚举的能力。用于防止未来新增枚举属性会进行提醒提示完善每个 case 的处理。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md">SE-0192 Handling Future Enum Cases</a></li><li>compactMapValues() 对字典值进行转换和解包。可以解可选类型，并去掉 nil 值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0218-introduce-compact-map-values.md">SE-0218 Introduce compactMapValues to Dictionary</a></li><li>扁平化 try?。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0230-flatten-optional-try.md">SE-0230 Flatten nested optionals resulting from ‘try?’</a></li><li>isMultiple(of:) 方法检查一个数字是否是另一个数字的倍数。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0225-binaryinteger-iseven-isodd-ismultiple.md">SE-0225 Adding isMultiple to BinaryInteger</a></li></ul><h5 id="Swift-5-1"><a href="#Swift-5-1" class="headerlink" title="Swift 5.1"></a>Swift 5.1</h5><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.1-released/">Swift 5.1 Released!</a>、<a href="https://swift.org/blog/5.1-release-process/">Swift 5.1 Release Process</a></p><ul><li>有序集合的 diff，通过 difference(from:) 方法，可以返回要删除哪些和添加哪些项目能够让两个集合相等。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0240-ordered-collection-diffing.md">SE-0240 Ordered Collection Diffing</a></li><li>属性包装。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0258-property-wrappers.md">SE-0258 Property Wrappers</a></li><li>不透明返回类型。函数调用者决定返回什么类型是泛型，函数自身决定返回什么类型使用不透明返回类型。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md">SE-0244 Opaque Result Types</a></li><li>初始化有默认值的属性可不设置。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0242-default-values-memberwise.md">SE-0242 Synthesize default values for the memberwise initializer</a></li><li>单行表达式函数隐式返回，返回一个单行表达式的函数可以不用 return 关键字。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0255-omit-return.md">SE-0255 Implicit returns from single-expression functions</a></li><li>在类、结构体和枚举里使用 Self，Self 可以指代包含的类型。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md">SE-0068 Expanding Swift Self to class members and value types</a></li><li>静态下标。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0254-static-subscripts.md">SE-0254 Static and class subscripts</a></li><li>枚举里有 none 的 case 编译器会提示换成 Optional.none。</li><li>引入未初始化数组。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0245-array-uninitialized-initializer.md">SE-0245 Add an Array Initializer with Access to Uninitialized Storage</a></li></ul><h5 id="Swift-5-2"><a href="#Swift-5-2" class="headerlink" title="Swift 5.2"></a>Swift 5.2</h5><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.2-released/">Swift 5.2 Released!</a>、<a href="https://swift.org/blog/5.2-release-process/">Swift 5.2 Release Process</a></p><ul><li>自定义类型中实现了 callAsFunction() 的话，该类型的值就可以直接调用。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0253-callable.md">SE-0253 Callable values of user-defined nominal types</a></li><li>键路径表达式作为函数。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0249-key-path-literal-function-expressions.md">SE-0249 Key Path Expressions as Functions</a></li></ul><h5 id="Swift-5-3"><a href="#Swift-5-3" class="headerlink" title="Swift 5.3"></a>Swift 5.3</h5><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.3-released/">Swift 5.3 released!</a>、<a href="https://swift.org/blog/5.3-release-process/">Swift 5.3 Release Process</a></p><ul><li>SPM 包管理资源，SPM 可以包含资源文件，比如多媒体或文本等。通过 Bundle.module 访问这些资源。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0271-package-manager-resources.md">SE-0271 Package Manager Resources</a></li><li>SPM 包里资源本地化。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0278-package-manager-localized-resources.md">SE-0278 Package Manager Localized Resources</a></li><li>SPM 可以整合二进制包依赖。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0272-swiftpm-binary-dependencies.md">SE-0272 Package Manager Binary Dependencies</a></li><li>SPM 可以设置特定平台的依赖。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0273-swiftpm-conditional-target-dependencies.md">SE-0273 Package Manager Conditional Target Dependencies</a></li><li>单个 catch 块中捕获多个 Error 的 case。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0276-multi-pattern-catch-clauses.md">SE-0276 Multi-Pattern Catch Clauses</a></li><li>支持多个尾部闭包。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0279-multiple-trailing-closures.md">SE-0279 Multiple Trailing Closures</a></li><li>符合 Comparable 协议的枚举可以进行比较。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0266-synthesized-comparable-for-enumerations.md">SE-0266 Synthesized Comparable conformance for enum types</a></li><li>很多地方可以不用加 self 来指代实例自己了。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0269-implicit-self-explicit-capture.md">SE-0269 Increase availability of implicit self in @escaping closures when reference cycles are unlikely to occur</a></li><li>@main 可以方便指定程序入口点。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0281-main-attribute.md">SE-0281 @main: Type-Based Program Entry Points</a></li><li>where 子句可以用到泛型和扩展函数中。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0267-where-on-contextually-generic.md">SE-0267 where clauses on contextually generic declarations</a></li><li>枚举的 case 也可以符合协议。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0280-enum-cases-as-protocol-witnesses.md">SE-0280 Enum cases as protocol witnesses</a></li><li>完善 didSet，性能提升。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0268-didset-semantics.md">SE-0268 Refine didSet Semantics</a></li><li>新增 Float16 类型，即半精度浮点类型。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0277-float16.md">SE-0277 Float16</a></li></ul><h5 id="Swift-5-4"><a href="#Swift-5-4" class="headerlink" title="Swift 5.4"></a>Swift 5.4</h5><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.4-released/">Swift 5.4 Released!</a></p><ul><li>SPM 支持 @main。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0294-package-executable-targets.md">SE-0294 Declaring executable targets in Package Manifests</a></li><li>结果生成器（Result builders），通过传递序列创建新值，SwiftUI就是使用的结果生成器将多个视图生成一个视图。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md">SE-0289 Result builders</a></li><li>增强隐式成员语法，即使用了隐式的成员可以进行链式处理。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0287-implicit-member-chains.md">SE-0287 Extend implicit member syntax to cover chains of member references</a></li><li>函数开始有了使用多个变量参数的能力。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0284-multiple-variadic-parameters.md">SE-0284 Allow Multiple Variadic Parameters in Functions, Subscripts, and Initializers</a></li><li>嵌套函数可以重载，嵌套函数可以在声明函数之前调用他。</li><li>属性包装支持局部变量。</li></ul><h5 id="Swift-5-5"><a href="#Swift-5-5" class="headerlink" title="Swift 5.5"></a>Swift 5.5</h5><p>官方博客介绍：<a href="https://swift.org/blog/swift-5.5-released/">Swift 5.5 Released!</a></p><ul><li>Async await，用同步写法来处理异步。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296 Async&#x2F;await</a></li><li>Async sequences，异步序列上的循环能力。符合 AsyncSequence 协议的序列可以通过 for await 来进行异步循环。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298 Async&#x2F;Await: Sequences</a> </li><li>结构化的并发，使用 Task 和 TaskGroup 执行、取消和监听当前操作的方法。复杂的并发处理可以使用 withTaskGroup() 来创建一组 Task，addTask() 用来添加任务，cancelAll() 可以取消任务，addTask() 在取消任务后可以继续添加任务，如果使用了 addTaskUnlessCancelled() 方法就可以避免取消后会继续添加任务这种情况。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304 Structured concurrency</a></li><li>只读属性支持 async 和 throws 关键字。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0310-effectful-readonly-properties.md">SE-0310 Effectful Read-only Properties</a></li><li>async let，可以创建 await 子任务。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0317-async-let.md">SE-0317 async let bindings</a></li><li>以前异步代码的适配。比如 DispatchQueue.main.async，外部库可以通过 withCheckedContinuation() 函数来对以前异步代码进行封装。 提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">SE-0300 Continuations for interfacing async tasks with synchronous code</a></li><li>Actor，可以确保内部只能被一个线程访问，避免存储属性和方法出现竞争条件。提案在这 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306 Actors</a></li><li>全局 actors，通过 actor 将全局状态隔离出来，避免数据竞争。比如主线程 @MainActor 这个属性包装可以将属性和方法标记为只能在主线程上访问。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0316-global-actors.md">SE-0316 Global actors</a></li><li>Sendable 协议和 @Sendable 属性包装，目的是支持安全的将数据从一个线程传给另一个线程。Swift 的核心数据类型比如字符、集合等已符合 Sendable 协议。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0302-concurrent-value-and-concurrent-closures.md">SE-0302 Sendable and @Sendable closures</a></li><li>局部变量可以使用 lazy。</li><li>属性包装可以用到函数和闭包参数上。提案<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0293-extend-property-wrappers-to-function-and-closure-parameters.md">SE-0293 Extend Property Wrappers to Function and Closure Parameters</a></li><li>泛型支持静态成员查找。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0299-extend-generic-static-member-lookup.md">SE-0299 Extending Static Member Lookup in Generic Contexts</a></li><li>#if 用于后缀成员表达式。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0308-postfix-if-config-expressions.md">SE-0308 #if for postfix member expressions</a></li><li>CGFloat 和 Double 之间可以隐式转换。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0307-allow-interchangeable-use-of-double-cgfloat-types.md">SE-0307 Allow interchangeable use of CGFloat and Double types</a></li><li>Codable 支持关联值枚举。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0295-codable-synthesis-for-enums-with-associated-values.md">SE-0295 Codable synthesis for enums with associated values</a></li></ul><h5 id="Swift-5-6"><a href="#Swift-5-6" class="headerlink" title="Swift 5.6"></a>Swift 5.6</h5><p><a href="https://www.swift.org/blog/swift-5.6-released/">5.6 官方博客介绍</a></p><ul><li>使用 any 注释此类类型，使存在类型的影响在语言中明确。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0335-existential-any.md">SE-0335 Introduce existential any</a></li><li>类型占位符。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0315-placeholder-types.md">SE-0315 Type placeholders (formerly, “Placeholder types”)</a></li><li>新增 CodingKeyRepresentable 协议将非字符串和整数类型自定义表现。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0320-codingkeyrepresentable.md">SE-0320 Allow coding of non String &#x2F; Int keyed Dictionary into a KeyedContainer</a></li><li>增加 Unavailability 用来在检查不可用时可以做些事情。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0290-negative-availability.md">SE-0290 Unavailability Condition</a></li><li>增加了 <code>@preconcurrency</code> 属性。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0337-support-incremental-migration-to-concurrency-checking.md">SE-0337 Incremental migration to concurrency checking</a></li><li>actor 的 init 和 deinit。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0327-actor-initializers.md">SE-0327 On Actors and Initialization</a></li></ul><p>Package Manage 的一些提案</p><ul><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0303-swiftpm-extensible-build-tools.md">SE-0303 Package Manager Extensible Build Tools</a></li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0305-swiftpm-binary-target-improvements.md">SE-0305 Package Manager Binary Target Improvements</a></li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0325-swiftpm-additional-plugin-apis.md">SE-0325 Additional Package Plugin APIs</a></li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0332-swiftpm-command-plugins.md">SE-0332 Package Manager Command Plugins</a></li></ul><h5 id="Swift-5-7"><a href="#Swift-5-7" class="headerlink" title="Swift 5.7"></a>Swift 5.7</h5><ul><li>标准库多了个 <code>Regex&lt;Output&gt;</code> 类型，Regex 语法与 Perl、Python、Ruby、Java、NSRegularExpression 和许多其他语言兼容。可以用 <code>let regex = try! Regex(&quot;a[bc]+&quot;)</code> 或 <code>let regex = /a[bc]+/</code> 写法来使用。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0350-regex-type-overview.md">SE-0350 Regex Type and Overview</a> 引入 Regex 类型。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0351-regex-builder.md">SE-0351 Regex builder DSL</a> 使用 result builder 来构建正则表达式的 DSL。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0354-regex-literals.md">SE-0354 Regex Literals</a> 简化的正则表达式。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0357-regex-string-processing-algorithms.md">SE-0357 Regex-powered string processing algorithms</a> 提案里有基于正则表达式的新字符串处理算法。</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0347-type-inference-from-default-exprs.md">SE-0347 Type inference from default expressions</a> 扩展 Swift 泛型参数类型的默认值能力。</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0341-opaque-parameters.md">SE-0341 Opaque Parameter Declarations</a> 使用 some 参数简化泛型参数声明。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0328-structural-opaque-result-types.md">SE-0328 Structural opaque result types</a> 扩大不透明结果返回类型可以使用的范围。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0360-opaque-result-types-with-availability.md">SE-0360 Opaque result types with limited availability</a> 可用性有限的不透明结果类型，比如 <code>if #available(macOS 13.0, *) &#123;&#125;</code> 就可以根据系统不同版本返回不同类型，新版本出现新类型的 View 就可以和以前的 View 类型区别开。</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md">SE-0309 Unlock existentials for all protocols</a> 改进了 existentials 和 泛型的交互。这样就可以更方便的检查 Any 类型的两个值是否相等.</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0346-light-weight-same-type-syntax.md">SE-0346 Lightweight same-type requirements for primary associated types</a> 引入一种新语法，用于符合泛型参数并通过相同类型要求约束关联类型。<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0358-primary-associated-types-in-stdlib.md">SE-0358 Primary Associated Types in the Standard Library</a> 引入主要关联类型概念，并将其带入了标准库。这些关联类型很像泛型，允许开发者将给定关联类型的类型指定为通用约束。</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0353-constrained-existential-types.md">SE-0353 Constrained Existential Types</a> 基于 SE-0309 和 SE-0346 提案，在 existential 类型的上下文中重用轻量关联类型的约束。</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0352-implicit-open-existentials.md">SE-0352 Implicitly Opened Existentials</a>  允许 Swift 在很多情况下使用协议调用泛型函数。</li><li>新增 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0338-clarify-execution-non-actor-async.md">SE-0338 Clarify the Execution of Non-Actor-Isolated Async Functions</a> 通过收紧可发送性检查的规则来避免潜在的数据竞争。</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0343-top-level-concurrency.md">SE-0343 Concurrency in Top-level Code</a> 这个提案主要是更好地支持命令行工具的开发，可以直接将 concurrency 代码写到 main.swift 文件里。</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0340-swift-noasync.md">SE-0340 Unavailable From Async Attribute</a> 提供 noasync 语法以允许我们将类型和函数标记为在异步上下文不可用。</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0336-distributed-actor-isolation.md">SE-0336 Distributed Actor Isolation</a> 和 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0344-distributed-actor-runtime.md">SE-0344 Distributed Actor Runtime</a> 是两个 Distributed Actors 的相关提案。</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0345-if-let-shorthand.md">SE-0345 if let shorthand for shadowing an existing optional variable</a> 引入的新语法，用于 unwrapping optinal。</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0326-extending-multi-statement-closure-inference.md">SE-0326</a> 提高了 Swift 对闭包使用参数和类型推断的能力。</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0348-buildpartialblock.md">SE-0348 buildPartialBlock for result builders</a>  简化了实现复杂 result buiders 所需的重载。</li><li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0356-swift-snippets.md">SE-0356 Swift Snippets</a>  代码片段用于示例文档的提案。</li><li>内存管理相关提案包括 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0349-unaligned-loads-and-stores.md">SE-0349 Unaligned Loads and Stores from Raw Memory</a> 、<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0334-pointer-usability-improvements.md">SE-0334 Pointer API Usability Improvements</a> 、<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0333-with-memory-rebound.md">SE-0333 Expand usability of withMemoryRebound</a> 。</li></ul><p>上面各个版本的语法更新的内容和更多代码的示例都可以在 Swift 小册子里查看，内容力求更全，描述力求更简洁，more big, more small。不想下载 app 也可以查看<a href="https://ming1016.github.io/2021/11/23/daiming-swift-pamphlet/">《戴铭的 Swift 小册子5.0》</a>这篇，内容也同步做了更新和补充（内容达十五万字，值得你收藏和分享）。我对小册子内容查看样式视觉做了更新，排版用了赫蹏（hètí），字体是霞鹜文楷，更新了代码高亮风格，内容看起来更舒服。还有 icon 也进行替换，不用再对着枯燥的 SFSymbol 和我先前临时从以前图里随便挑的那条小狗 App icon 看了。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swift-evolutionary-path/02.png" class="lozad post-image"src="/uploads/swift-evolutionary-path/02.png"><br><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swift-evolutionary-path/03.png" class="lozad post-image"src="/uploads/swift-evolutionary-path/03.png"></p><p>另</p><p>小册子现在可以直接下载 dmg 使用了，4.3下载地址：<a href="https://github.com/ming1016/SwiftPamphletApp/files/8055673/4.3.dmg.zip">戴铭的小册子4.3.dmg.zip</a></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/swift-evolutionary-path/04.png" class="lozad post-image"src="/uploads/swift-evolutionary-path/04.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;已更新到 Swift 5.7。&lt;/p&gt;
&lt;p&gt;本篇主要是对&lt;a href=&quot;https://ming1016.github.io/2021/05/22/acfun-swift-practice/&quot;&gt;《A站 的 Swift 实践》&lt;/a&gt;文章中的一幅配图做了详细的扩展，能够更
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>如何用 SwiftUI + Combine + Swift Concurrency Aysnc/Await Actor 欢畅开发</title>
    <link href="http://ming1016.github.io/2022/01/03/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/"/>
    <id>http://ming1016.github.io/2022/01/03/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/</id>
    <published>2022-01-03T03:53:21.000Z</published>
    <updated>2023-04-24T04:33:14.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先说两句废话（Don’t-blame-me-about-my-calculation）"><a href="#先说两句废话（Don’t-blame-me-about-my-calculation）" class="headerlink" title="先说两句废话（Don’t blame me about my calculation）"></a>先说两句废话（Don’t blame me about my calculation）</h2><p>为啥写这篇文章，简单说，这些日子以来，总觉着做事还是专注些好，于是也逐步减少了很多信息消费，缩减了些欲望吧。目前更加关注怎么能够让开发更快乐些，相信有了这个方向，其他事情就更容易见招拆招了，面对的挑战也不再是挑战，而是激发自己斗志的辅助工具，其实不用在乎那些看似权威的做法和打法，只要是没让你开心的，肯定是有改进空间的。思路和方向才是最重要的，比如<a href="https://search.douban.com/movie/subject_search?search_text=%E5%A4%A7%E4%BE%A6%E6%8E%A2%E6%B3%A2%E7%BD%97&cat=1002">《大侦探波洛》</a>，每次破案之前波洛就已经通过利害关系找好了方向，他的推理都是基于认定的方向去寻找素材。 </p><p>开心不是因为没有挑战，没有困难，没有煎熬，而是因为找到了方向，这个方向就是，快乐的 Coding，开心的工作，为了达成这个目标那些艰难挑战也就不算什么了。对于 Coding，经过实操，我觉得声明式 UI 响应式编程范式就是很好的提升工作愉悦程度的方式。代码在 GitHub 上，<a href="https://github.com/ming1016/SwiftPamphletApp">链接</a>。后面我会详细跟你说说这个应用如何开发的及相关知识点，希望你也能够感受下这种 Happy 的开发模式。 </p><p>这之前，我想先说下为什么我觉得快乐是很件重要的事情。这段时间，我接受了好几次采访，有关于工程师文化方面的，还有《时尚COSMOPOLITAN》杂志的采访，记者会问到一些以前的事情，在聊过往事情时我发现原来快乐才是每天自己存在着的最根本的原动力。为了能够让自己能够一直活着，就不要偏离快乐。摄影师是任欣羽，参与过《一代宗师》的拍摄，还是《时尚芭莎》的模特。以下是时尚 COSMOPOLITAN 的采访内容： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/00.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/00.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/01.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/01.jpg"></p><p>完整内容见：<a href="https://mp.weixin.qq.com/s/b5fj2b65xRv4mhFpftwNcg">https://mp.weixin.qq.com/s/b5fj2b65xRv4mhFpftwNcg</a> </p><p>视频可见这条微博地址：<a href="https://weibo.com/1351051897/KEdu5Fi1x?pagetype=profilefeed">https://weibo.com/1351051897/KEdu5Fi1x?pagetype=profilefeed</a> </p><p>视频有六十多万播放量，两百多评论和一千多转发。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/02.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/02.png"></p><p>话题还上了微博热搜，有六百多万阅读和三千多讨论。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/03.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/03.png"></p><p>你肯定会觉得很奇怪，我怎么会接受时尚杂志采访，其实我早在2006年就跟时尚娱乐圈有染了，那年张纪中版《神雕侠侣》刚热播完，刘亦菲演的小龙女，我特别的喜欢。有幸在一次活动中我成为她的御用摄影师，由于过于激动手抖，拍糊了好多张，蛮可惜的。私存这批里还是有些清晰的，这些照片最近在找资料时不小心被我翻了出来。挑几张看看十六年前的刘亦菲和我是什么样的吧。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/04.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/04.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/05.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/05.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/06.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/06.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/07.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/07.jpg"></p><p>我还很用心的置办了新家。也是希望能够让自己能够开心些。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/08.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/08.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/09.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/09.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/10.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/10.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/11.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/11.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/12.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/12.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/30.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/30.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/13.jpg" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/13.jpg"></p><p>那么，怎样高效开发，带来愉悦的呢？ </p><h2 id="看看做出来的样子"><a href="#看看做出来的样子" class="headerlink" title="看看做出来的样子"></a>看看做出来的样子</h2><p>这是个 macOS 应用《<a href="https://github.com/ming1016/SwiftPamphletApp">戴铭的小册子</a>》，能够方便的查看 Swift 语法，还有一些主要库的使用指南，内容还在完善中，选择的库主要就是开发小册子应用使用到的 SwitUI、Combine、Swift Concurrency。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/14.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/14.png"></p><p>除了这些速查和库的使用内容外，这个应用还有一些开发者的动态，当他们有新的动作，比如提交了代码、star 了什么项目，提交和留言了议题都会直接在程序坞中提醒你。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/15.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/15.png"></p><p>我对一些库做了分类，方便按需查找，库有新的提交也会在程序坞中提醒。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/16.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/16.png"></p><p>还能方便的查看库的议题。比如在阮一峰的《科技爱好者周刊》的议题中可以看到有很多人推荐和自荐了一些信息。保留议题有一千六百多个。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/17.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/17.png"></p><p>这个元旦假期，我又添加了博客动态的功能，可以跟进一些博客内容的更新。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/18.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/18.png"></p><p>由于 Swift 语言的简洁，这些库的先进，最近有同学做实验，5.5版本还有瘦体积的效果。这样的一个小册子应用程序累积开发的时间不多，就是很高效的嘛。特别是最后博客动态这个功能，七年前我用 Objective-C 做的一个RSS阅读器耗费了我两三周的时间。同样的功能用 Swift 这套来做元旦假期两天就完成了。声明式 UI 响应式范式配合上 Swift 简洁的语法真是蛮 Cool 的。 </p><h2 id="基础网络能力"><a href="#基础网络能力" class="headerlink" title="基础网络能力"></a>基础网络能力</h2><p>小册子应用会大量使用网络，先看看怎么用 Swift Concurrency 来做吧。 </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">RSSReq</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> urlStr<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-></span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">guard</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> urlStr<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"wrong url"</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> req <span class="token operator">=</span> <span class="token class-name">URLRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> url<span class="token punctuation">)</span>  <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> req<span class="token punctuation">)</span>  <span class="token keyword">guard</span> <span class="token punctuation">(</span>res <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">HTTPURLResponse</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"wrong data"</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> dataStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> data<span class="token punctuation">,</span> encoding<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span>  <span class="token keyword">return</span> dataStr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，通过 url 可以获取到 data 和 response，和其他网络请求的方式不同的是，使用 await 后就不用繁琐的代理或闭包来进行后续的处理，代码变得更好理解，即字面意思上的 await 后执行后面的行。举个例子，获取博客 RSS 时，如果希望处理完一个 RSS 后再处理后面一个 RSS，使用 await 语法看起来就非常简洁清爽易于理解了。 </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">Task</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> rssFeed <span class="token operator">=</span> <span class="token constant">SPC</span><span class="token punctuation">.</span><span class="token function">rssFeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取所有 rss 源的模型</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> rssFeed <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">RSSReq</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>feedLink<span class="token punctuation">)</span>            <span class="token keyword">guard</span> <span class="token keyword">let</span> str <span class="token operator">=</span> str <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span>            <span class="token punctuation">&#125;</span>            <span class="token constant">RSSVM</span><span class="token punctuation">.</span><span class="token function">handleFetchFeed</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span> str<span class="token punctuation">,</span> rssModel<span class="token punctuation">:</span> r<span class="token punctuation">)</span>            <span class="token comment">// 在 Main Actor 更新通知数</span>            <span class="token keyword">await</span> <span class="token function">rssUpdateNotis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，当出现数据获取错误就跳过后面逻辑直接去请求下个 RSS，获取成功会更新 Main Actor 处理通知逻辑，不同队列之间切换就是这么自然，短短几行代码就都讲清楚了。 </p><p>Combine 来处理网络的优势就是能够将网络请求到数据处理，最后到数据绑定都负责了。也就是发布者、操作符和订阅者的组合。下面我通过开发指南功能的过程说明下 Combine 的用法。 </p><h2 id="怎么开发指南功能"><a href="#怎么开发指南功能" class="headerlink" title="怎么开发指南功能"></a>怎么开发指南功能</h2><p>指南的列表结构使用的是 JSON，我把列表的数据保存在仓库的议题中，通过 GitHub 的 REST API 获取议题进行展示，这样对于指南列表的内容修改丰富可以通过直接在议题中进行编辑即可，无需升级应用。 </p><p>Combine 网络请求我写在 APIRequest.swift 文件里，主要代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">APISev</span><span class="token punctuation">:</span> <span class="token class-name">APISevType</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">let</span> rootUrl<span class="token punctuation">:</span> <span class="token constant">URL</span>        <span class="token keyword">init</span><span class="token punctuation">(</span>rootUrl<span class="token punctuation">:</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://api.github.com"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>rootUrl <span class="token operator">=</span> rootUrl    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">response</span><span class="token operator">&lt;</span><span class="token class-name">Request</span><span class="token operator">></span><span class="token punctuation">(</span>from req<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">AnyPublisher</span><span class="token operator">&lt;</span><span class="token class-name">Request</span><span class="token punctuation">.</span><span class="token class-name">Res</span><span class="token punctuation">,</span> <span class="token class-name">APISevError</span><span class="token operator">></span> <span class="token keyword">where</span> <span class="token class-name">Request</span> <span class="token punctuation">:</span> <span class="token class-name">APIReqType</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> req<span class="token punctuation">.</span>path<span class="token punctuation">,</span> relativeTo<span class="token punctuation">:</span> rootUrl<span class="token punctuation">)</span><span class="token operator">!</span>        <span class="token keyword">var</span> comp <span class="token operator">=</span> <span class="token class-name">URLComponents</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> path<span class="token punctuation">,</span> resolvingAgainstBaseURL<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">!</span>        comp<span class="token punctuation">.</span>queryItems <span class="token operator">=</span> req<span class="token punctuation">.</span>qItems        <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token class-name">URLRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> comp<span class="token punctuation">.</span>url<span class="token operator">!</span><span class="token punctuation">)</span>        req<span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"token </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation"><span class="token constant">SPC</span><span class="token punctuation">.</span>gitHubAccessToken</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> forHTTPHeaderField<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"Authorization"</span></span><span class="token punctuation">)</span>        req<span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"SwiftPamphletApp"</span></span><span class="token punctuation">,</span> forHTTPHeaderField<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"User-Agent"</span></span><span class="token punctuation">)</span>        <span class="token keyword">let</span> de <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        de<span class="token punctuation">.</span>keyDecodingStrategy <span class="token operator">=</span> <span class="token punctuation">.</span>convertFromSnakeCase        <span class="token keyword">let</span> sch <span class="token operator">=</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"GitHub API Queue"</span></span><span class="token punctuation">,</span> qos<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> attributes<span class="token punctuation">:</span> <span class="token punctuation">.</span>concurrent<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">dataTaskPublisher</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> req<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> sch<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> sch<span class="token punctuation">)</span>            <span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> res <span class="token keyword">in</span>                <span class="token keyword">return</span> data            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span>mapError <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                <span class="token class-name">APISevError</span><span class="token punctuation">.</span>resError            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token punctuation">.</span><span class="token class-name">Res</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> decoder<span class="token punctuation">:</span> de<span class="token punctuation">)</span>            <span class="token punctuation">.</span>mapError <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>                <span class="token class-name">APISevError</span><span class="token punctuation">.</span>parseError            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token class-name">RunLoop</span><span class="token punctuation">.</span>main<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eraseToAnyPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，Combine 有 decode 的操作符，能够直接指定 JSON 模型数据类型和 JSONDecoder 对象。还有重试、队列指定以及抛错误的操作符。 </p><p>一个应用的生命周期内，相同的请求会发布很多次，需要定义一个发起请求的 Subject，还有请求完成响应的 Subject。定义如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">private</span> <span class="token keyword">let</span> apCustomIssuesSj <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">let</span> resCustomIssuesSj <span class="token operator">=</span> <span class="token class-name">PassthroughSubject</span><span class="token operator">&lt;</span><span class="token class-name">IssueModel</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>apCustomIssuesSj 会发起网络请求，代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> resCustomIssuesSm <span class="token operator">=</span> apCustomIssuesSj    <span class="token punctuation">.</span>flatMap <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>apiSev<span class="token punctuation">]</span> <span class="token keyword">in</span>        apiSev<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> reqCustomIssues<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> error <span class="token operator">-></span> <span class="token class-name">Empty</span><span class="token operator">&lt;</span><span class="token class-name">IssueModel</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">></span> <span class="token keyword">in</span>                <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>errSj<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token function">share</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>resCustomIssuesSj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面 .catch 里errSj 发布者就是嵌套发布者，.flatMap 会让每次返回都是新发布者。apiSev.response 返回的是被类型擦除到 AnyPublisher 上，这样不同类型的发布者能够被 .flatMap 处理。闭包内的 .catch 处理能区分发布者，仅对当前发布者有效，不会影响后面发布者，导致整个管道被取消。发布者失败类型是 Never，失败本身会被连贯的处理。 </p><p>.flatMap 除了从它 map 函数里生产发布者，还有个可选参数 maxPublishers，通过这个参数可以限制一次生产的最大发布者数量，也就是你可以通过 .flatMap 对管道上游的发布者进行反压（Backpressure），maxPublishers 能有效的节流管道，按照管道内部实际上的发布速度进行反压，这个也是 Combine 相较于 RxSwift 来说的一个优势。比如当网络请求多时，你可以通过设置 .max(1) 来减轻请求对服务的压力，同时还能够保证结果到达的顺序和请求顺序的一致。 </p><p>resCustomIssuesSj 会去处理网络请求成功的数据，最后通过 .assign 将处理的数据分配给遵循 ObservableObject 协议类的 @Published 属性包装的属性 customIssues，用于响应式的更新 SwiftUI 布局数据。实现代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> repCustomIssuesSm <span class="token operator">=</span> resCustomIssuesSj    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> issueModel <span class="token keyword">in</span>        <span class="token keyword">let</span> str <span class="token operator">=</span> issueModel<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">base64Decoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span>        <span class="token keyword">let</span> data<span class="token punctuation">:</span> <span class="token class-name">Data</span>        data <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token class-name">Encoding</span><span class="token punctuation">.</span>utf8<span class="token punctuation">)</span><span class="token operator">!</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">try</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">CustomIssuesModel</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token class-name">CustomIssuesModel</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span>customIssues<span class="token punctuation">,</span> on<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，你会发现在 .map 中还会对数据进行 base64 decode，这是因为我在仓库议题中保存的是 base64 encode 的数据，decode 成 JSON 数据再用 JSONDecoder 转为 [CustomIssuesModel] 模型 数据分配给 customIssues。 </p><p>使用 SwiftUI 写的指南列表视图，代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">IssuesListFromCustomView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> vm<span class="token punctuation">:</span> <span class="token class-name">IssueVM</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>customIssues<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ci <span class="token keyword">in</span>                <span class="token class-name">Section</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>ci<span class="token punctuation">.</span>issues<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token keyword">in</span>                        <span class="token class-name">NavigationLink</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">IssueView</span><span class="token punctuation">(</span>vm<span class="token punctuation">:</span> <span class="token class-name">IssueVM</span><span class="token punctuation">(</span>repoName<span class="token punctuation">:</span> <span class="token constant">SPC</span><span class="token punctuation">.</span>pamphletIssueRepoName<span class="token punctuation">,</span> issueNumber<span class="token punctuation">:</span> i<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Text</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>title<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> header<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span>ci<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>errMsg<span class="token punctuation">,</span> isPresented<span class="token punctuation">:</span> $vm<span class="token punctuation">.</span>errHint<span class="token punctuation">,</span> actions<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>onAppear <span class="token punctuation">&#123;</span>            vm<span class="token punctuation">.</span><span class="token function">doing</span><span class="token punctuation">(</span><span class="token punctuation">.</span>customIssues<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中的属性包装 @StateObject 会在当前视图生命周期中保持 vm 这个属性的数据，vm 需要遵循 ObservableObject 协议，其 @Published 发布属性的值会被 SwiftUI 自动进行管理，属性 vm 的发布属性数据变化时会自动触发布局依据新数据的更新。 </p><p>上面代码中的 SwiftUI 写的布局界面效果如下： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/19.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/19.png"></p><p>界面主体是 List 视图，根据 List 的定义，要求的输入是一个数组，数组内元素需要遵循 Identifiable，每行的返回是被 @ViewBuilder 标记的 View。ForEach 根据数组中的元素会创建能够重复使用的视图，性能接近大家熟悉的 UITableView，但是写法上简洁的不要太多，真实完美解痛点案例，😄❤️。 </p><p>指南的内容也会以 markdown 格式存在议题中，通过调用 GitHub API 的接口进行指南内容的读取。一个接口是议题接口，请求结构体定义如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">IssueRequest</span><span class="token punctuation">:</span> <span class="token class-name">APIReqType</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">typealias</span> <span class="token class-name">Res</span> <span class="token operator">=</span> <span class="token class-name">IssueModel</span>    <span class="token keyword">var</span> repoName<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> issueNumber<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">var</span> path<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"/repos/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">repoName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">/issues/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">issueNumber</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> qItems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">URLQueryItem</span><span class="token punctuation">]</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token nil constant">nil</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一个是议题留言的接口，定义如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">IssueRequest</span><span class="token punctuation">:</span> <span class="token class-name">APIReqType</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">typealias</span> <span class="token class-name">Res</span> <span class="token operator">=</span> <span class="token class-name">IssueModel</span>    <span class="token keyword">var</span> repoName<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">var</span> issueNumber<span class="token punctuation">:</span> <span class="token class-name">Int</span>    <span class="token keyword">var</span> path<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"/repos/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">repoName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">/issues/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">issueNumber</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> qItems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">URLQueryItem</span><span class="token punctuation">]</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token nil constant">nil</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现效果如下图： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/20.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/20.png"></p><p>指南内容放在议题中，也是希望能够通过议题留言功能，让反馈和大家经验的补充被更多人看到。 </p><p>除了语法速查的内容，关于 Swift 的一些特性，专题，还有 Combine、Concurrency、SwiftUI 这些库的使用指南内容都是采用的 GitHub API 接口读取议题方式获取的。 </p><p>读取议题接口获取指南列表的模式，也用在了开发者和仓库动态列表中。接下来我跟你说下开发者和仓库动态怎么开发的吧。 </p><h2 id="开发者和仓库动态"><a href="#开发者和仓库动态" class="headerlink" title="开发者和仓库动态"></a>开发者和仓库动态</h2><p>显示开发者信息的页面代码在 UserView.swift 里，开发者介绍信息页面如下： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/21.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/21.png"></p><p>界面中的数据都来自 &#x2F;users&#x2F;(userName) 接口，获取数据逻辑在 UserVM.swift 里。数据多，但情况不复杂，布局上只要注意进行数据是否有的区分即可，布局代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">AsyncImageWithPlaceholder</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token punctuation">.</span>normalSize<span class="token punctuation">,</span> url<span class="token punctuation">:</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">)</span>            <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name <span class="token operator">??</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>login<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"(</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>login</span><span class="token interpolation-punctuation punctuation">)</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"订阅者 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>followers</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 人，仓库 </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>publicRepos</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> 个"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">ButtonGoGitHubWeb</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>htmlUrl<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"在 GitHub 上访问"</span></span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>location <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"居住：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>location <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">.</span>subheadline<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end HStack</span>                <span class="token keyword">if</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>bio <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"简介：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>bio <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>blog <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>blog<span class="token operator">!</span><span class="token punctuation">.</span>isEmpty <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"博客：</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>blog <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token class-name">ButtonGoGitHubWeb</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>blog <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"访问"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>twitterUsername <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Twitter："</span></span><span class="token punctuation">)</span>                <span class="token class-name">ButtonGoGitHubWeb</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://twitter.com/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>twitterUsername <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"@</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>twitterUsername <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end HStack</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// end VStack</span>    <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码可以看到，对于数据是否存在，SwiftUI 是可以使用 if 来进行判断是否展示视图的，这个条件判断也会存在于整个视图结构类型中被编译生成，因此更好的方式是将数据判断放到 ViewModifier 中，因为 ViewModifier 处理时机是在运行时，可以减少布局初始创建逻辑运算。 </p><p>开发者的事件和接受事件部分的数据就比介绍部分复杂些，使得界面变化也多些，事件接口是 &#x2F;users&#x2F;(userName)&#x2F;events，接受事件接口是 &#x2F;users&#x2F;(userName)&#x2F;received_events 。数据的复杂体现在类型上，类型种类较多，我采用的是直接处理 payload 里的字段，如果其 issue.number 字段不为空，那么就表示这个开发者事件是和议题相关，会显示 issue.title 标题，有内容的话，也就是 issue.body 不为空，继续显示议题的内容。如果字段是 comment，就表示事件是议题的留言。如果字段是 commits，表示需要列出这个事件中所有的 commit 提交及标题和描述。pullRequest 字段不为空就显示这个 PR 的标题和内容描述。字段处理逻辑代码实现如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>issue<span class="token operator">?</span><span class="token punctuation">.</span>number <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>issue<span class="token operator">?</span><span class="token punctuation">.</span>title <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>issue<span class="token operator">?</span><span class="token punctuation">.</span>title <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>issue<span class="token operator">?</span><span class="token punctuation">.</span>body <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>type <span class="token operator">!=</span> <span class="token string-literal"><span class="token string">"IssueCommentEvent"</span></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Markdown</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>issue<span class="token operator">?</span><span class="token punctuation">.</span>body <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"IssueCommentEvent"</span></span> <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>comment<span class="token operator">?</span><span class="token punctuation">.</span>body <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Markdown</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>comment<span class="token operator">?</span><span class="token punctuation">.</span>body <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>commits <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListCommits</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> event<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>pullRequest <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>pullRequest<span class="token operator">?</span><span class="token punctuation">.</span>title <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Text</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>pullRequest<span class="token operator">?</span><span class="token punctuation">.</span>title <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>pullRequest<span class="token operator">?</span><span class="token punctuation">.</span>body <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Markdown</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>pullRequest<span class="token operator">?</span><span class="token punctuation">.</span>body <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>description <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Markdown</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>description <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，对于不定数量的 commit 视图写在了一个单独的 ListCommits 视图中。只要是遵循了 View 协议，就可以作为自定义视图在其他视图中直接使用。ListCommits 代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ListCommits</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> event<span class="token punctuation">:</span> <span class="token class-name">EventModel</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>commits <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token class-name">PayloadCommitModel</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> c <span class="token keyword">in</span>            <span class="token class-name">ButtonGoGitHubWeb</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"https://github.com/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">event<span class="token punctuation">.</span>repo<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">/commit/</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">c<span class="token punctuation">.</span>sha <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"提交"</span></span><span class="token punctuation">)</span>            <span class="token class-name">Text</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>message <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码你会发现一个 ButtonGoGitHubWeb的视图，进入看会发现用到了一个自定义的 ButtonStyle： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token class-name">FixAwfulPerformanceStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>FixAwfulPerformanceStyle() 的实现如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">/// 列表加按钮性能问题，需观察官方后面是否解决</span><span class="token comment">/// https://twitter.com/fcbunn/status/1259078251340800000</span><span class="token keyword">struct</span> <span class="token class-name">FixAwfulPerformanceStyle</span><span class="token punctuation">:</span> <span class="token class-name">ButtonStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeBody</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Configuration</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        configuration<span class="token punctuation">.</span>label            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>body<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> leading<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> bottom<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> trailing<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>selectedControlTextColor<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>controlTextColor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span>isPressed <span class="token operator">?</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>selectedControlColor<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>controlBackgroundColor<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">(</span>nsColor<span class="token punctuation">:</span> <span class="token class-name">NSColor</span><span class="token punctuation">.</span>lightGray<span class="token punctuation">)</span><span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>gray<span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是社区 <a href="https://github.com/Kam-To">@Kam-To</a> 提的一个 PR，是解的 macOS 上的一个性能问题，也就是在 List 中直接使用 Button，在列表快速滚动时，流畅度会有损伤，加上上面的 ButtonStyle 代码就好了。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/22.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/22.png"></p><p>原推见 <a href="https://twitter.com/fcbunn/status/1259078251340800000">https://twitter.com/fcbunn/status/1259078251340800000</a>。 </p><p>开发者接受事件和事件类似，只是会多显示事件的 actor 字段内容，表明开发者接受的是谁发出的事件。事件界面如下所示： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/23.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/23.png"></p><p>仓库整体处理和开发者类似，只是多了议题和 README 内容，数据复杂度比开发者要低。接下来我要跟你说的是如果开发者或仓库有新的提交，怎么能够获取到，并提示有更新。 </p><h2 id="动态有更新，怎么提醒的"><a href="#动态有更新，怎么提醒的" class="headerlink" title="动态有更新，怎么提醒的"></a>动态有更新，怎么提醒的</h2><p>我的思路是通过本地定时器，定期获取数据，本地记录上次浏览的位置，通过对比，看有多少新的动态没有查看，并通过 .badge 这个 ViewModifier 和 NSApp.dockTile.badgeLabel 来进行端内端外的提醒。 </p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>在 SwiftUI 中，可以使用 Combine 的 Timer.publish 发布器来设置一个定时属性，Timer.publish 指定好时间周期和队列模式等参数。比如设置一个开发者动态定时器属性，代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">let</span> timerForRepos <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>every<span class="token punctuation">:</span> <span class="token constant">SPC</span><span class="token punctuation">.</span>timerForReposSec<span class="token punctuation">,</span> on<span class="token punctuation">:</span> <span class="token punctuation">.</span>main<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>common<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">autoconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再在 .onReceive 中执行网络数据获取操作，就可以定时获取数据了。 </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span>timerForRepos<span class="token punctuation">,</span> perform<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> time <span class="token keyword">in</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> repoName <span class="token operator">=</span> appVM<span class="token punctuation">.</span><span class="token function">timeForReposEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token class-name">RepoVM</span><span class="token punctuation">(</span>repoName<span class="token punctuation">:</span> repoName<span class="token punctuation">)</span>        vm<span class="token punctuation">.</span><span class="token function">doing</span><span class="token punctuation">(</span><span class="token punctuation">.</span>notiRepo<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取到的数据会跟本地已经存储的数据进行对比。 </p><h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>本地数据存储，我用的是 SQLite.swift，这个库是使用 Swift 对 SQLite 做了一层封装，使用很简便，在 DBHandler.swift 里有数据库初始化和表的创建相关代码，DBDevNoti.swift 中的 DevsNotiDataHelper 有对数据操作的代码，DBDevNoti 定义了数据表的结构。如何使用可以参考 SQLite.swift 官方的<a href="https://github.com/stephencelis/SQLite.swift/blob/master/Documentation/Index.md">指南</a>，里面讲得非常详细清楚。 </p><p>用 DB Browser for SQLite 应用可以查看本地的数据库。下面是用它查看记录的 RSS 的数据，如图：</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/29.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/29.png"></p><p>更新未读数的判断逻辑，我封到了一个函数里，代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function-definition function">updateDBDevsInfo</span><span class="token punctuation">(</span>ems<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">EventModel</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">DevsNotiDataHelper</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>sLogin<span class="token punctuation">:</span> userName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">var</span> lrid <span class="token operator">=</span> f<span class="token punctuation">.</span>lastReadId            <span class="token keyword">for</span> em <span class="token keyword">in</span> ems <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>                    lrid <span class="token operator">=</span> em<span class="token punctuation">.</span>id                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> em<span class="token punctuation">.</span>id <span class="token operator">==</span> f<span class="token punctuation">.</span>lastReadId <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span>                <span class="token punctuation">&#125;</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span>            i <span class="token operator">=</span> f<span class="token punctuation">.</span>unRead <span class="token operator">+</span> i            <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> <span class="token omit keyword">_</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">DevsNotiDataHelper</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token class-name">DBDevNoti</span><span class="token punctuation">(</span>login<span class="token punctuation">:</span> userName<span class="token punctuation">,</span> lastReadId<span class="token punctuation">:</span> lrid<span class="token punctuation">,</span> unRead<span class="token punctuation">:</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token comment">// end if let f</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// end func updateDBDevsInfo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上面代码所示，入参 ems 是获取到的最新数据，先从本地数据库中取到上次最新的阅读编号 lastReadId，迭代 ems，如果第一个 ems 的编号就和本地数据库 lastReadId 一样，那表示无新动态，如果没有就开始计数，直到找到相等的 lastReadId 位置，记了多少数就表示有多少新动态。 </p><h3 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h3><p>列表、Sidebar 还有 macOS 系统的 Dock 上都可以显示新状态数的提醒。列表和 Sidebar 直接使用 .badge ViewModifier 就可以展示未读数了，效果如下： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/24.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/24.png"></p><p>Dock 栏提示设置需要用到系统的 NSApp，代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token class-name">NSApp</span><span class="token punctuation">.</span>dockTile<span class="token punctuation">.</span>showsApplicationBadge <span class="token operator">=</span> <span class="token boolean">true</span><span class="token class-name">NSApp</span><span class="token punctuation">.</span>dockTile<span class="token punctuation">.</span>badgeLabel <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/28.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/28.png"></p><p>小册子里还可以查看 Swift 社区里博主们博客更新动态。我接着跟你说说我怎么做的。 </p><h2 id="博客-RSS-更新动态"><a href="#博客-RSS-更新动态" class="headerlink" title="博客 RSS 更新动态"></a>博客 RSS 更新动态</h2><p>博客 RSS 的数据获取我在前面基础网络能力中已经说了。所有解析逻辑我都写在了工程 RSSReader&#x2F;Parser&#x2F; 目录下的 ParseStandXMLTagTokens.swift、ParseStandXMLTags.swift、ParseStandXML.swift 三个文件中，实现思路我在先前<a href="https://ming1016.github.io/2019/12/07/how-to-analyze-startup-time-cost-in-ios/">《如何对 iOS 启动阶段耗时进行分析》</a>文章的“优化后如何保持？”章节有详细说明。 </p><p>根据 RSS 的 XML 结构，定义 Model 结构如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">RSSModel</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> feedLink <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> siteLink <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> language <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> lastBuildDate <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> pubDate <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">RSSItemModel</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> unReadCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">RSSItemModel</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> guid <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> description <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> link <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> pubDate <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> isRead <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据这个结构，也会在本地数据库设计对应的两个表，两个表的增删改代码分别在 DBRSSFeed.swift 和 DBRSSItems.swift 里。表的结构和 Model 的结构基本一致，方便内存和磁盘进行切换。更新提醒逻辑和前面说的开发者动态更新逻辑区别在于，RSS 使用 isRead 标记有没有阅读过，直接在本地数据里 count 出 isRead 字段值为 false 的数量就是需要提醒的数。 </p><p>新 RSS 的添加会先在本地数据库中查找是否有存在，依据的是文章的 url，如果不存在就会添加到数据库中设置为未读作为提醒。 </p><p>RSS 里文章的内容是 HTML，显示内容使用的是 WebKit 库，要在 SwiftUI 中使用，需要封装下，代码如下： </p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> <span class="token class-name">WebKit</span><span class="token keyword">struct</span> <span class="token class-name">WebUIView</span> <span class="token punctuation">:</span> <span class="token class-name">NSViewRepresentable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> html<span class="token punctuation">:</span> <span class="token class-name">String</span>    <span class="token keyword">func</span> <span class="token function-definition function">makeNSView</span><span class="token punctuation">(</span>context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">some</span> <span class="token class-name">WKWebView</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">WKWebView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">updateNSView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> nsView<span class="token punctuation">:</span> <span class="token class-name">NSViewType</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nsView<span class="token punctuation">.</span><span class="token function">loadHTMLString</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> baseURL<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下图： </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/25.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/25.png"></p><h2 id="云打包"><a href="#云打包" class="headerlink" title="云打包"></a>云打包</h2><p>工程如果是本地编译，在 SwiftPamphletAppConfig.swift 的 gitHubAccessToken 中添上 token 就可以了，如果想快速打包使用小册子，使用 Github Action Workflow 编译，无需在本地操作、也无需开启 Xcode 设置个人开发帐号，只需设置 personal access token(PAT) 在 repository 设定中 action secrets，并命名为 PAT。Frok 此 repository，设置 PAT，手动启用 action，等候约3分钟即可下载档案，往后专案更新时，只需 fetch and merge，action 会自动进行。非常感谢社区 <a href="https://github.com/powenn">@powenn</a> 开发的这个 Github Action。 </p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/26.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/26.png"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/27.png" class="lozad post-image"src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/27.png"></p><h2 id="推荐可以学习的开源仓库"><a href="#推荐可以学习的开源仓库" class="headerlink" title="推荐可以学习的开源仓库"></a>推荐可以学习的开源仓库</h2><p>为了避免闭门造车，可以多关注些开源项目，以下这些仓库是我放在小册子里可以关注到更新动态的项目，这里作为附录列下，也可以直接在小册子里查看。除了 Swift 也有些非常有趣的项目，希望可以丰富到你的开发生活。 </p><h3 id="好库"><a href="#好库" class="headerlink" title="好库"></a>好库</h3><h4 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h4><ul><li><a href="https://github.com/apple/swift">swift</a></li><li><a href="https://github.com/apple/swift-evolution">swift-evolution</a> 提案 </li><li><a href="https://github.com/llvm/llvm-project">llvm-project</a> 编译器</li></ul><h4 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h4><ul><li><a href="https://github.com/SwiftOldDriver/iOS-Weekly">iOS-Weekly</a> 老司机 iOS 周报 </li><li><a href="https://github.com/matteocrippa/awesome-swift">awesome-swift</a></li><li><a href="https://github.com/ming1016/Brochure">Brochure</a> 戴铭的小册子</li></ul><h4 id="封装易用功能"><a href="#封装易用功能" class="headerlink" title="封装易用功能"></a>封装易用功能</h4><ul><li><a href="https://github.com/SwifterSwift/SwifterSwift">SwifterSwift</a> Handy Swift extensions</li></ul><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ul><li><a href="https://github.com/Alamofire/Alamofire">Alamofire</a></li><li><a href="https://github.com/socketio/socket.io-client-swift">socket.io-client-swift</a></li></ul><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><ul><li><a href="https://github.com/onevcat/Kingfisher">Kingfisher</a></li><li><a href="https://github.com/kean/Nuke">Nuke</a></li></ul><h4 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h4><ul><li><a href="https://github.com/gonzalezreal/MarkdownUI">MarkdownUI</a></li></ul><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><ul><li><a href="https://github.com/recherst/kavsoft-swiftui-animations">kavsoft-swiftui-animations</a></li></ul><h4 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h4><ul><li><a href="https://github.com/stephencelis/SQLite.swift">SQLite.swift</a></li><li><a href="https://github.com/groue/GRDB.swift">GRDB.swift</a></li><li><a href="https://github.com/realm/realm-cocoa">realm-cocoa</a></li></ul><h4 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h4><ul><li><a href="https://github.com/ReactiveX/RxSwift">RxSwift</a> 函数响应式编程 </li><li><a href="https://github.com/pointfreeco/swift-composable-architecture">swift-composable-architecture</a></li><li><a href="https://github.com/onmyway133/awesome-ios-architecture">awesome-ios-architecture</a></li></ul><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><ul><li><a href="https://github.com/pointfreeco/swiftui-navigation">swiftui-navigation</a></li></ul><h4 id="静态检查"><a href="#静态检查" class="headerlink" title="静态检查"></a>静态检查</h4><ul><li><a href="https://github.com/realm/SwiftLint">SwiftLint</a></li></ul><h4 id="系统能力"><a href="#系统能力" class="headerlink" title="系统能力"></a>系统能力</h4><ul><li><a href="https://github.com/kishikawakatsumi/KeychainAccess">KeychainAccess</a></li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><ul><li><a href="https://github.com/OAuthSwift/OAuthSwift">OAuthSwift</a></li><li><a href="https://github.com/p2/OAuth2">OAuth2</a></li></ul><h4 id="macOS程序"><a href="#macOS程序" class="headerlink" title="macOS程序"></a>macOS程序</h4><ul><li><a href="https://github.com/serhii-londar/open-source-mac-os-apps">open-source-mac-os-apps</a> 开源 macOS 程序合集 </li><li><a href="https://github.com/Ranchero-Software/NetNewsWire">NetNewsWire</a></li><li><a href="https://github.com/overtake/TelegramSwift">TelegramSwift</a></li></ul><h4 id="性能和工程构建"><a href="#性能和工程构建" class="headerlink" title="性能和工程构建"></a>性能和工程构建</h4><ul><li><a href="https://github.com/tuist/tuist">tuist</a> 创建和维护 Xcode projects 文件 </li><li><a href="https://github.com/swift-server/vscode-swift">vscode-swift</a> VSCode 的 Swift 扩展</li></ul><h4 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h4><ul><li><a href="https://github.com/iina/iina">iina</a></li><li><a href="https://github.com/shogo4405/HaishinKit.swift">HaishinKit.swift</a> RTMP, HLS </li><li><a href="https://github.com/AudioKit/AudioKit">AudioKit</a></li></ul><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><ul><li><a href="https://github.com/vapor/vapor">vapor</a></li></ul><h3 id="探索库"><a href="#探索库" class="headerlink" title="探索库"></a>探索库</h3><h4 id="SwiftUI扩展"><a href="#SwiftUI扩展" class="headerlink" title="SwiftUI扩展"></a>SwiftUI扩展</h4><ul><li><a href="https://github.com/SwiftUIX/SwiftUIX">SwiftUIX</a> 扩展 SwiftUI </li><li><a href="https://github.com/SDWebImage/SDWebImageSwiftUI">SDWebImageSwiftUI</a></li><li><a href="https://github.com/apptekstudios/ASCollectionView">ASCollectionView</a> SwiftUI collection </li><li><a href="https://github.com/siteline/SwiftUI-Introspect">SwiftUI-Introspect</a> SwiftUI 引入 UIKit </li><li><a href="https://github.com/AvdLee/SwiftUIKitView">SwiftUIKitView</a> 在 SwiftUI 中 使用 UIKit</li></ul><h4 id="接口应用"><a href="#接口应用" class="headerlink" title="接口应用"></a>接口应用</h4><ul><li><a href="https://github.com/bpisano/Weather">Weather</a> 天气应用 </li><li><a href="https://github.com/Dimillian/MovieSwiftUI">MovieSwiftUI</a> 电影 MovieDB 应用 </li><li><a href="https://github.com/chojnac/NotionSwift">NotionSwift</a></li><li><a href="https://github.com/Dimillian/RedditOS">RedditOS</a> SwiftUI 写的 Reddit客户端 </li><li><a href="https://github.com/carson-katri/reddit-swiftui">reddit-swiftui</a> SwiftUI 写的 Reddit客户端 </li><li><a href="https://github.com/Dimillian/SwiftHN">SwiftHN</a> Hacker News 阅读 </li><li><a href="https://github.com/tatsuz0u/EhPanda">EhPanda</a></li><li><a href="https://github.com/Dimillian/MortyUI">MortyUI</a> GraphQL + SwiftUI 开发的瑞克和莫蒂应用 </li><li><a href="https://github.com/Finb/V2ex-Swift">V2ex-Swift</a> V2EX 客户端 </li><li><a href="https://github.com/v2er-app/iOS">iOS</a> V2EX 客户端 </li><li><a href="https://github.com/sinaweibosdk/weibo_ios_sdk">weibo_ios_sdk</a></li><li><a href="https://github.com/miniLV/MNWeibo">MNWeibo</a> Swift5 + MVVM 微博客户端 </li><li><a href="https://github.com/nerdishbynature/octokit.swift">octokit.swift</a> Swift API Client for GitHub </li><li><a href="https://github.com/GitHawkApp/GitHawk">GitHawk</a> iOS app for GitHub </li><li><a href="https://github.com/fangzesheng/free-api">free-api</a></li><li><a href="https://github.com/nerdsupremacist/Graphaello">Graphaello</a> SwiftUI 中使用 GraphQL 的工具 </li><li><a href="https://github.com/nerdsupremacist/tmdb">tmdb</a> GraphQL 包装电影数据接口</li></ul><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><ul><li><a href="https://github.com/eonist/FileWatcher">FileWatcher</a> macOS 上监听文件变化 </li><li><a href="https://github.com/waylybaye/XcodeCleaner-SwiftUI">XcodeCleaner-SwiftUI</a> 清理 Xcode </li><li><a href="https://github.com/gao-sun/eul">eul</a> SwiftUI 写的 macOS 状态监控工具 </li><li><a href="https://github.com/Dimillian/ACHNBrowserUI">ACHNBrowserUI</a> SwiftUI 写的动物之森小助手程序 </li><li><a href="https://github.com/lexrus/RegExPlus">RegExPlus</a> 正则表达式</li></ul><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li><a href="https://github.com/vinhnx/Clendar">Clendar</a> SwiftUI 写的日历应用</li></ul><h4 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h4><ul><li><a href="https://github.com/pointfreeco/isowords">isowords</a> 单词搜索游戏 </li><li><a href="https://github.com/michelpereira/awesome-games-of-coding">awesome-games-of-coding</a> 教你学编程的游戏收集 </li><li><a href="https://github.com/OpenEmu/OpenEmu">OpenEmu</a> 视频游戏模拟器 </li><li><a href="https://github.com/jVirus/swiftui-2048">swiftui-2048</a></li><li><a href="https://github.com/chrismaltby/gb-studio">gb-studio</a> 拖放式复古游戏创建器</li></ul><h4 id="新技术展示"><a href="#新技术展示" class="headerlink" title="新技术展示"></a>新技术展示</h4><ul><li><a href="https://github.com/JakeLin/Moments-SwiftUI">Moments-SwiftUI</a> SwiftUI、Async、Actor</li></ul><h4 id="新鲜事-1"><a href="#新鲜事-1" class="headerlink" title="新鲜事"></a>新鲜事</h4><ul><li><a href="https://github.com/ruanyf/weekly">weekly</a> 科技爱好者周刊</li></ul><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><ul><li><a href="https://github.com/timqian/chinese-independent-blogs">chinese-independent-blogs</a></li><li><a href="https://github.com/vlondon/awesome-swiftui">awesome-swiftui</a></li><li><a href="https://github.com/ivanvorobei/SwiftUI">SwiftUI</a></li><li><a href="https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts">GitHub-Chinese-Top-Charts</a> GitHub中文排行榜 </li><li><a href="https://github.com/onmyway133/awesome-swiftui">awesome-swiftui</a></li><li><a href="https://github.com/Juanpe/About-SwiftUI">About-SwiftUI</a> 汇总 SwiftUI 的资料</li></ul><h4 id="知识管理"><a href="#知识管理" class="headerlink" title="知识管理"></a>知识管理</h4><ul><li><a href="https://github.com/logseq/logseq">logseq</a> 更好的知识管理工具</li></ul><h4 id="性能和工程构建-1"><a href="#性能和工程构建-1" class="headerlink" title="性能和工程构建"></a>性能和工程构建</h4><ul><li><a href="https://github.com/peripheryapp/periphery">periphery</a> 检测 Swift 无用代码 </li><li><a href="https://github.com/nalexn/ViewInspector">ViewInspector</a> SwiftUI Runtime introspection 和 单元测试</li></ul><h4 id="网络-1"><a href="#网络-1" class="headerlink" title="网络"></a>网络</h4><ul><li><a href="https://github.com/Lojii/Knot">Knot</a> 使用 SwiftNIO 实现 HTTPS 抓包 </li><li><a href="https://github.com/swift-server/async-http-client">async-http-client</a> 使用 SwiftNIO 开发的 HTTP 客户端 </li><li><a href="https://github.com/kean/Get">Get</a></li><li><a href="https://github.com/awesome-selfhosted/awesome-selfhosted">awesome-selfhosted</a> 网络服务及上面的应用 </li><li><a href="https://github.com/daltoniam/Starscream">Starscream</a> WebSocket </li><li><a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG</a></li><li><a href="https://github.com/carson-katri/swift-request">swift-request</a> 声明式的网络请求</li></ul><h4 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h4><ul><li><a href="https://github.com/lludo/SwiftSunburstDiagram">SwiftSunburstDiagram</a> SwiftUI 图表</li></ul><h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><ul><li><a href="https://github.com/spevans/swift-project1">swift-project1</a> Swift编写内核，可在 Mac 和 PC 启动</li></ul><h4 id="Apple"><a href="#Apple" class="headerlink" title="Apple"></a>Apple</h4><ul><li><a href="https://github.com/apple/swift-corelibs-foundation">swift-corelibs-foundation</a></li><li><a href="https://github.com/apple/swift-package-manager">swift-package-manager</a></li><li><a href="https://github.com/apple/swift-markdown">swift-markdown</a></li><li><a href="https://github.com/apple/sourcekit-lsp">sourcekit-lsp</a></li><li><a href="https://github.com/apple/swift-nio">swift-nio</a></li><li><a href="https://github.com/apple/swift-syntax">swift-syntax</a> 解析、生成、转换 Swift 代码 </li><li><a href="https://github.com/apple/swift-crypto">swift-crypto</a> CryptoKit 的开源实现</li></ul><h4 id="待分类"><a href="#待分类" class="headerlink" title="待分类"></a>待分类</h4><ul><li><a href="https://github.com/public-apis/public-apis">public-apis</a></li><li><a href="https://github.com/insidegui/WWDC">WWDC</a></li><li><a href="https://github.com/sindresorhus/Actions">Actions</a></li><li><a href="https://github.com/trimstray/the-book-of-secret-knowledge">the-book-of-secret-knowledge</a></li><li><a href="https://github.com/rossant/awesome-math">awesome-math</a></li><li><a href="https://github.com/rakutentech/AltSwiftUI">AltSwiftUI</a> 类 SwiftUI </li><li><a href="https://github.com/gymshark/ios-stack-kit">ios-stack-kit</a> 类 SwiftUI </li><li><a href="https://github.com/OpenCombine/OpenCombine">OpenCombine</a> Combine 的开源实现 </li><li><a href="https://github.com/CombineCommunity/CombineExt">CombineExt</a> 对 Combine 的补充 </li><li><a href="https://github.com/ReSwift/ReSwift">ReSwift</a> 单页面状态和数据管理 </li><li><a href="https://github.com/devicekit/DeviceKit">DeviceKit</a> UIDevice 易用封装 </li><li><a href="https://github.com/ivanschuetz/SwiftCharts">SwiftCharts</a></li><li><a href="https://github.com/nvzqz/FileKit">FileKit</a> 文件操作 </li><li><a href="https://github.com/JohnSundell/Files">Files</a> 文件操作 </li><li><a href="https://github.com/kylef/PathKit">PathKit</a> 文件操作 </li><li><a href="https://github.com/JohnSundell/Publish">Publish</a> 静态站点生成器 </li><li><a href="https://github.com/caiyue1993/IceCream">IceCream</a> CloudKit 同步 Realm 数据库 </li><li><a href="https://github.com/tophat/RichTextView">RichTextView</a></li><li><a href="https://github.com/tnantoka/edhita">edhita</a></li><li><a href="https://github.com/keitaoouchi/MarkdownView">MarkdownView</a></li><li><a href="https://github.com/johnxnguyen/Down">Down</a> fast Markdown </li><li><a href="https://github.com/qeude/SwiftDown">SwiftDown</a> Swift 写的可换主题的 Markdown 编辑器组件 </li><li><a href="https://github.com/shibapm/Komondor">Komondor</a> Git Hooks for Swift projects </li><li><a href="https://github.com/SwiftGen/SwiftGen">SwiftGen</a> 代码生成 </li><li><a href="https://github.com/kasketis/netfox">netfox</a> 获取所有网络请求 </li><li><a href="https://github.com/BohdanOrlov/iOS-Developer-Roadmap">iOS-Developer-Roadmap</a></li><li><a href="https://github.com/kickstarter/ios-oss">ios-oss</a></li><li><a href="https://github.com/wordpress-mobile/WordPress-iOS">WordPress-iOS</a></li><li><a href="https://github.com/josejuanqm/VersaPlayer">VersaPlayer</a></li><li><a href="https://github.com/mozilla-mobile/firefox-ios">firefox-ios</a></li><li><a href="https://github.com/PostgresApp/PostgresApp">PostgresApp</a></li><li><a href="https://github.com/Moya/Moya">Moya</a></li><li><a href="https://github.com/Kitura/BlueSocket">BlueSocket</a></li><li><a href="https://github.com/rhummelmose/BluetoothKit">BluetoothKit</a></li><li><a href="https://github.com/rushisangani/BiometricAuthentication">BiometricAuthentication</a> FaceID or TouchID authentication </li><li><a href="https://github.com/krzyzanowskim/CryptoSwift">CryptoSwift</a></li><li><a href="https://github.com/timdonnelly/Advance">Advance</a> Physics-based animations </li><li><a href="https://github.com/MengTo/Spring">Spring</a> 动画 </li><li><a href="https://github.com/jathu/UIImageColors">UIImageColors</a> 获取图片主次颜色 </li><li><a href="https://github.com/BradLarson/GPUImage3">GPUImage3</a> Metal 实现 </li><li><a href="https://github.com/exyte/Macaw">Macaw</a> SVG </li><li><a href="https://github.com/efremidze/Magnetic">Magnetic</a> SpriteKit气泡支持SwiftUI </li><li><a href="https://github.com/analogcode/Swift-Radio-Pro">Swift-Radio-Pro</a> 电台应用 </li><li><a href="https://github.com/suzuki-0000/SKPhotoBrowser">SKPhotoBrowser</a> 图片浏览 </li><li><a href="https://github.com/raywenderlich/swift-algorithm-club">swift-algorithm-club</a></li><li><a href="https://github.com/hyperoslo/Cache">Cache</a></li><li><a href="https://github.com/sunshinejr/SwiftyUserDefaults">SwiftyUserDefaults</a></li><li><a href="https://github.com/MonitorControl/MonitorControl">MonitorControl</a> 亮度和声音控制 </li><li><a href="https://github.com/kylef/Commander">Commander</a> 命令行 </li><li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a></li><li><a href="https://github.com/Carthage/Carthage">Carthage</a></li><li><a href="https://github.com/danielgindi/Charts">Charts</a></li><li><a href="https://github.com/Quick/Quick">Quick</a> 测试框架 </li><li><a href="https://github.com/bilibili/ijkplayer">ijkplayer</a> 播放器 </li><li><a href="https://github.com/schellingb/dosbox-pure">dosbox-pure</a> DOS 游戏模拟器 </li><li><a href="https://github.com/twostraws/HackingWithSwift">HackingWithSwift</a> 示例代码 </li><li><a href="https://github.com/glushchenko/fsnotes">fsnotes</a></li><li><a href="https://github.com/coteditor/CotEditor">CotEditor</a></li><li><a href="https://github.com/JoanKing/JKSwiftExtension">JKSwiftExtension</a> Swift常用扩展、组件、协议 </li><li><a href="https://github.com/infinum/iOS-Nuts-And-Bolts">iOS-Nuts-And-Bolts</a></li><li><a href="https://github.com/gtokman/ExtensionKit">ExtensionKit</a></li><li><a href="https://github.com/johnsundell/publish">publish</a> 用 swift 来写网站 </li><li><a href="https://github.com/mehdihadeli/awesome-software-architecture">awesome-software-architecture</a> 软件架构 </li><li><a href="https://github.com/NARKOZ/hacker-scripts">hacker-scripts</a> 程序员的活都让机器干的脚本（真实故事） </li><li><a href="https://github.com/nalexn/clean-architecture-swiftui">clean-architecture-swiftui</a> 干净完整的SwiftUI+Combine例子，包含网络和单元测试等 </li><li><a href="https://github.com/carekit-apple/CareKit">CareKit</a> 使用 SwiftUI 开发健康相关的库 </li><li><a href="https://github.com/carson-katri/awesome-result-builders">awesome-result-builders</a> Result Builders </li><li><a href="https://github.com/Cay-Zhang/SwiftSpeech">SwiftSpeech</a> 苹果语言识别封装库，已适配 SwiftUI </li><li><a href="https://github.com/NextLevel/NextLevel">NextLevel</a> 相机 </li><li><a href="https://github.com/Harley-xk/MaLiang">MaLiang</a> 基于 Metal 的涂鸦绘图库 </li><li><a href="https://github.com/chaozh/awesome-blockchain-cn">awesome-blockchain-cn</a> 区块链 awesome </li><li><a href="https://github.com/RobotsAndPencils/XcodesApp">XcodesApp</a> Xcode 多版本安装 </li><li><a href="https://github.com/WeTransfer/Mocker">Mocker</a> Mock Alamofire and URLSession </li><li><a href="https://github.com/gre4ixin/ReduxUI">ReduxUI</a> SwiftUI Redux 架构 </li><li><a href="https://github.com/ZeeZide/5GUIs">5GUIs</a> 可以分析程序用了哪些库，用了LLVM objdump </li><li><a href="https://github.com/pointfreeco/episode-code-samples">episode-code-samples</a></li><li><a href="https://github.com/SwiftPackageIndex/PackageList">PackageList</a></li><li><a href="https://github.com/sindresorhus/awesome">awesome</a> 内容广 </li><li><a href="https://github.com/dkhamsing/open-source-ios-apps">open-source-ios-apps</a> 开源的完整 App 例子 </li><li><a href="https://github.com/frzi/Model3DView">Model3DView</a> 毫不费力的使用 SwiftUI 渲染 3d models </li><li><a href="https://github.com/faisalmemon/ios-crash-dump-analysis-book">ios-crash-dump-analysis-book</a> iOS Crash Dump Analysis Book </li><li><a href="https://github.com/exyte/SVGView">SVGView</a> 支持 SwiftUI 的 SVG 解析渲染视图 </li><li><a href="https://github.com/krzysztofzablocki/Sourcery">Sourcery</a> Swift 元编程 </li><li><a href="https://github.com/jessesquires/TIL">TIL</a> 学习笔记 </li><li><a href="https://github.com/majd/ipatool">ipatool</a> 下载 ipa </li><li><a href="https://github.com/JohnSundell/Ink">Ink</a> Markdown 解析器</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;先说两句废话（Don’t-blame-me-about-my-calculation）&quot;&gt;&lt;a href=&quot;#先说两句废话（Don’t-blame-me-about-my-calculation）&quot; class=&quot;headerlink&quot; title=&quot;先说两句废话
      
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
      <category term="macOS" scheme="http://ming1016.github.io/tags/macOS/"/>
    
      <category term="Combine" scheme="http://ming1016.github.io/tags/Combine/"/>
    
      <category term="SwiftUI" scheme="http://ming1016.github.io/tags/SwiftUI/"/>
    
      <category term="Concurrency" scheme="http://ming1016.github.io/tags/Concurrency/"/>
    
  </entry>
  
</feed>
