<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>戴铭的博客 - 星光社</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ming1016.github.io/"/>
  <updated>2022-02-10T10:28:06.045Z</updated>
  <id>http://ming1016.github.io/</id>
  
  <author>
    <name>戴铭</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift 演进之路</title>
    <link href="http://ming1016.github.io/2022/02/10/swift-evolutionary-path/"/>
    <id>http://ming1016.github.io/2022/02/10/swift-evolutionary-path/</id>
    <published>2022-02-10T10:28:39.000Z</published>
    <updated>2022-02-10T10:28:06.045Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要是对<a href="https://ming1016.github.io/2021/05/22/acfun-swift-practice/">《A站 的 Swift 实践》</a>文章中的一幅配图做了详细的扩展，能够更加全面和详细了解 Swift 语言的发展，文章中提到的 Swift 各版本的语法示例代码，及本文内容都可以在 <a href="https://github.com/KwaiAppTeam/SwiftPamphletApp">Swift 小册子</a>里对应栏目里找到，这个假期我也对 Swift 小册子里栏目内容进行了些更新和补充。《A站 的 Swift 实践》文章的那个演进配图如下：</p>
<p><img src="/uploads/swift-evolutionary-path/01.png" alt=""></p>
<p>文章内容如下：</p>
<p><em>Swift 1.1</em></p>
<ul>
<li>countElements() 改成了 count()。</li>
<li>@NSApplicationMain 可以在 macOS 上使用。</li>
</ul>
<p><em>Swift 1.2</em></p>
<ul>
<li>引入 Set 类型。</li>
<li>if let 可以放到一起，使用逗号分隔。</li>
<li>新增 zip() 和 flatMap()。</li>
<li>类增加静态方法和静态属性，使用 static 关键字描述。</li>
<li>as! 用于类型强转，失败会崩溃。</li>
<li>@noescape 用于描述作为参数闭包，用来告诉 Swift 闭包将在函数返回前使用。</li>
<li>常量可以延后初始化。</li>
</ul>
<p><em>Swift 2.0</em></p>
<ul>
<li>增加 guard 关键字，用于解可选项值。</li>
<li>defer 关键字用来延迟执行，即使抛出错误了都会在最后执行。</li>
<li>ErrorType 协议，以及 throws、do、try 和 catch 的引入用来处理错误。</li>
<li>characters 加上 count，用来替代 count()。</li>
<li>#available 用来检查系统版本。</li>
</ul>
<p><em>Swift 2.1</em></p>
<ul>
<li>字符串插值可以包含字符串字面符号。</li>
</ul>
<p><em>Swift 2.2</em></p>
<ul>
<li><strong>FILE</strong>, <strong>LINE</strong> 和 <strong>FUNCTION</strong> 换成 #file，#line 和 #function。</li>
<li>废弃 ++ 和 – 操作符。</li>
<li>C 语言风格 for 循环废弃。</li>
<li>废弃变量参数，因为变量参数容易和 inout 搞混。</li>
<li>废弃字符串化的选择器，选择器不再能写成字符串了。</li>
<li>元组可直接比较是否相等。</li>
</ul>
<p><em>Swift 3.0</em></p>
<ul>
<li>规范动词和名词来命名。</li>
<li>去掉 NS 前缀。</li>
<li>方法名描述参数部分变为参数名。</li>
<li>省略没必要的单词，命名做了简化呢。比如 stringByTrimmingCharactersInSet 就换成了 trimmingCharacters。</li>
<li>枚举的属性使用小写开头。</li>
<li>引入 C 函数的属性。</li>
</ul>
<p><em>Swift 3.1</em></p>
<ul>
<li>序列新增 prefix(while:) 和 drop(while:) 方法，顺序遍历执行闭包里的逻辑判断，满足条件就返回，遇到不匹配就会停止遍历。prefix 返回满足条件的元素集合，drop 返回停止遍历之后那些元素集合。</li>
<li>泛型适用于嵌套类型。</li>
<li>类型的扩展可以使用约束条件，比如扩展数组时，加上元素为整数的约束，这样的扩展就只会对元素为整数的数组有效。</li>
</ul>
<p><em>Swift 4.0</em></p>
<ul>
<li>加入 Codable 协议，更 Swifty 的编码和解码。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0167-swift-encoders.md">SE-0167 Swift Encoders</a></li>
<li>字符串加入三个双引号的支持，让多行字符串编写更加直观。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0168-multi-line-string-literals.md">SE-0168 Multi-Line String Literals</a></li>
<li>字符串变成集合，表示可以对字符串进行逐字遍历、map 和反转等操作。</li>
<li>keypaths 语法提升。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0161-key-paths.md">SE-0161 Smart KeyPaths: Better Key-Value Coding for Swift</a></li>
<li>集合加入 ..&lt;10 这样语法的单边切片。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0172-one-sided-ranges.md">SE-0172 One-sided Ranges</a></li>
<li>字典新增 mapValues，可 map 字典的值。通过 grouping 可对字典进行分组生成新字典，键和值都可以。从字典中取值，如果键对应无值，则使用通过 default 指定的默认值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md">SE-0165 Dictionary &amp; Set Enhancements</a></li>
</ul>
<p><em>Swift 4.1</em></p>
<ul>
<li>Hashable 也不需要返回一个唯一的 hashValue 哈希值属性。</li>
<li>Equatable 和 Hashable 自动合成的提案参见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md">SE-0185 Synthesizing Equatable and Hashable conformance</a>。</li>
<li>两个自定类型比较是否相等时，不再需要比较每个属性，Swift 会自动生成 == 方法，你只需要声明 Equatable 协议。</li>
<li>引入 KeyDecodingStrategy属性，其中 .convertFromSnakeCase 可以将下划线的命名转化成驼峰的命名。</li>
<li>引入条件符合性，只有满足一定条件才符合协议。比如扩展数组要求当里面元素满足某协议数组才符合这个协议。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md">SE-0143 Conditional conformances</a>。</li>
<li>引入 canImport 宏条件关键字，判断是否可以使用某库，以前只能通过判断操作系统平台来判断。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md">SE-0075 Adding a Build Configuration Import Test</a>。</li>
<li>新增能够去除为零项目的 compactMap()。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0187-introduce-filtermap.md">SE-0187 Introduce Sequence.compactMap(_:)</a></li>
<li>关联类型可以创建递归约束，提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0157-recursive-protocol-constraints.md">SE-0157 Support recursive constraints on associated types</a></li>
<li>targetEnvironment 环境的判断，比如模拟器。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0190-target-environment-platform-condition.md">SE-0190 Target environment platform condition</a> 。</li>
</ul>
<p><em>Swift 4.2</em></p>
<ul>
<li>新增动态成员查询，@dynamicMemberLookup 新属性，指示访问属性时调用一个已实现的处理动态查找的下标方法 subscript(dynamicMemeber:)，通过指定属性字符串名返回值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md">SE-0195 Introduce User-defined “Dynamic Member Lookup” Types</a></li>
<li>集合新加 removeAll(where:) 方法，过滤满足条件所有元素。比 filter 更高效。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0197-remove-where.md">SE-0197 Adding in-place removeAll(where:) to the Standard Library</a></li>
<li>布尔值增加 toggle() 方法，用来切换布尔值。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0199-bool-toggle.md">SE-0199 Adding toggle to Bool</a></li>
<li>引入 CaseIterable 协议，可以将枚举中所有 case 生成 allCases 数组。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0194-derived-collection-of-enum-cases.md">SE-0194 Derived Collection of Enum Cases</a></li>
<li>引入 #warning 和 #error 两个新的编译器指令。#warning 会产生一个警告，#error 会直接让编译出错。比如必须要填写 token 才能编译的话可以在设置 token 的代码前加上 #error 和说明。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0196-diagnostic-directives.md">SE-0196 Compiler Diagnostic Directives</a></li>
<li>新增加密安全的随机 API。直接在数字类型上调用 random() 方法生成随机数。shuffle() 方法可以对数组进行乱序重排。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md">SE-0202 Random Unification</a></li>
<li>更简单更安全的哈希协议，引入新的 Hasher 结构，通过 combine() 方法为哈希值添加更多属性，调用 finalize() 方法生成最终哈希值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0206-hashable-enhancements.md">SE-0206 Hashable Enhancements</a></li>
<li>集合增加 allSatisfy() 用来判断集合中的元素是否都满足了一个条件。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0207-containsOnly.md">SE-0207 Add an allSatisfy algorithm to Sequence</a></li>
</ul>
<p><em>Swift 5.0</em></p>
<ul>
<li>@dynamicCallable 动态可调用类型。通过实现 dynamicallyCall 方法来定义变参的处理。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md">SE-0216 Introduce user-defined dynamically “callable” types</a></li>
<li>新加 Result 类型用来处理错误。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md">SE-0235 Add Result to the Standard Library</a></li>
<li>新增原始字符串能力，在字符串前加上一个或多个#符号。里面的双引号和转义符号将不再起作用了，如果想让转义符起作用，需要在转义符后面加上#符号。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md">SE-0200 Enhancing String Literals Delimiters to Support Raw Text</a></li>
<li>自定义字符串插值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md">SE-0228 Fix ExpressibleByStringInterpolation</a></li>
<li>枚举新增 @unknown 用来区分固定的枚举和可能改变的枚举的能力。用于防止未来新增枚举属性会进行提醒提示完善每个 case 的处理。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md">SE-0192 Handling Future Enum Cases</a></li>
<li>compactMapValues() 对字典值进行转换和解包。可以解可选类型，并去掉 nil 值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0218-introduce-compact-map-values.md">SE-0218 Introduce compactMapValues to Dictionary</a></li>
<li>扁平化 try?。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0230-flatten-optional-try.md">SE-0230 Flatten nested optionals resulting from ‘try?’</a></li>
<li>isMultiple(of:) 方法检查一个数字是否是另一个数字的倍数。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0225-binaryinteger-iseven-isodd-ismultiple.md">SE-0225 Adding isMultiple to BinaryInteger</a></li>
</ul>
<p><em>Swift 5.1</em></p>
<ul>
<li>有序集合的 diff，通过 difference(from:) 方法，可以返回要删除哪些和添加哪些项目能够让两个集合相等。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0240-ordered-collection-diffing.md">SE-0240 Ordered Collection Diffing</a></li>
<li>属性包装。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0258-property-wrappers.md">SE-0258 Property Wrappers</a></li>
<li>不透明返回类型。函数调用者决定返回什么类型是泛型，函数自身决定返回什么类型使用不透明返回类型。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md">SE-0244 Opaque Result Types</a></li>
<li>初始化有默认值的属性可不设置。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0242-default-values-memberwise.md">SE-0242 Synthesize default values for the memberwise initializer</a></li>
<li>单行表达式函数隐式返回，返回一个单行表达式的函数可以不用 return 关键字。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0255-omit-return.md">SE-0255 Implicit returns from single-expression functions</a></li>
<li>在类、结构体和枚举里使用 Self，Self 可以指代包含的类型。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md">SE-0068 Expanding Swift Self to class members and value types</a></li>
<li>静态下标。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0254-static-subscripts.md">SE-0254 Static and class subscripts</a></li>
<li>枚举里有 none 的 case 编译器会提示换成 Optional.none。</li>
<li>引入未初始化数组。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0245-array-uninitialized-initializer.md">SE-0245 Add an Array Initializer with Access to Uninitialized Storage</a></li>
</ul>
<p><em>Swift 5.2</em></p>
<ul>
<li>自定义类型中实现了 callAsFunction() 的话，该类型的值就可以直接调用。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0253-callable.md">SE-0253 Callable values of user-defined nominal types</a></li>
<li>键路径表达式作为函数。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0249-key-path-literal-function-expressions.md">SE-0249 Key Path Expressions as Functions</a></li>
</ul>
<p><em>Swift 5.3</em></p>
<ul>
<li>SPM 包管理资源，SPM 可以包含资源文件，比如多媒体或文本等。通过 Bundle.module 访问这些资源。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0271-package-manager-resources.md">SE-0271 Package Manager Resources</a></li>
<li>SPM 包里资源本地化。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0278-package-manager-localized-resources.md">SE-0278 Package Manager Localized Resources</a></li>
<li>SPM 可以整合二进制包依赖。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0272-swiftpm-binary-dependencies.md">SE-0272 Package Manager Binary Dependencies</a></li>
<li>SPM 可以设置特定平台的依赖。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0273-swiftpm-conditional-target-dependencies.md">SE-0273 Package Manager Conditional Target Dependencies</a></li>
<li>单个 catch 块中捕获多个 Error 的 case。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0276-multi-pattern-catch-clauses.md">SE-0276 Multi-Pattern Catch Clauses</a></li>
<li>支持多个尾部闭包。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0279-multiple-trailing-closures.md">SE-0279 Multiple Trailing Closures</a></li>
<li>符合 Comparable 协议的枚举可以进行比较。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0266-synthesized-comparable-for-enumerations.md">SE-0266 Synthesized Comparable conformance for enum types</a></li>
<li>很多地方可以不用加 self 来指代实例自己了。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0269-implicit-self-explicit-capture.md">SE-0269 Increase availability of implicit self in @escaping closures when reference cycles are unlikely to occur</a></li>
<li>@main 可以方便指定程序入口点。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0281-main-attribute.md">SE-0281 @main: Type-Based Program Entry Points</a></li>
<li>where 子句可以用到泛型和扩展函数中。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0267-where-on-contextually-generic.md">SE-0267 where clauses on contextually generic declarations</a></li>
<li>枚举的 case 也可以符合协议。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0280-enum-cases-as-protocol-witnesses.md">SE-0280 Enum cases as protocol witnesses</a></li>
<li>完善 didSet，性能提升。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0268-didset-semantics.md">SE-0268 Refine didSet Semantics</a></li>
<li>新增 Float16 类型，即半精度浮点类型。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0277-float16.md">SE-0277 Float16</a></li>
</ul>
<p><em>Swift 5.4</em></p>
<ul>
<li>SPM 支持 @main。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0294-package-executable-targets.md">SE-0294 Declaring executable targets in Package Manifests</a></li>
<li>结果生成器（Result builders），通过传递序列创建新值，SwiftUI就是使用的结果生成器将多个视图生成一个视图。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md">SE-0289 Result builders</a></li>
<li>增强隐式成员语法，即使用了隐式的成员可以进行链式处理。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0287-implicit-member-chains.md">SE-0287 Extend implicit member syntax to cover chains of member references</a></li>
<li>函数开始有了使用多个变量参数的能力。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0284-multiple-variadic-parameters.md">SE-0284 Allow Multiple Variadic Parameters in Functions, Subscripts, and Initializers</a></li>
<li>嵌套函数可以重载，嵌套函数可以在声明函数之前调用他。</li>
<li>属性包装支持局部变量。</li>
</ul>
<p><em>Swift 5.5</em></p>
<ul>
<li>Async await，用同步写法来处理异步。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296 Async/await</a></li>
<li>Async sequences，异步序列上的循环能力。符合 AsyncSequence 协议的序列可以通过 for await 来进行异步循环。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298 Async/Await: Sequences</a> </li>
<li>结构化的并发，使用 Task 和 TaskGroup 执行、取消和监听当前操作的方法。复杂的并发处理可以使用 withTaskGroup() 来创建一组 Task，addTask() 用来添加任务，cancelAll() 可以取消任务，addTask() 在取消任务后可以继续添加任务，如果使用了 addTaskUnlessCancelled() 方法就可以避免取消后会继续添加任务这种情况。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304 Structured concurrency</a></li>
<li>只读属性支持 async 和 throws 关键字。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0310-effectful-readonly-properties.md">SE-0310 Effectful Read-only Properties</a></li>
<li>async let，可以创建 await 子任务。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0317-async-let.md">SE-0317 async let bindings</a></li>
<li>以前异步代码的适配。比如 DispatchQueue.main.async，外部库可以通过 withCheckedContinuation() 函数来对以前异步代码进行封装。 提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">SE-0300 Continuations for interfacing async tasks with synchronous code</a></li>
<li>Actor，可以确保内部只能被一个线程访问，避免存储属性和方法出现竞争条件。提案在这 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306 Actors</a></li>
<li>全局 actors，通过 actor 将全局状态隔离出来，避免数据竞争。比如主线程 @MainActor 这个属性包装可以将属性和方法标记为只能在主线程上访问。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0316-global-actors.md">SE-0316 Global actors</a></li>
<li>Sendable 协议和 @Sendable 属性包装，目的是支持安全的将数据从一个线程传给另一个线程。Swift 的核心数据类型比如字符、集合等已符合 Sendable 协议。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0302-concurrent-value-and-concurrent-closures.md">SE-0302 Sendable and @Sendable closures</a></li>
<li>局部变量可以使用 lazy。</li>
<li>属性包装可以用到函数和闭包参数上。提案<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0293-extend-property-wrappers-to-function-and-closure-parameters.md">SE-0293 Extend Property Wrappers to Function and Closure Parameters</a></li>
<li>泛型支持静态成员查找。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0299-extend-generic-static-member-lookup.md">SE-0299 Extending Static Member Lookup in Generic Contexts</a></li>
<li>#if 用于后缀成员表达式。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0308-postfix-if-config-expressions.md">SE-0308 #if for postfix member expressions</a></li>
<li>CGFloat 和 Double 之间可以隐式转换。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0307-allow-interchangeable-use-of-double-cgfloat-types.md">SE-0307 Allow interchangeable use of CGFloat and Double types</a></li>
<li>Codable 支持关联值枚举。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0295-codable-synthesis-for-enums-with-associated-values.md">SE-0295 Codable synthesis for enums with associated values</a></li>
</ul>
<p>上面各个版本的语法更新的内容和更多代码的示例都可以在 Swift 小册子里查看，内容力求更全，描述力求更简洁，more big, more small。不想下载 app 也可以查看<a href="https://ming1016.github.io/2021/11/23/daiming-swift-pamphlet/">《戴铭的 Swift 小册子4.0》</a>这篇，内容也同步做了更新和补充。我对小册子内容查看样式视觉做了更新，排版用了赫蹏（hètí），字体是霞鹜文楷，更新了代码高亮风格，内容看起来更舒服。还有 icon 也进行替换，不用再对着枯燥的 SFSymbol 和我先前临时从以前图里随便挑的那条小狗 App icon 看了。</p>
<p><img src="/uploads/swift-evolutionary-path/02.png" alt=""><br><img src="/uploads/swift-evolutionary-path/03.png" alt=""></p>
<p>另</p>
<p>小册子现在可以直接下载 dmg 使用了，4.1下载地址：<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp/files/8040117/Swift.4.1.dmg.zip">戴铭的Swift小册子4.1.dmg.zip</a></p>
<p><img src="/uploads/swift-evolutionary-path/04.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要是对&lt;a href=&quot;https://ming1016.github.io/2021/05/22/acfun-swift-practice/&quot;&gt;《A站 的 Swift 实践》&lt;/a&gt;文章中的一幅配图做了详细的扩展，能够更加全面和详细了解 Swift 语言的发展，文章
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>如何用 SwiftUI + Combine + Swift Concurrency Aysnc/Await Actor 欢畅开发</title>
    <link href="http://ming1016.github.io/2022/01/03/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/"/>
    <id>http://ming1016.github.io/2022/01/03/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/</id>
    <published>2022-01-03T03:53:21.000Z</published>
    <updated>2022-01-04T10:29:09.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先说两句废话（Don’t-blame-me-about-my-calculation）"><a href="#先说两句废话（Don’t-blame-me-about-my-calculation）" class="headerlink" title="先说两句废话（Don’t blame me about my calculation）"></a>先说两句废话（Don’t blame me about my calculation）</h2><p>为啥写这篇文章，简单说，这些日子以来，总觉着做事还是专注些好，于是也逐步减少了很多信息消费，缩减了些欲望吧。目前更加关注怎么能够让开发更快乐些，相信有了这个方向，其他事情就更容易见招拆招了，面对的挑战也不再是挑战，而是激发自己斗志的辅助工具，其实不用在乎那些看似权威的做法和打法，只要是没让你开心的，肯定是有改进空间的。思路和方向才是最重要的，比如<a href="https://search.douban.com/movie/subject_search?search_text=%E5%A4%A7%E4%BE%A6%E6%8E%A2%E6%B3%A2%E7%BD%97&amp;cat=1002">《大侦探波洛》</a>，每次破案之前波洛就已经通过利害关系找好了方向，他的推理都是基于认定的方向去寻找素材。 </p>
<p>开心不是因为没有挑战，没有困难，没有煎熬，而是因为找到了方向，这个方向就是，快乐的 Coding，开心的工作，为了达成这个目标那些艰难挑战也就不算什么了。对于 Coding，经过实操，我觉得声明式 UI 响应式编程范式就是很好的提升工作愉悦程度的方式。代码在 GitHub 上，链接：<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp">https://github.com/KwaiAppTeam/SwiftPamphletApp</a> 。后面我会详细跟你说说这个应用如何开发的及相关知识点，希望你也能够感受下这种 Happy 的开发模式。 </p>
<p>这之前，我想先说下为什么我觉得快乐是很件重要的事情。这段时间，我接受了好几次采访，有关于工程师文化方面的，还有《时尚COSMOPOLITAN》杂志的采访，记者会问到一些以前的事情，在聊过往事情时我发现原来快乐才是每天自己存在着的最根本的原动力。为了能够让自己能够一直活着，就不要偏离快乐。摄影师是任欣羽，参与过《一代宗师》的拍摄，还是《时尚芭莎》的模特。以下是时尚 COSMOPOLITAN 的采访内容： </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/00.jpg" alt=""></p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/01.jpg" alt=""></p>
<p>完整内容见：<a href="https://mp.weixin.qq.com/s/b5fj2b65xRv4mhFpftwNcg">https://mp.weixin.qq.com/s/b5fj2b65xRv4mhFpftwNcg</a> </p>
<p>视频可见这条微博地址：<a href="https://weibo.com/1351051897/KEdu5Fi1x?pagetype=profilefeed">https://weibo.com/1351051897/KEdu5Fi1x?pagetype=profilefeed</a> </p>
<p>视频有六十多万播放量，两百多评论和一千多转发。 </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/02.png" alt=""></p>
<p>话题还上了微博热搜，有六百多万阅读和三千多讨论。 </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/03.png" alt=""></p>
<p>你肯定会觉得很奇怪，我怎么会接受时尚杂志采访，其实我早在2006年就跟时尚娱乐圈有染了，那年张纪中版《神雕侠侣》刚热播完，刘亦菲演的小龙女，我特别的喜欢。有幸在一次活动中我成为她的御用摄影师，由于过于激动手抖，拍糊了好多张，蛮可惜的。私存这批里还是有些清晰的，这些照片最近在找资料时不小心被我翻了出来。挑几张看看十六年前的刘亦菲和我是什么样的吧。 </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/04.jpg" alt=""></p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/05.jpg" alt=""></p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/06.jpg" alt=""></p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/07.jpg" alt=""></p>
<p>我还很用心的置办了新家。也是希望能够让自己能够开心些。 </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/08.jpg" alt=""></p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/09.jpg" alt=""></p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/10.jpg" alt=""></p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/11.jpg" alt=""></p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/12.jpg" alt=""></p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/30.jpg" alt=""></p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/13.jpg" alt=""></p>
<p>那么，怎样高效开发，带来愉悦的呢？ </p>
<h2 id="看看做出来的样子"><a href="#看看做出来的样子" class="headerlink" title="看看做出来的样子"></a>看看做出来的样子</h2><p>这是个 macOS 应用（<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp）《戴铭的">https://github.com/KwaiAppTeam/SwiftPamphletApp）《戴铭的</a> Swift 小册子》，能够方便的查看 Swift 语法，还有一些主要库的使用指南，内容还在完善中，选择的库主要就是开发小册子应用使用到的 SwitUI、Combine、Swift Concurrency。小册子应用目前在 GitHub 上已有<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp">一千多 Star</a>（感谢有爱😄❤️），成为我第三个过千的仓库，现已移至<a href="https://github.com/KwaiAppTeam">快手 App 团队账号</a>下继续迭代完善。 </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/14.png" alt=""></p>
<p>除了这些速查和库的使用内容外，这个应用还有一些开发者的动态，当他们有新的动作，比如提交了代码、star 了什么项目，提交和留言了议题都会直接在程序坞中提醒你。 </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/15.png" alt=""></p>
<p>我对一些库做了分类，方便按需查找，库有新的提交也会在程序坞中提醒。 </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/16.png" alt=""></p>
<p>还能方便的查看库的议题。比如在阮一峰的《科技爱好者周刊》的议题中可以看到有很多人推荐和自荐了一些信息。保留议题有一千六百多个。 </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/17.png" alt=""></p>
<p>这个元旦假期，我又添加了博客动态的功能，可以跟进一些博客内容的更新。 </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/18.png" alt=""></p>
<p>由于 Swift 语言的简洁，这些库的先进，最近有同学做实验，5.5版本还有瘦体积的效果。这样的一个小册子应用程序累积开发的时间不多，就是很高效的嘛。特别是最后博客动态这个功能，七年前我用 Objective-C 做的一个RSS阅读器耗费了我两三周的时间。同样的功能用 Swift 这套来做元旦假期两天就完成了。声明式 UI 响应式范式配合上 Swift 简洁的语法真是蛮 Cool 的。 </p>
<h2 id="基础网络能力"><a href="#基础网络能力" class="headerlink" title="基础网络能力"></a>基础网络能力</h2><p>小册子应用会大量使用网络，先看看怎么用 Swift Concurrency 来做吧。 </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RSSReq</span>(<span class="keyword">_</span> <span class="params">urlStr</span>: <span class="type">String</span>)</span> <span class="keyword">async</span> <span class="keyword">throws</span> -&gt; <span class="type">String</span>? &#123;</span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: urlStr) <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">fatalError</span>(<span class="string">&quot;wrong url&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> req <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">  <span class="keyword">let</span> (data, res) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(for: req)</span><br><span class="line">  <span class="keyword">guard</span> (res <span class="keyword">as?</span> <span class="type">HTTPURLResponse</span>)<span class="operator">?</span>.statusCode <span class="operator">==</span> <span class="number">200</span> <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">fatalError</span>(<span class="string">&quot;wrong data&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dataStr <span class="operator">=</span> <span class="type">String</span>(data: data, encoding: .utf8)</span><br><span class="line">  <span class="keyword">return</span> dataStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上，通过 url 可以获取到 data 和 response，和其他网络请求的方式不同的是，使用 await 后就不用繁琐的代理或闭包来进行后续的处理，代码变得更好理解，即字面意思上的 await 后执行后面的行。举个例子，获取博客 RSS 时，如果希望处理完一个 RSS 后再处理后面一个 RSS，使用 await 语法看起来就非常简洁清爽易于理解了。 </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Task</span> &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> rssFeed <span class="operator">=</span> <span class="type">SPC</span>.rssFeed() <span class="comment">// 获取所有 rss 源的模型</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> rssFeed &#123;</span><br><span class="line">            <span class="keyword">let</span> str <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">RSSReq</span>(r.feedLink)</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> str <span class="operator">=</span> str <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">RSSVM</span>.handleFetchFeed(str: str, rssModel: r)</span><br><span class="line">            <span class="comment">// 在 Main Actor 更新通知数</span></span><br><span class="line">            <span class="keyword">await</span> rssUpdateNotis()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上，当出现数据获取错误就跳过后面逻辑直接去请求下个 RSS，获取成功会更新 Main Actor 处理通知逻辑，不同队列之间切换就是这么自然，短短几行代码就都讲清楚了。 </p>
<p>Combine 来处理网络的优势就是能够将网络请求到数据处理，最后到数据绑定都负责了。也就是发布者、操作符和订阅者的组合。下面我通过开发指南功能的过程说明下 Combine 的用法。 </p>
<h2 id="怎么开发指南功能"><a href="#怎么开发指南功能" class="headerlink" title="怎么开发指南功能"></a>怎么开发指南功能</h2><p>指南的列表结构使用的是 JSON，我把列表的数据保存在仓库的议题中，通过 GitHub 的 REST API 获取议题进行展示，这样对于指南列表的内容修改丰富可以通过直接在议题中进行编辑即可，无需升级应用。 </p>
<p>Combine 网络请求我写在 APIRequest.swift 文件里，主要代码如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">APISev</span>: <span class="title">APISevType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> rootUrl: <span class="type">URL</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">rootUrl</span>: <span class="type">URL</span> <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://api.github.com&quot;</span>)<span class="operator">!</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.rootUrl <span class="operator">=</span> rootUrl</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">response</span>&lt;<span class="type">Request</span>&gt;(<span class="params">from</span> <span class="params">req</span>: <span class="type">Request</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Request</span>.<span class="type">Res</span>, <span class="type">APISevError</span>&gt; <span class="keyword">where</span> <span class="type">Request</span> : <span class="type">APIReqType</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> path <span class="operator">=</span> <span class="type">URL</span>(string: req.path, relativeTo: rootUrl)<span class="operator">!</span></span><br><span class="line">        <span class="keyword">var</span> comp <span class="operator">=</span> <span class="type">URLComponents</span>(url: path, resolvingAgainstBaseURL: <span class="literal">true</span>)<span class="operator">!</span></span><br><span class="line">        comp.queryItems <span class="operator">=</span> req.qItems</span><br><span class="line">        <span class="keyword">var</span> req <span class="operator">=</span> <span class="type">URLRequest</span>(url: comp.url<span class="operator">!</span>)</span><br><span class="line">        req.addValue(<span class="string">&quot;token <span class="subst">\(SPC.gitHubAccessToken)</span>&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">        req.addValue(<span class="string">&quot;SwiftPamphletApp&quot;</span>, forHTTPHeaderField: <span class="string">&quot;User-Agent&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> de <span class="operator">=</span> <span class="type">JSONDecoder</span>()</span><br><span class="line">        de.keyDecodingStrategy <span class="operator">=</span> .convertFromSnakeCase</span><br><span class="line">        <span class="keyword">let</span> sch <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;GitHub API Queue&quot;</span>, qos: .default, attributes: .concurrent)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">URLSession</span>.shared.dataTaskPublisher(for: req)</span><br><span class="line">            .retry(<span class="number">3</span>)</span><br><span class="line">            .subscribe(on: sch)</span><br><span class="line">            .receive(on: sch)</span><br><span class="line">            .map &#123; data, res <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">return</span> data</span><br><span class="line">            &#125;</span><br><span class="line">            .mapError &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="type">APISevError</span>.resError</span><br><span class="line">            &#125;</span><br><span class="line">            .decode(type: <span class="type">Request</span>.<span class="type">Res</span>.<span class="keyword">self</span>, decoder: de)</span><br><span class="line">            .mapError &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="type">APISevError</span>.parseError</span><br><span class="line">            &#125;</span><br><span class="line">            .receive(on: <span class="type">RunLoop</span>.main)</span><br><span class="line">            .eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上，Combine 有 decode 的操作符，能够直接指定 JSON 模型数据类型和 JSONDecoder 对象。还有重试、队列指定以及抛错误的操作符。 </p>
<p>一个应用的生命周期内，相同的请求会发布很多次，需要定义一个发起请求的 Subject，还有请求完成响应的 Subject。定义如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> apCustomIssuesSj <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Void</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">let</span> resCustomIssuesSj <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">IssueModel</span>, <span class="type">Never</span>&gt;()</span><br></pre></td></tr></table></figure>
<p>apCustomIssuesSj 会发起网络请求，代码如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> resCustomIssuesSm <span class="operator">=</span> apCustomIssuesSj</span><br><span class="line">    .flatMap &#123; [apiSev] <span class="keyword">in</span></span><br><span class="line">        apiSev.response(from: reqCustomIssues)</span><br><span class="line">            .catch &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] error -&gt; <span class="type">Empty</span>&lt;<span class="type">IssueModel</span>, <span class="type">Never</span>&gt; <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span><span class="operator">?</span>.errSj.send(error)</span><br><span class="line">                <span class="keyword">return</span> .<span class="keyword">init</span>()</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .share()</span><br><span class="line">    .subscribe(resCustomIssuesSj)</span><br></pre></td></tr></table></figure>
<p>上面 .catch 里errSj 发布者就是嵌套发布者，.flatMap 会让每次返回都是新发布者。apiSev.response 返回的是被类型擦除到 AnyPublisher 上，这样不同类型的发布者能够被 .flatMap 处理。闭包内的 .catch 处理能区分发布者，仅对当前发布者有效，不会影响后面发布者，导致整个管道被取消。发布者失败类型是 Never，失败本身会被连贯的处理。 </p>
<p>.flatMap 除了从它 map 函数里生产发布者，还有个可选参数 maxPublishers，通过这个参数可以限制一次生产的最大发布者数量，也就是你可以通过 .flatMap 对管道上游的发布者进行反压（Backpressure），maxPublishers 能有效的节流管道，按照管道内部实际上的发布速度进行反压，这个也是 Combine 相较于 RxSwift 来说的一个优势。比如当网络请求多时，你可以通过设置 .max(1) 来减轻请求对服务的压力，同时还能够保证结果到达的顺序和请求顺序的一致。 </p>
<p>resCustomIssuesSj 会去处理网络请求成功的数据，最后通过 .assign 将处理的数据分配给遵循 ObservableObject 协议类的 @Published 属性包装的属性 customIssues，用于响应式的更新 SwiftUI 布局数据。实现代码如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> repCustomIssuesSm <span class="operator">=</span> resCustomIssuesSj</span><br><span class="line">    .map(&#123; issueModel <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">let</span> str <span class="operator">=</span> issueModel.body<span class="operator">?</span>.base64Decoded() <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">let</span> data: <span class="type">Data</span></span><br><span class="line">        data <span class="operator">=</span> str.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)<span class="operator">!</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> decoder <span class="operator">=</span> <span class="type">JSONDecoder</span>()</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">try</span> decoder.decode([<span class="type">CustomIssuesModel</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="type">CustomIssuesModel</span>]()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .assign(to: \.customIssues, on: <span class="keyword">self</span>)</span><br></pre></td></tr></table></figure>
<p>如上，你会发现在 .map 中还会对数据进行 base64 decode，这是因为我在仓库议题中保存的是 base64 encode 的数据，decode 成 JSON 数据再用 JSONDecoder 转为 [CustomIssuesModel] 模型 数据分配给 customIssues。 </p>
<p>使用 SwiftUI 写的指南列表视图，代码如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IssuesListFromCustomView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">var</span> vm: <span class="type">IssueVM</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">ForEach</span>(vm.customIssues) &#123; ci <span class="keyword">in</span></span><br><span class="line">                <span class="type">Section</span> &#123;</span><br><span class="line">                    <span class="type">ForEach</span>(ci.issues) &#123; i <span class="keyword">in</span></span><br><span class="line">                        <span class="type">NavigationLink</span> &#123;</span><br><span class="line">                            <span class="type">IssueView</span>(vm: <span class="type">IssueVM</span>(repoName: <span class="type">SPC</span>.pamphletIssueRepoName, issueNumber: i.number))</span><br><span class="line">                        &#125; label: &#123;</span><br><span class="line">                            <span class="type">Text</span>(i.title)</span><br><span class="line">                                .bold()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; header: &#123;</span><br><span class="line">                    <span class="type">Text</span>(ci.name).font(.title)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .alert(vm.errMsg, isPresented: <span class="variable">$vm</span>.errHint, actions: &#123;&#125;)</span><br><span class="line">        .onAppear &#123;</span><br><span class="line">            vm.doing(.customIssues)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码中的属性包装 @StateObject 会在当前视图生命周期中保持 vm 这个属性的数据，vm 需要遵循 ObservableObject 协议，其 @Published 发布属性的值会被 SwiftUI 自动进行管理，属性 vm 的发布属性数据变化时会自动触发布局依据新数据的更新。 </p>
<p>上面代码中的 SwiftUI 写的布局界面效果如下： </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/19.png" alt=""></p>
<p>界面主体是 List 视图，根据 List 的定义，要求的输入是一个数组，数组内元素需要遵循 Identifiable，每行的返回是被 @ViewBuilder 标记的 View。ForEach 根据数组中的元素会创建能够重复使用的视图，性能接近大家熟悉的 UITableView，但是写法上简洁的不要太多，真实完美解痛点案例，😄❤️。 </p>
<p>指南的内容也会以 markdown 格式存在议题中，通过调用 GitHub API 的接口进行指南内容的读取。一个接口是议题接口，请求结构体定义如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IssueRequest</span>: <span class="title">APIReqType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Res</span> <span class="operator">=</span> <span class="type">IssueModel</span></span><br><span class="line">    <span class="keyword">var</span> repoName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> issueNumber: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> path: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/repos/<span class="subst">\(repoName)</span>/issues/<span class="subst">\(issueNumber)</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> qItems: [<span class="type">URLQueryItem</span>]<span class="operator">?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另一个是议题留言的接口，定义如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IssueRequest</span>: <span class="title">APIReqType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Res</span> <span class="operator">=</span> <span class="type">IssueModel</span></span><br><span class="line">    <span class="keyword">var</span> repoName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> issueNumber: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> path: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/repos/<span class="subst">\(repoName)</span>/issues/<span class="subst">\(issueNumber)</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> qItems: [<span class="type">URLQueryItem</span>]<span class="operator">?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现效果如下图： </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/20.png" alt=""></p>
<p>指南内容放在议题中，也是希望能够通过议题留言功能，让反馈和大家经验的补充被更多人看到。 </p>
<p>除了语法速查的内容，关于 Swift 的一些特性，专题，还有 Combine、Concurrency、SwiftUI 这些库的使用指南内容都是采用的 GitHub API 接口读取议题方式获取的。 </p>
<p>读取议题接口获取指南列表的模式，也用在了开发者和仓库动态列表中。接下来我跟你说下开发者和仓库动态怎么开发的吧。 </p>
<h2 id="开发者和仓库动态"><a href="#开发者和仓库动态" class="headerlink" title="开发者和仓库动态"></a>开发者和仓库动态</h2><p>显示开发者信息的页面代码在 UserView.swift 里，开发者介绍信息页面如下： </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/21.png" alt=""></p>
<p>界面中的数据都来自 /users/(userName) 接口，获取数据逻辑在 UserVM.swift 里。数据多，但情况不复杂，布局上只要注意进行数据是否有的区分即可，布局代码如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HStack</span> &#123;</span><br><span class="line">    <span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="type">HStack</span>() &#123;</span><br><span class="line">            <span class="type">AsyncImageWithPlaceholder</span>(size: .normalSize, url: vm.user.avatarUrl)</span><br><span class="line">            <span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="type">HStack</span> &#123;</span><br><span class="line">                    <span class="type">Text</span>(vm.user.name <span class="operator">??</span> vm.user.login).font(.system(.title))</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;(<span class="subst">\(vm.user.login)</span>)&quot;</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;订阅者 <span class="subst">\(vm.user.followers)</span> 人，仓库 <span class="subst">\(vm.user.publicRepos)</span> 个&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">HStack</span> &#123;</span><br><span class="line">                    <span class="type">ButtonGoGitHubWeb</span>(url: vm.user.htmlUrl, text: <span class="string">&quot;在 GitHub 上访问&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> vm.user.location <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;居住：<span class="subst">\(vm.user.location <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span>&quot;</span>).font(.system(.subheadline))</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="comment">// end VStack</span></span><br><span class="line">        &#125; <span class="comment">// end HStack</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> vm.user.bio <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;简介：<span class="subst">\(vm.user.bio <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> vm.user.blog <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="operator">!</span>vm.user.blog<span class="operator">!</span>.isEmpty &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;博客：<span class="subst">\(vm.user.blog <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span>&quot;</span>)</span><br><span class="line">                    <span class="type">ButtonGoGitHubWeb</span>(url: vm.user.blog <span class="operator">??</span> <span class="string">&quot;&quot;</span>, text: <span class="string">&quot;访问&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> vm.user.twitterUsername <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Twitter：&quot;</span>)</span><br><span class="line">                <span class="type">ButtonGoGitHubWeb</span>(url: <span class="string">&quot;https://twitter.com/<span class="subst">\(vm.user.twitterUsername <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span>&quot;</span>, text: <span class="string">&quot;@<span class="subst">\(vm.user.twitterUsername <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// end HStack</span></span><br><span class="line">    &#125; <span class="comment">// end VStack</span></span><br><span class="line">    <span class="type">Spacer</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码可以看到，对于数据是否存在，SwiftUI 是可以使用 if 来进行判断是否展示视图的，这个条件判断也会存在于整个视图结构类型中被编译生成，因此更好的方式是将数据判断放到 ViewModifier 中，因为 ViewModifier 处理时机是在运行时，可以减少布局初始创建逻辑运算。 </p>
<p>开发者的事件和接受事件部分的数据就比介绍部分复杂些，使得界面变化也多些，事件接口是 /users/(userName)/events，接受事件接口是 /users/(userName)/received_events 。数据的复杂体现在类型上，类型种类较多，我采用的是直接处理 payload 里的字段，如果其 issue.number 字段不为空，那么就表示这个开发者事件是和议题相关，会显示 issue.title 标题，有内容的话，也就是 issue.body 不为空，继续显示议题的内容。如果字段是 comment，就表示事件是议题的留言。如果字段是 commits，表示需要列出这个事件中所有的 commit 提交及标题和描述。pullRequest 字段不为空就显示这个 PR 的标题和内容描述。字段处理逻辑代码实现如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> event.payload.issue<span class="operator">?</span>.number <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> event.payload.issue<span class="operator">?</span>.title <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(event.payload.issue<span class="operator">?</span>.title <span class="operator">??</span> <span class="string">&quot;&quot;</span>).bold()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> event.payload.issue<span class="operator">?</span>.body <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">&amp;&amp;</span> event.type <span class="operator">!=</span> <span class="string">&quot;IssueCommentEvent&quot;</span> &#123;</span><br><span class="line">        <span class="type">Markdown</span>(<span class="type">Document</span>(event.payload.issue<span class="operator">?</span>.body <span class="operator">??</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> event.type <span class="operator">==</span> <span class="string">&quot;IssueCommentEvent&quot;</span> <span class="operator">&amp;&amp;</span> event.payload.comment<span class="operator">?</span>.body <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="type">Markdown</span>(<span class="type">Document</span>(event.payload.comment<span class="operator">?</span>.body <span class="operator">??</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> event.payload.commits <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="type">ListCommits</span>(event: event)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> event.payload.pullRequest <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> event.payload.pullRequest<span class="operator">?</span>.title <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(event.payload.pullRequest<span class="operator">?</span>.title <span class="operator">??</span> <span class="string">&quot;&quot;</span>).bold()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> event.payload.pullRequest<span class="operator">?</span>.body <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="type">Markdown</span>(<span class="type">Document</span>(event.payload.pullRequest<span class="operator">?</span>.body <span class="operator">??</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> event.payload.description <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="type">Markdown</span>(<span class="type">Document</span>(event.payload.description <span class="operator">??</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，对于不定数量的 commit 视图写在了一个单独的 ListCommits 视图中。只要是遵循了 View 协议，就可以作为自定义视图在其他视图中直接使用。ListCommits 代码如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListCommits</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event: <span class="type">EventModel</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ForEach</span>(event.payload.commits <span class="operator">??</span> [<span class="type">PayloadCommitModel</span>](), id: \.<span class="keyword">self</span>) &#123; c <span class="keyword">in</span></span><br><span class="line">            <span class="type">ButtonGoGitHubWeb</span>(url: <span class="string">&quot;https://github.com/<span class="subst">\(event.repo.name)</span>/commit/<span class="subst">\(c.sha <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span>&quot;</span>, text: <span class="string">&quot;提交&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(c.message <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码你会发现一个 ButtonGoGitHubWeb的视图，进入看会发现用到了一个自定义的 ButtonStyle： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.buttonStyle(<span class="type">FixAwfulPerformanceStyle</span>())</span><br></pre></td></tr></table></figure>
<p>FixAwfulPerformanceStyle() 的实现如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 列表加按钮性能问题，需观察官方后面是否解决</span></span><br><span class="line"><span class="comment">/// https://twitter.com/fcbunn/status/1259078251340800000</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FixAwfulPerformanceStyle</span>: <span class="title">ButtonStyle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeBody</span>(<span class="params">configuration</span>: <span class="keyword">Self</span>.<span class="type">Configuration</span>)</span> -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        configuration.label</span><br><span class="line">            .font(.body)</span><br><span class="line">            .padding(<span class="type">EdgeInsets</span>.<span class="keyword">init</span>(top: <span class="number">2</span>, leading: <span class="number">6</span>, bottom: <span class="number">2</span>, trailing: <span class="number">6</span>))</span><br><span class="line">            .foregroundColor(configuration.isPressed <span class="operator">?</span> <span class="type">Color</span>(nsColor: <span class="type">NSColor</span>.selectedControlTextColor) : <span class="type">Color</span>(nsColor: <span class="type">NSColor</span>.controlTextColor))</span><br><span class="line">            .background(configuration.isPressed <span class="operator">?</span> <span class="type">Color</span>(nsColor: <span class="type">NSColor</span>.selectedControlColor) : <span class="type">Color</span>(nsColor: <span class="type">NSColor</span>.controlBackgroundColor))</span><br><span class="line">            .overlay(<span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">6.0</span>).stroke(<span class="type">Color</span>(nsColor: <span class="type">NSColor</span>.lightGray), lineWidth: <span class="number">0.5</span>))</span><br><span class="line">            .clipShape(<span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">6.0</span>))</span><br><span class="line">            .shadow(color: <span class="type">Color</span>.gray, radius: <span class="number">0.5</span>, x: <span class="number">0</span>, y: <span class="number">0.5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是社区 <a href="https://github.com/Kam-To">@Kam-To</a> 提的一个 <a href="https://github.com/KwaiAppTeam/SwiftPamphletApp/pull/104">PR</a>，是解的 macOS 上的一个性能问题，也就是在 List 中直接使用 Button，在列表快速滚动时，流畅度会有损伤，加上上面的 ButtonStyle 代码就好了。 </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/22.png" alt=""></p>
<p>原推见 <a href="https://twitter.com/fcbunn/status/1259078251340800000">https://twitter.com/fcbunn/status/1259078251340800000</a>。 </p>
<p>开发者接受事件和事件类似，只是会多显示事件的 actor 字段内容，表明开发者接受的是谁发出的事件。事件界面如下所示： </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/23.png" alt=""></p>
<p>仓库整体处理和开发者类似，只是多了议题和 README 内容，数据复杂度比开发者要低。接下来我要跟你说的是如果开发者或仓库有新的提交，怎么能够获取到，并提示有更新。 </p>
<h2 id="动态有更新，怎么提醒的"><a href="#动态有更新，怎么提醒的" class="headerlink" title="动态有更新，怎么提醒的"></a>动态有更新，怎么提醒的</h2><p>我的思路是通过本地定时器，定期获取数据，本地记录上次浏览的位置，通过对比，看有多少新的动态没有查看，并通过 .badge 这个 ViewModifier 和 NSApp.dockTile.badgeLabel 来进行端内端外的提醒。 </p>
<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>在 SwiftUI 中，可以使用 Combine 的 Timer.publish 发布器来设置一个定时属性，Timer.publish 指定好时间周期和队列模式等参数。比如设置一个开发者动态定时器属性，代码如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerForRepos <span class="operator">=</span> <span class="type">Timer</span>.publish(every: <span class="type">SPC</span>.timerForReposSec, on: .main, in: .common).autoconnect()</span><br></pre></td></tr></table></figure>
<p>然后再在 .onReceive 中执行网络数据获取操作，就可以定时获取数据了。 </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.onReceive(timerForRepos, perform: &#123; time <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> repoName <span class="operator">=</span> appVM.timeForReposEvent() &#123;</span><br><span class="line">        <span class="keyword">let</span> vm <span class="operator">=</span> <span class="type">RepoVM</span>(repoName: repoName)</span><br><span class="line">        vm.doing(.notiRepo)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>获取到的数据会跟本地已经存储的数据进行对比。 </p>
<h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>本地数据存储，我用的是 SQLite.swift，这个库是使用 Swift 对 SQLite 做了一层封装，使用很简便，在 DBHandler.swift 里有数据库初始化和表的创建相关代码，DBDevNoti.swift 中的 DevsNotiDataHelper 有对数据操作的代码，DBDevNoti 定义了数据表的结构。如何使用可以参考 SQLite.swift 官方的<a href="https://github.com/stephencelis/SQLite.swift/blob/master/Documentation/Index.md">指南</a>，里面讲得非常详细清楚。 </p>
<p>用 DB Browser for SQLite 应用可以查看本地的数据库。下面是用它查看记录的 RSS 的数据，如图：</p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/29.png" alt=""></p>
<p>更新未读数的判断逻辑，我封到了一个函数里，代码如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateDBDevsInfo</span>(<span class="params">ems</span>: [<span class="type">EventModel</span>])</span> &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> f <span class="operator">=</span> <span class="keyword">try</span> <span class="type">DevsNotiDataHelper</span>.find(sLogin: userName) &#123;</span><br><span class="line">            <span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">var</span> lrid <span class="operator">=</span> f.lastReadId</span><br><span class="line">            <span class="keyword">for</span> em <span class="keyword">in</span> ems &#123;</span><br><span class="line">                <span class="keyword">if</span> i <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">                    lrid <span class="operator">=</span> em.id</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> em.id <span class="operator">==</span> f.lastReadId &#123;</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">                i <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            i <span class="operator">=</span> f.unRead <span class="operator">+</span> i</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="keyword">try</span> <span class="type">DevsNotiDataHelper</span>.update(i: <span class="type">DBDevNoti</span>(login: userName, lastReadId: lrid, unRead: i))</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">        &#125; <span class="comment">// end if let f</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">&#125; <span class="comment">// end func updateDBDevsInfo</span></span><br></pre></td></tr></table></figure>
<p>如上面代码所示，入参 ems 是获取到的最新数据，先从本地数据库中取到上次最新的阅读编号 lastReadId，迭代 ems，如果第一个 ems 的编号就和本地数据库 lastReadId 一样，那表示无新动态，如果没有就开始计数，直到找到相等的 lastReadId 位置，记了多少数就表示有多少新动态。 </p>
<h3 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h3><p>列表、Sidebar 还有 macOS 系统的 Dock 上都可以显示新状态数的提醒。列表和 Sidebar 直接使用 .badge ViewModifier 就可以展示未读数了，效果如下： </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/24.png" alt=""></p>
<p>Dock 栏提示设置需要用到系统的 NSApp，代码如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSApp</span>.dockTile.showsApplicationBadge <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"><span class="type">NSApp</span>.dockTile.badgeLabel <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(count)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/28.png" alt=""></p>
<p>小册子里还可以查看 Swift 社区里博主们博客更新动态。我接着跟你说说我怎么做的。 </p>
<h2 id="博客-RSS-更新动态"><a href="#博客-RSS-更新动态" class="headerlink" title="博客 RSS 更新动态"></a>博客 RSS 更新动态</h2><p>博客 RSS 的数据获取我在前面基础网络能力中已经说了。所有解析逻辑我都写在了工程 RSSReader/Parser/ 目录下的 ParseStandXMLTagTokens.swift、ParseStandXMLTags.swift、ParseStandXML.swift 三个文件中，实现思路我在先前<a href="https://ming1016.github.io/2019/12/07/how-to-analyze-startup-time-cost-in-ios/">《如何对 iOS 启动阶段耗时进行分析》</a>文章的“优化后如何保持？”章节有详细说明。 </p>
<p>根据 RSS 的 XML 结构，定义 Model 结构如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RSSModel</span>: <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">    <span class="keyword">var</span> title <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> description <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> feedLink <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> siteLink <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> language <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> lastBuildDate <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> pubDate <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> items <span class="operator">=</span> [<span class="type">RSSItemModel</span>]()</span><br><span class="line">    <span class="keyword">var</span> unReadCount <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RSSItemModel</span>: <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">    <span class="keyword">var</span> guid <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> title <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> description <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> link <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> pubDate <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> content <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> isRead <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据这个结构，也会在本地数据库设计对应的两个表，两个表的增删改代码分别在 DBRSSFeed.swift 和 DBRSSItems.swift 里。表的结构和 Model 的结构基本一致，方便内存和磁盘进行切换。更新提醒逻辑和前面说的开发者动态更新逻辑区别在于，RSS 使用 isRead 标记有没有阅读过，直接在本地数据里 count 出 isRead 字段值为 false 的数量就是需要提醒的数。 </p>
<p>新 RSS 的添加会先在本地数据库中查找是否有存在，依据的是文章的 url，如果不存在就会添加到数据库中设置为未读作为提醒。 </p>
<p>RSS 里文章的内容是 HTML，显示内容使用的是 WebKit 库，要在 SwiftUI 中使用，需要封装下，代码如下： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> WebKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WebUIView</span> : <span class="title">NSViewRepresentable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> html: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeNSView</span>(<span class="params">context</span>: <span class="type">Context</span>)</span> -&gt; <span class="keyword">some</span> <span class="type">WKWebView</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">WKWebView</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateNSView</span>(<span class="keyword">_</span> <span class="params">nsView</span>: <span class="type">NSViewType</span>, <span class="params">context</span>: <span class="type">Context</span>)</span> &#123;</span><br><span class="line">        nsView.loadHTMLString(html, baseURL: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下图： </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/25.png" alt=""></p>
<h2 id="云打包"><a href="#云打包" class="headerlink" title="云打包"></a>云打包</h2><p>工程如果是本地编译，在 SwiftPamphletAppConfig.swift 的 gitHubAccessToken 中添上 token 就可以了，如果想快速打包使用小册子，使用 Github Action Workflow 编译，无需在本地操作、也无需开启 Xcode 设置个人开发帐号，只需设置 personal access token(PAT) 在 repository 设定中 action secrets，并命名为 PAT。Frok 此 repository，设置 PAT，手动启用 action，等候约3分钟即可下载档案，往后专案更新时，只需 fetch and merge，action 会自动进行。非常感谢社区 <a href="https://github.com/powenn">@powenn</a> 开发的这个 Github Action。 </p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/26.png" alt=""></p>
<p><img src="/uploads/develop-macos-with-swiftui-combine-concurrency-aysnc-await-actor/27.png" alt=""></p>
<h2 id="推荐可以学习的开源仓库"><a href="#推荐可以学习的开源仓库" class="headerlink" title="推荐可以学习的开源仓库"></a>推荐可以学习的开源仓库</h2><p>为了避免闭门造车，可以多关注些开源项目，以下这些仓库是我放在小册子里可以关注到更新动态的项目，这里作为附录列下，也可以直接在小册子里查看。除了 Swift 也有些非常有趣的项目，希望可以丰富到你的开发生活。 </p>
<h3 id="好库"><a href="#好库" class="headerlink" title="好库"></a>好库</h3><h4 id="官方"><a href="#官方" class="headerlink" title="官方"></a>官方</h4><ul>
<li><a href="https://github.com/apple/swift">swift</a></li>
<li><a href="https://github.com/apple/swift-evolution">swift-evolution</a> 提案 </li>
<li><a href="https://github.com/llvm/llvm-project">llvm-project</a> 编译器 </li>
</ul>
<h4 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h4><ul>
<li><a href="https://github.com/SwiftOldDriver/iOS-Weekly">iOS-Weekly</a> 老司机 iOS 周报 </li>
<li><a href="https://github.com/matteocrippa/awesome-swift">awesome-swift</a></li>
<li><a href="https://github.com/KwaiAppTeam/SwiftPamphletApp">SwiftPamphletApp</a> 戴铭的 Swift 小册子 </li>
</ul>
<h4 id="封装易用功能"><a href="#封装易用功能" class="headerlink" title="封装易用功能"></a>封装易用功能</h4><ul>
<li><a href="https://github.com/SwifterSwift/SwifterSwift">SwifterSwift</a> Handy Swift extensions </li>
</ul>
<h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ul>
<li><a href="https://github.com/Alamofire/Alamofire">Alamofire</a></li>
<li><a href="https://github.com/socketio/socket.io-client-swift">socket.io-client-swift</a></li>
</ul>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><ul>
<li><a href="https://github.com/onevcat/Kingfisher">Kingfisher</a></li>
<li><a href="https://github.com/kean/Nuke">Nuke</a></li>
</ul>
<h4 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h4><ul>
<li><a href="https://github.com/gonzalezreal/MarkdownUI">MarkdownUI</a></li>
</ul>
<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><ul>
<li><a href="https://github.com/recherst/kavsoft-swiftui-animations">kavsoft-swiftui-animations</a></li>
</ul>
<h4 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h4><ul>
<li><a href="https://github.com/stephencelis/SQLite.swift">SQLite.swift</a></li>
<li><a href="https://github.com/groue/GRDB.swift">GRDB.swift</a></li>
<li><a href="https://github.com/realm/realm-cocoa">realm-cocoa</a></li>
</ul>
<h4 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h4><ul>
<li><a href="https://github.com/ReactiveX/RxSwift">RxSwift</a> 函数响应式编程 </li>
<li><a href="https://github.com/pointfreeco/swift-composable-architecture">swift-composable-architecture</a></li>
<li><a href="https://github.com/onmyway133/awesome-ios-architecture">awesome-ios-architecture</a></li>
</ul>
<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><ul>
<li><a href="https://github.com/pointfreeco/swiftui-navigation">swiftui-navigation</a></li>
</ul>
<h4 id="静态检查"><a href="#静态检查" class="headerlink" title="静态检查"></a>静态检查</h4><ul>
<li><p><a href="https://github.com/realm/SwiftLint">SwiftLint</a></p>
<h4 id="系统能力"><a href="#系统能力" class="headerlink" title="系统能力"></a>系统能力</h4></li>
<li><p><a href="https://github.com/kishikawakatsumi/KeychainAccess">KeychainAccess</a></p>
</li>
</ul>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><ul>
<li><a href="https://github.com/OAuthSwift/OAuthSwift">OAuthSwift</a></li>
<li><a href="https://github.com/p2/OAuth2">OAuth2</a></li>
</ul>
<h4 id="macOS程序"><a href="#macOS程序" class="headerlink" title="macOS程序"></a>macOS程序</h4><ul>
<li><a href="https://github.com/serhii-londar/open-source-mac-os-apps">open-source-mac-os-apps</a> 开源 macOS 程序合集 </li>
<li><a href="https://github.com/Ranchero-Software/NetNewsWire">NetNewsWire</a></li>
<li><a href="https://github.com/overtake/TelegramSwift">TelegramSwift</a></li>
</ul>
<h4 id="性能和工程构建"><a href="#性能和工程构建" class="headerlink" title="性能和工程构建"></a>性能和工程构建</h4><ul>
<li><a href="https://github.com/tuist/tuist">tuist</a> 创建和维护 Xcode projects 文件 </li>
<li><a href="https://github.com/swift-server/vscode-swift">vscode-swift</a> VSCode 的 Swift 扩展 </li>
</ul>
<h4 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h4><ul>
<li><a href="https://github.com/iina/iina">iina</a></li>
<li><a href="https://github.com/shogo4405/HaishinKit.swift">HaishinKit.swift</a> RTMP, HLS </li>
<li><a href="https://github.com/AudioKit/AudioKit">AudioKit</a></li>
</ul>
<h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><ul>
<li><a href="https://github.com/vapor/vapor">vapor</a></li>
</ul>
<h3 id="探索库"><a href="#探索库" class="headerlink" title="探索库"></a>探索库</h3><h4 id="SwiftUI扩展"><a href="#SwiftUI扩展" class="headerlink" title="SwiftUI扩展"></a>SwiftUI扩展</h4><ul>
<li><a href="https://github.com/SwiftUIX/SwiftUIX">SwiftUIX</a> 扩展 SwiftUI </li>
<li><a href="https://github.com/SDWebImage/SDWebImageSwiftUI">SDWebImageSwiftUI</a></li>
<li><a href="https://github.com/apptekstudios/ASCollectionView">ASCollectionView</a> SwiftUI collection </li>
<li><a href="https://github.com/siteline/SwiftUI-Introspect">SwiftUI-Introspect</a> SwiftUI 引入 UIKit </li>
<li><a href="https://github.com/AvdLee/SwiftUIKitView">SwiftUIKitView</a> 在 SwiftUI 中 使用 UIKit </li>
</ul>
<h4 id="接口应用"><a href="#接口应用" class="headerlink" title="接口应用"></a>接口应用</h4><ul>
<li><a href="https://github.com/bpisano/Weather">Weather</a> 天气应用 </li>
<li><a href="https://github.com/Dimillian/MovieSwiftUI">MovieSwiftUI</a> 电影 MovieDB 应用 </li>
<li><a href="https://github.com/chojnac/NotionSwift">NotionSwift</a></li>
<li><a href="https://github.com/Dimillian/RedditOS">RedditOS</a> SwiftUI 写的 Reddit客户端 </li>
<li><a href="https://github.com/carson-katri/reddit-swiftui">reddit-swiftui</a> SwiftUI 写的 Reddit客户端 </li>
<li><a href="https://github.com/Dimillian/SwiftHN">SwiftHN</a> Hacker News 阅读 </li>
<li><a href="https://github.com/tatsuz0u/EhPanda">EhPanda</a></li>
<li><a href="https://github.com/Dimillian/MortyUI">MortyUI</a> GraphQL + SwiftUI 开发的瑞克和莫蒂应用 </li>
<li><a href="https://github.com/Finb/V2ex-Swift">V2ex-Swift</a> V2EX 客户端 </li>
<li><a href="https://github.com/v2er-app/iOS">iOS</a> V2EX 客户端 </li>
<li><a href="https://github.com/sinaweibosdk/weibo_ios_sdk">weibo_ios_sdk</a></li>
<li><a href="https://github.com/miniLV/MNWeibo">MNWeibo</a> Swift5 + MVVM 微博客户端 </li>
<li><a href="https://github.com/nerdishbynature/octokit.swift">octokit.swift</a> Swift API Client for GitHub </li>
<li><a href="https://github.com/GitHawkApp/GitHawk">GitHawk</a> iOS app for GitHub </li>
<li><a href="https://github.com/fangzesheng/free-api">free-api</a></li>
<li><a href="https://github.com/nerdsupremacist/Graphaello">Graphaello</a> SwiftUI 中使用 GraphQL 的工具 </li>
<li><a href="https://github.com/nerdsupremacist/tmdb">tmdb</a> GraphQL 包装电影数据接口 </li>
</ul>
<h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><ul>
<li><a href="https://github.com/eonist/FileWatcher">FileWatcher</a> macOS 上监听文件变化 </li>
<li><a href="https://github.com/waylybaye/XcodeCleaner-SwiftUI">XcodeCleaner-SwiftUI</a> 清理 Xcode </li>
<li><a href="https://github.com/gao-sun/eul">eul</a> SwiftUI 写的 macOS 状态监控工具 </li>
<li><a href="https://github.com/Dimillian/ACHNBrowserUI">ACHNBrowserUI</a> SwiftUI 写的动物之森小助手程序 </li>
<li><a href="https://github.com/lexrus/RegExPlus">RegExPlus</a> 正则表达式 </li>
</ul>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul>
<li><a href="https://github.com/vinhnx/Clendar">Clendar</a> SwiftUI 写的日历应用 </li>
</ul>
<h4 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h4><ul>
<li><a href="https://github.com/pointfreeco/isowords">isowords</a> 单词搜索游戏 </li>
<li><a href="https://github.com/michelpereira/awesome-games-of-coding">awesome-games-of-coding</a> 教你学编程的游戏收集 </li>
<li><a href="https://github.com/OpenEmu/OpenEmu">OpenEmu</a> 视频游戏模拟器 </li>
<li><a href="https://github.com/jVirus/swiftui-2048">swiftui-2048</a></li>
<li><a href="https://github.com/chrismaltby/gb-studio">gb-studio</a> 拖放式复古游戏创建器 </li>
</ul>
<h4 id="新技术展示"><a href="#新技术展示" class="headerlink" title="新技术展示"></a>新技术展示</h4><ul>
<li><a href="https://github.com/JakeLin/Moments-SwiftUI">Moments-SwiftUI</a> SwiftUI、Async、Actor </li>
</ul>
<h4 id="新鲜事-1"><a href="#新鲜事-1" class="headerlink" title="新鲜事"></a>新鲜事</h4><ul>
<li><a href="https://github.com/ruanyf/weekly">weekly</a> 科技爱好者周刊 </li>
</ul>
<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><ul>
<li><a href="https://github.com/timqian/chinese-independent-blogs">chinese-independent-blogs</a></li>
<li><a href="https://github.com/vlondon/awesome-swiftui">awesome-swiftui</a></li>
<li><a href="https://github.com/ivanvorobei/SwiftUI">SwiftUI</a></li>
<li><a href="https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts">GitHub-Chinese-Top-Charts</a> GitHub中文排行榜 </li>
<li><a href="https://github.com/onmyway133/awesome-swiftui">awesome-swiftui</a></li>
<li><a href="https://github.com/Juanpe/About-SwiftUI">About-SwiftUI</a> 汇总 SwiftUI 的资料 </li>
</ul>
<h4 id="知识管理"><a href="#知识管理" class="headerlink" title="知识管理"></a>知识管理</h4><ul>
<li><a href="https://github.com/logseq/logseq">logseq</a> 更好的知识管理工具 </li>
</ul>
<h4 id="性能和工程构建-1"><a href="#性能和工程构建-1" class="headerlink" title="性能和工程构建"></a>性能和工程构建</h4><ul>
<li><a href="https://github.com/peripheryapp/periphery">periphery</a> 检测 Swift 无用代码 </li>
<li><a href="https://github.com/nalexn/ViewInspector">ViewInspector</a> SwiftUI Runtime introspection 和 单元测试 </li>
</ul>
<h4 id="网络-1"><a href="#网络-1" class="headerlink" title="网络"></a>网络</h4><ul>
<li><a href="https://github.com/Lojii/Knot">Knot</a> 使用 SwiftNIO 实现 HTTPS 抓包 </li>
<li><a href="https://github.com/swift-server/async-http-client">async-http-client</a> 使用 SwiftNIO 开发的 HTTP 客户端 </li>
<li><a href="https://github.com/kean/Get">Get</a></li>
<li><a href="https://github.com/awesome-selfhosted/awesome-selfhosted">awesome-selfhosted</a> 网络服务及上面的应用 </li>
<li><a href="https://github.com/daltoniam/Starscream">Starscream</a> WebSocket </li>
<li><a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG</a></li>
<li><a href="https://github.com/carson-katri/swift-request">swift-request</a> 声明式的网络请求 </li>
</ul>
<h4 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h4><ul>
<li><a href="https://github.com/lludo/SwiftSunburstDiagram">SwiftSunburstDiagram</a> SwiftUI 图表 </li>
</ul>
<h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><ul>
<li><a href="https://github.com/spevans/swift-project1">swift-project1</a> Swift编写内核，可在 Mac 和 PC 启动 </li>
</ul>
<h4 id="Apple"><a href="#Apple" class="headerlink" title="Apple"></a>Apple</h4><ul>
<li><a href="https://github.com/apple/swift-corelibs-foundation">swift-corelibs-foundation</a></li>
<li><a href="https://github.com/apple/swift-package-manager">swift-package-manager</a></li>
<li><a href="https://github.com/apple/swift-markdown">swift-markdown</a></li>
<li><a href="https://github.com/apple/sourcekit-lsp">sourcekit-lsp</a></li>
<li><a href="https://github.com/apple/swift-nio">swift-nio</a></li>
<li><a href="https://github.com/apple/swift-syntax">swift-syntax</a> 解析、生成、转换 Swift 代码 </li>
<li><a href="https://github.com/apple/swift-crypto">swift-crypto</a> CryptoKit 的开源实现 </li>
</ul>
<h4 id="待分类"><a href="#待分类" class="headerlink" title="待分类"></a>待分类</h4><ul>
<li><a href="https://github.com/public-apis/public-apis">public-apis</a></li>
<li><a href="https://github.com/insidegui/WWDC">WWDC</a></li>
<li><a href="https://github.com/sindresorhus/Actions">Actions</a></li>
<li><a href="https://github.com/trimstray/the-book-of-secret-knowledge">the-book-of-secret-knowledge</a></li>
<li><a href="https://github.com/rossant/awesome-math">awesome-math</a></li>
<li><a href="https://github.com/rakutentech/AltSwiftUI">AltSwiftUI</a> 类 SwiftUI </li>
<li><a href="https://github.com/gymshark/ios-stack-kit">ios-stack-kit</a> 类 SwiftUI </li>
<li><a href="https://github.com/OpenCombine/OpenCombine">OpenCombine</a> Combine 的开源实现 </li>
<li><a href="https://github.com/CombineCommunity/CombineExt">CombineExt</a> 对 Combine 的补充 </li>
<li><a href="https://github.com/ReSwift/ReSwift">ReSwift</a> 单页面状态和数据管理 </li>
<li><a href="https://github.com/devicekit/DeviceKit">DeviceKit</a> UIDevice 易用封装 </li>
<li><a href="https://github.com/ivanschuetz/SwiftCharts">SwiftCharts</a></li>
<li><a href="https://github.com/nvzqz/FileKit">FileKit</a> 文件操作 </li>
<li><a href="https://github.com/JohnSundell/Files">Files</a> 文件操作 </li>
<li><a href="https://github.com/kylef/PathKit">PathKit</a> 文件操作 </li>
<li><a href="https://github.com/JohnSundell/Publish">Publish</a> 静态站点生成器 </li>
<li><a href="https://github.com/caiyue1993/IceCream">IceCream</a> CloudKit 同步 Realm 数据库 </li>
<li><a href="https://github.com/tophat/RichTextView">RichTextView</a></li>
<li><a href="https://github.com/tnantoka/edhita">edhita</a></li>
<li><a href="https://github.com/keitaoouchi/MarkdownView">MarkdownView</a></li>
<li><a href="https://github.com/johnxnguyen/Down">Down</a> fast Markdown </li>
<li><a href="https://github.com/qeude/SwiftDown">SwiftDown</a> Swift 写的可换主题的 Markdown 编辑器组件 </li>
<li><a href="https://github.com/shibapm/Komondor">Komondor</a> Git Hooks for Swift projects </li>
<li><a href="https://github.com/SwiftGen/SwiftGen">SwiftGen</a> 代码生成 </li>
<li><a href="https://github.com/kasketis/netfox">netfox</a> 获取所有网络请求 </li>
<li><a href="https://github.com/BohdanOrlov/iOS-Developer-Roadmap">iOS-Developer-Roadmap</a></li>
<li><a href="https://github.com/kickstarter/ios-oss">ios-oss</a></li>
<li><a href="https://github.com/wordpress-mobile/WordPress-iOS">WordPress-iOS</a></li>
<li><a href="https://github.com/josejuanqm/VersaPlayer">VersaPlayer</a></li>
<li><a href="https://github.com/mozilla-mobile/firefox-ios">firefox-ios</a></li>
<li><a href="https://github.com/PostgresApp/PostgresApp">PostgresApp</a></li>
<li><a href="https://github.com/Moya/Moya">Moya</a></li>
<li><a href="https://github.com/Kitura/BlueSocket">BlueSocket</a></li>
<li><a href="https://github.com/rhummelmose/BluetoothKit">BluetoothKit</a></li>
<li><a href="https://github.com/rushisangani/BiometricAuthentication">BiometricAuthentication</a> FaceID or TouchID authentication </li>
<li><a href="https://github.com/krzyzanowskim/CryptoSwift">CryptoSwift</a></li>
<li><a href="https://github.com/timdonnelly/Advance">Advance</a> Physics-based animations </li>
<li><a href="https://github.com/MengTo/Spring">Spring</a> 动画 </li>
<li><a href="https://github.com/jathu/UIImageColors">UIImageColors</a> 获取图片主次颜色 </li>
<li><a href="https://github.com/BradLarson/GPUImage3">GPUImage3</a> Metal 实现 </li>
<li><a href="https://github.com/exyte/Macaw">Macaw</a> SVG </li>
<li><a href="https://github.com/efremidze/Magnetic">Magnetic</a> SpriteKit气泡支持SwiftUI </li>
<li><a href="https://github.com/analogcode/Swift-Radio-Pro">Swift-Radio-Pro</a> 电台应用 </li>
<li><a href="https://github.com/suzuki-0000/SKPhotoBrowser">SKPhotoBrowser</a> 图片浏览 </li>
<li><a href="https://github.com/raywenderlich/swift-algorithm-club">swift-algorithm-club</a></li>
<li><a href="https://github.com/hyperoslo/Cache">Cache</a></li>
<li><a href="https://github.com/sunshinejr/SwiftyUserDefaults">SwiftyUserDefaults</a></li>
<li><a href="https://github.com/MonitorControl/MonitorControl">MonitorControl</a> 亮度和声音控制 </li>
<li><a href="https://github.com/kylef/Commander">Commander</a> 命令行 </li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a></li>
<li><a href="https://github.com/Carthage/Carthage">Carthage</a></li>
<li><a href="https://github.com/danielgindi/Charts">Charts</a></li>
<li><a href="https://github.com/Quick/Quick">Quick</a> 测试框架 </li>
<li><a href="https://github.com/bilibili/ijkplayer">ijkplayer</a> 播放器 </li>
<li><a href="https://github.com/schellingb/dosbox-pure">dosbox-pure</a> DOS 游戏模拟器 </li>
<li><a href="https://github.com/twostraws/HackingWithSwift">HackingWithSwift</a> 示例代码 </li>
<li><a href="https://github.com/glushchenko/fsnotes">fsnotes</a></li>
<li><a href="https://github.com/coteditor/CotEditor">CotEditor</a></li>
<li><a href="https://github.com/JoanKing/JKSwiftExtension">JKSwiftExtension</a> Swift常用扩展、组件、协议 </li>
<li><a href="https://github.com/infinum/iOS-Nuts-And-Bolts">iOS-Nuts-And-Bolts</a></li>
<li><a href="https://github.com/gtokman/ExtensionKit">ExtensionKit</a></li>
<li><a href="https://github.com/johnsundell/publish">publish</a> 用 swift 来写网站 </li>
<li><a href="https://github.com/mehdihadeli/awesome-software-architecture">awesome-software-architecture</a> 软件架构 </li>
<li><a href="https://github.com/NARKOZ/hacker-scripts">hacker-scripts</a> 程序员的活都让机器干的脚本（真实故事） </li>
<li><a href="https://github.com/nalexn/clean-architecture-swiftui">clean-architecture-swiftui</a> 干净完整的SwiftUI+Combine例子，包含网络和单元测试等 </li>
<li><a href="https://github.com/carekit-apple/CareKit">CareKit</a> 使用 SwiftUI 开发健康相关的库 </li>
<li><a href="https://github.com/carson-katri/awesome-result-builders">awesome-result-builders</a> Result Builders </li>
<li><a href="https://github.com/Cay-Zhang/SwiftSpeech">SwiftSpeech</a> 苹果语言识别封装库，已适配 SwiftUI </li>
<li><a href="https://github.com/NextLevel/NextLevel">NextLevel</a> 相机 </li>
<li><a href="https://github.com/Harley-xk/MaLiang">MaLiang</a> 基于 Metal 的涂鸦绘图库 </li>
<li><a href="https://github.com/chaozh/awesome-blockchain-cn">awesome-blockchain-cn</a> 区块链 awesome </li>
<li><a href="https://github.com/RobotsAndPencils/XcodesApp">XcodesApp</a> Xcode 多版本安装 </li>
<li><a href="https://github.com/WeTransfer/Mocker">Mocker</a> Mock Alamofire and URLSession </li>
<li><a href="https://github.com/gre4ixin/ReduxUI">ReduxUI</a> SwiftUI Redux 架构 </li>
<li><a href="https://github.com/ZeeZide/5GUIs">5GUIs</a> 可以分析程序用了哪些库，用了LLVM objdump </li>
<li><a href="https://github.com/pointfreeco/episode-code-samples">episode-code-samples</a></li>
<li><a href="https://github.com/SwiftPackageIndex/PackageList">PackageList</a></li>
<li><a href="https://github.com/sindresorhus/awesome">awesome</a> 内容广 </li>
<li><a href="https://github.com/dkhamsing/open-source-ios-apps">open-source-ios-apps</a> 开源的完整 App 例子 </li>
<li><a href="https://github.com/frzi/Model3DView">Model3DView</a> 毫不费力的使用 SwiftUI 渲染 3d models </li>
<li><a href="https://github.com/faisalmemon/ios-crash-dump-analysis-book">ios-crash-dump-analysis-book</a> iOS Crash Dump Analysis Book </li>
<li><a href="https://github.com/exyte/SVGView">SVGView</a> 支持 SwiftUI 的 SVG 解析渲染视图 </li>
<li><a href="https://github.com/krzysztofzablocki/Sourcery">Sourcery</a> Swift 元编程 </li>
<li><a href="https://github.com/jessesquires/TIL">TIL</a> 学习笔记 </li>
<li><a href="https://github.com/majd/ipatool">ipatool</a> 下载 ipa </li>
<li><a href="https://github.com/JohnSundell/Ink">Ink</a> Markdown 解析器 </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;先说两句废话（Don’t-blame-me-about-my-calculation）&quot;&gt;&lt;a href=&quot;#先说两句废话（Don’t-blame-me-about-my-calculation）&quot; class=&quot;headerlink&quot; title=&quot;先说两句废话
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>戴铭的 Swift 小册子 4.0</title>
    <link href="http://ming1016.github.io/2021/11/23/daiming-swift-pamphlet/"/>
    <id>http://ming1016.github.io/2021/11/23/daiming-swift-pamphlet/</id>
    <published>2021-11-23T08:28:18.000Z</published>
    <updated>2022-02-11T14:48:36.385Z</updated>
    
    <content type="html"><![CDATA[<p>update：内容已更新到 4.0 版本。十五万字的手册值得你来收藏！和分享，完美。</p>
<h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p>越来越多同学打算开始用 Swift 来开发了，可很多人以前都没接触过 Swift。这篇和我以前文章不同的是，本篇只是面向 Swift 零基础的同学，内容主要是一些直接可用的小例子，例子可以直接在工程中用或自己调试着看。</p>
<p>记得以前 PHP 有个 chm 的手册，写的很简单，但很全，每个知识点都有例子，社区版每个知识点下面还有留言互动。因此，我弄了个 Swift 的手册，是个 macOS 程序。建议使用我开发的这个 macOS 程序来浏览。源码地址：<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp">KwaiAppTeam/SwiftPamphletApp</a>，直接下载 dmg 地址：<a href="https://github.com/KwaiAppTeam/SwiftPamphletApp/files/8040117/Swift.4.1.dmg.zip">戴铭的Swift小册子4.1.dmg.zip</a></p>
<p><img src="https://user-images.githubusercontent.com/251980/152918704-9522eb27-9304-4788-b4ed-72ffb170e1bc.png" alt=""></p>
<p>这个程序是Swift写的，按照声明式UI，响应式编程范式开发的，源码也可以看看。与其讲一堆，不如调着试。</p>
<p>下面是文本内容。注：代码中简化变量名是为了能更快速关注到语言用法。</p>
<h2 id="语法速查"><a href="#语法速查" class="headerlink" title="语法速查"></a>语法速查</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="变量-let-var"><a href="#变量-let-var" class="headerlink" title="变量 let, var"></a>变量 let, var</h4><p>变量是可变的，使用 var 修饰，常量是不可变的，使用 let 修饰。类、结构体和枚举里的变量是属性。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v1:<span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;hi&quot;</span> <span class="comment">// 标注类型</span></span><br><span class="line"><span class="keyword">var</span> v2 <span class="operator">=</span> <span class="string">&quot;类型推导&quot;</span></span><br><span class="line"><span class="keyword">let</span> l1 <span class="operator">=</span> <span class="string">&quot;标题&quot;</span> <span class="comment">// 常量</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">var</span> p2: <span class="type">Int</span> &#123;</span><br><span class="line">        p1 <span class="operator">*</span> <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>属性没有 set 可以省略 get，如果有 set 需加 get。变量设置前通过 willSet 访问到，变量设置后通过 didSet 访问。</p>
<h4 id="打印-print-“”"><a href="#打印-print-“”" class="headerlink" title="打印 print(“”)"></a>打印 print(“”)</h4><p>控制台打印值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> i <span class="operator">=</span> <span class="number">14</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;9月<span class="subst">\(i)</span>是小柠檬的生日&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">3</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用terminator使循环打印更整洁</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">3</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(i)</span> &quot;</span>, terminator: <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释 //"></a>注释 //</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释第一行。</span></span><br><span class="line"><span class="comment">多行注释第二行。</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="comment">// MARK: 会在 minimap 上展示</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 待做</span></span><br><span class="line"><span class="comment">// <span class="doctag">FIXME:</span> 待修复</span></span><br></pre></td></tr></table></figure>
<h4 id="可选"><a href="#可选" class="headerlink" title="可选 ?, !"></a>可选 ?, !</h4><p>可能会是 nil 的变量就是可选变量。当变量为 nil 通过??操作符可以提供一个默认值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o: <span class="type">Int</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> i <span class="operator">=</span> o <span class="operator">??</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>闭包也可以叫做 lambda，是匿名函数，对应 OC 的 block。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 <span class="operator">=</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>].sorted(by: &#123; (l: <span class="type">Int</span>, r: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> l <span class="operator">&lt;</span> r</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 如果闭包是唯一的参数并在表达式最后可以使用结尾闭包语法，写法简化为</span></span><br><span class="line"><span class="keyword">let</span> a2 <span class="operator">=</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>].sorted &#123; (l: <span class="type">Int</span>, r: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> l <span class="operator">&lt;</span> r</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 已知类型可以省略</span></span><br><span class="line"><span class="keyword">let</span> a3 <span class="operator">=</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>].sorted &#123; l, r <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> l <span class="operator">&lt;</span> r</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过位置来使用闭包的参数，最后简化如下：</span></span><br><span class="line"><span class="keyword">let</span> a4 <span class="operator">=</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>].sorted &#123; <span class="variable">$0</span> <span class="operator">&lt;</span> <span class="variable">$1</span> &#125;</span><br></pre></td></tr></table></figure>
<p>函数也是闭包的一种，函数的参数也可以是闭包。@escaping 表示逃逸闭包，逃逸闭包是可以在函数返回之后继续调用的。@autoclosure 表示自动闭包，可以用来省略花括号。</p>
<h4 id="函数-func"><a href="#函数-func" class="headerlink" title="函数 func"></a>函数 func</h4><p>函数可以作为另一个函数的参数，也可以作为另一个函数的返回。函数是特殊的闭包，在类、结构体和枚举中是方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为参数设置默认值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span>(<span class="params">p</span>: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;p&quot;</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="string">&quot;p is <span class="subst">\(p)</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span>(<span class="params">fn</span>: (<span class="type">String</span>) -&gt; <span class="type">String</span>, <span class="params">p</span>: <span class="type">String</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fn(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f2(fn:f1, p: <span class="string">&quot;d&quot;</span>)) <span class="comment">// p is d</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作为返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span>(<span class="params">p</span>: <span class="type">String</span>)</span> -&gt; (<span class="type">String</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> f1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f3(p: <span class="string">&quot;yes&quot;</span>)(<span class="string">&quot;no&quot;</span>)) <span class="comment">// p is no</span></span><br></pre></td></tr></table></figure>
<p>函数可以返回多个值，函数是可以嵌套的，也就是函数里内可以定义函数，函数内定义的函数可以访问自己作用域外函数内的变量。inout 表示的是输入输出参数，函数可以在函数内改变输入输出参数。defer 标识的代码块会在函数返回之前执行。</p>
<p>函数在 Swift 5.4 时开始有了使用多个变量参数的能力，使用方法如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f4</span>(<span class="params">s</span>: <span class="type">String</span>..., <span class="params">i</span>: <span class="type">Int</span>...)</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f4(s: <span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, i: <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">/// [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br><span class="line"><span class="comment">/// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<p>嵌套函数可以重载，嵌套函数可以在声明函数之前调用他。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f5</span>()</span> &#123;</span><br><span class="line">    nf5()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">nf5</span>()</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is nested function&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">f5() <span class="comment">// this is nested function</span></span><br></pre></td></tr></table></figure>
<h4 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h4><p>在 Xcode 里的 target 就是模块，使用 import 可导入模块。模块内包含源文件，每个源文件里可以有多个类、结构体、枚举和函数等多种类型。访问级别可以通过一些关键字描述，分为如下几种：</p>
<ul>
<li>open：在模块外可以调用和继承。</li>
<li>public：在模块外可调用不可继承，open 只适用类和类成员。</li>
<li>internal：默认级别，模块内可跨源文件调用，模块外不可调用。</li>
<li>fileprivate：只能在源文件内访问。</li>
<li>private：只能在所在的作用域内访问。</li>
</ul>
<p>重写继承类的成员，可以设置成员比父类的这个成员更高的访问级别。Setter 的级别可以低于对应的 Getter 的级别，比如设置 Setter 访问级别为 private，可以在属性使用 private(set) 来修饰。</p>
<h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><h4 id="数字-Int-Float"><a href="#数字-Int-Float" class="headerlink" title="数字 Int, Float"></a>数字 Int, Float</h4><p>数字的类型有 Int、Float 和 Double</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Int</span></span><br><span class="line"><span class="keyword">let</span> i1 <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> i2 <span class="operator">=</span> <span class="number">22</span></span><br><span class="line"><span class="built_in">print</span>(i1 <span class="operator">/</span> i2) <span class="comment">// 向下取整得 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Float</span></span><br><span class="line"><span class="keyword">let</span> f1: <span class="type">Float</span> <span class="operator">=</span> <span class="number">100.0</span></span><br><span class="line"><span class="keyword">let</span> f2: <span class="type">Float</span> <span class="operator">=</span> <span class="number">22.0</span></span><br><span class="line"><span class="built_in">print</span>(f1 <span class="operator">/</span> f2) <span class="comment">// 4.5454545</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f3: <span class="type">Float16</span> <span class="operator">=</span> <span class="number">5.0</span> <span class="comment">// macOS 还不能用</span></span><br><span class="line"><span class="keyword">let</span> f4: <span class="type">Float32</span> <span class="operator">=</span> <span class="number">5.0</span></span><br><span class="line"><span class="keyword">let</span> f5: <span class="type">Float64</span> <span class="operator">=</span> <span class="number">5.0</span></span><br><span class="line"><span class="keyword">let</span> f6: <span class="type">Float80</span> <span class="operator">=</span> <span class="number">5.0</span></span><br><span class="line"><span class="built_in">print</span>(f4, f5, f6) <span class="comment">// 5.0 5.0 5.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Double</span></span><br><span class="line"><span class="keyword">let</span> d1: <span class="type">Double</span> <span class="operator">=</span> <span class="number">100.0</span></span><br><span class="line"><span class="keyword">let</span> d2: <span class="type">Double</span> <span class="operator">=</span> <span class="number">22.0</span></span><br><span class="line"><span class="built_in">print</span>(d1 <span class="operator">/</span> d2) <span class="comment">// 4.545454545454546</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Int</span>(<span class="number">0b10101</span>)) <span class="comment">// 0b 开头是二进制 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Int</span>(<span class="number">0x00afff</span>)) <span class="comment">// 0x 开头是十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2.5e4</span>) <span class="comment">// 2.5x10^4 十进制用 e</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0xAp2</span>) <span class="comment">// 10*2^2  十六进制用 p</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2_000_000</span>) <span class="comment">// 2000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isMultiple(of:) 方法检查一个数字是否是另一个数字的倍数</span></span><br><span class="line"><span class="keyword">let</span> i3 <span class="operator">=</span> <span class="number">36</span></span><br><span class="line"><span class="built_in">print</span>(i3.isMultiple(of: <span class="number">9</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>处理数字有 floor、ceil、round。floor 是向下取整，只取整数部分；cell 是向上取整，只要有不为零的小数，整数就加1;round 是四舍五入。       </p>
<h4 id="布尔数-Bool"><a href="#布尔数-Bool" class="headerlink" title="布尔数 Bool"></a>布尔数 Bool</h4><p>布尔数有 true 和 false 两种值，还有一个能够切换这两个值的 toggle 方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">b.toggle() <span class="comment">// true</span></span><br><span class="line">b.toggle() <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h4 id="元组-a-b-c"><a href="#元组-a-b-c" class="headerlink" title="元组 (a, b, c)"></a>元组 (a, b, c)</h4><p>元组里的值类型可以是不同的。元组可以看成是匿名的结构体。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t1 <span class="operator">=</span> (p1: <span class="number">1</span>, p2: <span class="string">&quot;two&quot;</span>, p3: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(t1.p1)</span><br><span class="line"><span class="built_in">print</span>(t1.p3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型推导</span></span><br><span class="line"><span class="keyword">let</span> t2 <span class="operator">=</span> (<span class="number">1</span>, <span class="string">&quot;two&quot;</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过下标访问</span></span><br><span class="line"><span class="built_in">print</span>(t2.<span class="number">1</span>) <span class="comment">// two</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分解元组</span></span><br><span class="line"><span class="keyword">let</span> (dp1, dp2, <span class="keyword">_</span>) <span class="operator">=</span> t2</span><br><span class="line"><span class="built_in">print</span>(dp1)</span><br><span class="line"><span class="built_in">print</span>(dp2)</span><br></pre></td></tr></table></figure>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 <span class="operator">=</span> <span class="string">&quot;Hi! This is a string. Cool?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 转义符 \n 表示换行。</span></span><br><span class="line"><span class="comment">/// 其它转义字符有 \0 空字符)、\t 水平制表符 、\n 换行符、\r 回车符</span></span><br><span class="line"><span class="keyword">let</span> s2 <span class="operator">=</span> <span class="string">&quot;Hi!<span class="subst">\n</span>This is a string. Cool?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行</span></span><br><span class="line"><span class="keyword">let</span> s3 <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Hi!</span></span><br><span class="line"><span class="string">This is a string.</span></span><br><span class="line"><span class="string">Cool?</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 长度</span></span><br><span class="line"><span class="built_in">print</span>(s3.count)</span><br><span class="line"><span class="built_in">print</span>(s3.isEmpty)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接</span></span><br><span class="line"><span class="built_in">print</span>(s3 <span class="operator">+</span> <span class="string">&quot;<span class="subst">\n</span>Sure!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串中插入变量</span></span><br><span class="line"><span class="keyword">let</span> i <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Today is good day, double <span class="subst">\(i)</span><span class="subst">\(i)</span>!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 遍历字符串</span></span><br><span class="line"><span class="comment">/// 输出：</span></span><br><span class="line"><span class="comment">/// o</span></span><br><span class="line"><span class="comment">/// n</span></span><br><span class="line"><span class="comment">/// e</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;one&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="built_in">print</span>(s3.lowercased().contains(<span class="string">&quot;cool&quot;</span>)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换</span></span><br><span class="line"><span class="keyword">let</span> s4 <span class="operator">=</span> <span class="string">&quot;one is two&quot;</span></span><br><span class="line"><span class="keyword">let</span> newS4 <span class="operator">=</span> s4.replacingOccurrences(of: <span class="string">&quot;two&quot;</span>, with: <span class="string">&quot;one&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(newS4)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除空格和换行</span></span><br><span class="line"><span class="keyword">let</span> s5 <span class="operator">=</span> <span class="string">&quot; Simple line. <span class="subst">\n</span><span class="subst">\n</span>  &quot;</span></span><br><span class="line"><span class="built_in">print</span>(s5.trimmingCharacters(in: .whitespacesAndNewlines))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切割成数组</span></span><br><span class="line"><span class="keyword">let</span> s6 <span class="operator">=</span> <span class="string">&quot;one/two/three&quot;</span></span><br><span class="line"><span class="keyword">let</span> a1 <span class="operator">=</span> s6.components(separatedBy: <span class="string">&quot;/&quot;</span>) <span class="comment">// 继承自 NSString 的接口</span></span><br><span class="line"><span class="built_in">print</span>(a1) <span class="comment">// [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a2 <span class="operator">=</span> s6.split(separator: <span class="string">&quot;/&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a2) <span class="comment">// [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;] 属于切片，性能较 components 更好</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是某种类型</span></span><br><span class="line"><span class="keyword">let</span> c1: <span class="type">Character</span> <span class="operator">=</span> <span class="string">&quot;🤔&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c1.isASCII) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">print</span>(c1.isSymbol) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(c1.isLetter) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">print</span>(c1.isNumber) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">print</span>(c1.isUppercase) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串和 Data 互转</span></span><br><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> <span class="type">Data</span>(<span class="string">&quot;hi&quot;</span>.utf8)</span><br><span class="line"><span class="keyword">let</span> s7 <span class="operator">=</span> <span class="type">String</span>(decoding: data, as: <span class="type">UTF8</span>.<span class="keyword">self</span>)</span><br><span class="line"><span class="built_in">print</span>(s7) <span class="comment">// hi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串可以当作集合来用。</span></span><br><span class="line"><span class="keyword">let</span> revered <span class="operator">=</span> s7.reversed()</span><br><span class="line"><span class="built_in">print</span>(<span class="type">String</span>(revered))</span><br></pre></td></tr></table></figure>
<p>Unicode、Character 和 SubString 等内容参见官方字符串文档：<a href="https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html">Strings and Characters — The Swift Programming Language (Swift 5.1)</a></p>
<p>字符串字面符号可以参看《<a href="https://www.swiftbysundell.com/articles/string-literals-in-swift/">String literals in Swift</a>》。</p>
<p>原始字符串<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始字符串在字符串前加上一个或多个#符号。里面的双引号和转义符号将不再起作用了，如果想让转义符起作用，需要在转义符后面加上#符号。</span></span><br><span class="line"><span class="keyword">let</span> s8 <span class="operator">=</span> <span class="string">#&quot;\(s7)<span class="subst">\#(s7)</span> &quot;one&quot; and &quot;two&quot;\n. <span class="subst">\#n</span>The second line.&quot;#</span></span><br><span class="line"><span class="built_in">print</span>(s8)</span><br><span class="line"><span class="comment">/// \(s7)hi &quot;one&quot; and &quot;two&quot;\n.</span></span><br><span class="line"><span class="comment">/// The second line.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始字符串在正则使用效果更佳，反斜杠更少了。</span></span><br><span class="line"><span class="keyword">let</span> s9 <span class="operator">=</span> <span class="string">&quot;<span class="subst">\\</span><span class="subst">\\</span>[A-Z]+[A-Za-z]+<span class="subst">\\</span>.[a-z]+&quot;</span></span><br><span class="line"><span class="keyword">let</span> s10 <span class="operator">=</span> <span class="string">#&quot;\\[A-Z]+[A-Za-z]+\.[a-z]+&quot;#</span></span><br><span class="line"><span class="built_in">print</span>(s9) <span class="comment">// \\[A-Z]+[A-Za-z]+\.[a-z]+</span></span><br><span class="line"><span class="built_in">print</span>(s10) <span class="comment">// \\[A-Z]+[A-Za-z]+\.[a-z]+</span></span><br></pre></td></tr></table></figure></p>
<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>Swift的枚举有类的一些特性，比如计算属性、实例方法、扩展、遵循协议等等。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E1</span>:<span class="title">String</span>, <span class="title">CaseIterable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> e1, e2 <span class="operator">=</span> <span class="string">&quot;12&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关联值</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> e1([<span class="type">String</span>])</span><br><span class="line">    <span class="keyword">case</span> e2(<span class="type">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> e1 <span class="operator">=</span> <span class="type">E2</span>.e1([<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>])</span><br><span class="line"><span class="keyword">let</span> e2 <span class="operator">=</span> <span class="type">E2</span>.e2(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> e1 &#123;</span><br><span class="line"><span class="keyword">case</span> .e1(<span class="keyword">let</span> array):</span><br><span class="line">    <span class="built_in">print</span>(array)</span><br><span class="line"><span class="keyword">case</span> .e2(<span class="keyword">let</span> int):</span><br><span class="line">    <span class="built_in">print</span>(int)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(e2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">E1</span>.e1.rawValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遵循 CaseIterable 协议可迭代</span></span><br><span class="line"><span class="keyword">for</span> ie <span class="keyword">in</span> <span class="type">E1</span>.allCases &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;show <span class="subst">\(ie)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归枚举</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RE</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> v(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">indirect</span> <span class="keyword">case</span> node(l:<span class="type">RE</span>, r:<span class="type">RE</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lNode <span class="operator">=</span> <span class="type">RE</span>.v(<span class="string">&quot;left&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> rNode <span class="operator">=</span> <span class="type">RE</span>.v(<span class="string">&quot;right&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> pNode <span class="operator">=</span> <span class="type">RE</span>.node(l: lNode, r: rNode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> pNode &#123;</span><br><span class="line"><span class="keyword">case</span> .v(<span class="keyword">let</span> string):</span><br><span class="line">    <span class="built_in">print</span>(string)</span><br><span class="line"><span class="keyword">case</span> .node(<span class="keyword">let</span> l, <span class="keyword">let</span> r):</span><br><span class="line">    <span class="built_in">print</span>(l,r)</span><br><span class="line">    <span class="keyword">switch</span> l &#123;</span><br><span class="line">    <span class="keyword">case</span> .v(<span class="keyword">let</span> string):</span><br><span class="line">        <span class="built_in">print</span>(string)</span><br><span class="line">    <span class="keyword">case</span> .node(<span class="keyword">let</span> l, <span class="keyword">let</span> r):</span><br><span class="line">        <span class="built_in">print</span>(l, r)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> r &#123;</span><br><span class="line">    <span class="keyword">case</span> .v(<span class="keyword">let</span> string):</span><br><span class="line">        <span class="built_in">print</span>(string)</span><br><span class="line">    <span class="keyword">case</span> .node(<span class="keyword">let</span> l, <span class="keyword">let</span> r):</span><br><span class="line">        <span class="built_in">print</span>(l, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@unknown 用来区分固定的枚举和可能改变的枚举的能力。@unknown 用于防止未来新增枚举属性会进行提醒提示完善每个 case 的处理。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @unknown</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> e1, e2, e3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fe1</span>(<span class="params">e</span>: <span class="type">E3</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> e &#123;</span><br><span class="line">    <span class="keyword">case</span> .e1:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;e1 ok&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> .e2:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;e2 ok&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> .e3:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;e3 ok&quot;</span>)</span><br><span class="line">    <span class="keyword">@unknown</span> <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;not ok&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>符合 Comparable 协议的枚举可以进行比较。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Comparable 枚举比较</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E4</span>: <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> e1, e2</span><br><span class="line">    <span class="keyword">case</span> e3(i: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> e4</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> e3 <span class="operator">=</span> <span class="type">E4</span>.e4</span><br><span class="line"><span class="keyword">let</span> e4 <span class="operator">=</span> <span class="type">E4</span>.e3(i: <span class="number">3</span>)</span><br><span class="line"><span class="keyword">let</span> e5 <span class="operator">=</span> <span class="type">E4</span>.e3(i: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> e6 <span class="operator">=</span> <span class="type">E4</span>.e1</span><br><span class="line"><span class="built_in">print</span>(e3 <span class="operator">&gt;</span> e4) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> a1 <span class="operator">=</span> [e3, e4, e5, e6]</span><br><span class="line"><span class="keyword">let</span> a2 <span class="operator">=</span> a1.sorted()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a2 &#123;</span><br><span class="line">    <span class="built_in">print</span>(i.<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// e1</span></span><br><span class="line"><span class="comment">/// e3(i: 2)</span></span><br><span class="line"><span class="comment">/// e3(i: 3)</span></span><br><span class="line"><span class="comment">/// e4</span></span><br></pre></td></tr></table></figure>
<h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p>泛型可以减少重复代码，是一种抽象的表达方式。where 关键字可以对泛型做约束。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fn</span>&lt;<span class="type">T</span>&gt;(<span class="params">p</span>: <span class="type">T</span>)</span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> r <span class="operator">=</span> [<span class="type">T</span>]()</span><br><span class="line">    r.append(p)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(fn(p: <span class="string">&quot;one&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr <span class="operator">=</span> [<span class="type">T</span>]()</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">add</span>(<span class="keyword">_</span> <span class="params">p</span>: <span class="type">T</span>)</span> &#123;</span><br><span class="line">        arr.append(p)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 <span class="operator">=</span> <span class="type">S1</span>(arr: [<span class="string">&quot;zero&quot;</span>])</span><br><span class="line">s1.add(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">s1.add(<span class="string">&quot;two&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s1.arr) <span class="comment">// [&quot;zero&quot;, &quot;one&quot;, &quot;two&quot;]</span></span><br></pre></td></tr></table></figure>
<p>关联类型</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">pc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">T</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">add</span>(<span class="keyword">_</span> <span class="params">p</span>: <span class="type">T</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span>: <span class="title">pc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">T</span> <span class="operator">=</span> <span class="type">String</span> <span class="comment">// 类型推导，可省略</span></span><br><span class="line">    <span class="keyword">var</span> strs <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">add</span>(<span class="keyword">_</span> <span class="params">p</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">        strs.append(p)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>泛型适用于嵌套类型<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S3</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S4</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> p: <span class="type">T</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> p1: <span class="type">T</span></span><br><span class="line">    <span class="keyword">var</span> p2: <span class="type">S4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 <span class="operator">=</span> <span class="type">S3</span>(p1: <span class="number">1</span>, p2: <span class="type">S3</span>.<span class="type">S4</span>(p: <span class="number">3</span>))</span><br><span class="line"><span class="keyword">let</span> s3 <span class="operator">=</span> <span class="type">S3</span>(p1: <span class="string">&quot;one&quot;</span>, p2: <span class="type">S3</span>.<span class="type">S4</span>(p: <span class="string">&quot;three&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(s2,s3)</span><br></pre></td></tr></table></figure></p>
<h4 id="不透明类型"><a href="#不透明类型" class="headerlink" title="不透明类型"></a>不透明类型</h4><p>不透明类型会隐藏类型，让使用者更关注功能。不透明类型和协议很类似，不同的是不透明比协议限定的要多，协议能够对应更多类型。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">P</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">f</span>()</span> -&gt; <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span>: <span class="title">P</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">f</span>()</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;one<span class="subst">\n</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span>&lt;<span class="title">T</span>: <span class="title">P</span>&gt;: <span class="title">P</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p: <span class="type">T</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">f</span>()</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> p.f() <span class="operator">+</span> <span class="string">&quot;two<span class="subst">\n</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S3</span>&lt;<span class="title">T1</span>: <span class="title">P</span>, <span class="title">T2</span>: <span class="title">P</span>&gt;: <span class="title">P</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p1: <span class="type">T1</span></span><br><span class="line">    <span class="keyword">var</span> p2: <span class="type">T2</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">f</span>()</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> p1.f() <span class="operator">+</span> p2.f() <span class="operator">+</span> <span class="string">&quot;three<span class="subst">\n</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">someP</span>()</span> -&gt; <span class="keyword">some</span> <span class="type">P</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">S3</span>(p1: <span class="type">S1</span>(), p2: <span class="type">S2</span>(p: <span class="type">S1</span>()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r <span class="operator">=</span> someP()</span><br><span class="line"><span class="built_in">print</span>(r.f())</span><br></pre></td></tr></table></figure>
<p>函数调用者决定返回什么类型是泛型，函数自身决定返回什么类型使用不透明返回类型。</p>
<h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><p>Result 类型用来处理错误，特别适用异步接口的错误处理。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">URLSession</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dataTaskWithResult</span>(</span></span><br><span class="line"><span class="function">        <span class="params">with</span> <span class="params">url</span>: <span class="type">URL</span>,</span></span><br><span class="line"><span class="function">        <span class="params">handler</span>: <span class="keyword">@escaping</span> (<span class="type">Result</span>&lt;<span class="type">Data</span>, <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span></span></span><br><span class="line"><span class="function">    )</span> -&gt; <span class="type">URLSessionDataTask</span> &#123;</span><br><span class="line">        dataTask(with: url) &#123; data, <span class="keyword">_</span>, err <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> err <span class="operator">=</span> err &#123;</span><br><span class="line">                handler(.failure(err))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handler(.success(data <span class="operator">??</span> <span class="type">Data</span>()))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://ming1016.github.io/&quot;</span>)<span class="operator">!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以前网络请求</span></span><br><span class="line"><span class="keyword">let</span> t1 <span class="operator">=</span> <span class="type">URLSession</span>.shared.dataTask(with: url) &#123;</span><br><span class="line">    data, <span class="keyword">_</span>, error <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> err <span class="operator">=</span> error &#123;</span><br><span class="line">        <span class="built_in">print</span>(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> data &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="type">String</span>(decoding: data, as: <span class="type">UTF8</span>.<span class="keyword">self</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">t1.resume()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Result 网络请求</span></span><br><span class="line"><span class="keyword">let</span> t2 <span class="operator">=</span> <span class="type">URLSession</span>.shared.dataTaskWithResult(with: url) &#123; result <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> result &#123;</span><br><span class="line">    <span class="keyword">case</span> .success(<span class="keyword">let</span> data):</span><br><span class="line">        <span class="built_in">print</span>(<span class="type">String</span>(decoding: data, as: <span class="type">UTF8</span>.<span class="keyword">self</span>))</span><br><span class="line">    <span class="keyword">case</span> .failure(<span class="keyword">let</span> err):</span><br><span class="line">        <span class="built_in">print</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">t2.resume()</span><br></pre></td></tr></table></figure>
<h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>使用 is 关键字进行类型判断， 使用as 关键字来转换成子类。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S0</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S1</span>: <span class="title">S0</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2</span>: <span class="title">S0</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> [<span class="type">S0</span>]()</span><br><span class="line">a.append(<span class="type">S1</span>())</span><br><span class="line">a.append(<span class="type">S2</span>())</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> a &#123;</span><br><span class="line">    <span class="comment">// 类型判断</span></span><br><span class="line">    <span class="keyword">if</span> e <span class="keyword">is</span> <span class="type">S1</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Type is S1&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> e <span class="keyword">is</span> <span class="type">S2</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Type is S2&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用 as 关键字转换成子类</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> s1 <span class="operator">=</span> e <span class="keyword">as?</span> <span class="type">S1</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;As S1 <span class="subst">\(s1)</span>&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> s2 <span class="operator">=</span> e <span class="keyword">as?</span> <span class="type">S2</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;As S2 <span class="subst">\(s2)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类和结构体"><a href="#类和结构体" class="headerlink" title="类和结构体"></a>类和结构体</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>类可以定义属性、方法、构造器、下标操作。类使用扩展来扩展功能，遵循协议。类还以继承，运行时检查实例类型。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p: <span class="type">String</span></span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">p</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.p <span class="operator">=</span> p</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 下标操作</span></span><br><span class="line">    <span class="function"><span class="keyword">subscript</span>(<span class="params">s</span>: <span class="type">String</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> p <span class="operator">+</span> s</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            p <span class="operator">=</span> s <span class="operator">+</span> newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c <span class="operator">=</span> <span class="type">C</span>(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c.p)</span><br><span class="line"><span class="built_in">print</span>(c[<span class="string">&quot; ming&quot;</span>])</span><br><span class="line">c[<span class="string">&quot;k&quot;</span>] <span class="operator">=</span> <span class="string">&quot;v&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c.p)</span><br></pre></td></tr></table></figure>
<h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><p>结构体是值类型，可以定义属性、方法、构造器、下标操作。结构体使用扩展来扩展功能，遵循协议。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p1: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> p2: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">f</span>()</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> p1 <span class="operator">+</span> <span class="type">String</span>(p2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s <span class="operator">=</span> <span class="type">S</span>(p2: <span class="number">1</span>)</span><br><span class="line">s.p1 <span class="operator">=</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.f()) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>类、结构体或枚举里的变量常量就是他们的属性。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> sp <span class="operator">=</span> <span class="string">&quot;类型属性&quot;</span> <span class="comment">// 类型属性通过类型本身访问，非实例访问</span></span><br><span class="line">    <span class="keyword">var</span> p1: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> p2: <span class="type">Int</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="comment">// cp 是计算属性</span></span><br><span class="line">    <span class="keyword">var</span> cp: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> p2 <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            p2 <span class="operator">=</span> newValue <span class="operator">+</span> <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有 getter 的是只读计算属性</span></span><br><span class="line">    <span class="keyword">var</span> rcp: <span class="type">Int</span> &#123;</span><br><span class="line">        p2 <span class="operator">*</span> <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="type">S</span>.sp)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">S</span>().cp) <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> s <span class="operator">=</span> <span class="type">S</span>()</span><br><span class="line">s.cp <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(s.p2) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">S</span>().rcp) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<p>willSet 和 didSet 是属性观察器，可以在属性值设置前后插入自己的逻辑处理。</p>
<p>键路径表达式作为函数</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> p2: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 <span class="operator">=</span> <span class="type">S2</span>(p1: <span class="string">&quot;one&quot;</span>, p2: <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> s3 <span class="operator">=</span> <span class="type">S2</span>(p1: <span class="string">&quot;two&quot;</span>, p2: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> a1 <span class="operator">=</span> [s2, s3]</span><br><span class="line"><span class="keyword">let</span> a2 <span class="operator">=</span> a1.map(\.p1)</span><br><span class="line"><span class="built_in">print</span>(a2) <span class="comment">// [&quot;one&quot;, &quot;two&quot;]</span></span><br></pre></td></tr></table></figure>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> one, two, three</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showRawValue</span>()</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(rawValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> e <span class="operator">=</span> <span class="type">E</span>.three</span><br><span class="line">e.showRawValue() <span class="comment">// three</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变的实例方法，使用 mutating 标记</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p: <span class="type">String</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">addFullStopForP</span>()</span> &#123;</span><br><span class="line">        p <span class="operator">+=</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s <span class="operator">=</span> <span class="type">S</span>(p: <span class="string">&quot;hi&quot;</span>)</span><br><span class="line">s.addFullStopForP()</span><br><span class="line"><span class="built_in">print</span>(s.p)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">cf</span>() </span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类方法&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>static和class关键字修饰的方法类似 OC 的类方法。static 可以修饰存储属性，而 class 不能；class 修饰的方法可以继承，而 static 不能。在协议中需用 static 来修饰。</p>
<p>静态下标方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态下标</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> sp <span class="operator">=</span> [<span class="type">String</span>: <span class="type">Int</span>]()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">subscript</span>(<span class="keyword">_</span> <span class="params">s</span>: <span class="type">String</span>, <span class="params">d</span>: <span class="type">Int</span> <span class="operator">=</span> <span class="number">10</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sp[s] <span class="operator">??</span> d</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            sp[s] <span class="operator">=</span> newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">S2</span>[<span class="string">&quot;key1&quot;</span>] <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="type">S2</span>[<span class="string">&quot;key2&quot;</span>] <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">S2</span>[<span class="string">&quot;key2&quot;</span>]) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">S2</span>[<span class="string">&quot;key3&quot;</span>]) <span class="comment">// 10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>自定义类型中实现了 callAsFunction() 的话，该类型的值就可以直接调用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// callAsFunction()</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p1: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">callAsFunction</span>()</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;show <span class="subst">\(p1)</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s2 <span class="operator">=</span> <span class="type">S3</span>(p1: <span class="string">&quot;hi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s2()) <span class="comment">// show hi</span></span><br></pre></td></tr></table></figure>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>类能继承另一个类，继承它的方法、属性等。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p1: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> cp1: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> p1 <span class="operator">+</span> <span class="string">&quot; like ATM&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            p1 <span class="operator">=</span> p1 <span class="operator">+</span> newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">p1</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.p1 <span class="operator">=</span> p1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span>()</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hi! <span class="subst">\(p1)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span>: <span class="title">C1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p2: <span class="type">String</span></span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">p2</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.p2 <span class="operator">=</span> p2</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(p1: p2 <span class="operator">+</span> <span class="string">&quot;&#x27;s father&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">C2</span>(p2: <span class="string">&quot;Lemon&quot;</span>).sayHi() <span class="comment">// Hi! Lemon&#x27;s father</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写父类方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C3</span>: <span class="title">C2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">sayHi</span>()</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hi! <span class="subst">\(p2)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">C3</span>(p2: <span class="string">&quot;Lemon&quot;</span>).sayHi() <span class="comment">// Hi! Lemon</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写计算属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C4</span>: <span class="title">C1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> cp1: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> p1 <span class="operator">+</span> <span class="string">&quot; like Out of the blade&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            p1 <span class="operator">=</span> p1 <span class="operator">+</span> newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">C1</span>(p1: <span class="string">&quot;Lemon&quot;</span>).cp1) <span class="comment">// Lemon like ATM</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">C4</span>(p1: <span class="string">&quot;Lemon&quot;</span>).cp1) <span class="comment">// Lemon like Out of the blade</span></span><br></pre></td></tr></table></figure>
<p>通过 final 关键字可以防止类被继承，final 还可以用于属性和方法。使用 super 关键字指代父类。</p>
<h3 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>map 可以依次处理数组中元素，并返回一个处理后的新数组。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 <span class="operator">=</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> a2 <span class="operator">=</span> a1.map &#123;</span><br><span class="line">    <span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(a2) <span class="comment">// [&quot;a2&quot;, &quot;b2&quot;, &quot;c2&quot;]</span></span><br></pre></td></tr></table></figure>
<p>使用 compactMap 可以过滤 nil 的元素。flatMap 会将多个数组合成一个数组返回。</p>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>根据指定条件返回</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 <span class="operator">=</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;call my name&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> a2 <span class="operator">=</span> a1.filter &#123;</span><br><span class="line">    <span class="variable">$0</span>.prefix(<span class="number">1</span>) <span class="operator">==</span> <span class="string">&quot;c&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(a2) <span class="comment">// [&quot;c&quot;, &quot;call my name&quot;]</span></span><br></pre></td></tr></table></figure>
<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>reduce 可以将迭代中返回的结果用于下个迭代中，并，还能让你设个初始值。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 <span class="operator">=</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;call my name.&quot;</span>, <span class="string">&quot;get it?&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> a2 <span class="operator">=</span> a1.reduce(<span class="string">&quot;Hey u,&quot;</span>, &#123; partialResult, s <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// partialResult 是前面返回的值，s 是遍历到当前的值</span></span><br><span class="line">    partialResult <span class="operator">+</span> <span class="string">&quot; <span class="subst">\(s)</span>&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a2) <span class="comment">// Hey u, a b c call my name. get it?</span></span><br></pre></td></tr></table></figure>
<h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><p>排序</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型遵循 Comparable</span></span><br><span class="line"><span class="keyword">let</span> a1 <span class="operator">=</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;call my name.&quot;</span>, <span class="string">&quot;get it?&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> a2 <span class="operator">=</span> a1.sorted()</span><br><span class="line"><span class="keyword">let</span> a3 <span class="operator">=</span> a1.sorted(by: <span class="operator">&gt;</span>)</span><br><span class="line"><span class="keyword">let</span> a4 <span class="operator">=</span> a1.sorted(by: <span class="operator">&lt;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a2) <span class="comment">// Hey u, a b c call my name. get it?</span></span><br><span class="line"><span class="built_in">print</span>(a3) <span class="comment">// [&quot;get it?&quot;, &quot;call my name.&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;]</span></span><br><span class="line"><span class="built_in">print</span>(a4) <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;call my name.&quot;, &quot;get it?&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型不遵循 Comparable</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> i: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a5 <span class="operator">=</span> [<span class="type">S</span>(s: <span class="string">&quot;a&quot;</span>, i: <span class="number">0</span>), <span class="type">S</span>(s: <span class="string">&quot;b&quot;</span>, i: <span class="number">1</span>), <span class="type">S</span>(s: <span class="string">&quot;c&quot;</span>, i: <span class="number">2</span>)]</span><br><span class="line"><span class="keyword">let</span> a6 <span class="operator">=</span> a5</span><br><span class="line">    .sorted &#123; l, r <span class="keyword">in</span></span><br><span class="line">        l.i <span class="operator">&gt;</span> r.i</span><br><span class="line">    &#125;</span><br><span class="line">    .map &#123;</span><br><span class="line">        <span class="variable">$0</span>.i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a6) <span class="comment">// [2, 1, 0]</span></span><br></pre></td></tr></table></figure>
<h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="If-•-If-let-•-If-case-let"><a href="#If-•-If-let-•-If-case-let" class="headerlink" title="If • If let • If case let"></a>If • If let • If case let</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if</span></span><br><span class="line"><span class="keyword">let</span> s <span class="operator">=</span> <span class="string">&quot;hi&quot;</span></span><br><span class="line"><span class="keyword">if</span> s.isEmpty &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;String is Empty&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;String is <span class="subst">\(s)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元条件</span></span><br><span class="line">s.isEmpty <span class="operator">?</span> <span class="built_in">print</span>(<span class="string">&quot;String is Empty again&quot;</span>) : <span class="built_in">print</span>(<span class="string">&quot;String is <span class="subst">\(s)</span> again&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// if let-else</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span>(<span class="params">s</span>: <span class="type">String</span>?)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> s1 <span class="operator">=</span> s &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;s1 is <span class="subst">\(s1)</span>&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;s1 is nothing&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// nil-coalescing</span></span><br><span class="line">    <span class="keyword">let</span> s2 <span class="operator">=</span> s <span class="operator">??</span> <span class="string">&quot;nothing&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;s2 is <span class="subst">\(s2)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">f(s: <span class="string">&quot;something&quot;</span>)</span><br><span class="line">f(s: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// if case let</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> c1(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> c2([<span class="type">String</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">des</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .c1(<span class="keyword">let</span> string):</span><br><span class="line">            <span class="built_in">print</span>(string)</span><br><span class="line">        <span class="keyword">case</span> .c2(<span class="keyword">let</span> array):</span><br><span class="line">            <span class="built_in">print</span>(array)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">E</span>.c1(<span class="string">&quot;enum c1&quot;</span>).des()</span><br><span class="line"><span class="type">E</span>.c2([<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>]).des()</span><br></pre></td></tr></table></figure>
<h4 id="Guard-guard-guard-let"><a href="#Guard-guard-guard-let" class="headerlink" title="Guard guard, guard let"></a>Guard guard, guard let</h4><p>更好地处理异常情况</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// guard</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span>(<span class="params">p</span>: <span class="type">String</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> p.isEmpty <span class="operator">!=</span> <span class="literal">true</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Empty string.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;String <span class="subst">\(p)</span> is not empty.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f1(p: <span class="string">&quot;&quot;</span>)) <span class="comment">// Empty string.</span></span><br><span class="line"><span class="built_in">print</span>(f1(p: <span class="string">&quot;lemon&quot;</span>)) <span class="comment">// String lemon is not empty.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// guard let</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span>(<span class="params">p1</span>: <span class="type">String</span>?)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> p2 <span class="operator">=</span> p1 <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Nil.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;String <span class="subst">\(p2)</span> is not nil.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f2(p1: <span class="literal">nil</span>)) <span class="comment">// Nil.</span></span><br><span class="line"><span class="built_in">print</span>(f2(p1: <span class="string">&quot;lemon&quot;</span>)) <span class="comment">// String lemon is not nil.</span></span><br></pre></td></tr></table></figure>
<h4 id="遍历-For-in"><a href="#遍历-For-in" class="headerlink" title="遍历 For-in"></a>遍历 For-in</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> [<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> str <span class="keyword">in</span> a &#123;</span><br><span class="line">    <span class="built_in">print</span>(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用下标范围</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 enumerated</span></span><br><span class="line"><span class="keyword">for</span> (i, str) <span class="keyword">in</span> a.enumerated() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第<span class="subst">\(i <span class="operator">+</span> <span class="number">1</span>)</span>个是:<span class="subst">\(str)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for in where</span></span><br><span class="line"><span class="keyword">for</span> str <span class="keyword">in</span> a <span class="keyword">where</span> str.prefix(<span class="number">1</span>) <span class="operator">==</span> <span class="string">&quot;t&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字典 for in，遍历是无序的</span></span><br><span class="line"><span class="keyword">let</span> dic <span class="operator">=</span> [</span><br><span class="line">    <span class="string">&quot;one&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;two&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;three&quot;</span>: <span class="number">3</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (k, v) <span class="keyword">in</span> dic &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;key is <span class="subst">\(k)</span>, value is <span class="subst">\(v)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stride</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">10</span>, through: <span class="number">0</span>, by: <span class="operator">-</span><span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 10</span></span><br><span class="line"><span class="comment"> 8</span></span><br><span class="line"><span class="comment"> 6</span></span><br><span class="line"><span class="comment"> 4</span></span><br><span class="line"><span class="comment"> 2</span></span><br><span class="line"><span class="comment"> 0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h4 id="While-while-repeat-while"><a href="#While-while-repeat-while" class="headerlink" title="While while, repeat-while"></a>While while, repeat-while</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while</span></span><br><span class="line"><span class="keyword">var</span> i1 <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> i1 <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;positive even number <span class="subst">\(i1)</span>&quot;</span>)</span><br><span class="line">    i1 <span class="operator">-=</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// repeat while</span></span><br><span class="line"><span class="keyword">var</span> i2 <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;positive even number <span class="subst">\(i2)</span>&quot;</span>)</span><br><span class="line">    i2 <span class="operator">-=</span> <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">while</span> i2 <span class="operator">&gt;</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>使用 break 结束遍历，使用 continue 跳过当前作用域，继续下个循环</p>
<h4 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span>(<span class="params">pa</span>: <span class="type">String</span>, <span class="params">t</span>:(<span class="type">String</span>, <span class="type">Int</span>))</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p1 <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> p2 <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">switch</span> pa &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;one&quot;</span>:</span><br><span class="line">        p1 <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;two&quot;</span>:</span><br><span class="line">        p1 <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">fallthrough</span> <span class="comment">// 继续到下个 case 中</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        p2 <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;p1 is <span class="subst">\(p1)</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;p2 is <span class="subst">\(p2)</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元组</span></span><br><span class="line">    <span class="keyword">switch</span> t &#123;</span><br><span class="line">    <span class="keyword">case</span> (<span class="string">&quot;0&quot;</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;zero&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> (<span class="string">&quot;1&quot;</span>, <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1(pa: <span class="string">&quot;two&quot;</span>, t:(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> p1 is 2</span></span><br><span class="line"><span class="comment"> p2 is 0</span></span><br><span class="line"><span class="comment"> one</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> one, two, three, unknown(<span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span>(<span class="params">pa</span>: <span class="type">E</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p: <span class="type">String</span></span><br><span class="line">    <span class="keyword">switch</span> pa &#123;</span><br><span class="line">    <span class="keyword">case</span> .one:</span><br><span class="line">        p <span class="operator">=</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">case</span> .two:</span><br><span class="line">        p <span class="operator">=</span> <span class="string">&quot;2&quot;</span></span><br><span class="line">    <span class="keyword">case</span> .three:</span><br><span class="line">        p <span class="operator">=</span> <span class="string">&quot;3&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .unknown(u) <span class="keyword">where</span> <span class="type">Int</span>(u) <span class="operator">??</span> <span class="number">0</span> <span class="operator">&gt;</span> <span class="number">0</span> : <span class="comment">// 枚举关联值，使用 where 增加条件</span></span><br><span class="line">        p <span class="operator">=</span> u</span><br><span class="line">    <span class="keyword">case</span> .unknown(<span class="keyword">_</span>):</span><br><span class="line">        p <span class="operator">=</span> <span class="string">&quot;negative number&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f2(pa: <span class="type">E</span>.one) <span class="comment">// 1</span></span><br><span class="line">f2(pa: <span class="type">E</span>.unknown(<span class="string">&quot;10&quot;</span>)) <span class="comment">// 10</span></span><br><span class="line">f2(pa: <span class="type">E</span>.unknown(<span class="string">&quot;-10&quot;</span>)) <span class="comment">// negative number</span></span><br></pre></td></tr></table></figure>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="数组-1-2-3"><a href="#数组-1-2-3" class="headerlink" title="数组 [1, 2, 3]"></a>数组 [1, 2, 3]</h4><p>数组是有序集合</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a0: [<span class="type">Int</span>] <span class="operator">=</span> [<span class="number">1</span>, <span class="number">10</span>]</span><br><span class="line">a0.append(<span class="number">2</span>)</span><br><span class="line">a0.remove(at: <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a0) <span class="comment">// [10, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1 <span class="operator">=</span> [<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> a2 <span class="operator">=</span> [<span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找两个集合的不同</span></span><br><span class="line"><span class="keyword">let</span> dif <span class="operator">=</span> a1.difference(from: a2) <span class="comment">// swift的 diffing 算法在这 http://www.xmailserver.org/diff2.pdf swift实现在  swift/stdlib/public/core/Diffing.swift</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> dif &#123;</span><br><span class="line">    <span class="keyword">switch</span> c &#123;</span><br><span class="line">    <span class="keyword">case</span> .remove(<span class="keyword">let</span> o, <span class="keyword">let</span> e, <span class="keyword">let</span> a):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;offset:<span class="subst">\(o)</span>, element:<span class="subst">\(e)</span>, associatedWith:<span class="subst">\(String(describing: a))</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> .insert(<span class="keyword">let</span> o, <span class="keyword">let</span> e, <span class="keyword">let</span> a):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;offset:<span class="subst">\(o)</span>, element:<span class="subst">\(e)</span>, associatedWith:<span class="subst">\(String(describing: a))</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> remove offset:1, element:four, associatedWith:nil</span></span><br><span class="line"><span class="comment"> insert offset:0, element:one, associatedWith:nil</span></span><br><span class="line"><span class="comment"> insert offset:1, element:two, associatedWith:nil</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> a3 <span class="operator">=</span> a2.applying(dif) <span class="operator">??</span> [] <span class="comment">// 可以用于添加删除动画</span></span><br><span class="line"><span class="built_in">print</span>(a3) <span class="comment">// [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br></pre></td></tr></table></figure>
<p>dif 有第三个 case 值 .insert(let offset, let element, let associatedWith) 可以跟踪成对的变化，用于高级动画。</p>
<p>从数组中随机取一个元素<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a0.randomElement() <span class="operator">??</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>数组排序</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 排序</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a4 <span class="operator">=</span> [</span><br><span class="line">    <span class="type">S1</span>(n: <span class="number">1</span>),</span><br><span class="line">    <span class="type">S1</span>(n: <span class="number">10</span>),</span><br><span class="line">    <span class="type">S1</span>(n: <span class="number">3</span>),</span><br><span class="line">    <span class="type">S1</span>(n: <span class="number">2</span>)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> a5 <span class="operator">=</span> a4.sorted &#123; i1, i2 <span class="keyword">in</span></span><br><span class="line">    i1.n <span class="operator">&lt;</span> i2.n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> a5 &#123;</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// S1(n: 1)</span></span><br><span class="line"><span class="comment">/// S1(n: 2)</span></span><br><span class="line"><span class="comment">/// S1(n: 3)</span></span><br><span class="line"><span class="comment">/// S1(n: 10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a6 <span class="operator">=</span> [<span class="number">1</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(a6.sorted(by: <span class="operator">&gt;</span>)) <span class="comment">// [10, 7, 4, 2, 1]</span></span><br></pre></td></tr></table></figure>
<p>可以加到数组扩展中，通过扩展约束能够指定特定元素类型的排序，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> <span class="title">where</span> <span class="title">Element</span> == <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 升序</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intSortedASC</span>()</span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.sorted(by: <span class="operator">&lt;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 降序</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intSortedDESC</span>()</span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.sorted(by: <span class="operator">&lt;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a6.intSortedASC()) <span class="comment">// 使用扩展增加自定义排序能力</span></span><br></pre></td></tr></table></figure>
<p>在数组中检索满足条件的元素，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个满足条件了就返回</span></span><br><span class="line"><span class="keyword">let</span> a7 <span class="operator">=</span> a4.first &#123;</span><br><span class="line">    <span class="variable">$0</span>.n <span class="operator">==</span> <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(a7<span class="operator">?</span>.n <span class="operator">??</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否都满足了条件</span></span><br><span class="line"><span class="built_in">print</span>(a4.allSatisfy &#123; <span class="variable">$0</span>.n <span class="operator">==</span> <span class="number">1</span> &#125;) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">print</span>(a4.allSatisfy(\.b)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找出最大的那个</span></span><br><span class="line"><span class="built_in">print</span>(a4.max(by: &#123; e1, e2 <span class="keyword">in</span></span><br><span class="line">    e1.n <span class="operator">&lt;</span> e2.n</span><br><span class="line">&#125;) <span class="operator">??</span> <span class="type">S1</span>(n: <span class="number">0</span>))</span><br><span class="line"><span class="comment">// S1(n: 10, b: true)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 看看是否包含某个元素</span></span><br><span class="line"><span class="built_in">print</span>(a4.contains(where: &#123;</span><br><span class="line">    <span class="variable">$0</span>.n <span class="operator">==</span> <span class="number">7</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>一些切割数组的方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切片</span></span><br><span class="line"><span class="comment">// 取前3个，并不是直接复制，对于大的数组有性能优势。</span></span><br><span class="line"><span class="built_in">print</span>(a6[<span class="operator">..&lt;</span><span class="number">3</span>]) <span class="comment">// [1, 10, 4] 需要做越界检查</span></span><br><span class="line"><span class="built_in">print</span>(a6.prefix(<span class="number">30</span>)) <span class="comment">// [1, 10, 4, 7, 2] 不需要做越界检查，也是切片，性能一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉前3个</span></span><br><span class="line"><span class="built_in">print</span>(a6.dropFirst(<span class="number">3</span>)) <span class="comment">// [7, 2]</span></span><br></pre></td></tr></table></figure>
<p>prefix(while:) 和 drop(while:) 方法，顺序遍历执行闭包里的逻辑判断，满足条件就返回，遇到不匹配就会停止遍历。prefix 返回满足条件的元素集合，drop 返回停止遍历之后那些元素集合。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a8 <span class="operator">=</span> [<span class="number">8</span>, <span class="number">9</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">35</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> a9 <span class="operator">=</span> a8.prefix &#123;</span><br><span class="line">    <span class="variable">$0</span> <span class="operator">&lt;</span> <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(a9) <span class="comment">// [8, 9, 20, 1]</span></span><br><span class="line"><span class="keyword">let</span> a10 <span class="operator">=</span> a8.drop &#123;</span><br><span class="line">    <span class="variable">$0</span> <span class="operator">&lt;</span> <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(a10) <span class="comment">// [35, 3]</span></span><br></pre></td></tr></table></figure>
<p>比 filter 更高效的删除元素的方法 removeAll</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除所有不满足条件的元素</span></span><br><span class="line"><span class="keyword">var</span> a11 <span class="operator">=</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">25</span>]</span><br><span class="line">a11.removeAll &#123; <span class="variable">$0</span> <span class="operator">&lt;</span> <span class="number">10</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(a11) <span class="comment">// [4, 3, 1, 3, 3] 随机</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建未初始化的数组</span></span><br><span class="line"><span class="keyword">let</span> a12 <span class="operator">=</span> (<span class="number">0</span><span class="operator">...</span><span class="number">4</span>).map &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">    <span class="type">Int</span>.random(in: <span class="number">0</span><span class="operator">...</span><span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(a12) <span class="comment">// [0, 3, 3, 2, 5] 随机</span></span><br></pre></td></tr></table></figure>
<p>#if 用于后缀表达式</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #if 用于后缀表达式</span></span><br><span class="line"><span class="keyword">let</span> a13 <span class="operator">=</span> a11</span><br><span class="line"><span class="keyword">#if</span> os(iOS)</span><br><span class="line">    .count</span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line">    .reduce(<span class="number">0</span>, <span class="operator">+</span>)</span><br><span class="line"><span class="keyword">#endif</span></span><br><span class="line"><span class="built_in">print</span>(a13) <span class="comment">//37</span></span><br></pre></td></tr></table></figure>
<h4 id="Sets-Set"><a href="#Sets-Set" class="headerlink" title="Sets Set"></a>Sets Set<Int></h4><p>Set 是无序集合，元素唯一</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s0: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; <span class="operator">=</span> [<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> s1: <span class="type">Set</span> <span class="operator">=</span> [<span class="number">2</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">let</span> s2: <span class="type">Set</span> <span class="operator">=</span> [<span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s3 <span class="operator">=</span> s1.union(s2) <span class="comment">// 合集</span></span><br><span class="line"><span class="keyword">let</span> s4 <span class="operator">=</span> s1.intersection(s2) <span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> s5 <span class="operator">=</span> s1.subtracting(s2) <span class="comment">// 非交集部分</span></span><br><span class="line"><span class="keyword">let</span> s6 <span class="operator">=</span> s1.symmetricDifference(s2) <span class="comment">// 非交集的合集</span></span><br><span class="line"><span class="built_in">print</span>(s3) <span class="comment">// [4, 2, 1, 7, 3, 10, 8, 9, 6, 5]</span></span><br><span class="line"><span class="built_in">print</span>(s4) <span class="comment">// [10]</span></span><br><span class="line"><span class="built_in">print</span>(s5) <span class="comment">// [8, 4, 2, 6]</span></span><br><span class="line"><span class="built_in">print</span>(s6) <span class="comment">// [9, 1, 3, 4, 5, 2, 6, 8, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// s0 是否被 s1 包含</span></span><br><span class="line"><span class="built_in">print</span>(s0.isSubset(of: s1)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// s1 是否包含了 s0</span></span><br><span class="line"><span class="built_in">print</span>(s1.isSuperset(of: s0)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s7: <span class="type">Set</span> <span class="operator">=</span> [<span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment">// s0 和 s7 是否有交集</span></span><br><span class="line"><span class="built_in">print</span>(s0.isDisjoint(with: s7)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变 Set</span></span><br><span class="line"><span class="keyword">var</span> s8: <span class="type">Set</span> <span class="operator">=</span> [<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>]</span><br><span class="line">s8.insert(<span class="string">&quot;three&quot;</span>)</span><br><span class="line">s8.remove(<span class="string">&quot;one&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s8) <span class="comment">// [&quot;two&quot;, &quot;three&quot;]</span></span><br></pre></td></tr></table></figure>
<h4 id="字典"><a href="#字典" class="headerlink" title="字典 [:]"></a>字典 [:]</h4><p>字典是无序集合，键值对应。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 <span class="operator">=</span> [</span><br><span class="line">    <span class="string">&quot;k1&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;k2&quot;</span>: <span class="string">&quot;v2&quot;</span></span><br><span class="line">]</span><br><span class="line">d1[<span class="string">&quot;k3&quot;</span>] <span class="operator">=</span> <span class="string">&quot;v3&quot;</span></span><br><span class="line">d1[<span class="string">&quot;k4&quot;</span>] <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d1) <span class="comment">// [&quot;k2&quot;: &quot;v2&quot;, &quot;k3&quot;: &quot;v3&quot;, &quot;k1&quot;: &quot;v1&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (k, v) <span class="keyword">in</span> d1 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;key is <span class="subst">\(k)</span>, value is <span class="subst">\(v)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> key is k1, value is v1</span></span><br><span class="line"><span class="comment"> key is k2, value is v2</span></span><br><span class="line"><span class="comment"> key is k3, value is v3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> d1.isEmpty <span class="operator">==</span> <span class="literal">false</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(d1.count) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapValues</span></span><br><span class="line"><span class="keyword">let</span> d2 <span class="operator">=</span> d1.mapValues &#123;</span><br><span class="line">    <span class="variable">$0</span> <span class="operator">+</span> <span class="string">&quot;_new&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(d2) <span class="comment">// [&quot;k2&quot;: &quot;v2_new&quot;, &quot;k3&quot;: &quot;v3_new&quot;, &quot;k1&quot;: &quot;v1_new&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对字典的值或键进行分组</span></span><br><span class="line"><span class="keyword">let</span> d3 <span class="operator">=</span> <span class="type">Dictionary</span>(grouping: d1.values) &#123;</span><br><span class="line">    <span class="variable">$0</span>.count</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(d3) <span class="comment">// [2: [&quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从字典中取值，如果键对应无值，则使用通过 default 指定的默认值</span></span><br><span class="line">d1[<span class="string">&quot;k5&quot;</span>, <span class="keyword">default</span>: <span class="string">&quot;whatever&quot;</span>] <span class="operator">+=</span> <span class="string">&quot;.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(d1[<span class="string">&quot;k5&quot;</span>] <span class="operator">??</span> <span class="string">&quot;&quot;</span>) <span class="comment">// whatever.</span></span><br><span class="line"><span class="keyword">let</span> v1 <span class="operator">=</span> d1[<span class="string">&quot;k3&quot;</span>, <span class="keyword">default</span>: <span class="string">&quot;whatever&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment">// v3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// compactMapValues() 对字典值进行转换和解包。可以解可选类型，并去掉 nil 值</span></span><br><span class="line"><span class="keyword">let</span> d4 <span class="operator">=</span> [</span><br><span class="line">    <span class="string">&quot;k1&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;k2&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;k3&quot;</span>: <span class="literal">nil</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> d5 <span class="operator">=</span> d4.mapValues &#123; <span class="variable">$0</span> &#125;</span><br><span class="line"><span class="keyword">let</span> d6 <span class="operator">=</span> d4.compactMapValues&#123; <span class="variable">$0</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(d5)</span><br><span class="line"><span class="comment">// [&quot;k3&quot;: nil, &quot;k1&quot;: Optional(1), &quot;k2&quot;: Optional(2)]</span></span><br><span class="line"><span class="built_in">print</span>(d6)</span><br><span class="line"><span class="comment">// [&quot;k1&quot;: 1, &quot;k2&quot;: 2]</span></span><br></pre></td></tr></table></figure>
<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值 =, +=. -=, *=, /="></a>赋值 =, +=. -=, *=, /=</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i1 <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> i2 <span class="operator">=</span> i1</span><br><span class="line">i2 <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(i2) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">i2 <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(i2) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">i2 <span class="operator">-=</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(i2) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">i2 <span class="operator">*=</span> <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(i2) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">i2 <span class="operator">/=</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(i2) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<h4 id="计算符"><a href="#计算符" class="headerlink" title="计算符 +, -, *, /, %"></a>计算符 +, -, *, /, %</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i1 <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> i2 <span class="operator">=</span> i1</span><br><span class="line"><span class="built_in">print</span>((i1 <span class="operator">+</span> i2 <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> <span class="number">10</span> <span class="operator">/</span> <span class="number">2</span> <span class="operator">%</span> <span class="number">3</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i&quot;</span> <span class="operator">+</span> <span class="string">&quot;1&quot;</span>) <span class="comment">// i1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一元运算符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="operator">-</span>i1) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>
<h4 id="比较运算符-gt"><a href="#比较运算符-gt" class="headerlink" title="比较运算符 ==, &gt;"></a>比较运算符 ==, &gt;</h4><p>遵循 Equatable 协议可以使用 == 和 != 来判断是否相等</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="operator">&gt;</span> <span class="number">2</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p1: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> p2: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s1 <span class="operator">=</span> <span class="type">S</span>(p1: <span class="string">&quot;one&quot;</span>, p2: <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> s2 <span class="operator">=</span> <span class="type">S</span>(p1: <span class="string">&quot;two&quot;</span>, p2: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> s3 <span class="operator">=</span> <span class="type">S</span>(p1: <span class="string">&quot;one&quot;</span>, p2: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> s4 <span class="operator">=</span> <span class="type">S</span>(p1: <span class="string">&quot;one&quot;</span>, p2: <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1 <span class="operator">==</span> s2) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">print</span>(s1 <span class="operator">==</span> s3) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">print</span>(s1 <span class="operator">==</span> s4) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>类需要实现 == 函数</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p1: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> p2: <span class="type">Int</span></span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">p1</span>: <span class="type">String</span>, <span class="params">p2</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.p1 <span class="operator">=</span> p1</span><br><span class="line">        <span class="keyword">self</span>.p2 <span class="operator">=</span> p2</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">==</span> (<span class="params">l</span>: <span class="type">C</span>, <span class="params">r</span>: <span class="type">C</span>)</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l.p1 <span class="operator">==</span> r.p1 <span class="operator">&amp;&amp;</span> l.p2 <span class="operator">==</span> r.p2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c1 <span class="operator">=</span> <span class="type">C</span>(p1: <span class="string">&quot;one&quot;</span>, p2: <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> c2 <span class="operator">=</span> <span class="type">C</span>(p1: <span class="string">&quot;one&quot;</span>, p2: <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(c1 <span class="operator">==</span> c2)</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元组比较</span></span><br><span class="line"><span class="comment">// 会先比较第一个数，第一个无法比较才会比较第二个数</span></span><br><span class="line"><span class="comment">// 字符串比较和字母大小还有长度有关。先比较字母大小，在比较长度</span></span><br><span class="line">(<span class="string">&quot;apple&quot;</span>, <span class="number">1</span>) <span class="operator">&lt;</span> (<span class="string">&quot;apple&quot;</span>, <span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">(<span class="string">&quot;applf&quot;</span>, <span class="number">1</span>) <span class="operator">&lt;</span> (<span class="string">&quot;apple&quot;</span>, <span class="number">2</span>) <span class="comment">// false</span></span><br><span class="line">(<span class="string">&quot;appl&quot;</span>, <span class="number">2</span>) <span class="operator">&lt;</span> (<span class="string">&quot;apple&quot;</span>, <span class="number">1</span>) <span class="comment">// true</span></span><br><span class="line">(<span class="string">&quot;appm&quot;</span>, <span class="number">2</span>) <span class="operator">&lt;</span> (<span class="string">&quot;apple&quot;</span>, <span class="number">1</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h4 id="三元"><a href="#三元" class="headerlink" title="三元  ?  : _"></a>三元 <em> ? </em> : _</h4><p>简化 if else 写法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if else</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span>(<span class="params">p</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> p <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;positive number&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;negative number&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span>(<span class="params">p</span>: <span class="type">Int</span>)</span> &#123;</span><br><span class="line">    p <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">?</span> <span class="built_in">print</span>(<span class="string">&quot;positive number&quot;</span>) : <span class="built_in">print</span>(<span class="string">&quot;negative number&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1(p: <span class="number">1</span>)</span><br><span class="line">f2(p: <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Nil-coalescing"><a href="#Nil-coalescing" class="headerlink" title="Nil-coalescing ??"></a>Nil-coalescing ??</h4><p>简化 if let else 写法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if else</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span>(<span class="params">p</span>: <span class="type">Int</span>?)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> i <span class="operator">=</span> p &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p have value is <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p is nil, use defalut value&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 ??</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span>(<span class="params">p</span>: <span class="type">Int</span>?)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i <span class="operator">=</span> p <span class="operator">??</span> <span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;p is <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="范围-a…b"><a href="#范围-a…b" class="headerlink" title="范围 a…b"></a>范围 a…b</h4><p>简化的值范围表达方式。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封闭范围</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 半开范围</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单侧区间</span></span><br><span class="line"><span class="keyword">let</span> nums <span class="operator">=</span> [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(nums[<span class="number">2</span><span class="operator">...</span>]) <span class="comment">// 7 8</span></span><br></pre></td></tr></table></figure>
<h4 id="逻辑-amp-amp"><a href="#逻辑-amp-amp" class="headerlink" title="逻辑 !, &amp;&amp;, ||"></a>逻辑 !, &amp;&amp;, ||</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i1 <span class="operator">=</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> i2 <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i1 <span class="operator">!=</span> i2 <span class="operator">&amp;&amp;</span> (i1 <span class="operator">&lt;</span> <span class="number">0</span> <span class="operator">||</span> i2 <span class="operator">&lt;</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i1 and i2 not equal, and one of them is negative number.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="恒等"><a href="#恒等" class="headerlink" title="恒等 ===, !=="></a>恒等 ===, !==</h4><p>恒等返回是否引用了相同实例。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p: <span class="type">String</span></span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">p</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.p <span class="operator">=</span> p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c1 <span class="operator">=</span> <span class="type">C</span>(p: <span class="string">&quot;one&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> c2 <span class="operator">=</span> <span class="type">C</span>(p: <span class="string">&quot;one&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> c3 <span class="operator">=</span> c1</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c1 <span class="operator">===</span> c2) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">print</span>(c1 <span class="operator">===</span> c3) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(c1 <span class="operator">!==</span> c2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>位运算符</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i1: <span class="type">UInt8</span> <span class="operator">=</span> <span class="number">0b00001111</span></span><br><span class="line"><span class="keyword">let</span> i2 <span class="operator">=</span> <span class="operator">~</span>i1 <span class="comment">// Bitwise NOT Operator（按位取反运算符），取反</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i3: <span class="type">UInt8</span> <span class="operator">=</span> <span class="number">0b00111111</span></span><br><span class="line"><span class="keyword">let</span> i4 <span class="operator">=</span> i1 <span class="operator">&amp;</span> i3 <span class="comment">// Bitwise AND Operator（按位与运算符），都为1才是1</span></span><br><span class="line"><span class="keyword">let</span> i5 <span class="operator">=</span> i1 <span class="operator">|</span> i3 <span class="comment">// Bitwise OR Operator（按位或运算符），有一个1就是1</span></span><br><span class="line"><span class="keyword">let</span> i6 <span class="operator">=</span> i1 <span class="operator">^</span> i3 <span class="comment">// Bitwise XOR Operator（按位异或运算符），不同为1，相同为0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(i1,i2,i3,i4,i5,i6)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;&lt; 按位左移，&gt;&gt; 按位右移</span></span><br><span class="line"><span class="keyword">let</span> i7 <span class="operator">=</span> i1 <span class="operator">&lt;&lt;</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> i8 <span class="operator">=</span> i1 <span class="operator">&gt;&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(i7,i8)</span><br></pre></td></tr></table></figure>
<p>溢出运算符，有 &amp;+、&amp;- 和 &amp;*</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i1 <span class="operator">=</span> <span class="type">Int</span>.max</span><br><span class="line"><span class="built_in">print</span>(i1) <span class="comment">// 9223372036854775807</span></span><br><span class="line">i1 <span class="operator">=</span> i1 <span class="operator">&amp;+</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(i1) <span class="comment">// -9223372036854775808</span></span><br><span class="line">i1 <span class="operator">=</span> i1 <span class="operator">&amp;+</span> <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(i1) <span class="comment">// -9223372036854775798</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i2 <span class="operator">=</span> <span class="type">UInt</span>.max</span><br><span class="line">i2 <span class="operator">=</span> i2 <span class="operator">&amp;+</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(i2) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<p>运算符函数包括前缀运算符、后缀运算符、复合赋值运算符以及等价运算符。另，还可以自定义运算符，新的运算符要用 operator 关键字进行定义，同时要指定 prefix、infix 或者 postfix 修饰符。</p>
<h3 id="基础库"><a href="#基础库" class="headerlink" title="基础库"></a>基础库</h3><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><p>Date 的基本用法如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Date 转 时间戳</span></span><br><span class="line"><span class="keyword">let</span> interval <span class="operator">=</span> now.timeIntervalSince1970 <span class="comment">// 时间戳</span></span><br><span class="line"><span class="keyword">let</span> df <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">df.dateFormat <span class="operator">=</span> <span class="string">&quot;yyyy 年 MM 月 dd 日 HH:mm:ss&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间戳：<span class="subst">\(Int(interval))</span>&quot;</span>) <span class="comment">// 时间戳：1642399901</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;格式化的时间：&quot;</span> <span class="operator">+</span> df.string(from: now)) <span class="comment">// 格式化的时间：2022 年 01 月 17 日 14:11:41</span></span><br><span class="line">df.dateStyle <span class="operator">=</span> .short</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;short 样式时间：&quot;</span> <span class="operator">+</span> df.string(from: now)) <span class="comment">// short 样式时间：2022/1/17</span></span><br><span class="line">df.locale <span class="operator">=</span> <span class="type">Locale</span>(identifier: <span class="string">&quot;zh_Hans_CN&quot;</span>)</span><br><span class="line">df.dateStyle <span class="operator">=</span> .full</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;full 样式时间：&quot;</span> <span class="operator">+</span> df.string(from: now)) <span class="comment">// full 样式时间：2022年1月17日 星期一</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间戳转 Date</span></span><br><span class="line"><span class="keyword">let</span> date <span class="operator">=</span> <span class="type">Date</span>(timeIntervalSince1970: interval)</span><br><span class="line"><span class="built_in">print</span>(date) <span class="comment">// 2022-01-17 06:11:41 +0000</span></span><br></pre></td></tr></table></figure></p>
<p>复杂的时间操作，比如说 GitHub 接口使用的是 ISO 标准，RSS 输出的是 RSS 标准字符串，不同标准对应不同时区的时间计算处理，可以使用开源库  <a href="https://github.com/malcommac/SwiftDate">SwiftDate</a>  来完成。示例代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftDate</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 SwiftDate 库</span></span><br><span class="line"><span class="keyword">let</span> cn <span class="operator">=</span> <span class="type">Region</span>(zone: <span class="type">Zones</span>.asiaShanghai, locale: <span class="type">Locales</span>.chineseChina)</span><br><span class="line"><span class="type">SwiftDate</span>.defaultRegion <span class="operator">=</span> cn</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2008-02-14 23:12:14&quot;</span>.toDate()<span class="operator">?</span>.year <span class="operator">??</span> <span class="string">&quot;&quot;</span>) <span class="comment">// 2008</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d1 <span class="operator">=</span> <span class="string">&quot;2022-01-17T23:20:35&quot;</span>.toISODate(region: cn)</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> d1 <span class="operator">=</span> d1 <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(d1.minute) <span class="comment">// 20</span></span><br><span class="line"><span class="keyword">let</span> d2 <span class="operator">=</span> d1 <span class="operator">+</span> <span class="number">1</span>.minutes</span><br><span class="line"><span class="built_in">print</span>(d2.minute)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个 DateInRegion 相差时间 interval</span></span><br><span class="line"><span class="keyword">let</span> i1 <span class="operator">=</span> <span class="type">DateInRegion</span>(<span class="type">Date</span>(), region: cn) <span class="operator">-</span> d1</span><br><span class="line"><span class="keyword">let</span> s1 <span class="operator">=</span> i1.toString &#123;</span><br><span class="line">    <span class="variable">$0</span>.maximumUnitCount <span class="operator">=</span> <span class="number">4</span></span><br><span class="line">    <span class="variable">$0</span>.allowedUnits <span class="operator">=</span> [.day, .hour, .minute]</span><br><span class="line">    <span class="variable">$0</span>.collapsesLargestUnit <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    <span class="variable">$0</span>.unitsStyle <span class="operator">=</span> .abbreviated</span><br><span class="line">    <span class="variable">$0</span>.locale <span class="operator">=</span> <span class="type">Locales</span>.chineseChina</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(s1) <span class="comment">// 9小时45分钟</span></span><br></pre></td></tr></table></figure>
<h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><p>使用标准库的格式来描述不同场景的情况可以不用去考虑由于不同地区的区别，这些在标准库里就可以自动完成了。</p>
<p>描述两个时间之间相差多长时间<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算两个时间之间相差多少时间，支持多种语言字符串</span></span><br><span class="line"><span class="keyword">let</span> d1 <span class="operator">=</span> <span class="type">Date</span>().timeIntervalSince1970 <span class="operator">-</span> <span class="number">60</span> <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> <span class="number">24</span></span><br><span class="line"><span class="keyword">let</span> f1 <span class="operator">=</span> <span class="type">RelativeDateTimeFormatter</span>()</span><br><span class="line">f1.dateTimeStyle <span class="operator">=</span> .named</span><br><span class="line">f1.formattingContext <span class="operator">=</span> .beginningOfSentence</span><br><span class="line">f1.locale <span class="operator">=</span> <span class="type">Locale</span>(identifier: <span class="string">&quot;zh_Hans_CN&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> f1.localizedString(for: <span class="type">Date</span>(timeIntervalSince1970: d1), relativeTo: <span class="type">Date</span>())</span><br><span class="line"><span class="built_in">print</span>(str) <span class="comment">// 昨天</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="keyword">let</span> str2 <span class="operator">=</span> <span class="type">Date</span>.now.addingTimeInterval(<span class="operator">-</span>(<span class="number">60</span> <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> <span class="number">24</span>))</span><br><span class="line">    .formatted(.relative(presentation: .named))</span><br><span class="line"><span class="built_in">print</span>(str2) <span class="comment">// yesterday</span></span><br></pre></td></tr></table></figure></p>
<p>描述多个事物<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 描述多个事物</span></span><br><span class="line"><span class="keyword">let</span> s1 <span class="operator">=</span> <span class="type">ListFormatter</span>.localizedString(byJoining: [<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;秋天&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure></p>
<p>描述名字<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 名字</span></span><br><span class="line"><span class="keyword">let</span> f2 <span class="operator">=</span> <span class="type">PersonNameComponentsFormatter</span>()</span><br><span class="line"><span class="keyword">var</span> nc1 <span class="operator">=</span> <span class="type">PersonNameComponents</span>()</span><br><span class="line">nc1.familyName <span class="operator">=</span> <span class="string">&quot;戴&quot;</span></span><br><span class="line">nc1.givenName <span class="operator">=</span> <span class="string">&quot;铭&quot;</span></span><br><span class="line">nc1.nickname <span class="operator">=</span> <span class="string">&quot;铭哥&quot;</span></span><br><span class="line"><span class="built_in">print</span>(f2.string(from: nc1)) <span class="comment">// 戴铭</span></span><br><span class="line">f2.style <span class="operator">=</span> .short</span><br><span class="line"><span class="built_in">print</span>(f2.string(from: nc1)) <span class="comment">// 铭哥</span></span><br><span class="line">f2.style <span class="operator">=</span> .abbreviated</span><br><span class="line"><span class="built_in">print</span>(f2.string(from: nc1)) <span class="comment">// 戴</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nc2 <span class="operator">=</span> <span class="type">PersonNameComponents</span>()</span><br><span class="line">nc2.familyName <span class="operator">=</span> <span class="string">&quot;Dai&quot;</span></span><br><span class="line">nc2.givenName <span class="operator">=</span> <span class="string">&quot;Ming&quot;</span></span><br><span class="line">nc2.nickname <span class="operator">=</span> <span class="string">&quot;Starming&quot;</span></span><br><span class="line">f2.style <span class="operator">=</span> .default</span><br><span class="line"><span class="built_in">print</span>(f2.string(from: nc2)) <span class="comment">// Ming Dai</span></span><br><span class="line">f2.style <span class="operator">=</span> .short</span><br><span class="line"><span class="built_in">print</span>(f2.string(from: nc2)) <span class="comment">// Starming</span></span><br><span class="line">f2.style <span class="operator">=</span> .abbreviated</span><br><span class="line"><span class="built_in">print</span>(f2.string(from: nc2)) <span class="comment">// MD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出名</span></span><br><span class="line"><span class="keyword">let</span> componets <span class="operator">=</span> f2.personNameComponents(from: <span class="string">&quot;戴铭&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(componets<span class="operator">?</span>.givenName <span class="operator">??</span> <span class="string">&quot;&quot;</span>) <span class="comment">// 铭</span></span><br></pre></td></tr></table></figure></p>
<p>描述数字<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">let</span> f3 <span class="operator">=</span> <span class="type">NumberFormatter</span>()</span><br><span class="line">f3.locale <span class="operator">=</span> <span class="type">Locale</span>(identifier: <span class="string">&quot;zh_Hans_CN&quot;</span>)</span><br><span class="line">f3.numberStyle <span class="operator">=</span> .currency</span><br><span class="line"><span class="built_in">print</span>(f3.string(from: <span class="number">123456</span>) <span class="operator">??</span> <span class="string">&quot;&quot;</span>) <span class="comment">// ¥123,456.00</span></span><br><span class="line">f3.numberStyle <span class="operator">=</span> .percent</span><br><span class="line"><span class="built_in">print</span>(f3.string(from: <span class="number">123456</span>) <span class="operator">??</span> <span class="string">&quot;&quot;</span>) <span class="comment">// 12,345,600%</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n1 <span class="operator">=</span> <span class="number">1.23456</span></span><br><span class="line"><span class="keyword">let</span> n1Str <span class="operator">=</span> n1.formatted(.number.precision(.fractionLength(<span class="number">3</span>)).rounded())</span><br><span class="line"><span class="built_in">print</span>(n1Str) <span class="comment">// 1.235</span></span><br></pre></td></tr></table></figure></p>
<p>描述地址<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 地址</span></span><br><span class="line"><span class="keyword">import</span> Contacts</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f4 <span class="operator">=</span> <span class="type">CNPostalAddressFormatter</span>()</span><br><span class="line"><span class="keyword">let</span> address <span class="operator">=</span> <span class="type">CNMutablePostalAddress</span>()</span><br><span class="line">address.street <span class="operator">=</span> <span class="string">&quot;海淀区王庄路XX号院X号楼X门XXX&quot;</span></span><br><span class="line">address.postalCode <span class="operator">=</span> <span class="string">&quot;100083&quot;</span></span><br><span class="line">address.city <span class="operator">=</span> <span class="string">&quot;北京&quot;</span></span><br><span class="line">address.country <span class="operator">=</span> <span class="string">&quot;中国&quot;</span></span><br><span class="line"><span class="built_in">print</span>(f4.string(from: address))</span><br><span class="line"><span class="comment">/// 海淀区王庄路XX号院X号楼X门XXX</span></span><br><span class="line"><span class="comment">/// 北京 100083</span></span><br><span class="line"><span class="comment">/// 中国</span></span><br></pre></td></tr></table></figure></p>
<h4 id="度量值"><a href="#度量值" class="headerlink" title="度量值"></a>度量值</h4><p>标准库里的物理量，在这个文档里有详细列出，包括角度、平方米等。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参考：https://developer.apple.com/documentation/foundation/nsdimension</span></span><br><span class="line"><span class="keyword">let</span> m1 <span class="operator">=</span> <span class="type">Measurement</span>(value: <span class="number">1</span>, unit: <span class="type">UnitLength</span>.kilometers)</span><br><span class="line"><span class="keyword">let</span> m2 <span class="operator">=</span> m1.converted(to: .meters) <span class="comment">// 千米转米</span></span><br><span class="line"><span class="built_in">print</span>(m2) <span class="comment">// 1000.0 m</span></span><br><span class="line"><span class="comment">// 度量值转为本地化的值</span></span><br><span class="line"><span class="keyword">let</span> mf <span class="operator">=</span> <span class="type">MeasurementFormatter</span>()</span><br><span class="line">mf.locale <span class="operator">=</span> <span class="type">Locale</span>(identifier: <span class="string">&quot;zh_Hans_CN&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(mf.string(from: m1)) <span class="comment">// 1公里</span></span><br></pre></td></tr></table></figure></p>
<p>一些物理公式供参考：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">面积 = 长度 × 长度</span><br><span class="line">体积 = 长度 × 长度 × 长度 = 面积 × 长度</span><br><span class="line"></span><br><span class="line">速度=长度/时间</span><br><span class="line">加速度=速度/时间</span><br><span class="line"></span><br><span class="line">力 = 质量 × 加速度</span><br><span class="line">扭矩 = 力 × 长度</span><br><span class="line">压力 = 力 / 面积</span><br><span class="line"></span><br><span class="line">密度=质量 / 体积</span><br><span class="line">能量 = 功率 × 时间</span><br><span class="line">电阻 = 电压 / 电流</span><br></pre></td></tr></table></figure></p>
<h4 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h4><p>数据压缩和解压<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对数据的压缩</span></span><br><span class="line"><span class="keyword">let</span> d1 <span class="operator">=</span> <span class="string">&quot;看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？看看能够压缩多少？&quot;</span>.data(using: .utf8)<span class="operator">!</span> <span class="keyword">as</span> <span class="type">NSData</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ori <span class="subst">\(d1.count)</span> bytes&quot;</span>)</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">/// 压缩算法</span></span><br><span class="line">    <span class="comment">/// * lz4</span></span><br><span class="line">    <span class="comment">/// * lzma</span></span><br><span class="line">    <span class="comment">/// * zlib</span></span><br><span class="line">    <span class="comment">/// * lzfse</span></span><br><span class="line">    <span class="keyword">let</span> compressed <span class="operator">=</span> <span class="keyword">try</span> d1.compressed(using: .zlib)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;comp <span class="subst">\(compressed.count)</span> bytes&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对数据解压</span></span><br><span class="line">    <span class="keyword">let</span> decomressed <span class="operator">=</span> <span class="keyword">try</span> compressed.decompressed(using: .zlib)</span><br><span class="line">    <span class="keyword">let</span> deStr <span class="operator">=</span> <span class="type">String</span>(data: decomressed <span class="keyword">as</span> <span class="type">Data</span>, encoding: .utf8)</span><br><span class="line">    <span class="built_in">print</span>(deStr <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line"><span class="comment">/// ori 297 bytes</span></span><br><span class="line"><span class="comment">/// comp 37 bytes</span></span><br></pre></td></tr></table></figure></p>
<h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>文件的一些基本操作的代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path1 <span class="operator">=</span> <span class="string">&quot;/Users/mingdai/Downloads/1.html&quot;</span></span><br><span class="line"><span class="keyword">let</span> path2 <span class="operator">=</span> <span class="string">&quot;/Users/mingdai/Documents/GitHub/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> u1 <span class="operator">=</span> <span class="type">URL</span>(string: path1)</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 写入</span></span><br><span class="line">    <span class="keyword">let</span> url1 <span class="operator">=</span> <span class="keyword">try</span> <span class="type">FileManager</span>.default.url(for: .itemReplacementDirectory, in: .userDomainMask, appropriateFor: u1, create: <span class="literal">true</span>) <span class="comment">// 保证原子性安全保存</span></span><br><span class="line">    <span class="built_in">print</span>(url1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取</span></span><br><span class="line">    <span class="keyword">let</span> s1 <span class="operator">=</span> <span class="keyword">try</span> <span class="type">String</span>(contentsOfFile: path1, encoding: .utf8)</span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查路径是否可用</span></span><br><span class="line"><span class="keyword">let</span> u2 <span class="operator">=</span> <span class="type">URL</span>(fileURLWithPath:path2)</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> values <span class="operator">=</span> <span class="keyword">try</span> u2.resourceValues(forKeys: [.volumeAvailableCapacityForImportantUsageKey])</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> capacity <span class="operator">=</span> values.volumeAvailableCapacityForImportantUsage &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;可用: <span class="subst">\(capacity)</span>&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;不可用&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;错误: <span class="subst">\(error.localizedDescription)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>怎么遍历多级目录结构中的文件呢？看下面的代码的实现：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历路径下所有目录</span></span><br><span class="line"><span class="keyword">let</span> u3 <span class="operator">=</span> <span class="type">URL</span>(fileURLWithPath: <span class="type">FileManager</span>.default.currentDirectoryPath)</span><br><span class="line"><span class="keyword">let</span> fm <span class="operator">=</span> <span class="type">FileManager</span>.default</span><br><span class="line">fm.enumerator(atPath: u3.path)<span class="operator">?</span>.forEach(&#123; path <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> path <span class="operator">=</span> path <span class="keyword">as?</span> <span class="type">String</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(fileURLWithPath: path, relativeTo: u3)</span><br><span class="line">    <span class="built_in">print</span>(url.lastPathComponent)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>可以使用 FileWrapper 来创建文件夹和文件。举个例子：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileWrapper 的使用</span></span><br><span class="line"><span class="comment">// 创建文件</span></span><br><span class="line"><span class="keyword">let</span> f1 <span class="operator">=</span> <span class="type">FileWrapper</span>(regularFileWithContents: <span class="type">Data</span>(<span class="string">&quot;# 第 n 个文件<span class="subst">\n</span> ## 标题&quot;</span>.utf8))</span><br><span class="line">f1.fileAttributes[<span class="type">FileAttributeKey</span>.creationDate.rawValue] <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line">f1.fileAttributes[<span class="type">FileAttributeKey</span>.modificationDate.rawValue] <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line"><span class="comment">// 创建文件夹</span></span><br><span class="line"><span class="keyword">let</span> folder1 <span class="operator">=</span> <span class="type">FileWrapper</span>(directoryWithFileWrappers: [</span><br><span class="line">    <span class="string">&quot;file1.md&quot;</span>: f1</span><br><span class="line">])</span><br><span class="line">folder1.fileAttributes[<span class="type">FileAttributeKey</span>.creationDate.rawValue] <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line">folder1.fileAttributes[<span class="type">FileAttributeKey</span>.modificationDate.rawValue] <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> folder1.write(</span><br><span class="line">        to: <span class="type">URL</span>(fileURLWithPath: <span class="type">FileManager</span>.default.currentDirectoryPath).appendingPathComponent(<span class="string">&quot;NewFolder&quot;</span>),</span><br><span class="line">        options: .atomic,</span><br><span class="line">        originalContentsURL: <span class="literal">nil</span></span><br><span class="line">    )</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="type">FileManager</span>.default.currentDirectoryPath)</span><br></pre></td></tr></table></figure></p>
<p>上面代码写起来比较繁琐，对 FileWrapper 更好的封装可以参考这篇文章《 <a href="https://heberti.com/posts/filewrapper/">A Type-Safe FileWrapper | Heberti Almeida</a> 》。</p>
<p>文件读写处理完整能力可以参看这个库  <a href="https://github.com/JohnSundell/Files">GitHub - JohnSundell/Files: A nicer way to handle files &amp; folders in Swift</a> </p>
<p>本地或者网络上，比如网盘和FTP的文件发生变化时，怎样知道能够观察到呢？</p>
<p>通过 HTTPHeader 里的 If-Modified-Since、Last-Modified、If-None-Match 和 Etag 等字段来判断文件的变化，本地则是使用 DispatchSource.makeFileSystemObjectSource 来进行的文件变化监听。可以参考  <a href="https://github.com/krzysztofzablocki/KZFileWatchers">KZFileWatchers</a>  库的做法。</p>
<h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">one1,</span></span><br><span class="line"><span class="string">two2,</span></span><br><span class="line"><span class="string">three3.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> sn1 <span class="operator">=</span> <span class="type">Scanner</span>(string: s1)</span><br><span class="line"><span class="keyword">while</span> <span class="operator">!</span>sn1.isAtEnd &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> r1 <span class="operator">=</span> sn1.scanUpToCharacters(from: .newlines) &#123;</span><br><span class="line">        <span class="built_in">print</span>(r1 <span class="keyword">as</span> <span class="type">String</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// one1,</span></span><br><span class="line"><span class="comment">/// two2,</span></span><br><span class="line"><span class="comment">/// three3.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找出数字</span></span><br><span class="line"><span class="keyword">let</span> sn2 <span class="operator">=</span> <span class="type">Scanner</span>(string: s1)</span><br><span class="line">sn2.charactersToBeSkipped <span class="operator">=</span> <span class="type">CharacterSet</span>.decimalDigits.inverted <span class="comment">// 不是数字的就跳过</span></span><br><span class="line"><span class="keyword">var</span> p: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="operator">!</span>sn2.isAtEnd &#123;</span><br><span class="line">    <span class="keyword">if</span> sn2.scanInt(<span class="operator">&amp;</span>p) &#123;</span><br><span class="line">        <span class="built_in">print</span>(p)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// 1</span></span><br><span class="line"><span class="comment">/// 2</span></span><br><span class="line"><span class="comment">/// 3</span></span><br></pre></td></tr></table></figure>
<p>上面的代码还不是那么 Swifty，可以通过用AnySequence和AnyIterator来包装下，将序列中的元素推迟到实际需要时再来处理，这样性能也会更好些。具体实现可以参看《 <a href="https://www.swiftbysundell.com/articles/string-parsing-in-swift/">String parsing in Swift</a> 》这篇文章。</p>
<h4 id="AttributeString"><a href="#AttributeString" class="headerlink" title="AttributeString"></a>AttributeString</h4><p>效果如下：</p>
<p><img src="https://user-images.githubusercontent.com/251980/150132322-20c5c2d4-6452-4d06-9202-4b93cffd8133.png" alt=""></p>
<p>代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aStrs <span class="operator">=</span> [<span class="type">AttributedString</span>]()</span><br><span class="line"><span class="keyword">var</span> aStr1 <span class="operator">=</span> <span class="type">AttributedString</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">标题</span></span><br><span class="line"><span class="string">正文内容，具体查看链接。</span></span><br><span class="line"><span class="string">这里摘出第一个重点，还要强调的内容。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="comment">// 标题</span></span><br><span class="line"><span class="keyword">let</span> title <span class="operator">=</span> aStr1.range(of: <span class="string">&quot;标题&quot;</span>)</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> title <span class="operator">=</span> title <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> aStrs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c1 <span class="operator">=</span> <span class="type">AttributeContainer</span>() <span class="comment">// 可复用容器</span></span><br><span class="line">c1.inlinePresentationIntent <span class="operator">=</span> .stronglyEmphasized</span><br><span class="line">c1.font <span class="operator">=</span> .largeTitle</span><br><span class="line">aStr1[title].setAttributes(c1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链接</span></span><br><span class="line"><span class="keyword">let</span> link <span class="operator">=</span> aStr1.range(of: <span class="string">&quot;链接&quot;</span>)</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> link <span class="operator">=</span> link <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> aStrs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c2 <span class="operator">=</span> <span class="type">AttributeContainer</span>() <span class="comment">// 链接</span></span><br><span class="line">c2.strokeColor <span class="operator">=</span> .blue</span><br><span class="line">c2.link <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://ming1016.github.io/&quot;</span>)</span><br><span class="line">aStr1[link].setAttributes(c2.merging(c1)) <span class="comment">// 合并 AttributeContainer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Runs</span></span><br><span class="line"><span class="keyword">let</span> i1 <span class="operator">=</span> aStr1.range(of: <span class="string">&quot;重点&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> i2 <span class="operator">=</span> aStr1.range(of: <span class="string">&quot;强调&quot;</span>)</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> i1 <span class="operator">=</span> i1, <span class="keyword">let</span> i2 <span class="operator">=</span> i2 <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> aStrs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c3 <span class="operator">=</span> <span class="type">AttributeContainer</span>()</span><br><span class="line">c3.foregroundColor <span class="operator">=</span> .yellow</span><br><span class="line">c3.inlinePresentationIntent <span class="operator">=</span> .stronglyEmphasized</span><br><span class="line">aStr1[i1].setAttributes(c3)</span><br><span class="line">aStr1[i2].setAttributes(c3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> aStr1.runs &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r.attributes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aStrs.append(aStr1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Markdown</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> aStr2 <span class="operator">=</span> <span class="keyword">try</span> <span class="type">AttributedString</span>(markdown: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    内容[链接](https://ming1016.github.io/)。需要**强调**的内容。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    aStrs.append(aStr2)</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>SwiftUI 的 Text 可以直接读取 AttributedString 来进行显示。</p>
<h4 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h4><p>用法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ri <span class="operator">=</span> <span class="type">Int</span>.random(in: <span class="number">0</span><span class="operator">..&lt;</span><span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(ri) <span class="comment">// 0到10随机数</span></span><br><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(a.randomElement() <span class="operator">??</span> <span class="number">0</span>) <span class="comment">// 数组中随机取个数</span></span><br><span class="line"><span class="built_in">print</span>(a.shuffled()) <span class="comment">// 随机打乱数组顺序</span></span><br></pre></td></tr></table></figure></p>
<h4 id="UserDefaults"><a href="#UserDefaults" class="headerlink" title="UserDefaults"></a>UserDefaults</h4><p>使用方法如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UDKey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> k1 <span class="operator">=</span> <span class="string">&quot;token&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ud <span class="operator">=</span> <span class="type">UserDefaults</span>.standard</span><br><span class="line">ud.set(<span class="string">&quot;xxxxxx&quot;</span>, forKey: <span class="type">UDKey</span>.k1)</span><br><span class="line"><span class="keyword">let</span> tk <span class="operator">=</span> ud.string(forKey: <span class="type">UDKey</span>.k1)</span><br><span class="line"><span class="built_in">print</span>(tk <span class="operator">??</span> <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><h4 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">S</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">init</span>()</span> &#123;</span><br><span class="line">        <span class="comment">// 防止实例初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="系统及设备"><a href="#系统及设备" class="headerlink" title="系统及设备"></a>系统及设备</h3><h4 id="系统判断"><a href="#系统判断" class="headerlink" title="系统判断"></a>系统判断</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">#if</span> os(tvOS)</span><br><span class="line">     <span class="comment">// do something in tvOS</span></span><br><span class="line"><span class="keyword">#elseif</span> os(iOS)</span><br><span class="line">     <span class="comment">// do somthing in iOS</span></span><br><span class="line"><span class="keyword">#elseif</span> os(macOS)</span><br><span class="line">    <span class="comment">// do somthing in macOS</span></span><br><span class="line"><span class="keyword">#endif</span></span><br></pre></td></tr></table></figure>
<h4 id="版本兼容"><a href="#版本兼容" class="headerlink" title="版本兼容"></a>版本兼容</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本</span></span><br><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">15</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 版本检查</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">15</span>, <span class="keyword">macOS</span> <span class="number">12</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// nothing happen</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="canImport-判断库是否可使用"><a href="#canImport-判断库是否可使用" class="headerlink" title="canImport 判断库是否可使用"></a>canImport 判断库是否可使用</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">#if</span> canImport(<span class="type">SpriteKit</span>)</span><br><span class="line">   <span class="comment">// iOS 等苹果系统执行</span></span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line">   <span class="comment">// 非苹果系统</span></span><br><span class="line"><span class="keyword">#endif</span></span><br></pre></td></tr></table></figure>
<h4 id="targetEnvironment-环境的判断"><a href="#targetEnvironment-环境的判断" class="headerlink" title="targetEnvironment 环境的判断"></a>targetEnvironment 环境的判断</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">#if</span> targetEnvironment(simulator)</span><br><span class="line">   <span class="comment">// 模拟器</span></span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line">   <span class="comment">// 真机</span></span><br><span class="line"><span class="keyword">#endif</span></span><br></pre></td></tr></table></figure>
<h3 id="自带属性包装"><a href="#自带属性包装" class="headerlink" title="自带属性包装"></a>自带属性包装</h3><h4 id="resultBuilder"><a href="#resultBuilder" class="headerlink" title="@resultBuilder"></a>@resultBuilder</h4><p>结果生成器（Result builders），通过传递序列创建新值，SwiftUI就是使用的结果生成器将多个视图生成一个视图</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@resultBuilder</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RBS</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基本闭包支持</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">buildBlock</span>(<span class="keyword">_</span> <span class="params">components</span>: <span class="type">Int</span>...)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        components.reduce(<span class="number">0</span>) &#123; partialResult, i <span class="keyword">in</span></span><br><span class="line">            partialResult <span class="operator">+</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 支持条件判断</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">buildEither</span>(<span class="params">first</span> <span class="params">component</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        component</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">buildEither</span>(<span class="params">second</span> <span class="params">component</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        component</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 支持循环</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">buildArray</span>(<span class="keyword">_</span> <span class="params">components</span>: [<span class="type">Int</span>])</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        components.reduce(<span class="number">0</span>) &#123; partialResult, i <span class="keyword">in</span></span><br><span class="line">            partialResult <span class="operator">+</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="type">RBS</span>.buildBlock(</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用到函数中</span></span><br><span class="line"><span class="meta">@RBS</span> <span class="function"><span class="keyword">func</span> <span class="title">f1</span>()</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(f1()) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置了 buildEither 就可以在闭包中进行条件判断。</span></span><br><span class="line"><span class="meta">@RBS</span> <span class="function"><span class="keyword">func</span> <span class="title">f2</span>(<span class="params">stopAtThree</span>: <span class="type">Bool</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> stopAtThree <span class="operator">==</span> <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="number">4</span></span><br><span class="line">        <span class="number">5</span></span><br><span class="line">        <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(f2(stopAtThree: <span class="literal">false</span>)) <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置了 buildArray 就可以在闭包内使用循环了</span></span><br><span class="line"><span class="meta">@RBS</span> <span class="function"><span class="keyword">func</span> <span class="title">f3</span>()</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">3</span> &#123;</span><br><span class="line">        i <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(f3()) <span class="comment">// 12</span></span><br></pre></td></tr></table></figure>
<h4 id="dynamicMemberLookup-动态成员查询"><a href="#dynamicMemberLookup-动态成员查询" class="headerlink" title="@dynamicMemberLookup 动态成员查询"></a>@dynamicMemberLookup 动态成员查询</h4><p>@dynamicMemberLookup 指示访问属性时调用一个已实现的处理动态查找的下标方法 subscript(dynamicMemeber:)，通过指定属性字符串名返回值。使用方法如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@dynamicMemberLookup</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 找字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">subscript</span>(<span class="params">dynamicMember</span> <span class="params">m</span>: <span class="type">String</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> p <span class="operator">=</span> [<span class="string">&quot;one&quot;</span>: <span class="string">&quot;first&quot;</span>, <span class="string">&quot;two&quot;</span>: <span class="string">&quot;second&quot;</span>]</span><br><span class="line">        <span class="keyword">return</span> p[m, <span class="keyword">default</span>: <span class="string">&quot;&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找整型</span></span><br><span class="line">    <span class="function"><span class="keyword">subscript</span>(<span class="params">dynamicMember</span> <span class="params">m</span>: <span class="type">String</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> p <span class="operator">=</span> [<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">return</span> p[m, <span class="keyword">default</span>: <span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找闭包</span></span><br><span class="line">    <span class="function"><span class="keyword">subscript</span>(<span class="params">dynamicMember</span> <span class="params">m</span>: <span class="type">String</span>)</span> -&gt; (<span class="keyword">_</span> s: <span class="type">String</span>) -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;show <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态数组成员</span></span><br><span class="line">    <span class="keyword">var</span> p <span class="operator">=</span> [<span class="string">&quot;This is a member&quot;</span>]</span><br><span class="line">    <span class="comment">// 动态数组成员</span></span><br><span class="line">    <span class="function"><span class="keyword">subscript</span>(<span class="params">dynamicMember</span> <span class="params">m</span>: <span class="type">String</span>)</span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;This is a dynamic member&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d <span class="operator">=</span> <span class="type">D</span>()</span><br><span class="line"><span class="keyword">let</span> s1: <span class="type">String</span> <span class="operator">=</span> d.one</span><br><span class="line"><span class="built_in">print</span>(s1) <span class="comment">// first</span></span><br><span class="line"><span class="keyword">let</span> i1: <span class="type">Int</span> <span class="operator">=</span> d.one</span><br><span class="line"><span class="built_in">print</span>(i1) <span class="comment">// 1</span></span><br><span class="line">d.show(<span class="string">&quot;something&quot;</span>) <span class="comment">// show something</span></span><br><span class="line"><span class="built_in">print</span>(d.p) <span class="comment">// [&quot;This is a member&quot;]</span></span><br><span class="line"><span class="keyword">let</span> dynamicP:[<span class="type">String</span>] <span class="operator">=</span> d.dp</span><br><span class="line"><span class="built_in">print</span>(dynamicP) <span class="comment">// [&quot;This is a dynamic member&quot;]</span></span><br></pre></td></tr></table></figure>
<p>类使用 @dynamicMemberLookup，继承的类也会自动加上 @dynamicMemberLookup。协议上定义 @dynamicMemberLookup，通过扩展可以默认实现 subscript(dynamicMember:) 方法。</p>
<h4 id="dynamicCallable-动态可调用类型"><a href="#dynamicCallable-动态可调用类型" class="headerlink" title="@dynamicCallable 动态可调用类型"></a>@dynamicCallable 动态可调用类型</h4><p>@dynamicCallable 动态可调用类型。通过实现 dynamicallyCall 方法来定义变参的处理。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@dynamicCallable</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 带参数说明</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dynamicallyCall</span>(<span class="params">withKeywordArguments</span> <span class="params">args</span>: <span class="type">KeyValuePairs</span>&lt;<span class="type">String</span>, <span class="type">Int</span>&gt;)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> firstArg <span class="operator">=</span> args.first<span class="operator">?</span>.value <span class="operator">??</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> firstArg <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无参数说明</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dynamicallyCall</span>(<span class="params">withArguments</span> <span class="params">args</span>: [<span class="type">String</span>])</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> firstArg <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> args.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            firstArg <span class="operator">=</span> args[<span class="number">0</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;show <span class="subst">\(firstArg)</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d <span class="operator">=</span> <span class="type">D</span>()</span><br><span class="line"><span class="keyword">let</span> i <span class="operator">=</span> d(numberIs: <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(i) <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">let</span> s <span class="operator">=</span> d(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s) <span class="comment">// show hi</span></span><br></pre></td></tr></table></figure>
<h3 id="自带协议"><a href="#自带协议" class="headerlink" title="自带协议"></a>自带协议</h3><h4 id="Hashable"><a href="#Hashable" class="headerlink" title="Hashable"></a>Hashable</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">H</span>: <span class="title">Hashable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p1: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> p2: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提供随机 seed</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hash</span>(<span class="params">into</span> <span class="params">hasher</span>: <span class="keyword">inout</span> <span class="type">Hasher</span>)</span> &#123;</span><br><span class="line">        hasher.combine(p1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> h1 <span class="operator">=</span> <span class="type">H</span>(p1: <span class="string">&quot;one&quot;</span>, p2: <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> h2 <span class="operator">=</span> <span class="type">H</span>(p1: <span class="string">&quot;two&quot;</span>, p2: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hs1 <span class="operator">=</span> <span class="type">Hasher</span>()</span><br><span class="line">hs1.combine(h1)</span><br><span class="line">hs1.combine(h2)</span><br><span class="line"><span class="built_in">print</span>(h1.hashValue) <span class="comment">// 7417088153212460033 随机值</span></span><br><span class="line"><span class="built_in">print</span>(h2.hashValue) <span class="comment">// -6972912482785541972 随机值</span></span><br><span class="line"><span class="built_in">print</span>(hs1.finalize()) <span class="comment">// 7955861102637572758 随机值</span></span><br><span class="line"><span class="built_in">print</span>(h1.hashValue) <span class="comment">// 7417088153212460033 和前面 h1 一样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> h3 <span class="operator">=</span> <span class="type">H</span>(p1: <span class="string">&quot;one&quot;</span>, p2: <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(h3.hashValue) <span class="comment">// 7417088153212460033 和前面 h1 一样</span></span><br><span class="line"><span class="keyword">var</span> hs2 <span class="operator">=</span> <span class="type">Hasher</span>()</span><br><span class="line">hs2.combine(h3)</span><br><span class="line">hs2.combine(h2)</span><br><span class="line"><span class="built_in">print</span>(hs2.finalize()) <span class="comment">// 7955861102637572758 和前面 hs1 一样</span></span><br></pre></td></tr></table></figure>
<p>应用生命周期内，调用 combine() 添加相同属性哈希值相同，由于 Hasher 每次都会使用随机的 seed，因此不同应用生命周期，也就是下次启动的哈希值，就会和上次的哈希值不同。</p>
<h3 id="Codable"><a href="#Codable" class="headerlink" title="Codable"></a>Codable</h3><h4 id="JSON-没有-id-字段"><a href="#JSON-没有-id-字段" class="headerlink" title="JSON 没有 id 字段"></a>JSON 没有 id 字段</h4><p>如果SwiftUI要求数据Model都是遵循Identifiable协议的，而有的json没有id这个字段，可以使用扩展struct的方式解决：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CommitModel</span>: <span class="title">Decodable</span>, <span class="title">Hashable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sha: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> author: <span class="type">AuthorModel</span></span><br><span class="line">  <span class="keyword">var</span> commit: <span class="type">CommitModel</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CommitModel</span>: <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sha</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h4 id="网络状态检查"><a href="#网络状态检查" class="headerlink" title="网络状态检查"></a>网络状态检查</h4><p>通过 Network 库的 NWPathMonitor 来检查</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"><span class="keyword">import</span> Network</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络状态检查 network state check</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Nsck</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">Nsck</span>()</span><br><span class="line">    <span class="keyword">private(set)</span> <span class="keyword">lazy</span> <span class="keyword">var</span> pb <span class="operator">=</span> mkpb()</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">private(set)</span> <span class="keyword">var</span> pt: <span class="type">NWPath</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> monitor: <span class="type">NWPathMonitor</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lazy</span> <span class="keyword">var</span> sj <span class="operator">=</span> <span class="type">CurrentValueSubject</span>&lt;<span class="type">NWPath</span>, <span class="type">Never</span>&gt;(monitor.currentPath)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> sb: <span class="type">AnyCancellable</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">init</span>()</span> &#123;</span><br><span class="line">        monitor <span class="operator">=</span> <span class="type">NWPathMonitor</span>()</span><br><span class="line">        pt <span class="operator">=</span> monitor.currentPath</span><br><span class="line">        monitor.pathUpdateHandler <span class="operator">=</span> &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] path <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span><span class="operator">?</span>.pt <span class="operator">=</span> path</span><br><span class="line">            <span class="keyword">self</span><span class="operator">?</span>.sj.send(path)</span><br><span class="line">        &#125;</span><br><span class="line">        monitor.start(queue: <span class="type">DispatchQueue</span>.global())</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        monitor.cancel()</span><br><span class="line">        sj.send(completion: .finished)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">mkpb</span>()</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">NWPath</span>, <span class="type">Never</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> sj.eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sb <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> alertMsg <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">Nsck</span>.shared.pb</span><br><span class="line">    .sink &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125; receiveValue: &#123; path <span class="keyword">in</span></span><br><span class="line">        alertMsg <span class="operator">=</span> path.debugDescription</span><br><span class="line">        <span class="keyword">switch</span> path.status &#123;</span><br><span class="line">        <span class="keyword">case</span> .satisfied:</span><br><span class="line">            alertMsg <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">case</span> .unsatisfied:</span><br><span class="line">            alertMsg <span class="operator">=</span> <span class="string">&quot;😱&quot;</span></span><br><span class="line">        <span class="keyword">case</span> .requiresConnection:</span><br><span class="line">            alertMsg <span class="operator">=</span> <span class="string">&quot;🥱&quot;</span></span><br><span class="line">        <span class="keyword">@unknown</span> <span class="keyword">default</span>:</span><br><span class="line">            alertMsg <span class="operator">=</span> <span class="string">&quot;🤔&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> path.status <span class="operator">==</span> .unsatisfied &#123;</span><br><span class="line">            <span class="keyword">switch</span> path.unsatisfiedReason &#123;</span><br><span class="line">            <span class="keyword">case</span> .notAvailable:</span><br><span class="line">                alertMsg <span class="operator">+=</span> <span class="string">&quot;网络不可用&quot;</span></span><br><span class="line">            <span class="keyword">case</span> .cellularDenied:</span><br><span class="line">                alertMsg <span class="operator">+=</span> <span class="string">&quot;蜂窝网不可用&quot;</span></span><br><span class="line">            <span class="keyword">case</span> .wifiDenied:</span><br><span class="line">                alertMsg <span class="operator">+=</span> <span class="string">&quot;Wifi不可用&quot;</span></span><br><span class="line">            <span class="keyword">case</span> .localNetworkDenied:</span><br><span class="line">                alertMsg <span class="operator">+=</span> <span class="string">&quot;网线不可用&quot;</span></span><br><span class="line">            <span class="keyword">@unknown</span> <span class="keyword">default</span>:</span><br><span class="line">                alertMsg <span class="operator">+=</span> <span class="string">&quot;网络不可用&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .store(in: <span class="operator">&amp;</span>sb)</span><br></pre></td></tr></table></figure>
<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h4 id="布局动画"><a href="#布局动画" class="headerlink" title="布局动画"></a>布局动画</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AnimateLayout</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line"> <span class="meta">@State</span> <span class="keyword">var</span> changeLayout: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"> <span class="meta">@Namespace</span> <span class="keyword">var</span> namespace</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">  <span class="type">VStack</span>(spacing: <span class="number">30</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> changeLayout &#123;</span><br><span class="line">    <span class="type">HStack</span> &#123; items &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123; items &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">Button</span>(<span class="string">&quot;切换布局&quot;</span>) &#123;</span><br><span class="line">    withAnimation &#123; changeLayout.toggle() &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .padding()</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@ViewBuilder</span> <span class="keyword">var</span> items: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">  <span class="type">Text</span>(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">   .matchedGeometryEffect(id: <span class="string">&quot;one&quot;</span>, in: namespace)</span><br><span class="line">  <span class="type">Text</span>(<span class="string">&quot;Two&quot;</span>)</span><br><span class="line">   .matchedGeometryEffect(id: <span class="string">&quot;Two&quot;</span>, in: namespace)</span><br><span class="line">  <span class="type">Text</span>(<span class="string">&quot;Three&quot;</span>)</span><br><span class="line">   .matchedGeometryEffect(id: <span class="string">&quot;Three&quot;</span>, in: namespace)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><h4 id="Keychain"><a href="#Keychain" class="headerlink" title="Keychain"></a>Keychain</h4><p>使用方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d1 <span class="operator">=</span> <span class="type">Data</span>(<span class="string">&quot;keyChain github token&quot;</span>.utf8)</span><br><span class="line"><span class="keyword">let</span> service <span class="operator">=</span> <span class="string">&quot;access-token&quot;</span></span><br><span class="line"><span class="keyword">let</span> account <span class="operator">=</span> <span class="string">&quot;github&quot;</span></span><br><span class="line"><span class="keyword">let</span> q1 <span class="operator">=</span> [</span><br><span class="line">    kSecValueData: d1,</span><br><span class="line">    kSecClass: kSecClassGenericPassword,</span><br><span class="line">    kSecAttrService: service,</span><br><span class="line">    kSecAttrAccount: account</span><br><span class="line">] <span class="keyword">as</span> <span class="type">CFDictionary</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个 keychain</span></span><br><span class="line"><span class="keyword">let</span> status <span class="operator">=</span> <span class="type">SecItemAdd</span>(q1, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果已经添加过会抛出 -25299 错误代码，需要调用 SecItemUpdate 来进行更新</span></span><br><span class="line"><span class="keyword">if</span> status <span class="operator">==</span> errSecDuplicateItem &#123;</span><br><span class="line">    <span class="keyword">let</span> q2 <span class="operator">=</span> [</span><br><span class="line">        kSecClass: kSecClassGenericPassword,</span><br><span class="line">        kSecAttrService: service,</span><br><span class="line">        kSecAttrAccount: account</span><br><span class="line">    ] <span class="keyword">as</span> <span class="type">CFDictionary</span></span><br><span class="line">    <span class="keyword">let</span> q3 <span class="operator">=</span> [</span><br><span class="line">        kSecValueData: d1</span><br><span class="line">    ] <span class="keyword">as</span> <span class="type">CFDictionary</span></span><br><span class="line">    <span class="type">SecItemUpdate</span>(q2, q3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line"><span class="keyword">let</span> q4 <span class="operator">=</span> [</span><br><span class="line">    kSecAttrService: service,</span><br><span class="line">    kSecAttrAccount: account,</span><br><span class="line">    kSecClass: kSecClassGenericPassword,</span><br><span class="line">    kSecReturnData: <span class="literal">true</span></span><br><span class="line">] <span class="keyword">as</span> <span class="type">CFDictionary</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re: <span class="type">AnyObject</span>?</span><br><span class="line"><span class="type">SecItemCopyMatching</span>(q4, <span class="operator">&amp;</span>re)</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> reData <span class="operator">=</span> re <span class="keyword">as?</span> <span class="type">Data</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="type">String</span>(decoding: reData, as: <span class="type">UTF8</span>.<span class="keyword">self</span>)) <span class="comment">// keyChain github token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">let</span> q5 <span class="operator">=</span> [</span><br><span class="line">    kSecAttrService: service,</span><br><span class="line">    kSecAttrAccount: account,</span><br><span class="line">    kSecClass: kSecClassGenericPassword,</span><br><span class="line">] <span class="keyword">as</span> <span class="type">CFDictionary</span></span><br><span class="line"></span><br><span class="line"><span class="type">SecItemDelete</span>(q5)</span><br></pre></td></tr></table></figure></p>
<h3 id="工程"><a href="#工程" class="headerlink" title="工程"></a>工程</h3><h4 id="程序入口点"><a href="#程序入口点" class="headerlink" title="程序入口点"></a>程序入口点</h4><p>Swift 允许全局编写 Swift 代码，实际上 clang 会自动将代码包进一个模拟 C 的函数中。Swift 也能够指定入口点，比如 @UIApplicationMain 或 @NSApplicationMain，UIKit 启动后生命周期管理是 AppDelegate 和 SceneDelegate，《 <a href="https://www.donnywals.com/understanding-the-ios-13-scene-delegate/">Understanding the iOS 13 Scene Delegate</a> 》这篇有详细介绍。</p>
<p>@UIApplicationMain 和 @NSApplicationMain 会自动生成入口点。这些入口点都是平台相关的，Swift 发展来看是多平台的，这样在 Swift 5.3 时引入了 @main，可以方便的指定入口点。代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@main</span> <span class="comment">// 要定义个静态的 main 函数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">M</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">main</span>()</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;let&#x27;s begin&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>  库，Swift 官方开源的一个开发命令行工具的库，也支持 @main。使用方法如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ArgumentParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span>: <span class="title">ParsableCommand</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Argument</span>(help: <span class="string">&quot;Start&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> phrase: <span class="type">String</span></span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">run</span>()</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">5</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(phrase)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="专题"><a href="#专题" class="headerlink" title="专题"></a>专题</h2><h3 id="Swift-那些事"><a href="#Swift-那些事" class="headerlink" title="Swift 那些事"></a>Swift 那些事</h3><h4 id="Swift-各版本演进"><a href="#Swift-各版本演进" class="headerlink" title="Swift 各版本演进"></a>Swift 各版本演进</h4><p><em>Swift 1.1</em></p>
<ul>
<li>countElements() 改成了 count()。</li>
<li>@NSApplicationMain 可以在 macOS 上使用。</li>
</ul>
<p><em>Swift 1.2</em></p>
<ul>
<li>引入 Set 类型。</li>
<li>if let 可以放到一起，使用逗号分隔。</li>
<li>新增 zip() 和 flatMap()。</li>
<li>类增加静态方法和静态属性，使用 static 关键字描述。</li>
<li>as! 用于类型强转，失败会崩溃。</li>
<li>@noescape 用于描述作为参数闭包，用来告诉 Swift 闭包将在函数返回前使用。</li>
<li>常量可以延后初始化。</li>
</ul>
<p><em>Swift 2.0</em></p>
<ul>
<li>增加 guard 关键字，用于解可选项值。</li>
<li>defer 关键字用来延迟执行，即使抛出错误了都会在最后执行。</li>
<li>ErrorType 协议，以及 throws、do、try 和 catch 的引入用来处理错误。</li>
<li>characters 加上 count，用来替代 count()。</li>
<li>#available 用来检查系统版本。</li>
</ul>
<p><em>Swift 2.1</em></p>
<ul>
<li>字符串插值可以包含字符串字面符号。</li>
</ul>
<p><em>Swift 2.2</em></p>
<ul>
<li><strong>FILE</strong>, <strong>LINE</strong> 和 <strong>FUNCTION</strong> 换成 #file，#line 和 #function。</li>
<li>废弃 ++ 和 – 操作符。</li>
<li>C 语言风格 for 循环废弃。</li>
<li>废弃变量参数，因为变量参数容易和 inout 搞混。</li>
<li>废弃字符串化的选择器，选择器不再能写成字符串了。</li>
<li>元组可直接比较是否相等。</li>
</ul>
<p><em>Swift 3.0</em></p>
<ul>
<li>规范动词和名词来命名。</li>
<li>去掉 NS 前缀。</li>
<li>方法名描述参数部分变为参数名。</li>
<li>省略没必要的单词，命名做了简化呢。比如 stringByTrimmingCharactersInSet 就换成了 trimmingCharacters。</li>
<li>枚举的属性使用小写开头。</li>
<li>引入 C 函数的属性。</li>
</ul>
<p><em>Swift 3.1</em></p>
<ul>
<li>序列新增 prefix(while:) 和 drop(while:) 方法，顺序遍历执行闭包里的逻辑判断，满足条件就返回，遇到不匹配就会停止遍历。prefix 返回满足条件的元素集合，drop 返回停止遍历之后那些元素集合。</li>
<li>泛型适用于嵌套类型。</li>
<li>类型的扩展可以使用约束条件，比如扩展数组时，加上元素为整数的约束，这样的扩展就只会对元素为整数的数组有效。</li>
</ul>
<p><em>Swift 4.0</em></p>
<ul>
<li>加入 Codable 协议，更 Swifty 的编码和解码。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0167-swift-encoders.md">SE-0167 Swift Encoders</a></li>
<li>字符串加入三个双引号的支持，让多行字符串编写更加直观。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0168-multi-line-string-literals.md">SE-0168 Multi-Line String Literals</a></li>
<li>字符串变成集合，表示可以对字符串进行逐字遍历、map 和反转等操作。</li>
<li>keypaths 语法提升。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0161-key-paths.md">SE-0161 Smart KeyPaths: Better Key-Value Coding for Swift</a></li>
<li>集合加入 ..&lt;10 这样语法的单边切片。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0172-one-sided-ranges.md">SE-0172 One-sided Ranges</a></li>
<li>字典新增 mapValues，可 map 字典的值。通过 grouping 可对字典进行分组生成新字典，键和值都可以。从字典中取值，如果键对应无值，则使用通过 default 指定的默认值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md">SE-0165 Dictionary &amp; Set Enhancements</a></li>
</ul>
<p><em>Swift 4.1</em></p>
<ul>
<li>Hashable 也不需要返回一个唯一的 hashValue 哈希值属性。</li>
<li>Equatable 和 Hashable 自动合成的提案参见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md">SE-0185 Synthesizing Equatable and Hashable conformance</a>。</li>
<li>两个自定类型比较是否相等时，不再需要比较每个属性，Swift 会自动生成 == 方法，你只需要声明 Equatable 协议。</li>
<li>引入 KeyDecodingStrategy属性，其中 .convertFromSnakeCase 可以将下划线的命名转化成驼峰的命名。</li>
<li>引入条件符合性，只有满足一定条件才符合协议。比如扩展数组要求当里面元素满足某协议数组才符合这个协议。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md">SE-0143 Conditional conformances</a>。</li>
<li>引入 canImport 宏条件关键字，判断是否可以使用某库，以前只能通过判断操作系统平台来判断。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md">SE-0075 Adding a Build Configuration Import Test</a>。</li>
<li>新增能够去除为零项目的 compactMap()。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0187-introduce-filtermap.md">SE-0187 Introduce Sequence.compactMap(_:)</a></li>
<li>关联类型可以创建递归约束，提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0157-recursive-protocol-constraints.md">SE-0157 Support recursive constraints on associated types</a></li>
<li>targetEnvironment 环境的判断，比如模拟器。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0190-target-environment-platform-condition.md">SE-0190 Target environment platform condition</a> 。</li>
</ul>
<p><em>Swift 4.2</em></p>
<ul>
<li>新增动态成员查询，@dynamicMemberLookup 新属性，指示访问属性时调用一个已实现的处理动态查找的下标方法 subscript(dynamicMemeber:)，通过指定属性字符串名返回值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md">SE-0195 Introduce User-defined “Dynamic Member Lookup” Types</a></li>
<li>集合新加 removeAll(where:) 方法，过滤满足条件所有元素。比 filter 更高效。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0197-remove-where.md">SE-0197 Adding in-place removeAll(where:) to the Standard Library</a></li>
<li>布尔值增加 toggle() 方法，用来切换布尔值。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0199-bool-toggle.md">SE-0199 Adding toggle to Bool</a></li>
<li>引入 CaseIterable 协议，可以将枚举中所有 case 生成 allCases 数组。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0194-derived-collection-of-enum-cases.md">SE-0194 Derived Collection of Enum Cases</a></li>
<li>引入 #warning 和 #error 两个新的编译器指令。#warning 会产生一个警告，#error 会直接让编译出错。比如必须要填写 token 才能编译的话可以在设置 token 的代码前加上 #error 和说明。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0196-diagnostic-directives.md">SE-0196 Compiler Diagnostic Directives</a></li>
<li>新增加密安全的随机 API。直接在数字类型上调用 random() 方法生成随机数。shuffle() 方法可以对数组进行乱序重排。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md">SE-0202 Random Unification</a></li>
<li>更简单更安全的哈希协议，引入新的 Hasher 结构，通过 combine() 方法为哈希值添加更多属性，调用 finalize() 方法生成最终哈希值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0206-hashable-enhancements.md">SE-0206 Hashable Enhancements</a></li>
<li>集合增加 allSatisfy() 用来判断集合中的元素是否都满足了一个条件。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0207-containsOnly.md">SE-0207 Add an allSatisfy algorithm to Sequence</a></li>
</ul>
<p><em>Swift 5.0</em></p>
<ul>
<li>@dynamicCallable 动态可调用类型。通过实现 dynamicallyCall 方法来定义变参的处理。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md">SE-0216 Introduce user-defined dynamically “callable” types</a></li>
<li>新加 Result 类型用来处理错误。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md">SE-0235 Add Result to the Standard Library</a></li>
<li>新增原始字符串能力，在字符串前加上一个或多个#符号。里面的双引号和转义符号将不再起作用了，如果想让转义符起作用，需要在转义符后面加上#符号。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md">SE-0200 Enhancing String Literals Delimiters to Support Raw Text</a></li>
<li>自定义字符串插值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md">SE-0228 Fix ExpressibleByStringInterpolation</a></li>
<li>枚举新增 @unknown 用来区分固定的枚举和可能改变的枚举的能力。用于防止未来新增枚举属性会进行提醒提示完善每个 case 的处理。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md">SE-0192 Handling Future Enum Cases</a></li>
<li>compactMapValues() 对字典值进行转换和解包。可以解可选类型，并去掉 nil 值。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0218-introduce-compact-map-values.md">SE-0218 Introduce compactMapValues to Dictionary</a></li>
<li>扁平化 try?。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0230-flatten-optional-try.md">SE-0230 Flatten nested optionals resulting from ‘try?’</a></li>
<li>isMultiple(of:) 方法检查一个数字是否是另一个数字的倍数。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0225-binaryinteger-iseven-isodd-ismultiple.md">SE-0225 Adding isMultiple to BinaryInteger</a></li>
</ul>
<p><em>Swift 5.1</em></p>
<ul>
<li>有序集合的 diff，通过 difference(from:) 方法，可以返回要删除哪些和添加哪些项目能够让两个集合相等。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0240-ordered-collection-diffing.md">SE-0240 Ordered Collection Diffing</a></li>
<li>属性包装。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0258-property-wrappers.md">SE-0258 Property Wrappers</a></li>
<li>不透明返回类型。函数调用者决定返回什么类型是泛型，函数自身决定返回什么类型使用不透明返回类型。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md">SE-0244 Opaque Result Types</a></li>
<li>初始化有默认值的属性可不设置。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0242-default-values-memberwise.md">SE-0242 Synthesize default values for the memberwise initializer</a></li>
<li>单行表达式函数隐式返回，返回一个单行表达式的函数可以不用 return 关键字。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0255-omit-return.md">SE-0255 Implicit returns from single-expression functions</a></li>
<li>在类、结构体和枚举里使用 Self，Self 可以指代包含的类型。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0068-universal-self.md">SE-0068 Expanding Swift Self to class members and value types</a></li>
<li>静态下标。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0254-static-subscripts.md">SE-0254 Static and class subscripts</a></li>
<li>枚举里有 none 的 case 编译器会提示换成 Optional.none。</li>
<li>引入未初始化数组。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0245-array-uninitialized-initializer.md">SE-0245 Add an Array Initializer with Access to Uninitialized Storage</a></li>
</ul>
<p><em>Swift 5.2</em></p>
<ul>
<li>自定义类型中实现了 callAsFunction() 的话，该类型的值就可以直接调用。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0253-callable.md">SE-0253 Callable values of user-defined nominal types</a></li>
<li>键路径表达式作为函数。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0249-key-path-literal-function-expressions.md">SE-0249 Key Path Expressions as Functions</a></li>
</ul>
<p><em>Swift 5.3</em></p>
<ul>
<li>SPM 包管理资源，SPM 可以包含资源文件，比如多媒体或文本等。通过 Bundle.module 访问这些资源。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0271-package-manager-resources.md">SE-0271 Package Manager Resources</a></li>
<li>SPM 包里资源本地化。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0278-package-manager-localized-resources.md">SE-0278 Package Manager Localized Resources</a></li>
<li>SPM 可以整合二进制包依赖。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0272-swiftpm-binary-dependencies.md">SE-0272 Package Manager Binary Dependencies</a></li>
<li>SPM 可以设置特定平台的依赖。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0273-swiftpm-conditional-target-dependencies.md">SE-0273 Package Manager Conditional Target Dependencies</a></li>
<li>单个 catch 块中捕获多个 Error 的 case。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0276-multi-pattern-catch-clauses.md">SE-0276 Multi-Pattern Catch Clauses</a></li>
<li>支持多个尾部闭包。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0279-multiple-trailing-closures.md">SE-0279 Multiple Trailing Closures</a></li>
<li>符合 Comparable 协议的枚举可以进行比较。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0266-synthesized-comparable-for-enumerations.md">SE-0266 Synthesized Comparable conformance for enum types</a></li>
<li>很多地方可以不用加 self 来指代实例自己了。提案见 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0269-implicit-self-explicit-capture.md">SE-0269 Increase availability of implicit self in @escaping closures when reference cycles are unlikely to occur</a></li>
<li>@main 可以方便指定程序入口点。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0281-main-attribute.md">SE-0281 @main: Type-Based Program Entry Points</a></li>
<li>where 子句可以用到泛型和扩展函数中。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0267-where-on-contextually-generic.md">SE-0267 where clauses on contextually generic declarations</a></li>
<li>枚举的 case 也可以符合协议。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0280-enum-cases-as-protocol-witnesses.md">SE-0280 Enum cases as protocol witnesses</a></li>
<li>完善 didSet，性能提升。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0268-didset-semantics.md">SE-0268 Refine didSet Semantics</a></li>
<li>新增 Float16 类型，即半精度浮点类型。提案 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0277-float16.md">SE-0277 Float16</a></li>
</ul>
<p><em>Swift 5.4</em></p>
<ul>
<li>SPM 支持 @main。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0294-package-executable-targets.md">SE-0294 Declaring executable targets in Package Manifests</a></li>
<li>结果生成器（Result builders），通过传递序列创建新值，SwiftUI就是使用的结果生成器将多个视图生成一个视图。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md">SE-0289 Result builders</a></li>
<li>增强隐式成员语法，即使用了隐式的成员可以进行链式处理。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0287-implicit-member-chains.md">SE-0287 Extend implicit member syntax to cover chains of member references</a></li>
<li>函数开始有了使用多个变量参数的能力。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0284-multiple-variadic-parameters.md">SE-0284 Allow Multiple Variadic Parameters in Functions, Subscripts, and Initializers</a></li>
<li>嵌套函数可以重载，嵌套函数可以在声明函数之前调用他。</li>
<li>属性包装支持局部变量。</li>
</ul>
<p><em>Swift 5.5</em></p>
<ul>
<li>Async await，用同步写法来处理异步。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296 Async/await</a></li>
<li>Async sequences，异步序列上的循环能力。符合 AsyncSequence 协议的序列可以通过 for await 来进行异步循环。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298 Async/Await: Sequences</a> </li>
<li>结构化的并发，使用 Task 和 TaskGroup 执行、取消和监听当前操作的方法。复杂的并发处理可以使用 withTaskGroup() 来创建一组 Task，addTask() 用来添加任务，cancelAll() 可以取消任务，addTask() 在取消任务后可以继续添加任务，如果使用了 addTaskUnlessCancelled() 方法就可以避免取消后会继续添加任务这种情况。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304 Structured concurrency</a></li>
<li>只读属性支持 async 和 throws 关键字。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0310-effectful-readonly-properties.md">SE-0310 Effectful Read-only Properties</a></li>
<li>async let，可以创建 await 子任务。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0317-async-let.md">SE-0317 async let bindings</a></li>
<li>以前异步代码的适配。比如 DispatchQueue.main.async，外部库可以通过 withCheckedContinuation() 函数来对以前异步代码进行封装。 提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">SE-0300 Continuations for interfacing async tasks with synchronous code</a></li>
<li>Actor，可以确保内部只能被一个线程访问，避免存储属性和方法出现竞争条件。提案在这 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306 Actors</a></li>
<li>全局 actors，通过 actor 将全局状态隔离出来，避免数据竞争。比如主线程 @MainActor 这个属性包装可以将属性和方法标记为只能在主线程上访问。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0316-global-actors.md">SE-0316 Global actors</a></li>
<li>Sendable 协议和 @Sendable 属性包装，目的是支持安全的将数据从一个线程传给另一个线程。Swift 的核心数据类型比如字符、集合等已符合 Sendable 协议。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0302-concurrent-value-and-concurrent-closures.md">SE-0302 Sendable and @Sendable closures</a></li>
<li>局部变量可以使用 lazy。</li>
<li>属性包装可以用到函数和闭包参数上。提案<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0293-extend-property-wrappers-to-function-and-closure-parameters.md">SE-0293 Extend Property Wrappers to Function and Closure Parameters</a></li>
<li>泛型支持静态成员查找。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0299-extend-generic-static-member-lookup.md">SE-0299 Extending Static Member Lookup in Generic Contexts</a></li>
<li>#if 用于后缀成员表达式。提案见 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0308-postfix-if-config-expressions.md">SE-0308 #if for postfix member expressions</a></li>
<li>CGFloat 和 Double 之间可以隐式转换。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0307-allow-interchangeable-use-of-double-cgfloat-types.md">SE-0307 Allow interchangeable use of CGFloat and Double types</a></li>
<li>Codable 支持关联值枚举。提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0295-codable-synthesis-for-enums-with-associated-values.md">SE-0295 Codable synthesis for enums with associated values</a></li>
</ul>
<h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>参考：</p>
<ul>
<li><a href="https://google.github.io/swift/">Swift Style Guide</a></li>
</ul>
<p>多用静态特性。swift 在编译期间所做的优化比 OC 要多，这是由于他的静态派发、泛型特化、写时复制这些静态特性决定的。另外通过 final  和 private 这样的表示可将动态特性转化为静态方式，编译开启 WMO 可以自动推导出哪些动态派发可转化为静态派发。</p>
<p>如何避免崩溃？</p>
<ul>
<li>字典：用结构体替代</li>
<li>Any：可用泛型或关联关联类型替代</li>
<li>as? ：少用 AnyObject，多用泛型或不透明类型</li>
<li>!：要少用</li>
</ul>
<p>好的实践？</p>
<ul>
<li>少用继承，多用 protocol</li>
<li>多用 extension 对自己代码进行管理</li>
</ul>
<h3 id="资料推荐"><a href="#资料推荐" class="headerlink" title="资料推荐"></a>资料推荐</h3><h4 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h4><ul>
<li>《Thinking in SwiftUI》</li>
<li>《Swift 进阶》</li>
<li>《函数式Swift》</li>
<li>《深入解析Mac OS X &amp; iOS操作系统》</li>
<li>《LLVM Techniques, Tips, and Best Practices Clang and Middle-End Libraries》</li>
<li>《Learn LLVM 12》</li>
<li>《Crafting Interpreters》</li>
<li>《TCP/IP Illustrated》</li>
<li>《松本行弘的程序世界》</li>
<li>《现代操作系统》</li>
<li>《深入理解计算机系统》</li>
<li>《程序员的自我修养》</li>
<li>《Head First 设计模式》</li>
</ul>
<h3 id="三方库使用"><a href="#三方库使用" class="headerlink" title="三方库使用"></a>三方库使用</h3><h4 id="SQLite-swift-的使用"><a href="#SQLite-swift-的使用" class="headerlink" title="SQLite.swift 的使用"></a>SQLite.swift 的使用</h4><p>下面是 SQLite.swift 库的使用介绍，包括了数据库创建，表创建，表的添加、更新、删除、查找等处理方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SQLite</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">DB</span>()</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> path <span class="operator">=</span> <span class="type">NSSearchPathForDirectoriesInDomains</span>(</span><br><span class="line">        .applicationSupportDirectory, .userDomainMask, <span class="literal">true</span></span><br><span class="line">    ).first<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> <span class="type">BBDB</span>: <span class="type">Connection</span>?</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">init</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="type">DB</span>.path)</span><br><span class="line">            <span class="type">BBDB</span> <span class="operator">=</span> <span class="keyword">try</span> <span class="type">Connection</span>(<span class="string">&quot;<span class="subst">\(DB.path)</span>/github.sqlite3&quot;</span>)</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="type">BBDB</span> <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/// Swift 类型和 SQLite 类型对标如下：</span></span><br><span class="line">        <span class="comment">/// Int64 = INTEGER</span></span><br><span class="line">        <span class="comment">/// Double = REAL</span></span><br><span class="line">        <span class="comment">/// String = TEXT</span></span><br><span class="line">        <span class="comment">/// nil = NULL</span></span><br><span class="line">        <span class="comment">/// SQLite.Blob = BLOB</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建表</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cTbs</span>()</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> <span class="type">ReposNotiDataHelper</span>.createTable()</span><br><span class="line">            <span class="keyword">try</span> <span class="type">DevsNotiDataHelper</span>.createTable()</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">DBError</span>.connectionErr</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DBError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> connectionErr, insertErr, deleteErr, searchErr, updateErr, nilInData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DataHelperProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">T</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createTable</span>()</span> <span class="keyword">throws</span> -&gt; <span class="type">Void</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">insert</span>(<span class="params">i</span>: <span class="type">T</span>)</span> <span class="keyword">throws</span> -&gt; <span class="type">Int64</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">delete</span>(<span class="params">i</span>: <span class="type">T</span>)</span> <span class="keyword">throws</span> -&gt; <span class="type">Void</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">findAll</span>()</span> <span class="keyword">throws</span> -&gt; [<span class="type">T</span>]<span class="operator">?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: 开发者更新提醒</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">DBDevNoti</span> <span class="operator">=</span> (</span><br><span class="line">    login: <span class="type">String</span>,</span><br><span class="line">    lastReadId: <span class="type">String</span>,</span><br><span class="line">    unRead: <span class="type">Int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DevsNotiDataHelper</span>: <span class="title">DataHelperProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> table <span class="operator">=</span> <span class="type">Table</span>(<span class="string">&quot;devsNoti&quot;</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> login <span class="operator">=</span> <span class="type">Expression</span>&lt;<span class="type">String</span>&gt;(<span class="string">&quot;login&quot;</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> lastReadId <span class="operator">=</span> <span class="type">Expression</span>&lt;<span class="type">String</span>&gt;(<span class="string">&quot;lastReadId&quot;</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> unRead <span class="operator">=</span> <span class="type">Expression</span>&lt;<span class="type">Int</span>&gt;(<span class="string">&quot;unRead&quot;</span>)</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">T</span> <span class="operator">=</span> <span class="type">DBDevNoti</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">createTable</span>()</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> db <span class="operator">=</span> <span class="type">DB</span>.shared.<span class="type">BBDB</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">DBError</span>.connectionErr</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="keyword">try</span> db.run(table.create(ifNotExists: <span class="literal">true</span>) &#123; t <span class="keyword">in</span></span><br><span class="line">                t.column(login, unique: <span class="literal">true</span>)</span><br><span class="line">                t.column(lastReadId, defaultValue: <span class="string">&quot;&quot;</span>)</span><br><span class="line">                t.column(unRead, defaultValue: <span class="number">0</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">_</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">DBError</span>.connectionErr</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// end createTable</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">insert</span>(<span class="params">i</span>: <span class="type">DBDevNoti</span>)</span> <span class="keyword">throws</span> -&gt; <span class="type">Int64</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> db <span class="operator">=</span> <span class="type">DB</span>.shared.<span class="type">BBDB</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">DBError</span>.connectionErr</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> insert <span class="operator">=</span> table.insert(login <span class="operator">&lt;-</span> i.login, lastReadId <span class="operator">&lt;-</span> i.lastReadId, unRead <span class="operator">&lt;-</span> i.unRead)</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> rowId <span class="operator">=</span> <span class="keyword">try</span> db.run(insert)</span><br><span class="line">            <span class="keyword">guard</span> rowId <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="type">DBError</span>.insertErr</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> rowId</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">DBError</span>.insertErr</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// end insert</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">delete</span>(<span class="params">i</span>: <span class="type">DBDevNoti</span>)</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> db <span class="operator">=</span> <span class="type">DB</span>.shared.<span class="type">BBDB</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">DBError</span>.connectionErr</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> query <span class="operator">=</span> table.filter(login <span class="operator">==</span> i.login)</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> tmp <span class="operator">=</span> <span class="keyword">try</span> db.run(query.delete())</span><br><span class="line">            <span class="keyword">guard</span> tmp <span class="operator">==</span> <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="type">DBError</span>.deleteErr</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">DBError</span>.deleteErr</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// end delete</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">find</span>(<span class="params">sLogin</span>: <span class="type">String</span>)</span> <span class="keyword">throws</span> -&gt; <span class="type">DBDevNoti</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> db <span class="operator">=</span> <span class="type">DB</span>.shared.<span class="type">BBDB</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">DBError</span>.connectionErr</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> query <span class="operator">=</span> table.filter(login <span class="operator">==</span> sLogin)</span><br><span class="line">        <span class="keyword">let</span> items <span class="operator">=</span> <span class="keyword">try</span> db.prepare(query)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> items &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">DBDevNoti</span>(login: i[login], lastReadId: i[lastReadId], unRead: i[unRead])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="comment">// end find</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">update</span>(<span class="params">i</span>: <span class="type">DBDevNoti</span>)</span> <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> db <span class="operator">=</span> <span class="type">DB</span>.shared.<span class="type">BBDB</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">DBError</span>.connectionErr</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> query <span class="operator">=</span> table.filter(login <span class="operator">==</span> i.login)</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">try</span> db.run(query.update(lastReadId <span class="operator">&lt;-</span> i.lastReadId, unRead <span class="operator">&lt;-</span> i.unRead)) <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="type">DBError</span>.updateErr</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">DBError</span>.updateErr</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// end update</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">findAll</span>()</span> <span class="keyword">throws</span> -&gt; [<span class="type">DBDevNoti</span>]<span class="operator">?</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> db <span class="operator">=</span> <span class="type">DB</span>.shared.<span class="type">BBDB</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">DBError</span>.connectionErr</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> arr <span class="operator">=</span> [<span class="type">DBDevNoti</span>]()</span><br><span class="line">        <span class="keyword">let</span> items <span class="operator">=</span> <span class="keyword">try</span> db.prepare(table)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> items &#123;</span><br><span class="line">            arr.append(<span class="type">DBDevNoti</span>(login: i[login], lastReadId: i[lastReadId], unRead: i[unRead]))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125; <span class="comment">// end find all</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用时，可以在初始化时这么做：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: 初始化数据库</span></span><br><span class="line">et db <span class="operator">=</span> <span class="type">DB</span>.shared</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> db.cTbs() <span class="comment">// 创建表</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用的操作示例如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> fd <span class="operator">=</span> <span class="keyword">try</span> <span class="type">ReposNotiDataHelper</span>.find(sFullName: r.id) &#123;</span><br><span class="line">        reposDic[fd.fullName] <span class="operator">=</span> fd.unRead</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="keyword">try</span> <span class="type">ReposNotiDataHelper</span>.insert(i: <span class="type">DBRepoNoti</span>(fullName: r.id, lastReadCommitSha: <span class="string">&quot;&quot;</span>, unRead: <span class="number">0</span>))</span><br><span class="line">            reposDic[r.id] <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> reposDic</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> reposDic</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><h4 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h4><ul>
<li>官方提供的两个例子，<a href="https://developer.apple.com/tutorials/swiftui/creating-a-macos-app">Creating a macOS App</a>，<a href="https://developer.apple.com/documentation/swiftui/building_a_great_mac_app_with_swiftui">Building a Great Mac App with SwiftUI</a> （有table和LazyVGrid的用法）。</li>
<li><a href="https://github.com/adamayoung/Movies">GitHub - adamayoung/Movies: Movies and TV Shows App for iOS, iPadOS, watchOS and macOS</a> 使用了SwiftUI和Combine，电影数据使用的是<a href="https://www.themoviedb.org/">The Movie Database (TMDB)</a>的API</li>
</ul>
<h4 id="三栏结构"><a href="#三栏结构" class="headerlink" title="三栏结构"></a>三栏结构</h4><p>三栏结构架子搭建，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SwiftPamphletApp</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">SPSidebar</span>()</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;第二栏&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;第三栏&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .navigationTitle(<span class="string">&quot;Swift 小册子&quot;</span>)</span><br><span class="line">        .toolbar &#123;</span><br><span class="line">            <span class="type">ToolbarItem</span>(placement: <span class="type">ToolbarItemPlacement</span>.navigation) &#123;</span><br><span class="line">                <span class="type">Button</span> &#123;</span><br><span class="line">                    <span class="type">NSApp</span>.keyWindow<span class="operator">?</span>.firstResponder<span class="operator">?</span>.tryToPerform(#selector(<span class="type">NSSplitViewController</span>.toggleSidebar(<span class="keyword">_</span>:)), with: <span class="literal">nil</span>)</span><br><span class="line">                &#125; label: &#123;</span><br><span class="line">                    <span class="type">Label</span>(<span class="string">&quot;Sidebar&quot;</span>, systemImage: <span class="string">&quot;sidebar.left&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SPSidebar</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">Section</span>(<span class="string">&quot;第一组&quot;</span>) &#123;</span><br><span class="line">                <span class="type">NavigationLink</span>(<span class="string">&quot;第一项&quot;</span>, destination: <span class="type">SPList</span>(title: <span class="string">&quot;列表1&quot;</span>))</span><br><span class="line">                    .badge(<span class="number">3</span>)</span><br><span class="line">                <span class="type">NavigationLink</span>(<span class="string">&quot;第二项&quot;</span>, destination: <span class="type">SPList</span>(title: <span class="string">&quot;列表2&quot;</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Section</span>(<span class="string">&quot;第二组&quot;</span>) &#123;</span><br><span class="line">                <span class="type">NavigationLink</span>(<span class="string">&quot;第三项&quot;</span>, destination: <span class="type">SPList</span>(title: <span class="string">&quot;列表3&quot;</span>))</span><br><span class="line">                <span class="type">NavigationLink</span>(<span class="string">&quot;第四项&quot;</span>, destination: <span class="type">SPList</span>(title: <span class="string">&quot;列表4&quot;</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .listStyle(<span class="type">SidebarListStyle</span>())</span><br><span class="line">        .frame(minWidth: <span class="number">160</span>)</span><br><span class="line">        .toolbar &#123;</span><br><span class="line">            <span class="type">ToolbarItem</span> &#123;</span><br><span class="line">                <span class="type">Menu</span> &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">                &#125; label: &#123;</span><br><span class="line">                    <span class="type">Label</span>(<span class="string">&quot;Label&quot;</span>, systemImage: <span class="string">&quot;slider.horizontal.3&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SPList</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> searchText: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">3</span>) &#123; i <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;内容<span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .toolbar(content: &#123;</span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Label</span>(<span class="string">&quot;Add&quot;</span>, systemImage: <span class="string">&quot;plus&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .navigationTitle(title)</span><br><span class="line">        .navigationSubtitle(<span class="string">&quot;副标题&quot;</span>)</span><br><span class="line">        .searchable(text: <span class="variable">$searchText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显示效果如下：<br><img src="https://user-images.githubusercontent.com/251980/142977421-bed5b5ae-01fe-471f-a951-63dd4338c97a.png" alt=""></p>
<h4 id="共享菜单"><a href="#共享菜单" class="headerlink" title="共享菜单"></a>共享菜单</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ShareView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Menu</span> &#123;</span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> p <span class="operator">=</span> <span class="type">NSPasteboard</span>.general</span><br><span class="line">                p.declareTypes([.string], owner: <span class="literal">nil</span>)</span><br><span class="line">                p.setString(s, forType: .string)</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;拷贝链接&quot;</span>)</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">&quot;doc.on.doc&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Divider</span>()</span><br><span class="line">            <span class="type">ForEach</span>(<span class="type">NSSharingService</span>.sharingServices(forItems: [<span class="string">&quot;&quot;</span>]), id: \.title) &#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">Button</span> &#123;</span><br><span class="line">                    item.perform(withItems: [s])</span><br><span class="line">                &#125; label: &#123;</span><br><span class="line">                    <span class="type">Text</span>(item.title)</span><br><span class="line">                    <span class="type">Image</span>(nsImage: item.image)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; label: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;分享&quot;</span>)</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;square.and.arrow.up&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="剪贴板"><a href="#剪贴板" class="headerlink" title="剪贴板"></a>剪贴板</h4><p>添加和读取剪贴板的方法如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取剪贴板内容</span></span><br><span class="line"><span class="keyword">let</span> s <span class="operator">=</span> <span class="type">NSPasteboard</span>.general.string(forType: .string)</span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> s <span class="operator">=</span> s <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置剪贴板内容</span></span><br><span class="line"><span class="keyword">let</span> p <span class="operator">=</span> <span class="type">NSPasteboard</span>.general</span><br><span class="line">p.declareTypes([.string], owner: <span class="literal">nil</span>)</span><br><span class="line">p.setString(s, forType: .string)</span><br></pre></td></tr></table></figure></p>
<h2 id="Combine"><a href="#Combine" class="headerlink" title="Combine"></a>Combine</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="Combine-是什么？"><a href="#Combine-是什么？" class="headerlink" title="Combine 是什么？"></a>Combine 是什么？</h4><p>WWDC 2019苹果推出Combine，Combine是一种响应式编程范式，采用声明式的Swift API。</p>
<p>Combine 写代码的思路是你写代码不同于以往命令式的描述如何处理数据，Combine 是要去描述好数据会经过哪些逻辑运算处理。这样代码更好维护，可以有效的减少嵌套闭包以及分散的回调等使得代码维护麻烦的苦恼。</p>
<p>声明式和过程时区别可见如下代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有数相加</span></span><br><span class="line"><span class="comment">// 命令式思维</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum1</span>(<span class="params">arr</span>: [<span class="type">Int</span>])</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> sum: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> v <span class="keyword">in</span> arr &#123;</span><br><span class="line">    sum <span class="operator">+=</span> v</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明式思维</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum2</span>(<span class="params">arr</span>: [<span class="type">Int</span>])</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="number">0</span>, <span class="operator">+</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Combine 主要用来处理异步的事件和值。苹果 UI 框架都是在主线程上进行 UI 更新，Combine 通过 Publisher 的 receive 设置回主线程更新UI会非常的简单。</p>
<p>已有的 RxSwift 和 ReactiveSwift 框架和 Combine 的思路和用法类似。</p>
<p>Combine 的三个核心概念</p>
<ul>
<li>发布者</li>
<li>订阅者</li>
<li>操作符</li>
</ul>
<p>简单举个发布数据和类属性绑定的例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pA <span class="operator">=</span> <span class="type">Just</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> pA.sink &#123; v <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;pA is: <span class="subst">\(v)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pB <span class="operator">=</span> [<span class="number">7</span>,<span class="number">90</span>,<span class="number">16</span>,<span class="number">11</span>].publisher</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> pB</span><br><span class="line">    .sink &#123; v <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;pB: <span class="subst">\(v)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;property update to <span class="subst">\(p)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o <span class="operator">=</span> <span class="type">AClass</span>()</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> pB.assign(to: \.p, on: o)</span><br></pre></td></tr></table></figure>
<h4 id="Combine-资料"><a href="#Combine-资料" class="headerlink" title="Combine 资料"></a>Combine 资料</h4><p>官方文档链接  <a href="https://developer.apple.com/documentation/combine">Combine | Apple Developer Documentation</a> 。还有  <a href="https://heckj.github.io/swiftui-notes/">Using Combine</a>  这里有大量使用示例，内容较全。官方讨论Combine的论坛  <a href="https://forums.swift.org/tag/combine">Topics tagged combine</a> 。StackOverflow上相关问题  <a href="https://stackoverflow.com/questions/tagged/combine">Newest ‘combine’ Questions</a> 。</p>
<p>WWDC上关于Combine的Session如下：</p>
<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/722/">Introducing Combine</a> </li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/721/">Combine in Practice</a> </li>
</ul>
<p>和Combine相关的Session：</p>
<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/415/">Modern Swift API Design</a> </li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/226">Data Flow Through SwiftUI</a> </li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/711">Introducing Combine and Advances in Foundation</a> </li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/712/">Advances in Networking, Part 1</a> </li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/610/">Building Collaborative AR Experiences</a> </li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/223/">Expanding the Sensory Experience with Core Haptics</a> </li>
</ul>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><h4 id="publisher"><a href="#publisher" class="headerlink" title="publisher"></a>publisher</h4><p>publisher 是发布者，sink 是订阅者</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> p2: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line">[<span class="type">S</span>(p1: <span class="string">&quot;1&quot;</span>, p2: <span class="string">&quot;one&quot;</span>), <span class="type">S</span>(p1: <span class="string">&quot;2&quot;</span>, p2: <span class="string">&quot;two&quot;</span>)]</span><br><span class="line">    .publisher</span><br><span class="line">    .print(<span class="string">&quot;array&quot;</span>)</span><br><span class="line">    .sink &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .store(in: <span class="operator">&amp;</span>cc)</span><br></pre></td></tr></table></figure>
<p> 输出<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> array: receive subscription: ([戴铭的Swift小册子.AppDelegate.(unknown context at $10ac82d20).(unknown context at $10ac82da4).S(p1: &quot;1&quot;, p2: &quot;one&quot;), 戴铭的Swift小册子.AppDelegate.(unknown context at $10ac82d20).(unknown context at $10ac82da4).S(p1: &quot;2&quot;, p2: &quot;two&quot;)])</span><br><span class="line">array: request unlimited</span><br><span class="line">array: receive value: (S(p1: &quot;1&quot;, p2: &quot;one&quot;))</span><br><span class="line">S(p1: &quot;1&quot;, p2: &quot;one&quot;)</span><br><span class="line">array: receive value: (S(p1: &quot;2&quot;, p2: &quot;two&quot;))</span><br><span class="line">S(p1: &quot;2&quot;, p2: &quot;two&quot;)</span><br><span class="line">array: receive finished</span><br></pre></td></tr></table></figure></p>
<h4 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h4><p>Just 是发布者，发布的数据在初始化时完成</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> p2: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pb <span class="operator">=</span> <span class="type">Just</span>(<span class="type">S</span>(p1: <span class="string">&quot;1&quot;</span>, p2: <span class="string">&quot;one&quot;</span>))</span><br><span class="line">pb</span><br><span class="line">    .print(<span class="string">&quot;pb&quot;</span>)</span><br><span class="line">    .sink &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .store(in: <span class="operator">&amp;</span>cc)</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pb: receive subscription: (Just)</span><br><span class="line">pb: request unlimited</span><br><span class="line">pb: receive value: (S(p1: &quot;1&quot;, p2: &quot;one&quot;))</span><br><span class="line">S(p1: &quot;1&quot;, p2: &quot;one&quot;)</span><br><span class="line">pb: receive finished</span><br></pre></td></tr></table></figure></p>
<h4 id="PassthroughSubject"><a href="#PassthroughSubject" class="headerlink" title="PassthroughSubject"></a>PassthroughSubject</h4><p>PassthroughSubject 可以传递多值，订阅者可以是一个也可以是多个，send 指明 completion 后，订阅者就没法接收到新发送的值了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> p2: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> aE, bE</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ps1 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">S</span>, <span class="type">CError</span>&gt;()</span><br><span class="line">ps1</span><br><span class="line">    .print(<span class="string">&quot;ps1&quot;</span>)</span><br><span class="line">    .sink &#123; c <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;completion:&quot;</span>, c) <span class="comment">// send 了 .finished 后会执行</span></span><br><span class="line">    &#125; receiveValue: &#123; s <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;receive:&quot;</span>, s)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    .store(in: <span class="operator">&amp;</span>cc)</span><br><span class="line"></span><br><span class="line">ps1.send(<span class="type">S</span>(p1: <span class="string">&quot;1&quot;</span>, p2: <span class="string">&quot;one&quot;</span>))</span><br><span class="line">ps1.send(completion: .failure(<span class="type">CError</span>.aE)) <span class="comment">// 和 .finished 一样后面就不会发送了</span></span><br><span class="line">ps1.send(<span class="type">S</span>(p1: <span class="string">&quot;2&quot;</span>, p2: <span class="string">&quot;two&quot;</span>))</span><br><span class="line">ps1.send(completion: .finished)</span><br><span class="line">ps1.send(<span class="type">S</span>(p1: <span class="string">&quot;3&quot;</span>, p2: <span class="string">&quot;three&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个订阅者</span></span><br><span class="line"><span class="keyword">let</span> ps2 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">ps2.send(<span class="string">&quot;one&quot;</span>) <span class="comment">// 订阅之前 send 的数据没有订阅者可以接收</span></span><br><span class="line">ps2.send(<span class="string">&quot;two&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sb1 <span class="operator">=</span> ps2</span><br><span class="line">    .print(<span class="string">&quot;ps2 sb1&quot;</span>)</span><br><span class="line">    .sink &#123; s <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">ps2.send(<span class="string">&quot;three&quot;</span>) <span class="comment">// 这个 send 的值会被 sb1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sb2 <span class="operator">=</span> ps2</span><br><span class="line">    .print(<span class="string">&quot;ps2 sb2&quot;</span>)</span><br><span class="line">    .sink &#123; s <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(s)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">ps2.send(<span class="string">&quot;four&quot;</span>) <span class="comment">// 这个 send 的值会被 sb1 和 sb2 接受</span></span><br><span class="line"></span><br><span class="line">sb1.store(in: <span class="operator">&amp;</span>cc)</span><br><span class="line">sb2.store(in: <span class="operator">&amp;</span>cc)</span><br><span class="line">ps2.send(completion: .finished)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ps1: receive subscription: (PassthroughSubject)</span><br><span class="line">ps1: request unlimited</span><br><span class="line">ps1: receive value: (S(p1: &quot;1&quot;, p2: &quot;one&quot;))</span><br><span class="line">receive: S(p1: &quot;1&quot;, p2: &quot;one&quot;)</span><br><span class="line">ps1: receive error: (aE)</span><br><span class="line">completion: failure(戴铭的Swift小册子.AppDelegate.(unknown context at $10b15ce10).(unknown context at $10b15cf3c).CError.aE)</span><br><span class="line">ps2 sb1: receive subscription: (PassthroughSubject)</span><br><span class="line">ps2 sb1: request unlimited</span><br><span class="line">ps2 sb1: receive value: (three)</span><br><span class="line">three</span><br><span class="line">ps2 sb2: receive subscription: (PassthroughSubject)</span><br><span class="line">ps2 sb2: request unlimited</span><br><span class="line">ps2 sb1: receive value: (four)</span><br><span class="line">four</span><br><span class="line">ps2 sb2: receive value: (four)</span><br><span class="line">four</span><br><span class="line">ps2 sb1: receive finished</span><br><span class="line">ps2 sb2: receive finished</span><br></pre></td></tr></table></figure></p>
<h4 id="Empty"><a href="#Empty" class="headerlink" title="Empty"></a>Empty</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> p2: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ept <span class="operator">=</span> <span class="type">Empty</span>&lt;<span class="type">S</span>, <span class="type">Never</span>&gt;() <span class="comment">// 加上 completeImmediately: false 后面即使用 replaceEmpty 也不会接受值</span></span><br><span class="line">ept</span><br><span class="line">    .print(<span class="string">&quot;ept&quot;</span>)</span><br><span class="line">    .sink &#123; c <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;completion:&quot;</span>, c)</span><br><span class="line">    &#125; receiveValue: &#123; s <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;receive:&quot;</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">    .store(in: <span class="operator">&amp;</span>cc)</span><br><span class="line"></span><br><span class="line">ept.replaceEmpty(with: <span class="type">S</span>(p1: <span class="string">&quot;1&quot;</span>, p2: <span class="string">&quot;one&quot;</span>))</span><br><span class="line">    .sink &#123; c <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;completion:&quot;</span>, c)</span><br><span class="line">    &#125; receiveValue: &#123; s <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;receive:&quot;</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">    .store(in: <span class="operator">&amp;</span>cc)</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ept: receive subscription: (Empty)</span><br><span class="line">ept: request unlimited</span><br><span class="line">ept: receive finished</span><br><span class="line">completion: finished</span><br><span class="line">receive: S(p1: &quot;1&quot;, p2: &quot;one&quot;)</span><br><span class="line">completion: finished</span><br></pre></td></tr></table></figure></p>
<h4 id="CurrentValueSubject"><a href="#CurrentValueSubject" class="headerlink" title="CurrentValueSubject"></a>CurrentValueSubject</h4><p>CurrentValueSubject 的订阅者可以收到订阅时已发出的那条数据</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cs <span class="operator">=</span> <span class="type">CurrentValueSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">cs.send(<span class="string">&quot;two&quot;</span>)</span><br><span class="line">cs.send(<span class="string">&quot;three&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> sb1 <span class="operator">=</span> cs</span><br><span class="line">    .print(<span class="string">&quot;cs sb1&quot;</span>)</span><br><span class="line">    .sink &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">cs.send(<span class="string">&quot;four&quot;</span>)</span><br><span class="line">cs.send(<span class="string">&quot;five&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sb2 <span class="operator">=</span> cs</span><br><span class="line">    .print(<span class="string">&quot;cs sb2&quot;</span>)</span><br><span class="line">    .sink &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">cs.send(<span class="string">&quot;six&quot;</span>)</span><br><span class="line"></span><br><span class="line">sb1.store(in: <span class="operator">&amp;</span>cc)</span><br><span class="line">sb2.store(in: <span class="operator">&amp;</span>cc)</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cs sb1: receive subscription: (CurrentValueSubject)</span><br><span class="line">cs sb1: request unlimited</span><br><span class="line">cs sb1: receive value: (three)</span><br><span class="line">three</span><br><span class="line">cs sb1: receive value: (four)</span><br><span class="line">four</span><br><span class="line">cs sb1: receive value: (five)</span><br><span class="line">five</span><br><span class="line">cs sb2: receive subscription: (CurrentValueSubject)</span><br><span class="line">cs sb2: request unlimited</span><br><span class="line">cs sb2: receive value: (five)</span><br><span class="line">five</span><br><span class="line">cs sb1: receive value: (six)</span><br><span class="line">six</span><br><span class="line">cs sb2: receive value: (six)</span><br><span class="line">six</span><br><span class="line">cs sb1: receive cancel</span><br><span class="line">cs sb2: receive cancel</span><br></pre></td></tr></table></figure></p>
<h4 id="removeDuplicates"><a href="#removeDuplicates" class="headerlink" title="removeDuplicates"></a>removeDuplicates</h4><p>使用 removeDuplicates，重复的值就不会发送了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pb <span class="operator">=</span> [<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>,<span class="string">&quot;three&quot;</span>,<span class="string">&quot;four&quot;</span>]</span><br><span class="line">    .publisher</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sb <span class="operator">=</span> pb</span><br><span class="line">    .print(<span class="string">&quot;sb&quot;</span>)</span><br><span class="line">    .removeDuplicates()</span><br><span class="line">    .sink &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">sb.store(in: <span class="operator">&amp;</span>cc)</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sb: receive subscription: ([&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;three&quot;, &quot;four&quot;])</span><br><span class="line">sb: request unlimited</span><br><span class="line">sb: receive value: (one)</span><br><span class="line">one</span><br><span class="line">sb: receive value: (two)</span><br><span class="line">two</span><br><span class="line">sb: receive value: (three)</span><br><span class="line">three</span><br><span class="line">sb: receive value: (three)</span><br><span class="line">sb: request max: (1) (synchronous)</span><br><span class="line">sb: receive value: (four)</span><br><span class="line">four</span><br><span class="line">sb: receive finished</span><br></pre></td></tr></table></figure></p>
<h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p>flatMap 能将多个发布者的值打平发送给订阅者</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p: <span class="type">AnyPublisher</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 <span class="operator">=</span> <span class="type">S</span>(p: <span class="type">Just</span>(<span class="string">&quot;one&quot;</span>).eraseToAnyPublisher())</span><br><span class="line"><span class="keyword">let</span> s2 <span class="operator">=</span> <span class="type">S</span>(p: <span class="type">Just</span>(<span class="string">&quot;two&quot;</span>).eraseToAnyPublisher())</span><br><span class="line"><span class="keyword">let</span> s3 <span class="operator">=</span> <span class="type">S</span>(p: <span class="type">Just</span>(<span class="string">&quot;three&quot;</span>).eraseToAnyPublisher())</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pb <span class="operator">=</span> [s1, s2, s3].publisher</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> sb <span class="operator">=</span> pb</span><br><span class="line">    .print(<span class="string">&quot;sb&quot;</span>)</span><br><span class="line">    .flatMap &#123;</span><br><span class="line">        <span class="variable">$0</span>.p</span><br><span class="line">    &#125;</span><br><span class="line">    .sink &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">sb.store(in: <span class="operator">&amp;</span>cc)</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sb: receive subscription: ([戴铭的Swift小册子.AppDelegate.(unknown context at $101167070).(unknown context at $1011670f4).S(p: AnyPublisher), 戴铭的Swift小册子.AppDelegate.(unknown context at $101167070).(unknown context at $1011670f4).S(p: AnyPublisher), 戴铭的Swift小册子.AppDelegate.(unknown context at $101167070).(unknown context at $1011670f4).S(p: AnyPublisher)])</span><br><span class="line">sb: request unlimited</span><br><span class="line">sb: receive value: (S(p: AnyPublisher))</span><br><span class="line">one</span><br><span class="line">sb: receive value: (S(p: AnyPublisher))</span><br><span class="line">two</span><br><span class="line">sb: receive value: (S(p: AnyPublisher))</span><br><span class="line">three</span><br><span class="line">sb: receive finished</span><br></pre></td></tr></table></figure></p>
<h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p>append 会在发布者发布结束后追加发送数据，发布者不结束，append 的数据不会发送。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pb <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sb <span class="operator">=</span> pb</span><br><span class="line">    .print(<span class="string">&quot;sb&quot;</span>)</span><br><span class="line">    .append(<span class="string">&quot;five&quot;</span>, <span class="string">&quot;six&quot;</span>)</span><br><span class="line">    .sink &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">sb.store(in: <span class="operator">&amp;</span>cc)</span><br><span class="line"></span><br><span class="line">pb.send(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">pb.send(<span class="string">&quot;two&quot;</span>)</span><br><span class="line">pb.send(<span class="string">&quot;three&quot;</span>)</span><br><span class="line">pb.send(completion: .finished)</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sb: receive subscription: ([戴铭的Swift小册子.AppDelegate.(unknown context at $101167070).(unknown context at $1011670f4).S(p: AnyPublisher), 戴铭的Swift小册子.AppDelegate.(unknown context at $101167070).(unknown context at $1011670f4).S(p: AnyPublisher), 戴铭的Swift小册子.AppDelegate.(unknown context at $101167070).(unknown context at $1011670f4).S(p: AnyPublisher)])</span><br><span class="line">sb: request unlimited</span><br><span class="line">sb: receive value: (S(p: AnyPublisher))</span><br><span class="line">one</span><br><span class="line">sb: receive value: (S(p: AnyPublisher))</span><br><span class="line">two</span><br><span class="line">sb: receive value: (S(p: AnyPublisher))</span><br><span class="line">three</span><br><span class="line">sb: receive finished</span><br></pre></td></tr></table></figure></p>
<h4 id="prepend"><a href="#prepend" class="headerlink" title="prepend"></a>prepend</h4><p>prepend 会在发布者发布前先发送数据，发布者不结束也不会受影响。发布者和集合也可以被打平发布。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pb1 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> pb2 <span class="operator">=</span> [<span class="string">&quot;nine&quot;</span>, <span class="string">&quot;ten&quot;</span>].publisher</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sb <span class="operator">=</span> pb1</span><br><span class="line">    .print(<span class="string">&quot;sb&quot;</span>)</span><br><span class="line">    .prepend(pb2)</span><br><span class="line">    .prepend([<span class="string">&quot;seven&quot;</span>,<span class="string">&quot;eight&quot;</span>])</span><br><span class="line">    .prepend(<span class="string">&quot;five&quot;</span>, <span class="string">&quot;six&quot;</span>)</span><br><span class="line">    .sink &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">sb.store(in: <span class="operator">&amp;</span>cc)</span><br><span class="line"></span><br><span class="line">pb1.send(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">pb1.send(<span class="string">&quot;two&quot;</span>)</span><br><span class="line">pb1.send(<span class="string">&quot;three&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">five</span><br><span class="line">six</span><br><span class="line">seven</span><br><span class="line">eight</span><br><span class="line">nine</span><br><span class="line">ten</span><br><span class="line">sb: receive subscription: (PassthroughSubject)</span><br><span class="line">sb: request unlimited</span><br><span class="line">sb: receive value: (one)</span><br><span class="line">one</span><br><span class="line">sb: receive value: (two)</span><br><span class="line">two</span><br><span class="line">sb: receive value: (three)</span><br><span class="line">three</span><br><span class="line">sb: receive cancel</span><br></pre></td></tr></table></figure></p>
<h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>订阅者可以通过 merge 合并多个发布者发布的数据</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ps1 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> ps2 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sb1 <span class="operator">=</span> ps1.merge(with: ps2)</span><br><span class="line">    .sink &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">ps1.send(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">ps1.send(<span class="string">&quot;two&quot;</span>)</span><br><span class="line">ps2.send(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">ps2.send(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">ps1.send(<span class="string">&quot;three&quot;</span>)</span><br><span class="line"></span><br><span class="line">sb1.store(in: <span class="operator">&amp;</span>cc)</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sb1: receive subscription: (Merge)</span><br><span class="line">sb1: request unlimited</span><br><span class="line">sb1: receive value: (one)</span><br><span class="line">one</span><br><span class="line">sb1: receive value: (two)</span><br><span class="line">two</span><br><span class="line">sb1: receive value: (1)</span><br><span class="line">1</span><br><span class="line">sb1: receive value: (2)</span><br><span class="line">2</span><br><span class="line">sb1: receive value: (three)</span><br><span class="line">three</span><br><span class="line">sb1: receive cancel</span><br></pre></td></tr></table></figure></p>
<h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>zip 会合并多个发布者发布的数据，只有当多个发布者都发布了数据后才会组合成一个数据给订阅者。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ps1 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> ps2 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> ps3 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sb1 <span class="operator">=</span> ps1.zip(ps2, ps3)</span><br><span class="line">    .print(<span class="string">&quot;sb1&quot;</span>)</span><br><span class="line">    .sink &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">ps1.send(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">ps1.send(<span class="string">&quot;two&quot;</span>)</span><br><span class="line">ps1.send(<span class="string">&quot;three&quot;</span>)</span><br><span class="line">ps2.send(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">ps2.send(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">ps1.send(<span class="string">&quot;four&quot;</span>)</span><br><span class="line">ps2.send(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">ps3.send(<span class="string">&quot;一&quot;</span>)</span><br><span class="line"></span><br><span class="line">sb1.store(in: <span class="operator">&amp;</span>cc)</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sb1: receive subscription: (Zip)</span><br><span class="line">sb1: request unlimited</span><br><span class="line">sb1: receive value: ((&quot;one&quot;, &quot;1&quot;, &quot;一&quot;))</span><br><span class="line">(&quot;one&quot;, &quot;1&quot;, &quot;一&quot;)</span><br><span class="line">sb1: receive cancel</span><br></pre></td></tr></table></figure></p>
<h4 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h4><p>combineLatest 会合并多个发布者发布的数据，只有当多个发布者都发布了数据后才会触发合并，合并每个发布者发布的最后一个数据。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">let</span> ps1 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> ps2 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> ps3 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sb1 <span class="operator">=</span> ps1.combineLatest(ps2, ps3)</span><br><span class="line">    .print(<span class="string">&quot;sb1&quot;</span>)</span><br><span class="line">    .sink &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">ps1.send(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">ps1.send(<span class="string">&quot;two&quot;</span>)</span><br><span class="line">ps1.send(<span class="string">&quot;three&quot;</span>)</span><br><span class="line">ps2.send(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">ps2.send(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">ps1.send(<span class="string">&quot;four&quot;</span>)</span><br><span class="line">ps2.send(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">ps3.send(<span class="string">&quot;一&quot;</span>)</span><br><span class="line">ps3.send(<span class="string">&quot;二&quot;</span>)</span><br><span class="line"></span><br><span class="line">sb1.store(in: <span class="operator">&amp;</span>cc)</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sb1: receive subscription: (CombineLatest)</span><br><span class="line">sb1: request unlimited</span><br><span class="line">sb1: receive value: ((&quot;four&quot;, &quot;3&quot;, &quot;一&quot;))</span><br><span class="line">(&quot;four&quot;, &quot;3&quot;, &quot;一&quot;)</span><br><span class="line">sb1: receive value: ((&quot;four&quot;, &quot;3&quot;, &quot;二&quot;))</span><br><span class="line">(&quot;four&quot;, &quot;3&quot;, &quot;二&quot;)</span><br><span class="line">sb1: receive cancel</span><br></pre></td></tr></table></figure></p>
<h4 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h4><p>Scheduler 处理队列。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">let</span> sb1 <span class="operator">=</span> [<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>].publisher</span><br><span class="line">    .print(<span class="string">&quot;sb1&quot;</span>)</span><br><span class="line">    .subscribe(on: <span class="type">DispatchQueue</span>.global())</span><br><span class="line">    .handleEvents(receiveOutput: &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;receiveOutput&quot;</span>,<span class="variable">$0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .receive(on: <span class="type">DispatchQueue</span>.main)</span><br><span class="line">    .sink &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">sb1.store(in: <span class="operator">&amp;</span>cc)</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sb1: receive subscription: ([1, 2, 3])</span><br><span class="line">sb1: request unlimited</span><br><span class="line">sb1: receive value: (1)</span><br><span class="line">receiveOutput 1</span><br><span class="line">sb1: receive value: (2)</span><br><span class="line">receiveOutput 2</span><br><span class="line">sb1: receive value: (3)</span><br><span class="line">receiveOutput 3</span><br><span class="line">sb1: receive finished</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure></p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><p>网络URLSession.dataTaskPublisher使用例子如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> req <span class="operator">=</span> <span class="type">URLRequest</span>(url: <span class="type">URL</span>(string: <span class="string">&quot;http://www.starming.com&quot;</span>)<span class="operator">!</span>)</span><br><span class="line"><span class="keyword">let</span> dpPublisher <span class="operator">=</span> <span class="type">URLSession</span>.shared.dataTaskPublisher(for: req)</span><br></pre></td></tr></table></figure></p>
<p>一个请求Github接口并展示结果的例子<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// CombineSearchAPI.swift</span></span><br><span class="line"><span class="comment">// SwiftOnly (iOS)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Ming Dai on 2021/11/4.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CombineSearchAPI</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">GithubSearchView</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: Github View</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GithubSearchView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">  <span class="meta">@State</span> <span class="keyword">var</span> str: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;Swift&quot;</span></span><br><span class="line">  <span class="meta">@StateObject</span> <span class="keyword">var</span> ss: <span class="type">SearchStore</span> <span class="operator">=</span> <span class="type">SearchStore</span>()</span><br><span class="line">  <span class="meta">@State</span> <span class="keyword">var</span> repos: [<span class="type">GithubRepo</span>] <span class="operator">=</span> []</span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">NavigationView</span> &#123;</span><br><span class="line">      <span class="type">List</span> &#123;</span><br><span class="line">        <span class="type">TextField</span>(<span class="string">&quot;输入：&quot;</span>, text: <span class="variable">$str</span>, onCommit: fetch)</span><br><span class="line">        <span class="type">ForEach</span>(<span class="keyword">self</span>.ss.repos) &#123; repo -&gt; <span class="type">GithubRepoCell</span> <span class="keyword">in</span></span><br><span class="line">          <span class="type">GithubRepoCell</span>(repo: repo)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .navigationTitle(<span class="string">&quot;搜索&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .onAppear(perform: fetch)</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">fetch</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.ss.search(str: <span class="keyword">self</span>.str)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GithubRepoCell</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> repo: <span class="type">GithubRepo</span></span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">20</span>) &#123;</span><br><span class="line">      <span class="type">Text</span>(<span class="keyword">self</span>.repo.name)</span><br><span class="line">      <span class="type">Text</span>(<span class="keyword">self</span>.repo.description)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: Github Service</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GithubRepo</span>: <span class="title">Decodable</span>, <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">  <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">let</span> description: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GithubResp</span>: <span class="title">Decodable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> items: [<span class="type">GithubRepo</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubSearchManager</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">search</span>(<span class="params">str</span>: <span class="type">String</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">GithubResp</span>, <span class="type">Never</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">var</span> urlComponents <span class="operator">=</span> <span class="type">URLComponents</span>(string: <span class="string">&quot;https://api.github.com/search/repositories&quot;</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">preconditionFailure</span>(<span class="string">&quot;链接无效&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    urlComponents.queryItems <span class="operator">=</span> [<span class="type">URLQueryItem</span>(name: <span class="string">&quot;q&quot;</span>, value: str)]</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> urlComponents.url <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">preconditionFailure</span>(<span class="string">&quot;链接无效&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> sch <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;API&quot;</span>, qos: .default, attributes: .concurrent)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="type">URLSession</span>.shared</span><br><span class="line">      .dataTaskPublisher(for: url)</span><br><span class="line">      .receive(on: sch)</span><br><span class="line">      .tryMap(&#123; element -&gt; <span class="type">Data</span> <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="type">String</span>(decoding: element.data, as: <span class="type">UTF8</span>.<span class="keyword">self</span>))</span><br><span class="line">        <span class="keyword">return</span> element.data</span><br><span class="line">      &#125;)</span><br><span class="line">      .decode(type: <span class="type">GithubResp</span>.<span class="keyword">self</span>, decoder: <span class="type">JSONDecoder</span>())</span><br><span class="line">      .catch &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">        <span class="type">Empty</span>().eraseToAnyPublisher()</span><br><span class="line">      &#125;</span><br><span class="line">      .eraseToAnyPublisher()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchStore</span>: <span class="title">ObservableObject</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Published</span> <span class="keyword">var</span> query: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="meta">@Published</span> <span class="keyword">var</span> repos: [<span class="type">GithubRepo</span>] <span class="operator">=</span> []</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> searchManager: <span class="type">GithubSearchManager</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> cancellable <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">init</span>(<span class="params">searchManager</span>: <span class="type">GithubSearchManager</span> <span class="operator">=</span> <span class="type">GithubSearchManager</span>())</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.searchManager <span class="operator">=</span> searchManager</span><br><span class="line">    <span class="variable">$query</span></span><br><span class="line">      .debounce(for: .milliseconds(<span class="number">500</span>), scheduler: <span class="type">RunLoop</span>.main)</span><br><span class="line">      .flatMap &#123; query -&gt; <span class="type">AnyPublisher</span>&lt;[<span class="type">GithubRepo</span>], <span class="type">Never</span>&gt; <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> searchManager.search(str: query)</span><br><span class="line">          .map &#123;</span><br><span class="line">            <span class="variable">$0</span>.items</span><br><span class="line">          &#125;</span><br><span class="line">          .eraseToAnyPublisher()</span><br><span class="line">      &#125;</span><br><span class="line">      .receive(on: <span class="type">DispatchQueue</span>.main)</span><br><span class="line">      .assign(to: \.repos, on: <span class="keyword">self</span>)</span><br><span class="line">      .store(in: <span class="operator">&amp;</span>cancellable)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">search</span>(<span class="params">str</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.query <span class="operator">=</span> str</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>抽象基础网络能力，方便扩展，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// CombineAPI.swift</span></span><br><span class="line"><span class="comment">// SwiftOnly (iOS)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Ming Dai on 2021/11/4.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CombineAPI</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">RepListView</span>(vm: .<span class="keyword">init</span>())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RepListView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">  <span class="meta">@ObservedObject</span> <span class="keyword">var</span> vm: <span class="type">RepListVM</span></span><br><span class="line">   </span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">NavigationView</span> &#123;</span><br><span class="line">      <span class="type">List</span>(vm.repos) &#123; rep <span class="keyword">in</span></span><br><span class="line">        <span class="type">RepListCell</span>(rep: rep)</span><br><span class="line">      &#125;</span><br><span class="line">      .alert(isPresented: <span class="variable">$vm</span>.isErrorShow) &#123; () -&gt; <span class="type">Alert</span> <span class="keyword">in</span></span><br><span class="line">        <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">&quot;出错了&quot;</span>), message: <span class="type">Text</span>(vm.errorMessage))</span><br><span class="line">      &#125;</span><br><span class="line">      .navigationBarTitle(<span class="type">Text</span>(<span class="string">&quot;仓库&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    .onAppear &#123;</span><br><span class="line">      vm.apply(.onAppear)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RepListCell</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">  <span class="meta">@State</span> <span class="keyword">var</span> rep: <span class="type">RepoModel</span></span><br><span class="line">  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">HStack</span>() &#123;</span><br><span class="line">      <span class="type">VStack</span>() &#123;</span><br><span class="line">        <span class="type">AsyncImage</span>(url: <span class="type">URL</span>(string: rep.owner.avatarUrl <span class="operator">??</span> <span class="string">&quot;&quot;</span>), content: &#123; image <span class="keyword">in</span></span><br><span class="line">          image</span><br><span class="line">            .resizable()</span><br><span class="line">            .aspectRatio(contentMode: .fit)</span><br><span class="line">            .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        placeholder: &#123;</span><br><span class="line">          <span class="type">ProgressView</span>()</span><br><span class="line">            .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(rep.owner.login)</span>&quot;</span>)</span><br><span class="line">          .font(.system(size: <span class="number">10</span>))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(rep.name)</span>&quot;</span>)</span><br><span class="line">          .font(.title)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(rep.stargazersCount)</span>&quot;</span>)</span><br><span class="line">          .font(.title3)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(String(describing: rep.description <span class="operator">??</span> <span class="string">&quot;&quot;</span>))</span>&quot;</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(String(describing: rep.language <span class="operator">??</span> <span class="string">&quot;&quot;</span>))</span>&quot;</span>)</span><br><span class="line">          .font(.title3)</span><br><span class="line">      &#125;</span><br><span class="line">      .font(.system(size: <span class="number">14</span>))</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: Repo View Model</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RepListVM</span>: <span class="title">ObservableObject</span>, <span class="title">UnidirectionalDataFlowType</span> </span>&#123;</span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">InputType</span> <span class="operator">=</span> <span class="type">Input</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> cancellables: [<span class="type">AnyCancellable</span>] <span class="operator">=</span> []</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// Input</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">Input</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> onAppear</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">apply</span>(<span class="keyword">_</span> <span class="params">input</span>: <span class="type">Input</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> input &#123;</span><br><span class="line">    <span class="keyword">case</span> .onAppear:</span><br><span class="line">      onAppearSubject.send(())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> onAppearSubject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Void</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// Output</span></span><br><span class="line">  <span class="meta">@Published</span> <span class="keyword">private(set)</span> <span class="keyword">var</span> repos: [<span class="type">RepoModel</span>] <span class="operator">=</span> []</span><br><span class="line">  <span class="meta">@Published</span> <span class="keyword">var</span> isErrorShow <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">  <span class="meta">@Published</span> <span class="keyword">var</span> errorMessage <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="meta">@Published</span> <span class="keyword">private(set)</span> <span class="keyword">var</span> shouldShowIcon <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">   </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> resSubject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">SearchRepoModel</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> errSubject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">APISevError</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> apiSev: <span class="type">APISev</span></span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">init</span>(<span class="params">apiSev</span>: <span class="type">APISev</span> <span class="operator">=</span> <span class="type">APISev</span>())</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.apiSev <span class="operator">=</span> apiSev</span><br><span class="line">    bindInputs()</span><br><span class="line">    bindOutputs()</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">bindInputs</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> req <span class="operator">=</span> <span class="type">SearchRepoRequest</span>()</span><br><span class="line">    <span class="keyword">let</span> resPublisher <span class="operator">=</span> onAppearSubject</span><br><span class="line">      .flatMap &#123; [apiSev] <span class="keyword">in</span></span><br><span class="line">        apiSev.response(from: req)</span><br><span class="line">          .catch &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] error -&gt; <span class="type">Empty</span>&lt;<span class="type">SearchRepoModel</span>, <span class="type">Never</span>&gt; <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span><span class="operator">?</span>.errSubject.send(error)</span><br><span class="line">            <span class="keyword">return</span> .<span class="keyword">init</span>()</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">let</span> resStream <span class="operator">=</span> resPublisher</span><br><span class="line">      .share()</span><br><span class="line">      .subscribe(resSubject)</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 其它异步事件，比如日志等操作都可以做成Stream加到下面数组内。</span></span><br><span class="line">    cancellables <span class="operator">+=</span> [resStream]</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">bindOutputs</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> repStream <span class="operator">=</span> resSubject</span><br><span class="line">      .map &#123;</span><br><span class="line">        <span class="variable">$0</span>.items</span><br><span class="line">      &#125;</span><br><span class="line">      .assign(to: \.repos, on: <span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">let</span> errMsgStream <span class="operator">=</span> errSubject</span><br><span class="line">      .map &#123; error -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">switch</span> error &#123;</span><br><span class="line">        <span class="keyword">case</span> .resError: <span class="keyword">return</span> <span class="string">&quot;network error&quot;</span></span><br><span class="line">        <span class="keyword">case</span> .parseError: <span class="keyword">return</span> <span class="string">&quot;parse error&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .assign(to: \.errorMessage, on: <span class="keyword">self</span>)</span><br><span class="line">    <span class="keyword">let</span> errStream <span class="operator">=</span> errSubject</span><br><span class="line">      .map &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      .assign(to: \.isErrorShow, on: <span class="keyword">self</span>)</span><br><span class="line">    cancellables <span class="operator">+=</span> [repStream,errStream,errMsgStream]</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">UnidirectionalDataFlowType</span> </span>&#123;</span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">InputType</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">apply</span>(<span class="keyword">_</span> <span class="params">input</span>: <span class="type">InputType</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: Repo Request and Models</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SearchRepoRequest</span>: <span class="title">APIReqType</span> </span>&#123;</span><br><span class="line">  <span class="keyword">typealias</span> <span class="type">Res</span> <span class="operator">=</span> <span class="type">SearchRepoModel</span></span><br><span class="line">   </span><br><span class="line">  <span class="keyword">var</span> path: <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/search/repositories&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> qItems: [<span class="type">URLQueryItem</span>]<span class="operator">?</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      .<span class="keyword">init</span>(name: <span class="string">&quot;q&quot;</span>, value: <span class="string">&quot;Combine&quot;</span>),</span><br><span class="line">      .<span class="keyword">init</span>(name: <span class="string">&quot;order&quot;</span>, value: <span class="string">&quot;desc&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SearchRepoModel</span>: <span class="title">Decodable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items: [<span class="type">RepoModel</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RepoModel</span>: <span class="title">Decodable</span>, <span class="title">Hashable</span>, <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id: <span class="type">Int64</span></span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> fullName: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> description: <span class="type">String</span>?</span><br><span class="line">  <span class="keyword">var</span> stargazersCount: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> language: <span class="type">String</span>?</span><br><span class="line">  <span class="keyword">var</span> owner: <span class="type">OwnerModel</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OwnerModel</span>: <span class="title">Decodable</span>, <span class="title">Hashable</span>, <span class="title">Identifiable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id: <span class="type">Int64</span></span><br><span class="line">  <span class="keyword">var</span> login: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> avatarUrl: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: API Request Fundation</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">APIReqType</span> </span>&#123;</span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">Res</span>: <span class="type">Decodable</span></span><br><span class="line">  <span class="keyword">var</span> path: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">  <span class="keyword">var</span> qItems: [<span class="type">URLQueryItem</span>]<span class="operator">?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">APISevType</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">response</span>&lt;<span class="type">Request</span>&gt;(<span class="params">from</span> <span class="params">req</span>: <span class="type">Request</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Request</span>.<span class="type">Res</span>, <span class="type">APISevError</span>&gt; <span class="keyword">where</span> <span class="type">Request</span>: <span class="type">APIReqType</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">APISev</span>: <span class="title">APISevType</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">let</span> rootUrl: <span class="type">URL</span></span><br><span class="line">  <span class="function"><span class="keyword">init</span>(<span class="params">rootUrl</span>: <span class="type">URL</span> <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://api.github.com&quot;</span>)<span class="operator">!</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.rootUrl <span class="operator">=</span> rootUrl</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">response</span>&lt;<span class="type">Request</span>&gt;(<span class="params">from</span> <span class="params">req</span>: <span class="type">Request</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Request</span>.<span class="type">Res</span>, <span class="type">APISevError</span>&gt; <span class="keyword">where</span> <span class="type">Request</span> : <span class="type">APIReqType</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> path <span class="operator">=</span> <span class="type">URL</span>(string: req.path, relativeTo: rootUrl)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">var</span> comp <span class="operator">=</span> <span class="type">URLComponents</span>(url: path, resolvingAgainstBaseURL: <span class="literal">true</span>)<span class="operator">!</span></span><br><span class="line">    comp.queryItems <span class="operator">=</span> req.qItems</span><br><span class="line">    <span class="built_in">print</span>(comp.url<span class="operator">?</span>.description <span class="operator">??</span> <span class="string">&quot;url wrong&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> req <span class="operator">=</span> <span class="type">URLRequest</span>(url: comp.url<span class="operator">!</span>)</span><br><span class="line">    req.addValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">let</span> de <span class="operator">=</span> <span class="type">JSONDecoder</span>()</span><br><span class="line">    de.keyDecodingStrategy <span class="operator">=</span> .convertFromSnakeCase</span><br><span class="line">    <span class="keyword">return</span> <span class="type">URLSession</span>.shared.dataTaskPublisher(for: req)</span><br><span class="line">      .map &#123; data, res <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="type">String</span>(decoding: data, as: <span class="type">UTF8</span>.<span class="keyword">self</span>))</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">      &#125;</span><br><span class="line">      .mapError &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">        <span class="type">APISevError</span>.resError</span><br><span class="line">      &#125;</span><br><span class="line">      .decode(type: <span class="type">Request</span>.<span class="type">Res</span>.<span class="keyword">self</span>, decoder: de)</span><br><span class="line">      .mapError(<span class="type">APISevError</span>.parseError)</span><br><span class="line">      .receive(on: <span class="type">RunLoop</span>.main)</span><br><span class="line">      .eraseToAnyPublisher()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">APISevError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> resError</span><br><span class="line">  <span class="keyword">case</span> parseError(<span class="type">Error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h4><p>例子如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KVOObject</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> intV: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> boolV: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o <span class="operator">=</span> <span class="type">KVOObject</span>()</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> o.publisher(for: \.intV)</span><br><span class="line">  .sink &#123; v <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;value : <span class="subst">\(v)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h4><p>使用例子如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Notification</span>.<span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> noti <span class="operator">=</span> <span class="type">Notification</span>.<span class="type">Name</span>(<span class="string">&quot;nameofnoti&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> notiPb <span class="operator">=</span> <span class="type">NotificationCenter</span>.default.publisher(for: .noti, object: <span class="literal">nil</span>)</span><br><span class="line">        .sink &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="variable">$0</span>)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>退到后台接受通知的例子如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> storage <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line">   </span><br><span class="line">  <span class="function"><span class="keyword">init</span>()</span> &#123;</span><br><span class="line">    <span class="type">NotificationCenter</span>.default.publisher(for: <span class="type">UIWindowScene</span>.didEnterBackgroundNotification)</span><br><span class="line">      .sink &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;enter background&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      .store(in: <span class="operator">&amp;</span><span class="keyword">self</span>.storage)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h4><p>使用方式如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timePb <span class="operator">=</span> <span class="type">Timer</span>.publish(every: <span class="number">1.0</span>, on: <span class="type">RunLoop</span>.main, in: .default)</span><br><span class="line"><span class="keyword">let</span> timeSk <span class="operator">=</span> timePb.sink &#123; r <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;r is <span class="subst">\(r)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cPb <span class="operator">=</span> timePb.connect()</span><br></pre></td></tr></table></figure></p>
<h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><h4 id="Swift-Concurrency-是什么？"><a href="#Swift-Concurrency-是什么？" class="headerlink" title="Swift Concurrency 是什么？"></a>Swift Concurrency 是什么？</h4><p>ABI 稳定后，Swift 的核心团队可以开始关注 Swift 语言一直缺失的原生并发能力了。最初是由 <a href="https://twitter.com/clattner_llvm">Chris Lattner</a> 在17年发的 <a href="https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782">Swift并发宣言</a> ，从此开阔了大家的眼界。后来 Swift Evolution 社区讨论了十几个提案，几十个方案，以及几百页的设计文件，做了大量的改进，社区中用户积极的参与反馈，Chris 也一直在 Evolution 中积极的参与设计。</p>
<p>Swift Concurrency 的实现用了 <a href="https://llvm.org/docs/Coroutines.html">LLVM的协程</a> 把 async/await 函数转换为基于回调的代码，这个过程发生在编译后期，这个阶段你的代码都没法辨识了。异步的函数被实现为 coroutines，在每次异步调用时，函数被分割成可调用的函数部分和后面恢复的部分。coroutine 拆分的过程发生在生成LLVM IR阶段。Swift使用了哪些带有自定义调用约定的函数保证尾部调用，并专门为Swift进行了调整。</p>
<p>Swift Concurrency 不是建立在 GCD 上，而是使用的一个全新的线程池。GCD 中启动队列工作会很快在提起线程，一个队列阻塞了线程，就会生成一个新线程。基于这种机制 GCD 线程数很容易比 CPU 核心数量多，线程多了，线程就会有大量的调度开销，大量的上下文切换，会使 CPU 运行效率降低。而 Swift Concurrency 的线程数量不会超过 CPU 内核，将上下文切换放到同一个线程中去做。为了实现线程不被阻塞，需要通过语言特性来做。做法是，每个线程都有一个堆栈记录函数调用情况，一个函数占一个帧。函数返回后，这个函数所占的帧就会从堆栈弹出。await 的 async 函数被作为异步帧保存在堆上等待恢复，而不阻碍其它函数入栈执行。在 await 后运行的代码叫 continuation，continuation 会在要恢复时放回到线程的堆栈里。异步帧会根据需要放回栈上。在一个异步函数中调用同步代码将添加帧到线程的堆栈中。这样线程就能够一直向前跑，而不用创建更多线程减少调度。</p>
<p>Douglas 在 Swift 论坛里发的 Swift Concurrency 下个版本的规划贴  <a href="https://forums.swift.org/t/concurrency-in-swift-5-and-6/49337">Concurrency in Swift 5 and 6</a> ，论坛里还有一个帖子是专门用来 <a href="https://forums.swift.org/t/swift-concurrency-feedback-wanted/49336">征集Swift Concurrency意见</a> 的，帖子本身列出了 Swift Concurrency 相关的所有提案，也提出欢迎有新提案发出来，除了这些提案可以看外，帖子回复目前已经过百，非常热闹，可以看出大家对 Swift Concurrency 的关注度相当的高。</p>
<p>非常多的人参与了 Swift Concurrency 才使其看起来和用起来那么简单。Doug Gregor 在参与 John Sundell 的播客后，发了很多条推聊 Swift Concurrency，可以看到参与的人非常多，可见背后付出的努力有多大。下面我汇总了 Doug Gregor 在推上发的一些信息，你通过这些信息也可以了解 Swift Concurrency 幕后信息，所做的事和负责的人。</p>
<p> <a href="https://twitter.com/pathofshrines">@pathofshrines</a> 是 Swift Concurrency 整体架构师，包括低级别运行时和编译器相关细节。 <a href="https://twitter.com/illian">@illian</a> 是 async sequences、stream 和 Fundation 的负责人。 <a href="https://twitter.com/optshiftk">@optshiftk</a> 对 UI 和并发交互的极好的洞察力带来了很棒的 async 接口， <a href="https://twitter.com/phausler">@phausler</a> 带来了 async sequences。Arnold Schwaighofer、 <a href="https://twitter.com/neightchan">@neightchan</a> 、 <a href="https://twitter.com/typesanitizer">@typesanitizer</a> 还有 Tim Northover 实现了 async calling convention。</p>
<p> <a href="https://twitter.com/ktosopl">@ktosopl</a> 有很深厚的 actor、分布式计算和 Swift-on-Server 经验，带来了 actor 系统。Erik Eckstein 为 async 函数和actors建立了关键的优化和功能。</p>
<p>SwiftUI是 <a href="https://twitter.com/ricketson_">@ricketson_</a> 和 <a href="https://twitter.com/luka_bernardi">@luka_bernardi</a> 完成的async接口。async I/O的接口是 <a href="https://twitter.com/Catfish_Man">@Catfish_Man</a> 完成的。 <a href="https://twitter.com/slava_pestov">@slava_pestov</a> 处理了 Swift 泛型问题，还指导其他人编译器实现的细节。async 重构工具是Ben Barham 做的。大量代码移植到 async 是由 <a href="https://twitter.com/AirspeedSwift">@AirspeedSwift</a> 领导，由 Angela Laar，Clack Cole，Nicole Jacques 和 <a href="https://twitter.com/mishaldshah">@mishaldshah</a> 共同完成的。</p>
<p> <a href="https://twitter.com/lorentey">@lorentey</a> 负责 Swift 接口的改进。 <a href="https://twitter.com/jckarter">@jckarter</a> 有着敏锐的语言设计洞察力，带来了语言设计经验和编译器及运行时实现技能。 <a href="https://twitter.com/mikeash">@mikeash</a>  也参与了运行时开发中。操作系统的集成是 <a href="https://twitter.com/rokhinip">@rokhinip</a> 完成的， <a href="https://twitter.com/chimz">@chimz</a> 提供了关于 Dispatch 和 OS 很好的建议，Pavel Yaskevich 和<br> <a href="https://ming1016.github.io/2021/07/24/my-little-idea-about-writing-technical-article/">@hollyborla</a> 进行了并发所需要关键类型检查器的改进。 <a href="https://twitter.com/kastiglione">@kastiglione</a> 、Adrian Prantl和 <a href="https://twitter.com/fred_riss">@fred_riss</a> 实现了调试。 <a href="https://twitter.com/etcwilde">@etcwilde</a> 和 <a href="https://twitter.com/call1cc">@call1cc</a> 实现了语义模型中的重要部分。</p>
<p> <a href="https://twitter.com/evonox">@evonox</a> 负责了服务器Linux 的支持。 <a href="https://twitter.com/compnerd">@compnerd</a> 将 Swift Concurrency 移植到了 Windows。</p>
<p>Swift Concurrency 模型简单，细节都被隐藏了，比 Kotlin 和 C++的 Coroutine 接口要简洁很多。比如 Task 接口形式就很简洁。Swift Concurrency 大体可分为 async/await、Async Sequences、结构化并发和 Actors。</p>
<h4 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h4><p>通过类似 throws 语法的 async 来指定函数为异步函数，异步函数才能够使用 await，使用异步函数要用 await。await 修饰在 suspension point 时当前线程可以让给其它任务执行，而不用阻塞当前线程，等 await 后面的函数执行完成再回来继续执行，这里需要注意的是回来执行不一定是在离开时的线程上。async/await 提案是 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296</a> 。如果想把现有的异步开发带到 async/await 世界，请使用 withCheckedThrowingContinuation。</p>
<p>async/await 还有一个非常明显的好处，就是不会再有[weak self] dance 了。</p>
<h4 id="Async-Sequences"><a href="#Async-Sequences" class="headerlink" title="Async Sequences"></a>Async Sequences</h4><p>AsyncSequence 的使用方式是 for-await-in 和 for-try-await-in，系统提供了一些接口，如下：</p>
<ul>
<li>FileHandle.standardInput.bytes.lines</li>
<li>URL.lines</li>
<li>URLSession.shared.data(from: URL)</li>
<li>let (localURL, _ ) = try await session.download(from: url) 下载和get请求数据区别是需要边请求边存储数据以减少内存占用</li>
<li>let (responseData, response) = try await session.upload(for: request, from: data)</li>
<li>URLSession.shared.bytes(from: URL)</li>
<li>NotificationCenter.default.notifications</li>
</ul>
<h4 id="结构化并发"><a href="#结构化并发" class="headerlink" title="结构化并发"></a>结构化并发</h4><p>使用这些接口可以一边接收数据一边进行显示，AsyncSequence 的提案是 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298</a> （Swift 5.5可用）。AsyncStream 是创建自己异步序列的最简单的方法，处理迭代、取消和缓冲。AsyncStream 正在路上，提案是 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md">SE-0314</a> 。</p>
<p>Task 为一组并发任务创建一个运行环境，async let 可以让任务并发执行，结构化并发（Structured concurrency，提案在路上 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304</a> ）withTaskGroup 中 group.async 可以将并发任务进行分组。</p>
<h4 id="Actors"><a href="#Actors" class="headerlink" title="Actors"></a>Actors</h4><p>我们写的程序会在进程中被拆成一个一个小指令，这些指令会在某刻会一个接一个同步的或者并发的执行。系统会用多个线程执行并行的任务，执行顺序是调度器来管理的，现代多核可以同时处理多个线程，当一个资源在多个线程上同时被更改时就会出问题。并发任务对数据资源操作容易造成数据竞争，以前需要手动放到串行队列、使用锁、调度屏障或 Atomics 的方式来避免。以前处理容易导致昂贵的上下文切换，过多线程容易导致线程爆炸，容易意外阻断线程导致后面代码没法执行，多任务相互的等待造成了死锁，block 和内存引用容易出错等等问题。</p>
<p>现在 Swift Concurrency 可以通过 actor 来创建一个区域，在这个区域会自动进行数据安全保护，保证一定时间只有一个线程访问里面数据，防止数据竞争。actor 内部对成员访问是同步的，成员默认是隔离的，actor 外部对 actor 内成员的访问只能是异步的，隐式同步以防止数据竞争。MainActor 继承自能确保全局唯一实例的 GlobalActor，保证任务在主线程执行，这样你就可以抛弃掉在你的 ViewModel 里写 DispatchQueue.main.async 了。</p>
<p>Actors 的概念通常被用于分布式计算，Actor 模型参看 <a href="https://en.wikipedia.org/wiki/Actor_model">Wikipedia</a> 里的详细解释，Swift 中的实现效果也非常的理想。Actors 的提案 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306</a> 已在 Swift 5.5落实。</p>
<p>很多语言都支持 actors 还有 async/await，实现的方式也类似，actor 使用的不是锁，而是用的 async/await 这样能够在一个线程中切换上下文来避免线程空闲的线程模型。actor 还利用编译器，提前做会引起并发问题的检查。</p>
<p>actor 是遵循 Sendable 协议的，只有结构体和 final 类才能够遵循 Sendable，继承于 Sendable 协议的 Excutor 协议表示方法本身，SerialExecutor 表示以串行方式执行。actor 使用 C++写的，源码在 <a href="https://github.com/apple/swift/blob/main/stdlib/public/Concurrency/Actor.cpp">这里</a> ，可以看到 actor 主要是通过控制各个 job 执行的状态的管理器。job 执行优先级来自 Task 对象，排队时需要确保高优 job 先被执行。全局 Executor 用来为 job 排队，通知 actor 拥有或者放弃线程，实现在 <a href="https://github.com/apple/swift/blob/main/stdlib/public/Concurrency/GlobalExecutor.cpp">这里</a> 。由于等待而放弃当前线程让其他 actor 执行的 actor，在收到全局 Executor 创建一个新的 job 的通知，使其可以进入一个可能不同线程，这个过程就是并发模型中描述的 Actor Reentrancy。</p>
<h4 id="相关提案"><a href="#相关提案" class="headerlink" title="相关提案"></a>相关提案</h4><p>所有相关提案清单如下：</p>
<ul>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296: Async/await</a>   <a href="https://kemchenj.github.io/2021-03-06/">【译】SE-0296 Async/await</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0317-async-let.md">SE-0317: async let</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">SE-0300: Continuations for interfacing async tasks with synchronous code</a>   <a href="https://kemchenj.github.io/2021-03-31/">【译】SE-0300 Continuation – 执行同步代码的异步任务接口</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0302-concurrent-value-and-concurrent-closures.md">SE-0302: Sendable and @Sendable closures</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298: Async/Await: Sequences</a>   <a href="https://kemchenj.github.io/2021-03-10/">【译】SE-0298 Async/Await 序列</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304: Structured concurrency</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306: Actors</a>   <a href="https://kemchenj.github.io/2021-04-25/">【译】SE-0306 Actors</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0313-actor-isolation-control.md">SE-0313: Improved control over actor isolation</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0297-concurrency-objc.md">SE-0297: Concurrency Interoperability with Objective-C</a>   <a href="https://kemchenj.github.io/2021-03-07/">【译】SE-0297 Concurrency 与 Objective-C 的交互</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md">SE-0314: AsyncStream and AsyncThrowingStream</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0316-global-actors.md">SE-0316: Global actors</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0310-effectful-readonly-properties.md">SE-0310: Effectful read-only properties</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0311-task-locals.md">SE-0311: Task Local Values</a> </li>
<li><a href="https://forums.swift.org/t/support-custom-executors-in-swift-concurrency/44425">Custom Executors</a> </li>
</ul>
<h4 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h4><p>如果打算尝试 Swift Concurrency 的话，按照先后顺序，可以先看官方手册介绍文章 <a href="https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html">Concurrency</a> 。再看 <a href="https://developer.apple.com/videos/play/wwdc2021/10132/">Meet async/await in Swift</a> 这个Session，了解背后原理看 <a href="https://developer.apple.com/videos/play/wwdc2021/10134">Explore structured concurrency in Swift</a> 。动手照着试示例代码，看Paul的 <a href="https://www.hackingwithswift.com/quick-start/concurrency">Swift Concurrency by Example</a> 这个系列。接着看 <a href="https://developer.apple.com/videos/play/wwdc2021/10133">Protect mutable state with Swift actors</a> 来了解 actors 怎么防止数据竞争。通过 <a href="https://developer.apple.com/videos/play/wwdc2021/10019">Discover concurrency in SwiftUI</a> 看 concurrency 如何在 SwiftUI 中使用， <a href="https://developer.apple.com/videos/play/wwdc2021/10095">Use async/await with URLSession</a> 来看怎么在 URLSession 中使用 async/await。最后听听负责 Swift Concurrency 的 Doug Gregor 参加的一个 <a href="https://www.swiftbysundell.com/podcast/99/">播客的访谈</a> ，了解下 Swift Concurrency 背后的故事。</p>
<h4 id="Swift-Concurrency-和-Combine"><a href="#Swift-Concurrency-和-Combine" class="headerlink" title="Swift Concurrency 和 Combine"></a>Swift Concurrency 和 Combine</h4><p>由于 Swift Concurrency 的推出和大量的 Session 发布，特别是 <a href="https://developer.apple.com/documentation/swift/asyncsequence/">AsyncSequence</a> 的出现，以及正在路上的 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md">AsyncStream、AsyncThrowingStream</a> 和 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">continuation</a> 提案（在Xcode 13.0 beta 3 AsyncStream 正式 <a href="https://developer.apple.com/documentation/swift/asyncstream?changes=latest_beta">release</a> ），这些越来越多和 Combine 功能重叠的特性出现在 Swift Concurrency 蓝图里时，大家开始猜测是否 Combine 会被 Swift Concurrency 替代。关于未来是 Swift Concurrency 还是 Combine，我的感觉是，Combine 更侧重在响应式编程上，而响应式编程并不是所有开发人员都会接受的，而 Swift Concurrency 是所有人都愿意接受的开发方式，从 Swift Concurrency 推出后开发者使用的数量和社区反应火热程度来看都比 Combine 要大。在苹果对 Combine 有下一步动作之前，我还是更偏向 Swift Concurrency。</p>
<h2 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><h4 id="SwiftUI-是什么？"><a href="#SwiftUI-是什么？" class="headerlink" title="SwiftUI 是什么？"></a>SwiftUI 是什么？</h4><p>对于一个基于UIKit的项目是没有必要全部用SwiftUI重写的，在UIKit里使用SwiftUI的视图非常容易，UIHostingController是UIViewController的子类，可以直接用在UIKit里，因此直接将SwiftUI视图加到UIHostingController中，就可以在UIKit里使用SwiftUI视图了。</p>
<p>SwiftUI的布局核心是 GeometryReader、View Preferences和Anchor Preferences。如下图所示：</p>
<p><img src="https://user-images.githubusercontent.com/251980/142988837-ab49c202-9779-4c7a-8dc2-5584900c0765.png" alt=""></p>
<p>SwiftUI的数据流更适合Redux结构，如下图所示：</p>
<p><img src="https://user-images.githubusercontent.com/251980/142988879-af591aaf-161f-4f60-9891-d7b8d313f69f.png" alt=""></p>
<p>如上图，Redux结构是真正的单向单数据源结构，易于分割，能充分利用SwiftUI内置的数据流Property Wrapper。UI组件干净、体量小、可复用并且无业务逻辑，因此开发时可以聚焦于UI代码。业务逻辑放在一起，所有业务逻辑和数据Model都在Reducer里。 <a href="https://github.com/Dimillian/ACHNBrowserUI">ACHNBrowserUI</a>  和  <a href="https://github.com/Dimillian/MovieSwiftUI">MovieSwiftUI</a>  开源项目都是使用的Redux架构。最近比较瞩目的TCA（The Composable Architecture）也是类Redux/Elm的架构的框架， <a href="https://github.com/pointfreeco/swift-composable-architecture">项目地址见</a> 。</p>
<p>提到数据流就不得不说下苹果公司新出的Combine，对标的是RxSwift，由于是苹果公司官方的库，所以应该优先选择。不过和SwiftUI一样，这两个新库对APP支持最低的系统版本都要求是iOS13及以上。那么怎么能够提前用上SwiftUI和Combine呢？或者说现在使用什么库可以以相同接口方式暂时替换它们，又能在以后改为SwiftUI和Combine时成本最小化呢？</p>
<p>对于SwiftUI，AcFun自研了声明式UI Ysera，类似SwiftUI的接口，并且重构了AcFun里收藏模块列表视图和交互逻辑，如下图所示：</p>
<p><img src="https://user-images.githubusercontent.com/251980/142988909-e6626954-2c93-4c34-b10e-5345c8015cea.png" alt=""></p>
<p>通过上图可以看到，swift代码量相比较OC减少了65%以上，原先使用Objective-C实现的相同功能代码超过了1000行，而Swift重写只需要350行，对于AcFun的业务研发工程师而言，同样的需求实现代码比之前少了至少30%，面对单周迭代这样的节奏，团队也变得更从容。代码可读性增加了，后期功能迭代和维护更容易了，Swift让AcFun驶入了iOS开发生态的“快车道”。</p>
<p>SwiftUI全部都是基于Swift的各大可提高开发效率特性完成的，比如前面提到的，能够访问只给语言特性级别行为的Property Wrapper，通过Property Wrapper包装代码逻辑，来降低代码复杂度，除了SwiftUI和Combine里@开头的Property Wrapper外，Swift还自带类似 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md">@dynamicMemberLookup</a>  和 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md">@dynamicCallable</a>  这样重量级的Property Wrapper。还有 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md">ResultBuilder</a> 这种能够简化语法的特性，有些如GraphQL、REST和Networking实际使用ResultBuilder的 <a href="https://github.com/carson-katri/awesome-result-builders">范例可以参考</a> 。这些Swift的特性如果也能得到充分利用，即使不用SwiftUI也能使开发效率得到大幅提升。</p>
<p>网飞（Netflix）App已使用SwiftUI重构了登录界面，网飞增长团队移动负责人故胤道长记录了SwiftUI在网飞的落地过程，详细描述了 <a href="https://mp.weixin.qq.com/s/oRPRCx78owLe3_gROYapCw">SwiftUI的收益</a> 。网飞能够直接使用SwiftUI得益于他们最低支持iOS 13系统。</p>
<p>不过如最低支持系统低于iOS 13，还有开源项目 <a href="https://github.com/rakutentech/AltSwiftUI">AltSwiftUI</a> 也实现了SwiftUI的语法和特性，能够向前兼容到iOS 11。</p>
<h3 id="视图组件使用"><a href="#视图组件使用" class="headerlink" title="视图组件使用"></a>视图组件使用</h3><h4 id="SwiftUI-对标的-UIKit-视图"><a href="#SwiftUI-对标的-UIKit-视图" class="headerlink" title="SwiftUI 对标的 UIKit 视图"></a>SwiftUI 对标的 UIKit 视图</h4><p>如下：</p>
<table>
<thead>
<tr>
<th>SwiftUI</th>
<th>UIKit</th>
</tr>
</thead>
<tbody>
<tr>
<td>Text 和 Label</td>
<td>UILabel</td>
</tr>
<tr>
<td>TextField</td>
<td>UITextField</td>
</tr>
<tr>
<td>TextEditor</td>
<td>UITextView</td>
</tr>
<tr>
<td>Button 和 Link</td>
<td>UIButton</td>
</tr>
<tr>
<td>Image</td>
<td>UIImageView</td>
</tr>
<tr>
<td>NavigationView</td>
<td>UINavigationController 和 UISplitViewController</td>
</tr>
<tr>
<td>ToolbarItem</td>
<td>UINavigationItem</td>
</tr>
<tr>
<td>ScrollView</td>
<td>UIScrollView</td>
</tr>
<tr>
<td>List</td>
<td>UITableView</td>
</tr>
<tr>
<td>LazyVGrid 和 LazyHGrid</td>
<td>UICollectionView</td>
</tr>
<tr>
<td>HStack 和 LazyHStack</td>
<td>UIStack</td>
</tr>
<tr>
<td>VStack 和 LazyVStack</td>
<td>UIStack</td>
</tr>
<tr>
<td>TabView</td>
<td>UITabBarController 和 UIPageViewController</td>
</tr>
<tr>
<td>Toggle</td>
<td>UISwitch</td>
</tr>
<tr>
<td>Slider</td>
<td>UISlider</td>
</tr>
<tr>
<td>Stepper</td>
<td>UIStepper</td>
</tr>
<tr>
<td>ProgressView</td>
<td>UIProgressView 和 UIActivityIndicatorView</td>
</tr>
<tr>
<td>Picker</td>
<td>UISegmentedControl</td>
</tr>
<tr>
<td>DatePicker</td>
<td>UIDatePicker</td>
</tr>
<tr>
<td>Alert</td>
<td>UIAlertController</td>
</tr>
<tr>
<td>ActionSheet</td>
<td>UIAlertController</td>
</tr>
<tr>
<td>Map</td>
<td>MapKit</td>
</tr>
</tbody>
</table>
<h4 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h4><p><img src="https://user-images.githubusercontent.com/251980/143826034-977a6d5e-f9f5-4ec3-90d0-f09281d64af6.png" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TextView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Group</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;大标题&quot;</span>).font(.largeTitle)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;说点啥呢？&quot;</span>)</span><br><span class="line">                .tracking(<span class="number">30</span>) <span class="comment">// 字间距</span></span><br><span class="line">                .kerning(<span class="number">30</span>) <span class="comment">// 尾部留白</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;划重点&quot;</span>)</span><br><span class="line">                .underline()</span><br><span class="line">                .foregroundColor(.yellow)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;可旋转的文字&quot;</span>)</span><br><span class="line">                .rotationEffect(.degrees(<span class="number">45</span>))</span><br><span class="line">                .fixedSize()</span><br><span class="line">                .frame(width: <span class="number">20</span>, height: <span class="number">80</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Group</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;有阴影&quot;</span>)</span><br><span class="line">                .bold()</span><br><span class="line">                .italic()</span><br><span class="line">                .shadow(color: .primary, radius: <span class="number">1</span>, x: <span class="number">0</span>, y: <span class="number">2</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Gradient Background&quot;</span>)</span><br><span class="line">                .font(.largeTitle)</span><br><span class="line">                .padding()</span><br><span class="line">                .foregroundColor(.white)</span><br><span class="line">                .background(<span class="type">LinearGradient</span>(gradient: <span class="type">Gradient</span>(colors: [.white, .black, .red]), startPoint: .top, endPoint: .bottom))</span><br><span class="line">                .cornerRadius(<span class="number">10</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Gradient Background&quot;</span>)</span><br><span class="line">                .padding(<span class="number">5</span>)</span><br><span class="line">                .foregroundColor(.white)</span><br><span class="line">                .background(<span class="type">LinearGradient</span>(gradient: <span class="type">Gradient</span>(colors: [.white, .black, .purple]), startPoint: .leading, endPoint: .trailing))</span><br><span class="line">                .cornerRadius(<span class="number">10</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Angular Gradient Background&quot;</span>)</span><br><span class="line">                .padding()</span><br><span class="line">                .background(<span class="type">AngularGradient</span>(colors: [.red, .yellow, .green, .blue, .purple, .red], center: .center))</span><br><span class="line">                .cornerRadius(<span class="number">20</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;带背景图片的&quot;</span>)</span><br><span class="line">                .padding()</span><br><span class="line">                .font(.largeTitle)</span><br><span class="line">                .foregroundColor(.white)</span><br><span class="line">                .background &#123;</span><br><span class="line">                    <span class="type">Rectangle</span>()</span><br><span class="line">                        .fill(<span class="type">Color</span>(.black))</span><br><span class="line">                        .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                    <span class="type">Image</span>(<span class="string">&quot;logo&quot;</span>)</span><br><span class="line">                        .resizable()</span><br><span class="line">                        .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                .frame(width: <span class="number">200</span>, height: <span class="number">100</span>)</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="type">Group</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;这是一段长文。总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么，总得说点什么吧。&quot;</span>)</span><br><span class="line">                .lineLimit(<span class="number">3</span>) <span class="comment">// 对行的限制，如果多余设定行数，尾部会显示...</span></span><br><span class="line">                .lineSpacing(<span class="number">10</span>) <span class="comment">// 行间距</span></span><br><span class="line">                .multilineTextAlignment(.leading) <span class="comment">// 对齐</span></span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="开发者"><a href="#开发者" class="headerlink" title="开发者"></a>开发者</h2><h3 id="Swift官方"><a href="#Swift官方" class="headerlink" title="Swift官方"></a>Swift官方</h3><ul>
<li><a href="https://github.com/tkremenek">tkremenek</a>：Swift director</li>
<li><a href="https://github.com/DougGregor">DougGregor</a></li>
<li><a href="https://github.com/mikeash">mikeash</a>：Friday Q&amp;A</li>
</ul>
<h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><ul>
<li><a href="https://github.com/onevcat">onevcat</a>：喵神</li>
<li><a href="https://github.com/DianQK">DianQK</a>：靛青 - SwiftGG翻译组</li>
<li><a href="https://github.com/kean">kean</a>：Nuke、Pulse</li>
<li><a href="https://github.com/stephencelis">stephencelis</a>：Point-Free &amp; SQLite.swift</li>
<li><a href="https://github.com/ibireme">ibireme</a>：YYDS</li>
<li><a href="https://github.com/mattt">mattt</a>：NSHipster</li>
<li><a href="https://github.com/ethanhuang13">ethanhuang13</a>：13 - [weak self]播客</li>
<li><a href="https://github.com/Kyle-Ye">Kyle-Ye</a></li>
<li><a href="https://github.com/ming1016">ming1016</a>：戴铭</li>
<li><a href="https://github.com/mxcl">mxcl</a></li>
<li><a href="https://github.com/lkzhao">lkzhao</a></li>
<li><a href="https://github.com/insidegui">insidegui</a></li>
<li><a href="https://github.com/johnno1962">johnno1962</a>：InjectionIII</li>
<li><a href="https://github.com/wigging">wigging</a>：Back to the Mac</li>
<li><a href="https://github.com/Dimillian">Dimillian</a>：MovieSwiftUI</li>
<li><a href="https://github.com/krzysztofzablocki">krzysztofzablocki</a>：元编程 Sourcery</li>
<li><a href="https://github.com/onmyway133">onmyway133</a></li>
<li><a href="https://github.com/pofat">pofat</a>：Pofat - [weak self]播客</li>
<li><a href="https://github.com/mecid">mecid</a>：Swift with Majid</li>
<li><a href="https://github.com/hebertialmeida">hebertialmeida</a></li>
<li><a href="https://github.com/kylef">kylef</a>：Commander</li>
<li><a href="https://github.com/joshaber">joshaber</a>：at GitHub</li>
<li><a href="https://github.com/ashfurrow">ashfurrow</a>：Moya</li>
<li><a href="https://github.com/jessesquires">jessesquires</a></li>
</ul>
<h2 id="探索库"><a href="#探索库" class="headerlink" title="探索库"></a>探索库</h2><h3 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h3><p><em><a href="https://github.com/SwiftOldDriver/iOS-Weekly">SwiftOldDriver/iOS-Weekly</a></em><br>老司机 iOS 周报<br>Star：4053 Issue：17 开发语言：Swift<br>🇨🇳 老司机 iOS 周报</p>
<p><em><a href="https://github.com/matteocrippa/awesome-swift">matteocrippa/awesome-swift</a></em><br>Star：21619 Issue：1 开发语言：Swift<br>A collaborative list of awesome Swift libraries and resources. Feel free to contribute!</p>
<p><em><a href="https://github.com/ruanyf/weekly">ruanyf/weekly</a></em><br>科技爱好者周刊<br>Star：20909 Issue：1687 开发语言：<br>科技爱好者周刊，每周五发布</p>
<p><em><a href="https://github.com/KwaiAppTeam/SwiftPamphletApp">KwaiAppTeam/SwiftPamphletApp</a></em><br>戴铭的 Swift 小册子<br>Star：1335 Issue：122 开发语言：Swift<br>戴铭的 Swift 小册子，一本活的 Swift 手册。使用 SwiftUI + Combine + Swift Concurrency Aysnc/Await Actor + GitHub API 开发的 macOS 应用</p>
<h3 id="封装易用功能"><a href="#封装易用功能" class="headerlink" title="封装易用功能"></a>封装易用功能</h3><p><em><a href="https://github.com/SwifterSwift/SwifterSwift">SwifterSwift/SwifterSwift</a></em><br>Handy Swift extensions<br>Star：10854 Issue：22 开发语言：Swift<br>A handy collection of more than 500 native Swift extensions to boost your productivity.</p>
<p><em><a href="https://github.com/JoanKing/JKSwiftExtension">JoanKing/JKSwiftExtension</a></em><br>Swift常用扩展、组件、协议<br>Star：244 Issue：0 开发语言：Swift<br>Swift常用扩展、组件、协议，方便项目快速搭建，提供完整清晰的Demo示例，不断的完善中…… </p>
<p><em><a href="https://github.com/infinum/iOS-Nuts-And-Bolts">infinum/iOS-Nuts-And-Bolts</a></em><br>Star：174 Issue：1 开发语言：Swift<br>iOS bits and pieces that you can include in your project to make your life a bit easier.</p>
<p><em><a href="https://github.com/gtokman/ExtensionKit">gtokman/ExtensionKit</a></em><br>Star：88 Issue：0 开发语言：Swift<br>Helpful extensions for iOS app development 🚀 </p>
<h3 id="SwiftUI-扩展"><a href="#SwiftUI-扩展" class="headerlink" title="SwiftUI 扩展"></a>SwiftUI 扩展</h3><p><em><a href="https://github.com/SwiftUIX/SwiftUIX">SwiftUIX/SwiftUIX</a></em><br>扩展 SwiftUI<br>Star：4309 Issue：5 开发语言：Swift<br>Extensions and additions to the standard SwiftUI library.</p>
<p><em><a href="https://github.com/SDWebImage/SDWebImageSwiftUI">SDWebImage/SDWebImageSwiftUI</a></em><br>Star：1270 Issue：42 开发语言：Swift<br>SwiftUI Image loading and Animation framework powered by SDWebImage</p>
<p><em><a href="https://github.com/apptekstudios/ASCollectionView">apptekstudios/ASCollectionView</a></em><br>SwiftUI collection<br>Star：1128 Issue：28 开发语言：Swift<br>A SwiftUI collection view with support for custom layouts, preloading, and more.</p>
<p><em><a href="https://github.com/siteline/SwiftUI-Introspect">siteline/SwiftUI-Introspect</a></em><br>SwiftUI 引入 UIKit<br>Star：2758 Issue：43 开发语言：Swift<br>Introspect underlying UIKit components from SwiftUI</p>
<p><em><a href="https://github.com/AvdLee/SwiftUIKitView">AvdLee/SwiftUIKitView</a></em><br>在 SwiftUI 中 使用 UIKit<br>Star：488 Issue：3 开发语言：Swift<br>Easily use UIKit views in your SwiftUI applications. Create Xcode Previews for UIView elements</p>
<p><em><a href="https://github.com/danielsaidi/SwiftUIKit">danielsaidi/SwiftUIKit</a></em><br>给 SwiftUI 添加更多功能<br>Star：535 Issue：0 开发语言：Swift<br>SwiftUIKit contains additional functionality for SwiftUI.</p>
<p><em><a href="https://github.com/Toni77777/awesome-swiftui-libraries">Toni77777/awesome-swiftui-libraries</a></em><br>SwiftUI 可使用的库<br>Star：131 Issue：1 开发语言：Swift<br>:rocket: Awesome SwiftUI Libraries </p>
<p><em><a href="https://github.com/rakutentech/AltSwiftUI">rakutentech/AltSwiftUI</a></em><br>类 SwiftUI<br>Star：245 Issue：7 开发语言：Swift<br>Open Source UI framework based on SwiftUI syntax and features, adding backwards compatibility.</p>
<p><em><a href="https://github.com/gymshark/ios-stack-kit">gymshark/ios-stack-kit</a></em><br>类 SwiftUI<br>Star：112 Issue：1 开发语言：Swift<br>The power of SwiftUI with UIKit</p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><em><a href="https://github.com/onevcat/Kingfisher">onevcat/Kingfisher</a></em><br>Star：19690 Issue：67 开发语言：Swift<br>A lightweight, pure-Swift library for downloading and caching images from the web.</p>
<p><em><a href="https://github.com/kean/Nuke">kean/Nuke</a></em><br>Star：6514 Issue：6 开发语言：Swift<br>Image loading system</p>
<p><em><a href="https://github.com/suzuki-0000/SKPhotoBrowser">suzuki-0000/SKPhotoBrowser</a></em><br>图片浏览<br>Star：2315 Issue：90 开发语言：Swift<br>Simple PhotoBrowser/Viewer inspired by facebook, twitter photo browsers written by swift</p>
<h3 id="文字处理"><a href="#文字处理" class="headerlink" title="文字处理"></a>文字处理</h3><p><em><a href="https://github.com/gonzalezreal/MarkdownUI">gonzalezreal/MarkdownUI</a></em><br>Star：648 Issue：3 开发语言：Swift<br>Render Markdown text in SwiftUI</p>
<p><em><a href="https://github.com/tophat/RichTextView">tophat/RichTextView</a></em><br>Star：1043 Issue：25 开发语言：Swift<br>iOS Text View (UIView) that Properly Displays LaTeX, HTML, Markdown, and YouTube/Vimeo Links</p>
<p><em><a href="https://github.com/keitaoouchi/MarkdownView">keitaoouchi/MarkdownView</a></em><br>Star：1738 Issue：29 开发语言：Swift<br>Markdown View for iOS.</p>
<p><em><a href="https://github.com/johnxnguyen/Down">johnxnguyen/Down</a></em><br>fast Markdown<br>Star：1914 Issue：17 开发语言：C<br>Blazing fast Markdown / CommonMark rendering in Swift, built upon cmark.</p>
<p><em><a href="https://github.com/qeude/SwiftDown">qeude/SwiftDown</a></em><br>Swift 写的可换主题的 Markdown 编辑器组件<br>Star：68 Issue：0 开发语言：Swift<br>📦 A themable markdown editor component for your SwiftUI apps.</p>
<p><em><a href="https://github.com/JohnSundell/Ink">JohnSundell/Ink</a></em><br>Markdown 解析器<br>Star：2074 Issue：22 开发语言：Swift<br>A fast and flexible Markdown parser written in Swift.</p>
<p><em><a href="https://github.com/tnantoka/edhita">tnantoka/edhita</a></em><br>Star：1183 Issue：16 开发语言：Swift<br>Fully open source text editor for iOS written in Swift.</p>
<p><em><a href="https://github.com/glushchenko/fsnotes">glushchenko/fsnotes</a></em><br>Star：4616 Issue：219 开发语言：Swift<br>Notes manager for macOS/iOS</p>
<p><em><a href="https://github.com/coteditor/CotEditor">coteditor/CotEditor</a></em><br>Star：4192 Issue：118 开发语言：Swift<br>Lightweight Plain-Text Editor for macOS</p>
<h3 id="动画-1"><a href="#动画-1" class="headerlink" title="动画"></a>动画</h3><p><em><a href="https://github.com/recherst/kavsoft-swiftui-animations">recherst/kavsoft-swiftui-animations</a></em><br>Star：93 Issue：0 开发语言：Swift<br>SwiftUI animation tutorials, all of demos are consisted of youtube videos at website of kavsoft. 🔗 <a href="https://kavsoft.dev">https://kavsoft.dev</a></p>
<p><em><a href="https://github.com/timdonnelly/Advance">timdonnelly/Advance</a></em><br>Physics-based animations<br>Star：4449 Issue：4 开发语言：Swift<br>Physics-based animations for iOS, tvOS, and macOS.</p>
<p><em><a href="https://github.com/MengTo/Spring">MengTo/Spring</a></em><br>动画<br>Star：13968 Issue：167 开发语言：Swift<br>A library to simplify iOS animations in Swift.</p>
<h3 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h3><p><em><a href="https://github.com/stephencelis/SQLite.swift">stephencelis/SQLite.swift</a></em><br>Star：8051 Issue：81 开发语言：Swift<br>A type-safe, Swift-language layer over SQLite3.</p>
<p><em><a href="https://github.com/groue/GRDB.swift">groue/GRDB.swift</a></em><br>Star：4827 Issue：5 开发语言：Swift<br>A toolkit for SQLite databases, with a focus on application development</p>
<p><em><a href="https://github.com/caiyue1993/IceCream">caiyue1993/IceCream</a></em><br>CloudKit 同步 Realm 数据库<br>Star：1676 Issue：47 开发语言：Swift<br>Sync Realm Database with CloudKit</p>
<p><em><a href="https://github.com/realm/realm-cocoa">realm/realm-cocoa</a></em><br>Star：14900 Issue：353 开发语言：Objective-C<br>Realm is a mobile database: a replacement for Core Data &amp; SQLite</p>
<p><em><a href="https://github.com/PostgresApp/PostgresApp">PostgresApp/PostgresApp</a></em><br>PostgreSQL macOS 应用<br>Star：6207 Issue：120 开发语言：Makefile<br>The easiest way to get started with PostgreSQL on the Mac</p>
<h3 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h3><p><em><a href="https://github.com/ReactiveX/RxSwift">ReactiveX/RxSwift</a></em><br>函数响应式编程<br>Star：21610 Issue：12 开发语言：Swift<br>Reactive Programming in Swift</p>
<p><em><a href="https://github.com/pointfreeco/swift-composable-architecture">pointfreeco/swift-composable-architecture</a></em><br>Star：5561 Issue：12 开发语言：Swift<br>A library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind.</p>
<p><em><a href="https://github.com/onmyway133/awesome-ios-architecture">onmyway133/awesome-ios-architecture</a></em><br>Star：4494 Issue：0 开发语言：<br>:japanese_castle: Better ways to structure iOS apps</p>
<p><em><a href="https://github.com/ReSwift/ReSwift">ReSwift/ReSwift</a></em><br>单页面状态和数据管理<br>Star：7101 Issue：38 开发语言：Swift<br>Unidirectional Data Flow in Swift - Inspired by Redux</p>
<p><em><a href="https://github.com/gre4ixin/ReduxUI">gre4ixin/ReduxUI</a></em><br>SwiftUI Redux 架构<br>Star：24 Issue：0 开发语言：Swift<br>💎 Redux like architecture for SwiftUI</p>
<p><em><a href="https://github.com/BohdanOrlov/iOS-Developer-Roadmap">BohdanOrlov/iOS-Developer-Roadmap</a></em><br>Star：5613 Issue：7 开发语言：Swift<br>Roadmap to becoming an iOS developer in 2018.</p>
<p><em><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa/ReactiveCocoa</a></em><br>Star：19994 Issue：3 开发语言：Swift<br>Cocoa framework and Obj-C dynamism bindings for ReactiveSwift.</p>
<p><em><a href="https://github.com/mehdihadeli/awesome-software-architecture">mehdihadeli/awesome-software-architecture</a></em><br>软件架构<br>Star：6784 Issue：2 开发语言：<br>A curated list of awesome articles, videos, and other resources to learn and practice about software architecture, patterns, and principles.</p>
<p><em><a href="https://github.com/nalexn/clean-architecture-swiftui">nalexn/clean-architecture-swiftui</a></em><br>干净完整的SwiftUI+Combine例子，包含网络和单元测试等<br>Star：3080 Issue：17 开发语言：Swift<br>SwiftUI sample app using Clean Architecture. Examples of working with CoreData persistence, networking, dependency injection, unit testing, and more.</p>
<p><em><a href="https://github.com/krzysztofzablocki/Sourcery">krzysztofzablocki/Sourcery</a></em><br>Swift 元编程<br>Star：6380 Issue：54 开发语言：Swift<br>Meta-programming for Swift, stop writing boilerplate code.</p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p><em><a href="https://github.com/pointfreeco/swiftui-navigation">pointfreeco/swiftui-navigation</a></em><br>Star：733 Issue：1 开发语言：Swift<br>Tools for making SwiftUI navigation simpler, more ergonomic and more precise.</p>
<h3 id="静态检查"><a href="#静态检查" class="headerlink" title="静态检查"></a>静态检查</h3><p><em><a href="https://github.com/realm/SwiftLint">realm/SwiftLint</a></em><br>Star：15717 Issue：308 开发语言：Swift<br>A tool to enforce Swift style and conventions.</p>
<h3 id="系统能力"><a href="#系统能力" class="headerlink" title="系统能力"></a>系统能力</h3><p><em><a href="https://github.com/devicekit/DeviceKit">devicekit/DeviceKit</a></em><br>UIDevice 易用封装<br>Star：3602 Issue：44 开发语言：Swift<br>DeviceKit is a value-type replacement of UIDevice.</p>
<p><em><a href="https://github.com/kishikawakatsumi/KeychainAccess">kishikawakatsumi/KeychainAccess</a></em><br>Star：6709 Issue：37 开发语言：Swift<br>Simple Swift wrapper for Keychain that works on iOS, watchOS, tvOS and macOS.</p>
<p><em><a href="https://github.com/nvzqz/FileKit">nvzqz/FileKit</a></em><br>文件操作<br>Star：2197 Issue：11 开发语言：Swift<br>Simple and expressive file management in Swift</p>
<p><em><a href="https://github.com/JohnSundell/Files">JohnSundell/Files</a></em><br>文件操作<br>Star：2224 Issue：23 开发语言：Swift<br>A nicer way to handle files &amp; folders in Swift</p>
<p><em><a href="https://github.com/kylef/PathKit">kylef/PathKit</a></em><br>文件操作<br>Star：1324 Issue：12 开发语言：Swift<br>Effortless path operations in Swift</p>
<p><em><a href="https://github.com/rushisangani/BiometricAuthentication">rushisangani/BiometricAuthentication</a></em><br>FaceID or TouchID authentication<br>Star：784 Issue：13 开发语言：Swift<br>Use Apple FaceID or TouchID authentication in your app using BiometricAuthentication.</p>
<p><em><a href="https://github.com/sunshinejr/SwiftyUserDefaults">sunshinejr/SwiftyUserDefaults</a></em><br>Star：4598 Issue：44 开发语言：Swift<br>Modern Swift API for NSUserDefaults</p>
<p><em><a href="https://github.com/MonitorControl/MonitorControl">MonitorControl/MonitorControl</a></em><br>亮度和声音控制<br>Star：13963 Issue：38 开发语言：Swift<br>🖥 Control your display’s brightness &amp; volume on your Mac as if it was a native Apple Display. Use Apple Keyboard keys or custom shortcuts. Shows the native macOS OSDs.</p>
<p><em><a href="https://github.com/carekit-apple/CareKit">carekit-apple/CareKit</a></em><br>使用 SwiftUI 开发健康相关的库<br>Star：2163 Issue：65 开发语言：Swift<br>CareKit is an open source software framework for creating apps that help people better understand and manage their health.</p>
<p><em><a href="https://github.com/Cay-Zhang/SwiftSpeech">Cay-Zhang/SwiftSpeech</a></em><br>苹果语言识别封装库，已适配 SwiftUI<br>Star：245 Issue：2 开发语言：Swift<br>A speech recognition framework designed for SwiftUI.</p>
<p><em><a href="https://github.com/malcommac/SwiftDate">malcommac/SwiftDate</a></em><br>Swift编写的时间时区，时间比较等复杂处理的包装<br>Star：6753 Issue：67 开发语言：Swift<br>🐔 Toolkit to parse, validate, manipulate, compare and display dates, time &amp; timezones in Swift.</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><em><a href="https://github.com/OAuthSwift/OAuthSwift">OAuthSwift/OAuthSwift</a></em><br>Star：2972 Issue：39 开发语言：Swift<br>Swift based OAuth library for iOS</p>
<p><em><a href="https://github.com/p2/OAuth2">p2/OAuth2</a></em><br>Star：1054 Issue：66 开发语言：Swift<br>OAuth2 framework for macOS and iOS, written in Swift.</p>
<p><em><a href="https://github.com/public-apis/public-apis">public-apis/public-apis</a></em><br>Star：179814 Issue：11 开发语言：Python<br>A collective list of free APIs</p>
<h3 id="接口应用"><a href="#接口应用" class="headerlink" title="接口应用"></a>接口应用</h3><p><em><a href="https://github.com/bpisano/Weather">bpisano/Weather</a></em><br>天气应用<br>Star：275 Issue：2 开发语言：Swift<br>A Weather app in SwiftUI.</p>
<p><em><a href="https://github.com/Dimillian/MovieSwiftUI">Dimillian/MovieSwiftUI</a></em><br>电影 MovieDB 应用<br>Star：5913 Issue：8 开发语言：Swift<br>SwiftUI &amp; Combine app using MovieDB API. With a custom Flux (Redux) implementation.</p>
<p><em><a href="https://github.com/chojnac/NotionSwift">chojnac/NotionSwift</a></em><br>Star：19 Issue：2 开发语言：Swift<br>Unofficial Notion API SDK for iOS &amp; macOS</p>
<p><em><a href="https://github.com/Dimillian/RedditOS">Dimillian/RedditOS</a></em><br>SwiftUI 写的 Reddit客户端<br>Star：3508 Issue：11 开发语言：Swift<br>The product name is Curiosity, a SwiftUI Reddit client for macOS Big Sur</p>
<p><em><a href="https://github.com/carson-katri/reddit-swiftui">carson-katri/reddit-swiftui</a></em><br>SwiftUI 写的 Reddit客户端<br>Star：1097 Issue：7 开发语言：Swift<br>A cross-platform Reddit client built in SwiftUI</p>
<p><em><a href="https://github.com/Dimillian/SwiftHN">Dimillian/SwiftHN</a></em><br>Hacker News 阅读<br>Star：1692 Issue：20 开发语言：Swift<br>A Hacker News reader in Swift</p>
<p><em><a href="https://github.com/tatsuz0u/EhPanda">tatsuz0u/EhPanda</a></em><br>Star：1004 Issue：7 开发语言：Swift<br>An unofficial E-Hentai App for iOS built with SwiftUI &amp; TCA.</p>
<p><em><a href="https://github.com/Dimillian/MortyUI">Dimillian/MortyUI</a></em><br>GraphQL + SwiftUI 开发的瑞克和莫蒂应用<br>Star：421 Issue：4 开发语言：Swift<br>A very simple Rick &amp; Morty app to demo GraphQL + SwiftUI</p>
<p><em><a href="https://github.com/Finb/V2ex-Swift">Finb/V2ex-Swift</a></em><br>V2EX 客户端<br>Star：1506 Issue：10 开发语言：Swift<br>An iOS client written in Swift for V2EX</p>
<p><em><a href="https://github.com/v2er-app/iOS">v2er-app/iOS</a></em><br>V2EX 客户端<br>Star：190 Issue：3 开发语言：Swift<br>The source of V2er.iOS</p>
<p><em><a href="https://github.com/sinaweibosdk/weibo_ios_sdk">sinaweibosdk/weibo_ios_sdk</a></em><br>Star：1426 Issue：61 开发语言：Objective-C<br>新浪微博 IOS SDK</p>
<p><em><a href="https://github.com/miniLV/MNWeibo">miniLV/MNWeibo</a></em><br>Swift5 + MVVM 微博客户端<br>Star：242 Issue：4 开发语言：Swift<br>Swift5 + MVVM + 文艺复兴微博(纯代码 + 纯Swift)，可作为第一个上手的Swift项目.</p>
<p><em><a href="https://github.com/nerdishbynature/octokit.swift">nerdishbynature/octokit.swift</a></em><br>Swift API Client for GitHub<br>Star：377 Issue：10 开发语言：Swift<br>A Swift API Client for GitHub and GitHub Enterprise</p>
<p><em><a href="https://github.com/GitHawkApp/GitHawk">GitHawkApp/GitHawk</a></em><br>iOS app for GitHub<br>Star：2815 Issue：454 开发语言：Swift<br>The (second) best iOS app for GitHub.</p>
<p><em><a href="https://github.com/fangzesheng/free-api">fangzesheng/free-api</a></em><br>Star：11872 Issue：27 开发语言：<br>收集免费的接口服务,做一个api的搬运工</p>
<p><em><a href="https://github.com/nerdsupremacist/Graphaello">nerdsupremacist/Graphaello</a></em><br>SwiftUI 中使用 GraphQL 的工具<br>Star：428 Issue：18 开发语言：Swift<br>A Tool for Writing Declarative, Type-Safe and Data-Driven Applications in SwiftUI using GraphQL</p>
<p><em><a href="https://github.com/nerdsupremacist/tmdb">nerdsupremacist/tmdb</a></em><br>GraphQL 包装电影数据接口<br>Star：14 Issue：1 开发语言：Swift<br>A GraphQL Wrapper for The Movie Database</p>
<h3 id="macOS-1"><a href="#macOS-1" class="headerlink" title="macOS"></a>macOS</h3><p><em><a href="https://github.com/serhii-londar/open-source-mac-os-apps">serhii-londar/open-source-mac-os-apps</a></em><br>开源 macOS 程序合集<br>Star：29416 Issue：50 开发语言：Swift<br>🚀 Awesome list of open source applications for macOS. <a href="https://t.me/s/opensourcemacosapps">https://t.me/s/opensourcemacosapps</a></p>
<p><em><a href="https://github.com/Ranchero-Software/NetNewsWire">Ranchero-Software/NetNewsWire</a></em><br>Star：5245 Issue：528 开发语言：Swift<br>RSS reader for macOS and iOS.</p>
<p><em><a href="https://github.com/overtake/TelegramSwift">overtake/TelegramSwift</a></em><br>Star：3672 Issue：443 开发语言：Swift<br>Source code of Telegram for macos on Swift 5.0</p>
<p><em><a href="https://github.com/eonist/FileWatcher">eonist/FileWatcher</a></em><br>macOS 上监听文件变化<br>Star：157 Issue：5 开发语言：Swift<br>Monitoring file system changes in macOS</p>
<p><em><a href="https://github.com/waylybaye/XcodeCleaner-SwiftUI">waylybaye/XcodeCleaner-SwiftUI</a></em><br>清理 Xcode<br>Star：1160 Issue：3 开发语言：Swift<br>Make Xcode Clean Again</p>
<p><em><a href="https://github.com/gao-sun/eul">gao-sun/eul</a></em><br>SwiftUI 写的 macOS 状态监控工具<br>Star：7001 Issue：50 开发语言：Swift<br>🖥️ macOS status monitoring app written in SwiftUI.</p>
<p><em><a href="https://github.com/Dimillian/ACHNBrowserUI">Dimillian/ACHNBrowserUI</a></em><br>SwiftUI 写的动物之森小助手程序<br>Star：1494 Issue：32 开发语言：Swift<br>Animal Crossing New Horizon companion app in SwiftUI</p>
<p><em><a href="https://github.com/lexrus/RegExPlus">lexrus/RegExPlus</a></em><br>正则表达式<br>Star：186 Issue：0 开发语言：Swift<br>A nifty RegEx test tool built with SwiftUI</p>
<p><em><a href="https://github.com/v2ex/launcher">v2ex/launcher</a></em><br>用来启动那些本地开发时需要的各种进程，及查看其输出<br>Star：157 Issue：7 开发语言：Swift</p>
<p><em><a href="https://github.com/lukakerr/Pine">lukakerr/Pine</a></em><br>Markdown 编辑器<br>Star：2884 Issue：43 开发语言：Swift<br>A modern, native macOS markdown editor</p>
<p><em><a href="https://github.com/root3nl/SupportApp">root3nl/SupportApp</a></em><br>企业支持 macOS 软件<br>Star：234 Issue：15 开发语言：Swift<br>The Support App is developed by Root3, specialized in managing Apple devices. Root3 offers consultancy and support for organizations to get the most out of their Apple devices and is based in The Netherlands (Haarlem).</p>
<p><em><a href="https://github.com/jaywcjlove/awesome-mac">jaywcjlove/awesome-mac</a></em><br>macOS 软件大全<br>Star：47634 Issue：122 开发语言：JavaScript<br> Now we have become very big, Different from the original idea. Collect premium software in various categories.</p>
<p><em><a href="https://github.com/insidegui/WWDC">insidegui/WWDC</a></em><br>Star：8151 Issue：33 开发语言：Swift<br>The unofficial WWDC app for macOS</p>
<p><em><a href="https://github.com/sindresorhus/Actions">sindresorhus/Actions</a></em><br>Star：582 Issue：5 开发语言：Swift<br>⚙️ Supercharge your shortcuts</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><em><a href="https://github.com/vinhnx/Clendar">vinhnx/Clendar</a></em><br>SwiftUI 写的日历应用<br>Star：311 Issue：51 开发语言：Swift<br>Clendar - universal calendar app. Written in SwiftUI. Available on App Store. MIT License.</p>
<p><em><a href="https://github.com/SvenTiigi/WhatsNewKit">SvenTiigi/WhatsNewKit</a></em><br>欢迎屏<br>Star：2437 Issue：0 开发语言：Swift<br>Showcase your awesome new app features 📱</p>
<p><em><a href="https://github.com/kickstarter/ios-oss">kickstarter/ios-oss</a></em><br>Kickstarter 的 iOS 版本<br>Star：7878 Issue：2 开发语言：Swift<br>Kickstarter for iOS. Bring new ideas to life, anywhere.</p>
<p><em><a href="https://github.com/wordpress-mobile/WordPress-iOS">wordpress-mobile/WordPress-iOS</a></em><br>Star：3259 Issue：890 开发语言：Swift<br>WordPress for iOS - Official repository</p>
<p><em><a href="https://github.com/CoreOffice/CryptoOffice">CoreOffice/CryptoOffice</a></em><br>Swift 解析 Office Open XML（OOXML）包括 xlsx, docx, pptx<br>Star：20 Issue：0 开发语言：Swift<br>Office Open XML (OOXML) formats (.xlsx, .docx, .pptx) decryption for Swift</p>
<p><em><a href="https://github.com/CoreOffice/CoreXLSX">CoreOffice/CoreXLSX</a></em><br>Swift编写的Excel电子表格（XLSX）格式解析器<br>Star：604 Issue：11 开发语言：Swift<br>Excel spreadsheet (XLSX) format parser written in pure Swift</p>
<p><em><a href="https://github.com/analogcode/Swift-Radio-Pro">analogcode/Swift-Radio-Pro</a></em><br>电台应用<br>Star：2657 Issue：14 开发语言：Swift<br>Professional Radio Station App for iOS!</p>
<h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p><em><a href="https://github.com/pointfreeco/isowords">pointfreeco/isowords</a></em><br>单词搜索游戏<br>Star：1635 Issue：3 开发语言：Swift<br>Open source game built in SwiftUI and the Composable Architecture.</p>
<p><em><a href="https://github.com/michelpereira/awesome-games-of-coding">michelpereira/awesome-games-of-coding</a></em><br>教你学编程的游戏收集<br>Star：1372 Issue：1 开发语言：<br>A curated list of games that can teach you how to learn a programming language.</p>
<p><em><a href="https://github.com/OpenEmu/OpenEmu">OpenEmu/OpenEmu</a></em><br>视频游戏模拟器<br>Star：13544 Issue：182 开发语言：Objective-C<br>🕹 Retro video game emulation for macOS</p>
<p><em><a href="https://github.com/jVirus/swiftui-2048">jVirus/swiftui-2048</a></em><br>Star：138 Issue：0 开发语言：Swift<br>🎲 100% SwiftUI 3.0, classic 2048 game [iOS 15.0+, iPadOS 15.0+, macOS 12.0+, Swift 5.5].</p>
<p><em><a href="https://github.com/schellingb/dosbox-pure">schellingb/dosbox-pure</a></em><br>DOS 游戏模拟器<br>Star：416 Issue：105 开发语言：C++<br>DOSBox Pure is a new fork of DOSBox built for RetroArch/Libretro aiming for simplicity and ease of use.</p>
<p><em><a href="https://github.com/chrismaltby/gb-studio">chrismaltby/gb-studio</a></em><br>拖放式复古游戏创建器<br>Star：5943 Issue：463 开发语言：C<br>A quick and easy to use drag and drop retro game creator for your favourite handheld video game system</p>
<h3 id="新技术展示"><a href="#新技术展示" class="headerlink" title="新技术展示"></a>新技术展示</h3><p><em><a href="https://github.com/JakeLin/Moments-SwiftUI">JakeLin/Moments-SwiftUI</a></em><br>SwiftUI、Async、Actor<br>Star：35 Issue：0 开发语言：Swift<br>WeChat-like Moments App implemented using Swift 5.5 and SwiftUI</p>
<p><em><a href="https://github.com/twostraws/HackingWithSwift">twostraws/HackingWithSwift</a></em><br>示例代码<br>Star：4266 Issue：11 开发语言：Swift<br>The project source code for hackingwithswift.com</p>
<p><em><a href="https://github.com/carson-katri/awesome-result-builders">carson-katri/awesome-result-builders</a></em><br>Result Builders awesome<br>Star：737 Issue：2 开发语言：<br>A list of cool DSLs made with Swift 5.4’s @resultBuilder</p>
<p><em><a href="https://github.com/pointfreeco/episode-code-samples">pointfreeco/episode-code-samples</a></em><br>Star：640 Issue：2 开发语言：Swift<br>💾 Point-Free episode code.</p>
<p><em><a href="https://github.com/SwiftGGTeam/the-swift-programming-language-in-chinese">SwiftGGTeam/the-swift-programming-language-in-chinese</a></em><br>中文版 Apple 官方 Swift 教程<br>Star：20394 Issue：3 开发语言：CSS<br>中文版 Apple 官方 Swift 教程《The Swift Programming Language》</p>
<p><em><a href="https://github.com/jessesquires/TIL">jessesquires/TIL</a></em><br>学习笔记<br>Star：250 Issue：0 开发语言：<br>Things I’ve learned and/or things I want to remember. Notes, links, advice, example code, etc.</p>
<h3 id="Combine-扩展"><a href="#Combine-扩展" class="headerlink" title="Combine 扩展"></a>Combine 扩展</h3><p><em><a href="https://github.com/OpenCombine/OpenCombine">OpenCombine/OpenCombine</a></em><br>Combine 的开源实现<br>Star：2097 Issue：11 开发语言：Swift<br>Open source implementation of Apple’s Combine framework for processing values over time.</p>
<p><em><a href="https://github.com/CombineCommunity/CombineExt">CombineCommunity/CombineExt</a></em><br>对 Combine 的补充<br>Star：1036 Issue：21 开发语言：Swift<br>CombineExt provides a collection of operators, publishers and utilities for Combine, that are not provided by Apple themselves, but are common in other Reactive Frameworks and standards.</p>
<h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p><em><a href="https://github.com/dkhamsing/open-source-ios-apps">dkhamsing/open-source-ios-apps</a></em><br>开源的完整 App 例子<br>Star：29334 Issue：1 开发语言：Swift<br>:iphone: Collaborative List of Open-Source iOS Apps</p>
<p><em><a href="https://github.com/timqian/chinese-independent-blogs">timqian/chinese-independent-blogs</a></em><br>Star：8308 Issue：19 开发语言：JavaScript<br>中文独立博客列表</p>
<p><em><a href="https://github.com/vlondon/awesome-swiftui">vlondon/awesome-swiftui</a></em><br>Star：1151 Issue：6 开发语言：<br>A collaborative list of awesome articles, talks, books, videos and code examples about SwiftUI.</p>
<p><em><a href="https://github.com/ivanvorobei/SwiftUI">ivanvorobei/SwiftUI</a></em><br>Star：3644 Issue：5 开发语言：Swift<br>Examples projects using SwiftUI released by WWDC2019. Include Layout, UI, Animations, Gestures, Draw and Data.</p>
<p><em><a href="https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts">kon9chunkit/GitHub-Chinese-Top-Charts</a></em><br>GitHub中文排行榜<br>Star：43935 Issue：80 开发语言：Java<br>:cn: GitHub中文排行榜，各语言分离设置「软件 / 资料」榜单，精准定位中文好项目。各取所需，互不干扰，高效学习。</p>
<p><em><a href="https://github.com/onmyway133/awesome-swiftui">onmyway133/awesome-swiftui</a></em><br>Star：340 Issue：2 开发语言：<br>🌮 Awesome resources, articles, libraries about SwiftUI</p>
<p><em><a href="https://github.com/Juanpe/About-SwiftUI">Juanpe/About-SwiftUI</a></em><br>汇总 SwiftUI 的资料<br>Star：6013 Issue：0 开发语言：Swift<br>Gathering all info published, both by Apple and by others, about new framework SwiftUI. </p>
<p><em><a href="https://github.com/sindresorhus/awesome">sindresorhus/awesome</a></em><br>内容广<br>Star：188924 Issue：41 开发语言：<br>😎 Awesome lists about all kinds of interesting topics</p>
<p><em><a href="https://github.com/SwiftPackageIndex/PackageList">SwiftPackageIndex/PackageList</a></em><br>Swift 开源库索引<br>Star：589 Issue：2 开发语言：Swift<br>The master list of repositories for the Swift Package Index.</p>
<h3 id="知识管理"><a href="#知识管理" class="headerlink" title="知识管理"></a>知识管理</h3><p><em><a href="https://github.com/AppFlowy-IO/appflowy">AppFlowy-IO/appflowy</a></em><br>Flutter 和 Rust 开发的开源 Notion<br>Star：17150 Issue：96 开发语言：Rust<br>AppFlowy is an open-source alternative to Notion. You are in charge of your data and customizations. Built with Flutter and Rust.</p>
<h3 id="性能、工程构建及自动化"><a href="#性能、工程构建及自动化" class="headerlink" title="性能、工程构建及自动化"></a>性能、工程构建及自动化</h3><p><em><a href="https://github.com/tuist/tuist">tuist/tuist</a></em><br>创建和维护 Xcode projects 文件<br>Star：2361 Issue：145 开发语言：Swift<br>🚀 Create, maintain, and interact with Xcode projects at scale</p>
<p><em><a href="https://github.com/swift-server/vscode-swift">swift-server/vscode-swift</a></em><br>VSCode 的 Swift 扩展<br>Star：239 Issue：23 开发语言：TypeScript<br>VSCode Extension for Swift</p>
<p><em><a href="https://github.com/peripheryapp/periphery">peripheryapp/periphery</a></em><br>检测 Swift 无用代码<br>Star：3135 Issue：19 开发语言：Swift<br>A tool to identify unused code in Swift projects.</p>
<p><em><a href="https://github.com/nalexn/ViewInspector">nalexn/ViewInspector</a></em><br>SwiftUI Runtime introspection 和 单元测试<br>Star：1077 Issue：11 开发语言：Swift<br>Runtime introspection and unit testing of SwiftUI views</p>
<p><em><a href="https://github.com/shibapm/Komondor">shibapm/Komondor</a></em><br>Git Hooks for Swift projects<br>Star：497 Issue：19 开发语言：Swift<br>Git Hooks for Swift projects 🐩</p>
<p><em><a href="https://github.com/SwiftGen/SwiftGen">SwiftGen/SwiftGen</a></em><br>代码生成<br>Star：7687 Issue：74 开发语言：Swift<br>The Swift code generator for your assets, storyboards, Localizable.strings, … — Get rid of all String-based APIs!</p>
<p><em><a href="https://github.com/hyperoslo/Cache">hyperoslo/Cache</a></em><br>Star：2523 Issue：20 开发语言：Swift<br>:package: Nothing but Cache.</p>
<p><em><a href="https://github.com/kylef/Commander">kylef/Commander</a></em><br>命令行<br>Star：1478 Issue：1 开发语言：Swift<br>Compose beautiful command line interfaces in Swift</p>
<p><em><a href="https://github.com/Carthage/Carthage">Carthage/Carthage</a></em><br>Star：14513 Issue：230 开发语言：Swift<br>A simple, decentralized dependency manager for Cocoa</p>
<p><em><a href="https://github.com/NARKOZ/hacker-scripts">NARKOZ/hacker-scripts</a></em><br>程序员的活都让机器干的脚本（真实故事）<br>Star：43487 Issue：66 开发语言：JavaScript<br>Based on a true story</p>
<p><em><a href="https://github.com/RobotsAndPencils/XcodesApp">RobotsAndPencils/XcodesApp</a></em><br>Xcode 多版本安装<br>Star：2348 Issue：30 开发语言：Swift<br>The easiest way to install and switch between multiple versions of Xcode - with a mouse click. </p>
<p><em><a href="https://github.com/ZeeZide/5GUIs">ZeeZide/5GUIs</a></em><br>可以分析程序用了哪些库，用了LLVM objdump<br>Star：177 Issue：8 开发语言：Swift<br>A tiny macOS app that can detect the GUI technologies used in other apps.</p>
<p><em><a href="https://github.com/faisalmemon/ios-crash-dump-analysis-book">faisalmemon/ios-crash-dump-analysis-book</a></em><br>iOS Crash Dump Analysis Book<br>Star：454 Issue：1 开发语言：Objective-C<br>iOS Crash Dump Analysis Book</p>
<p><em><a href="https://github.com/majd/ipatool">majd/ipatool</a></em><br>下载 ipa<br>Star：1258 Issue：6 开发语言：Swift<br>Command-line tool that allows searching and downloading app packages (known as ipa files) from the iOS App Store</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><em><a href="https://github.com/Quick/Quick">Quick/Quick</a></em><br>测试框架<br>Star：9334 Issue：51 开发语言：Swift<br>The Swift (and Objective-C) testing framework.</p>
<h3 id="网络-1"><a href="#网络-1" class="headerlink" title="网络"></a>网络</h3><p><em><a href="https://github.com/Alamofire/Alamofire">Alamofire/Alamofire</a></em><br>Star：37100 Issue：33 开发语言：Swift<br>Elegant HTTP Networking in Swift</p>
<p><em><a href="https://github.com/socketio/socket.io-client-swift">socketio/socket.io-client-swift</a></em><br>Star：4704 Issue：181 开发语言：Swift</p>
<p><em><a href="https://github.com/Lojii/Knot">Lojii/Knot</a></em><br>使用 SwiftNIO 实现 HTTPS 抓包<br>Star：587 Issue：2 开发语言：C<br>一款iOS端基于MITM(中间人攻击技术)实现的HTTPS抓包工具，完整的App，核心代码使用SwiftNIO实现</p>
<p><em><a href="https://github.com/swift-server/async-http-client">swift-server/async-http-client</a></em><br>使用 SwiftNIO 开发的 HTTP 客户端<br>Star：547 Issue：72 开发语言：Swift<br>HTTP client library built on SwiftNIO</p>
<p><em><a href="https://github.com/kean/Get">kean/Get</a></em><br>Star：309 Issue：1 开发语言：Swift<br>Web API client built using async/await</p>
<p><em><a href="https://github.com/awesome-selfhosted/awesome-selfhosted">awesome-selfhosted/awesome-selfhosted</a></em><br>网络服务及上面的应用<br>Star：77219 Issue：149 开发语言：JavaScript<br>A list of Free Software network services and web applications which can be hosted on your own servers</p>
<p><em><a href="https://github.com/daltoniam/Starscream">daltoniam/Starscream</a></em><br>WebSocket<br>Star：7175 Issue：140 开发语言：Swift<br>Websockets in swift for iOS and OSX</p>
<p><em><a href="https://github.com/shadowsocks/ShadowsocksX-NG">shadowsocks/ShadowsocksX-NG</a></em><br>Star：30125 Issue：250 开发语言：Swift<br>Next Generation of ShadowsocksX</p>
<p><em><a href="https://github.com/carson-katri/swift-request">carson-katri/swift-request</a></em><br>声明式的网络请求<br>Star：620 Issue：6 开发语言：Swift<br>Declarative HTTP networking, designed for SwiftUI</p>
<p><em><a href="https://github.com/cloudreve/Cloudreve">cloudreve/Cloudreve</a></em><br>云存储部署<br>Star：13045 Issue：328 开发语言：Go<br>🌩支持多家云存储的云盘系统 (Self-deployed file management and sharing system, supports multiple storage providers)</p>
<p><em><a href="https://github.com/alibaba/xquic">alibaba/xquic</a></em><br>阿里巴巴发布的 XQUIC 库<br>Star：911 Issue：4 开发语言：C</p>
<p><em><a href="https://github.com/kasketis/netfox">kasketis/netfox</a></em><br>获取所有网络请求<br>Star：3207 Issue：15 开发语言：Swift<br>A lightweight, one line setup, iOS / OSX network debugging library! 🦊</p>
<p><em><a href="https://github.com/Moya/Moya">Moya/Moya</a></em><br>Swift 编写的网络抽象层<br>Star：13744 Issue：116 开发语言：Swift<br>Network abstraction layer written in Swift.</p>
<p><em><a href="https://github.com/Kitura/BlueSocket">Kitura/BlueSocket</a></em><br>Star：1285 Issue：27 开发语言：Swift<br>Socket framework for Swift using the Swift Package Manager. Works on iOS, macOS, and Linux.</p>
<p><em><a href="https://github.com/rhummelmose/BluetoothKit">rhummelmose/BluetoothKit</a></em><br>蓝牙<br>Star：2049 Issue：33 开发语言：Swift<br>Easily communicate between iOS/OSX devices using BLE</p>
<p><em><a href="https://github.com/WeTransfer/Mocker">WeTransfer/Mocker</a></em><br>Mock Alamofire and URLSession<br>Star：734 Issue：2 开发语言：Swift<br>Mock Alamofire and URLSession requests without touching your code implementation</p>
<h3 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h3><p><em><a href="https://github.com/willdale/SwiftUICharts">willdale/SwiftUICharts</a></em><br>用于SwiftUI的图表绘图库<br>Star：397 Issue：30 开发语言：Swift<br>A charts / plotting library for SwiftUI. Works on macOS, iOS, watchOS, and tvOS and has accessibility features built in.</p>
<p><em><a href="https://github.com/lludo/SwiftSunburstDiagram">lludo/SwiftSunburstDiagram</a></em><br>SwiftUI 图表<br>Star：456 Issue：12 开发语言：Swift<br>SwiftUI library to easily render diagrams given a tree of objects. Similar to ring chart, sunburst chart, multilevel pie chart.</p>
<p><em><a href="https://github.com/ivanschuetz/SwiftCharts">ivanschuetz/SwiftCharts</a></em><br>Star：2350 Issue：47 开发语言：Swift<br>Easy to use and highly customizable charts library for iOS</p>
<p><em><a href="https://github.com/danielgindi/Charts">danielgindi/Charts</a></em><br>Star：24997 Issue：812 开发语言：Swift<br>Beautiful charts for iOS/tvOS/OSX! The Apple side of the crossplatform MPAndroidChart.</p>
<p><em><a href="https://github.com/imxieyi/waifu2x-ios">imxieyi/waifu2x-ios</a></em><br>waifu2x Core ML 动漫风格图片的高清渲染<br>Star：407 Issue：3 开发语言：Swift<br>iOS Core ML implementation of waifu2x</p>
<p><em><a href="https://github.com/mecid/SwiftUICharts">mecid/SwiftUICharts</a></em><br>支持 SwiftUI 的简单的线图和柱状图库<br>Star：1156 Issue：2 开发语言：Swift<br>A simple line and bar charting library that supports accessibility written using SwiftUI. </p>
<p><em><a href="https://github.com/Tencent/libpag">Tencent/libpag</a></em><br>PAG（Portable Animated Graphics）实时渲染库，多个平台渲染AE动画。<br>Star：1312 Issue：4 开发语言：C++<br>A real-time rendering library for PAG (Portable Animated Graphics) files that renders After Effects animations natively across multiple platforms.</p>
<p><em><a href="https://github.com/jathu/UIImageColors">jathu/UIImageColors</a></em><br>获取图片主次颜色<br>Star：3056 Issue：10 开发语言：Swift<br>Fetches the most dominant and prominent colors from an image.</p>
<p><em><a href="https://github.com/BradLarson/GPUImage3">BradLarson/GPUImage3</a></em><br>Metal 实现<br>Star：2290 Issue：73 开发语言：Swift<br>GPUImage 3 is a BSD-licensed Swift framework for GPU-accelerated video and image processing using Metal.</p>
<p><em><a href="https://github.com/exyte/Macaw">exyte/Macaw</a></em><br>SVG<br>Star：5784 Issue：124 开发语言：Swift<br>Powerful and easy-to-use vector graphics Swift library with SVG support</p>
<p><em><a href="https://github.com/exyte/SVGView">exyte/SVGView</a></em><br>支持 SwiftUI 的 SVG 解析渲染视图<br>Star：125 Issue：1 开发语言：Swift<br>SVG parser and renderer written in SwiftUI</p>
<p><em><a href="https://github.com/efremidze/Magnetic">efremidze/Magnetic</a></em><br>SpriteKit气泡支持SwiftUI<br>Star：1351 Issue：21 开发语言：Swift<br>SpriteKit Floating Bubble Picker (inspired by Apple Music) 🧲</p>
<p><em><a href="https://github.com/NextLevel/NextLevel">NextLevel/NextLevel</a></em><br>相机<br>Star：1963 Issue：70 开发语言：Swift<br>⬆️ Rad Media Capture in Swift</p>
<p><em><a href="https://github.com/Harley-xk/MaLiang">Harley-xk/MaLiang</a></em><br>基于 Metal 的涂鸦绘图库<br>Star：1240 Issue：39 开发语言：Swift<br>iOS painting and drawing library based on Metal. 神笔马良有一支神笔（基于 Metal 的涂鸦绘图库）</p>
<p><em><a href="https://github.com/frzi/Model3DView">frzi/Model3DView</a></em><br>毫不费力的使用 SwiftUI 渲染 3d models<br>Star：20 Issue：0 开发语言：Swift<br>Render 3d models with SwiftUI effortlessly</p>
<h3 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h3><p><em><a href="https://github.com/iina/iina">iina/iina</a></em><br>Star：29200 Issue：1304 开发语言：Swift<br>The modern video player for macOS.</p>
<p><em><a href="https://github.com/shogo4405/HaishinKit.swift">shogo4405/HaishinKit.swift</a></em><br>RTMP, HLS<br>Star：2260 Issue：12 开发语言：Swift<br>Camera and Microphone streaming library via RTMP, HLS for iOS, macOS, tvOS.</p>
<p><em><a href="https://github.com/AudioKit/AudioKit">AudioKit/AudioKit</a></em><br>Star：8960 Issue：7 开发语言：Swift<br>Swift audio synthesis, processing, &amp; analysis platform for iOS, macOS and tvOS</p>
<p><em><a href="https://github.com/josejuanqm/VersaPlayer">josejuanqm/VersaPlayer</a></em><br>Star：676 Issue：3 开发语言：Swift<br>Versatile Video Player implementation for iOS, macOS, and tvOS</p>
<p><em><a href="https://github.com/bilibili/ijkplayer">bilibili/ijkplayer</a></em><br>bilibili 播放器<br>Star：29961 Issue：2711 开发语言：C<br>Android/iOS video player based on FFmpeg n3.4, with MediaCodec, VideoToolbox support.</p>
<h3 id="安全-1"><a href="#安全-1" class="headerlink" title="安全"></a>安全</h3><p><em><a href="https://github.com/krzyzanowskim/CryptoSwift">krzyzanowskim/CryptoSwift</a></em><br>Star：8912 Issue：40 开发语言：Swift<br>CryptoSwift is a growing collection of standard and secure cryptographic algorithms implemented in Swift</p>
<p><em><a href="https://github.com/rockbruno/SwiftInfo">rockbruno/SwiftInfo</a></em><br>提取和分析一个iOS应用<br>Star：1032 Issue：16 开发语言：Swift<br>📊 Extract and analyze the evolution of an iOS app’s code.</p>
<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p><em><a href="https://github.com/Kitura/swift-html-entities">Kitura/swift-html-entities</a></em><br>HTML5 规范字符编码/解码器<br>Star：137 Issue：3 开发语言：Swift<br>HTML5 spec-compliant character encoder/decoder for Swift</p>
<p><em><a href="https://github.com/TokamakUI/Tokamak">TokamakUI/Tokamak</a></em><br>SwiftUI 兼容，WebAssembly 构建 HTML<br>Star：1555 Issue：93 开发语言：Swift<br>SwiftUI-compatible framework for building browser apps with WebAssembly and native apps for other platforms</p>
<p><em><a href="https://github.com/johnsundell/publish">johnsundell/publish</a></em><br>用 swift 来写网站<br>Star：3793 Issue：25 开发语言：Swift<br>A static site generator for Swift developers</p>
<p><em><a href="https://github.com/highlightjs/highlight.js">highlightjs/highlight.js</a></em><br>语法高亮<br>Star：19564 Issue：54 开发语言：JavaScript<br>JavaScript syntax highlighter with language auto-detection and zero dependencies.</p>
<p><em><a href="https://github.com/sivan/heti">sivan/heti</a></em><br>赫蹏（hètí）中文排版<br>Star：4171 Issue：15 开发语言：SCSS<br>赫蹏（hètí）是专为中文内容展示设计的排版样式增强。它基于通行的中文排版规范而来，可以为网站的读者带来更好的文章阅读体验。</p>
<p><em><a href="https://github.com/kevquirk/simple.css">kevquirk/simple.css</a></em><br>简单大方基础 CSS 样式<br>Star：1811 Issue：1 开发语言：CSS<br>Simple.css is a classless CSS template that allows you to make a good looking website really quickly.</p>
<p><em><a href="https://github.com/mozilla-mobile/firefox-ios">mozilla-mobile/firefox-ios</a></em><br>Star：10693 Issue：947 开发语言：Swift<br>Firefox for iOS</p>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p><em><a href="https://github.com/vapor/vapor">vapor/vapor</a></em><br>Star：21360 Issue：95 开发语言：Swift<br>💧 A server-side Swift HTTP web framework.</p>
<h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p><em><a href="https://github.com/spevans/swift-project1">spevans/swift-project1</a></em><br>Swift编写内核，可在 Mac 和 PC 启动<br>Star：233 Issue：1 开发语言：Swift<br>A minimal bare metal kernel in Swift</p>
<h3 id="Web-3-0"><a href="#Web-3-0" class="headerlink" title="Web 3.0"></a>Web 3.0</h3><p><em><a href="https://github.com/chaozh/awesome-blockchain-cn">chaozh/awesome-blockchain-cn</a></em><br>区块链 awesome<br>Star：16115 Issue：13 开发语言：JavaScript<br>收集所有区块链(BlockChain)技术开发相关资料，包括Fabric和Ethereum开发资料</p>
<h3 id="Apple"><a href="#Apple" class="headerlink" title="Apple"></a>Apple</h3><p><em><a href="https://github.com/apple/swift">apple/swift</a></em><br>Star：58648 Issue：496 开发语言：C++<br>The Swift Programming Language</p>
<p><em><a href="https://github.com/apple/swift-evolution">apple/swift-evolution</a></em><br>提案<br>Star：13055 Issue：40 开发语言：Markdown<br>This maintains proposals for changes and user-visible enhancements to the Swift Programming Language.</p>
<p><em><a href="https://github.com/apple/swift-corelibs-foundation">apple/swift-corelibs-foundation</a></em><br>Star：4512 Issue：32 开发语言：Swift<br>The Foundation Project, providing core utilities, internationalization, and OS independence</p>
<p><em><a href="https://github.com/apple/swift-package-manager">apple/swift-package-manager</a></em><br>Star：8660 Issue：22 开发语言：Swift<br>The Package Manager for the Swift Programming Language</p>
<p><em><a href="https://github.com/apple/swift-markdown">apple/swift-markdown</a></em><br>Star：1615 Issue：6 开发语言：Swift<br>A Swift package for parsing, building, editing, and analyzing Markdown documents.</p>
<p><em><a href="https://github.com/apple/sourcekit-lsp">apple/sourcekit-lsp</a></em><br>Star：2496 Issue：5 开发语言：Swift<br>Language Server Protocol implementation for Swift and C-based languages</p>
<p><em><a href="https://github.com/apple/swift-nio">apple/swift-nio</a></em><br>Star：6858 Issue：148 开发语言：Swift<br>Event-driven network application framework for high performance protocol servers &amp; clients, non-blocking.</p>
<p><em><a href="https://github.com/apple/swift-syntax">apple/swift-syntax</a></em><br>解析、生成、转换 Swift 代码<br>Star：1763 Issue：3 开发语言：Swift<br>SwiftPM package for SwiftSyntax library.</p>
<p><em><a href="https://github.com/apple/swift-crypto">apple/swift-crypto</a></em><br>CryptoKit 的开源实现<br>Star：1169 Issue：10 开发语言：C<br>Open-source implementation of a substantial portion of the API of Apple CryptoKit suitable for use on Linux platforms.</p>
<p><em><a href="https://github.com/apple/swift-driver">apple/swift-driver</a></em><br>用 Swift 语言重新实现的编译器的驱动程序库<br>Star：607 Issue：11 开发语言：Swift<br>Swift compiler driver reimplementation in Swift</p>
<p><em><a href="https://github.com/apple/swift-numerics">apple/swift-numerics</a></em><br>用简单的方式用浮点型进行数值计算<br>Star：1337 Issue：43 开发语言：Swift<br>Advanced mathematical types and functions for Swift</p>
<p><em><a href="https://github.com/apple/swift-atomics">apple/swift-atomics</a></em><br>Swift 的低级原子操作<br>Star：715 Issue：10 开发语言：Swift<br>Low-level atomic operations for Swift</p>
<h3 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h3><p><em><a href="https://github.com/raywenderlich/swift-algorithm-club">raywenderlich/swift-algorithm-club</a></em><br>Star：25933 Issue：50 开发语言：Swift<br>Algorithms and data structures in Swift, with explanations!</p>
<h3 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h3><p><em><a href="https://github.com/trimstray/the-book-of-secret-knowledge">trimstray/the-book-of-secret-knowledge</a></em><br>Star：59575 Issue：57 开发语言：<br>A collection of inspiring lists, manuals, cheatsheets, blogs, hacks, one-liners, cli/web tools and more.</p>
<p><em><a href="https://github.com/rossant/awesome-math">rossant/awesome-math</a></em><br>Star：5624 Issue：7 开发语言：Python<br>A curated list of awesome mathematics resources</p>
<h3 id="待分类"><a href="#待分类" class="headerlink" title="待分类"></a>待分类</h3><p><em><a href="https://github.com/krzysztofzablocki/KZFileWatchers">krzysztofzablocki/KZFileWatchers</a></em><br>Swift编写的观察本地或者网络上，比如网盘和FTP的文件变化<br>Star：1010 Issue：2 开发语言：Swift<br>A micro-framework for observing file changes, both local and remote. Helpful in building developer tools.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;update：内容已更新到 4.0 版本。十五万字的手册值得你来收藏！和分享，完美。&lt;/p&gt;
&lt;h2 id=&quot;背景说明&quot;&gt;&lt;a href=&quot;#背景说明&quot; class=&quot;headerlink&quot; title=&quot;背景说明&quot;&gt;&lt;/a&gt;背景说明&lt;/h2&gt;&lt;p&gt;越来越多同学打算开始用 
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>我写技术文章的一点心得</title>
    <link href="http://ming1016.github.io/2021/07/24/my-little-idea-about-writing-technical-article/"/>
    <id>http://ming1016.github.io/2021/07/24/my-little-idea-about-writing-technical-article/</id>
    <published>2021-07-23T21:52:45.000Z</published>
    <updated>2021-07-23T22:32:51.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>非常感谢大家抽出生命中宝贵的一段时间来听我接下来的一大段关于写文章那些事的唠叨。写文章的好处看看<a href="https://movie.douban.com/subject/30228394/">《觉醒年代》</a>就知道了。</p>
<p>这篇文章我不会写一些常说的技巧，比如文章的内容前后要有逻辑关系，内容之间有关联。所讲知识前后的层次要平，不要在某个部分挖掘过深。写作过程中牢牢抓住要表达的内容，不要过于偏离主题。类似这样的技巧不会说。都说一流的人讨论思想、普通人讨论事情、三流的人讨论人，那么为了提高文章高度，除了说些事情，我还打算加些思想的内容。</p>
<p>大家都习惯去阅读他人人生体验来体验不一样的人生，这样的方式和评头论足一样简单舒服，轻松爽快。而主动去对自己思想进行研究和开发，通过写作输出自己独特的经历和思考却是困难且难受的，但这样从0到1和从0到10的创造过程获得的乐趣却是前者的百倍甚至更多，这背后所遵循的原则是怎样的呢？</p>
<p>每个心得都会基于某些原则，以至于思路不会散架，而所有的原则都无法违背物热力学第二定律，也就是熵增定律(强烈建议先看知乎<a href="https://zhuanlan.zhihu.com/p/72896309">这篇</a>介绍)。就连进化论都是遵循熵增定律。</p>
<p>对于写作的心得我提炼出独特性、真实感、故事性和新意四个点，其中的独特性和新意都是逆着熵增的过程，其过程是非常难受煎熬的，可能做了大量付出也没结果，因为逆熵增是非线性的，无法预测的，只有在偶然的机会才会有开挂的感觉。对于真实感和故事性属于线性积累，和阅读别人的文章一样，是很容易做到的事情，都是熵增过程，有必要，容易看到结果，但会有内耗，如果没有更多独特性的经历来逆熵，可输出的内容会越来越混乱，落后，渐渐无用。因此独特性、真实感、故事性和新意这四个点之间需要平衡与演进，才能够保持进化的活力。</p>
<p>接下来我就详细展开来跟你说说独特性、真实感、故事性和新意四个点，通过我以前写的一些文章来详细说明。如果你还不知道如何下笔，我还会介绍一个容易着手去做记录和分享输出的方法步骤，最后会从头到尾举个例子按照前面介绍的步骤演示如何写完一篇技术文章。特别是那些逆熵的过程，让你能够多些体感。</p>
<h2 id="四个点"><a href="#四个点" class="headerlink" title="四个点"></a>四个点</h2><p>先分别介绍下这四个点。</p>
<h3 id="独特性"><a href="#独特性" class="headerlink" title="独特性"></a>独特性</h3><p>独特性也就是自己的经历和体验，这个是独一无二的，文章的内容如果有更多的个人经历，作为读者也就能够体验到更多的生活。</p>
<p>行万里路，多去做不同事情，多尝试不同方法，也就能够获取到更多的经历。独特性是内容中最重要的部分，如果这四点重要性共分十层的话，我认为独特性就可以占到六层。</p>
<h3 id="真实感"><a href="#真实感" class="headerlink" title="真实感"></a>真实感</h3><p>记得一个美剧编剧分享过他写编剧的经验，其中提到要写的题材，他至少会花上一年以上的时间去收集和整理相关资料。他认为只有把题材相关细节都吃透了，编排到剧里，观众才会感觉更真实，代入感才会强，身同感受才会有共鸣。如果观众感到假，感觉不到用心，那他怎么会去了解你想表达的内容呢。</p>
<p>因此真实感是表达内容的基础，而且是最费时的。相较于独特的个人经历，真实感是需要花费大量时间去调研作者以前不了解的东西。而这个过程也是了解别人经历的过程，可以学习到很多以前不知道的事情。</p>
<p>真实感是对独特性的扩充，是丰富和挖掘沉淀独特性的，可以占到两层，后面的故事性和新意各占一层。</p>
<h3 id="故事性"><a href="#故事性" class="headerlink" title="故事性"></a>故事性</h3><p>我很喜欢金庸的小说，特别是射雕英雄传、神雕侠侣和倚天屠龙记这三部，起初对金庸其它小说兴趣不大，也可能拍的电视剧不是我的菜。后来抱着爱屋及乌的态度，我尝试着打开笑傲江湖小说的开头开始读，一下子就被吸引进去了。不得不佩服金庸写故事的能力，太强大了。故事一开始制造了一个令人无法解释的案件，你会非常好奇的一直看下去，很想知道到底发生了什么。小说都进行了很长的部分令狐冲才出现，主角出现前还能吸引你看下去，可见金庸讲故事能力有多厉害。</p>
<p>自从迷上金庸的小说后，我也会试着写些小故事，同样我会注重把一些自身独特的经历穿插到写的小故事里，这些故事我发到了我的博客上，有<a href="https://ming1016.github.io/2019/06/19/white-dragon-class/">白龙班</a>、<a href="https://ming1016.github.io/2016/04/04/tenth-middle-school/">十中</a>、<a href="https://ming1016.github.io/2018/01/04/baimi/">白芈</a>和<a href="https://ming1016.github.io/2018/01/04/huaye/">花野</a></p>
<p>故事性是一种技巧，是线性的，很容易通过大量积累掌握好，最终是好是差还是强依赖于独特性和真实感。</p>
<h3 id="新意"><a href="#新意" class="headerlink" title="新意"></a>新意</h3><p>新意这个点非常关键和重要，也是演进的重要因素，你仔细想想看，很多深度高的文章其实底层知识都是差不多的，能够真正有翻天覆地突进的技术演进不会很频繁，而且这些技术往往都在硬件厂商和实验室中产生出来。对于已有底层知识的输出区别只是应用场景和组合运用技巧上有区别，精彩的发掘和效果奇佳的收益也能够获得掌声。因此技术知识和经验输出的形式也非常重要和关键，如果没有新意，大家势必会对那些知识感觉到疲倦，没人看，写作也就没有了动力。</p>
<p>关于新意可以看到淘系公众号最近使用了视频的方式来讲他们的技术，看起来就很有趣。这方面只有你想不到，没有你做不到，打开脑壳，充分发挥想象吧。</p>
<p>新意之所以只占一层，因为新意获得成功的概率较低，是非线性的，因此需要不断去尝试不同的方式。需要依赖天时地利人和以及前三个点都做的足够好了，新意才会取得非常好的效果。</p>
<h2 id="我以前的文章"><a href="#我以前的文章" class="headerlink" title="我以前的文章"></a>我以前的文章</h2><p>前面讲了四个我觉得写技术文章最重要的点，只是说了下理论上的逻辑，体感还不够强，下面我结合我以前写的文章我们一起来看看这些文章背后那些独特的经历吧。</p>
<h3 id="A站-的-Swift-实践"><a href="#A站-的-Swift-实践" class="headerlink" title="A站 的 Swift 实践"></a>A站 的 Swift 实践</h3><p>《A站 的 Swift 实践》<a href="https://mp.weixin.qq.com/s/rUZ8RwhWf4DWAa5YHHynsQ">上</a>、<a href="https://mp.weixin.qq.com/s/EIPHLdxBMb5MiRDDfxzJtA">下</a>，当时发这篇文章时，关于 Swift 实践的文章也有很多，都是各厂自身实践经验，对于独特性这个点，开始想着把 A 站做过的事情说清楚就可以了，但是很多的经验和做的事情和其他厂做的差不多，这样写出来会没有什么特别的，所以需要着重说下做的和别人不一样的事情。A站比较有特色的是文章里提到的A站自研的声明式 UI Ysera 框架，这个是别人没有的，并且由于 Ysera 框架带来了和 SwiftUI 类似的优雅简洁，提升了整体开发的效率和体验。由于 A 站很早就进入了 Swift 开发模式，并且已有将近一半业务使用了 Swift 开发，所以 A 站相较其它厂走得更快些，对于 Swift 新特性运用的也更广，比如对于 Property Wrapper 的广泛应用，使得代码复杂度骤然降低。走得更远还表现在 Module 化上，A 站大半 Pod 都完成了 Module 化，这方面的经验也很多。</p>
<p>有了独特性，为了能够让阅读的人更有体感，需要对一些技术点进行进一步的描述，使得文章一方面能够让自己得到知识的总结沉淀，还能够对他人有用。这篇文章主要是在混编的内在原理上进行了剖析，这比只描述解决混编问题过程要更加通用些，同时也能起到授人以渔的目的。但掌握原理就需要去学习和提炼相关知识，所下的功夫也更大些。另外采用 Swift 的话，还有个绕不过去的担忧点需要面对，这就是 Swift 的动态性，Swift 这方面由于在 Swift 核心团队工作优先级中较低，相较于 OC 要弱和不成熟很多。所以关于动态化就要说清楚，说的全面点，最好是能够自己进行实验去验证，这个过程会往往枯燥漫长，需要较大的热情才能够完成。</p>
<p>关于故事性，故事性往往是用来引入读进去的一种办法，A 站的 Swift 实践这篇文章的开头通过讲述使用 Swift 的必要性、A 站为之付出的努力和收获、Swift 语言的演进的过程的方式尽量避开具体技术描述，而是使用通俗易懂的描述让读的人可以被轻松带入到文章中来。</p>
<h3 id="深入剖析Auto-Layout，分析iOS各版本新增特性"><a href="#深入剖析Auto-Layout，分析iOS各版本新增特性" class="headerlink" title="深入剖析Auto Layout，分析iOS各版本新增特性"></a>深入剖析Auto Layout，分析iOS各版本新增特性</h3><p><a href="https://ming1016.github.io/2015/11/03/deeply-analyse-autolayout/">《深入剖析Auto Layout，分析iOS各版本新增特性》</a>。写这个文章也是有着一段不同寻常的经历。那时刚到公司，所有布局都还是使用的 frame 方式，而 Auto Layout 苹果公司才推出不久，在另一位跟我一样新进公司熟悉 Auto Layout 同事的怂恿下，我打算在改版需求中使用 Auto Layout 来替换原有布局方式。但在需求开发刚开始时，那位熟悉 Auto Layout 的新同事突然离职了，我感觉失去了援手，但是我认可了这个技术，还是坚持使用它。期间碰到的苦难无数，布局思路带来了很多开发方式的改变，还有动画的结合会出现的各种效果不一致，其间公司老员工还不断劝我还是走老路比较稳妥。改版完后大部分主流程，包括首页发单、等待页、接单进行页都被改造成 Auto Layout。</p>
<p>更困难的事情还在后面呢，测试期间发现在 iOS6 上会出现各种崩溃、页面布局混乱、动画效果不一致等问题，我的 Bug 始终保持在 Bug 列表前十页。改 Bug 那些天，晚上调的眼发疼，深夜想的难入眠。线下 Bug 改完，上线后才是噩梦的开始，当时我们 App 的 iOS6 用户依旧很多，于是很多偶现崩溃被放大了，我的崩溃问题一直排在 Top1，虽然我很快找到了改好的办法，但是对于这几个偶现的问题还需要一个可靠可信服的解释，这样后面才能够让大家放心使用 Auto Layout。还记得当时周末坐在得实大厦窗户边的工位上，在查完和试完所有资料后依然无果时的无力感。本想着改回以前的 frame 布局算了，后又觉不甘。下几个周末跑到各大图书馆查看所有涉有 Auto Layout 的书，也是那个时候了解到了 VFL 语言。皇天不负有心人，WWDC 开始了，其中有个 Session 叫 Mysteries of Auto Layout，分为<a href="https://developer.apple.com/videos/play/wwdc2015-218/">上</a>、<a href="https://developer.apple.com/videos/play/wwdc2015-219/">下</a>两个部分，把 Auto Layout 的原理讲得非常透彻了，至此，透过原理我也找到了问题的根因，并把他们记录在了文章中。这部分内容我还在一个沙龙做了分享，下面是当时分享的 Auto Layout 的原理部分的内容：</p>
<p><img src="/uploads/my-little-idea-about-writing-technical-article/1.PNG" alt=""></p>
<p>完整幻灯片参看<a href="https://ming1016.github.io/2021/07/13/deeply-analyse-autolayout-slides/">这里</a>。</p>
<p>这些经验的总结在当时是非常新的，因为官方也是刚公布出其内部的原理，没有人能够更早的知道这些信息，估计也很少有人会考究这么多。有了这些由于一直坚持下来去找根因的经历才使得文章有了独特性。</p>
<p>当然，深入剖析 Auto Layout 这篇文章也加了 Auto Layout 的历史、生命周期、VFL 语言的介绍用来丰富内容的广度，以提升真实感，但你会发现独特性在这里显得尤为重要。</p>
<p>另外，在查找崩溃问题根因时，没有放弃，一直坚持的去找答案的过程也让我难忘。经常会听说到要去找自己热爱的事情，遵循自己所想。而实际上是那件热爱的事情是你愿意花很久甚至很多年需要克服痛苦，还能够继续忍耐，能忍他人所不能忍，赢过他人不是靠的热爱和能力，而是在万般艰难，别人都放弃而你坚持下来才赢的。巴菲特21年资产5000亿美元，其中4997亿美元是50岁之后赚到的，如果49岁那年他就不继续做了，那么他就不会有今年这样巨大的财富，就不会显示巨大的复利效应。</p>
<p>后来我还发现，不断坚持的一个窍门就是去庆祝大目标方向上的每个小小的成功，把这个小小的成功当成最后的成就那样去庆祝。</p>
<h3 id="制作一个类似苹果VFL-Visual-Format-Language-的格式化语言来描述类似UIStackView那种布局思路，并解析生成页面"><a href="#制作一个类似苹果VFL-Visual-Format-Language-的格式化语言来描述类似UIStackView那种布局思路，并解析生成页面" class="headerlink" title="制作一个类似苹果VFL(Visual Format Language)的格式化语言来描述类似UIStackView那种布局思路，并解析生成页面"></a>制作一个类似苹果VFL(Visual Format Language)的格式化语言来描述类似UIStackView那种布局思路，并解析生成页面</h3><p><a href="https://ming1016.github.io/2016/07/21/assembleview/">这篇文章</a> 诞生的原因是我写了一个视图布局的库 AssembleView，通过这篇文章做了一个记录。这篇的独特性在于文章背后我特殊的经历。首先写 AssembleView 的起因在于之前大半年我使用自动布局写了大量的页面和一些动画，虽然有比系统更加简化的 Masonry 库可以使用，但是对于很早以前写过 H5 页面的我来说无论是从布局思路还有编写体验上，Masonry 依旧差的很远。苹果为自动布局发明的简洁 VFL 语言却没能用在更加先进的 UIStackView 布局思路上，于是在一次中午吃饭散步的过程中，我突然有了把 VFL 语言和 UIStackView 布局结合起来的想法，同时还想好了名字，叫做 AssembleView，也就是组装的视图的意思，心动不如行动，在接下来的一个需求周期中，我就着手一边开发 AssembleView 一边开发需求。每个需求只有一周的开发时间，当时需求只是更新评价的几个小页面部件，但为了将 AssembleView 运用进来，我把整个评价页面和功能进行了重写，包括标签云等复杂布局采用新库的重写。而这样的工作量仅在一周内完成了。</p>
<p>短时间完成 AssembleView 并应用到产品中，得益于 Deadline 的限制，设置时间节点，没有时间节点的目标那就是梦想，有了时间节点会让你保持一段时间专注，在限制的时间里，你没法去把事情做到方方面面都好，因此才会激发你，让你发挥自身的独特性，和别的不同，其实这种独特会让这件事情完成的更有价值。不要试着做最好的，而是力求做与众不同的。与众不同意味着创新，画草图和下笔写稿子都是创造的方式，这些过程不要去做雕琢、检查、取舍、反思这样的事情，而是释放自己的本能，去自由的发挥自己的积累和沉淀。艺术总是来自不完美，始于杂乱。</p>
<p>有了这样非同寻常的经历，使得这篇文章本身独特性的意义更大了。记录并分享，能够获得做着同样事情人的共鸣。</p>
<p>AssembleView 本身就是全新，因此从头到尾都是新意。</p>
<p>当时写这个库也是为了能够提高完成需求和维护需求的时间，有了精力才能够做更有趣有意义的事情嘛。五年后，苹果终于将 VFL 这种 DSL 语言运用 Swift 强大的 ResultBuilder 和不透明类型等特性进行了更好地完善，配合 Property Wrapper 和 Combine 还无缝衔接了先进的数据流架构，推出了 SwiftUI。</p>
<h3 id="深入剖析-JavaScriptCore"><a href="#深入剖析-JavaScriptCore" class="headerlink" title="深入剖析 JavaScriptCore"></a>深入剖析 JavaScriptCore</h3><p><a href="https://ming1016.github.io/2018/04/21/deeply-analyse-javascriptcore/">《深入剖析 JavaScriptCore》</a> 这篇文章要说独特性，那就是对 JavaScript 语言的好奇心。我很早就开始使用 JavaScript 来开发网站，工作和个人网站的前端都是依赖于这门语言，其实知情人都知道，选择 JavaScript 也是没有选择的选择。年轻时只顾着使用技术去做东西，也做了自己觉得非常有趣的程序，满足感十足，现在转向对其背后的机制技术好奇和感兴趣了。还有一个迫使自己去了解 JavaScript 引擎的原因是工作中做动态页面时需要用到对业务逻辑的解释执行处理。为了避免使用中出了问题会一脸懵，深入了解它显得很有必要。</p>
<p>光有想法是没有一点用的，JavaScriptCore 其实非常的庞大且复杂，当时能找到的大部分资料都是 Bridge 和 RN 的运用，好在开源了，了解内部的话还可以拉代码来看。但是直接埋进去看代码，代码量比较大，很容易 miss 掉其精妙之处。好在发现了 JavaScriptCore 项目核心开发者 Filip Pizlo，通过他的<a href="http://www.filpizlo.com/">个人网站</a>找到了大量 JavaScriptCore 的一手资料，没日没夜的啃内容，同时还试着动手去实现一些技术细节，最终了解和学习了很多解释器、虚机相关知识。获取一样东西带来的满足感是没有获取经验带来的满足感更深刻。我把学到的这些经验都记录在了这篇文章中，这使得文章的独特性更加深刻，真实感达到了满棚。</p>
<h3 id="深入剖析-JavaScript-编译器-解释器引擎-QuickJS-多了解些-JavaScript-语言"><a href="#深入剖析-JavaScript-编译器-解释器引擎-QuickJS-多了解些-JavaScript-语言" class="headerlink" title="深入剖析 JavaScript 编译器/解释器引擎 QuickJS - 多了解些 JavaScript 语言"></a>深入剖析 JavaScript 编译器/解释器引擎 QuickJS - 多了解些 JavaScript 语言</h3><p>对于 JavaScript 引擎，我先前就看了 JavaScriptCore，为啥还要再去看 QuickJS 这个轻量的 JavaScript 引擎呢。写<a href="https://ming1016.github.io/2021/02/21/deeply-analyse-quickjs/">这篇文章</a>动力主要还是对QuickJS如何使用精简高效的代码实现了那么复杂功能，还有极高的性能。QuickJS 基本是从头看到尾，一点一点的分析，整个过程也都记录了下来。但是我觉得记录源码的分析还不够，虽然这些分析使得文章的真实感很高，前提是读的人也会埋进代码里。为了提高文章的独特性和故事性，我在文章开头加入了一些 JavaScript 的一些背景内容，还有些当年使用前端技术的体会和经验。</p>
<p>只看代码不去修改和调试，往往会很枯燥，我在分析代码前，也写了些和 QuickJS 工程配置 makefile 相关的内容，并以 QuickJS 本身的 makefile 的用法进行举例说明。另外还手把手说明了怎么用 Xcode 来编译安装调试 QuickJS 代码，这些都是比较独特的内容。QuickJS 的核心代码基本都写在一个文件里，阅读分析时需要非常的专注，如果不专注，可能这篇文章也就没法写完。如果你花大量时间在家玩游戏、看电视剧和刷短视频，而不工作，那么就会有危机感和负罪感。但是如果会去工作，但是期间总会找着间隙去做其他事情，刷刷微博，看看朋友圈，瞅瞅新闻什么的，那就不会有负罪感，因为你会觉得你还是在工作着呢。没全力去工作，而在假装工作着，可比完全不工作的危害更大。一心一意的长时间去做工作外的事情，反而能够开眼界扩视野，从而反哺工作，工作的更好更开心。新时代就会有新机会，同时也会有新的要求，比如知识的获取从单一感官方式变成了动态的，多感官的方式。以前只是文字和图片的书和博客，新时代就是视频、直播和播客，新时代你有更多方式出现在大家面前，出现的更多就代表了成功。未来会有更多感官方式，而且更加的智能。获取知识的门槛低了，人群也就更广了，也可以理解为新的机会更大了，保持专注不设限去感受新时代，对自己不断做出新的要求，就会有新的机会。</p>
<h3 id="深入剖析-iOS-编译-Clang-LLVM"><a href="#深入剖析-iOS-编译-Clang-LLVM" class="headerlink" title="深入剖析 iOS 编译 Clang / LLVM"></a>深入剖析 iOS 编译 Clang / LLVM</h3><p>写<a href="https://ming1016.github.io/2017/03/01/deeply-analyse-llvm/">这篇文章</a>的原因主要来自在公司做的 App 安装包体积瘦身的事情，经过各种工具使用和分析后，总是找不到突破口。需求还在不断叠加，也没有好的思路。当你遇到困难时，做不成的人才会告诉你你也做不成，如果你真的想做成，有这个理想就要自己去守护他。遇到困难离成功才会更接近。那些困难来自于有限的资源，比如没人、没钱等，但是正是由于这些资源的限制，才会迫使你去创新，你会通过自己的热情还有毅力来寻找独特更有效的方法，所以由于有限资源带来的困难才会让你去突破、思变和进取。</p>
<p>就在百般无奈，各种资源条件受限的情况下。我想着看能不能把需要繁琐手动检查的动作试着写成程序自动完成。于是我用一个周末开发了查找无用方法工具，能够自动查找出工程中没有用到的方法，也兼顾了我们工程的一些运行时调用的方法检查。这样重复繁重的检查工作就变得轻松了很多。</p>
<p>工具开发完后，我发现这工具的实现并无相关成熟理论来进行支持，以后怎么完善和优化这个工具也没有一点思路。为此我还苦恼了蛮久的。</p>
<p>经过一位同事提醒，说大学有门编译原理的课里面就有讲怎么分析代码的，于是我就开始针对性的翻阅相关资料。于是乎，我发现了一片蓝海，这里面涉及到的技术不光是分析代码，还有很多以前不了解的程序怎么跑起来的细节，这里的知识就像可以无限递归的树，能够将你所有时间都吞没。这篇文章我更新添加内容的次数不下十次，每当get到了新的东西都忍不住记录下来。这期间动手去实践一些知识点，也遇到很多问题，解决这些问题的过程，对相关知识理解就更深入了。后来在17年的@Swift 大会上还做了 LLVM 相关内容的分享，下图是其中一张 Slide。</p>
<p><img src="/uploads/my-little-idea-about-writing-technical-article/2.png" alt=""></p>
<p>完整幻灯片参看<a href="https://ming1016.github.io/2017/05/27/slides-of-learn-what-interesting-things-you-can-do-with-iOS-compilation/">这里</a></p>
<h3 id="深入剖析-WebKit"><a href="#深入剖析-WebKit" class="headerlink" title="深入剖析 WebKit"></a>深入剖析 WebKit</h3><p>为了完成网页到原生代码的转换，我开始学习 Web 的标准，而 WebKit 是苹果公司对 Web 标准实现，V8和 Flutter 渲染技术的源头，WebKit 的学习能够让我更完整的了解网页从请求到布局再到渲染的流程和使用的相关技术。<a href="https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/">WebKit的这篇文章</a>我罗列了大量的 Web 规范资料，由于 WebKit 非常的庞大，架构也很复杂，文章里对架构也进行了详细的说明，对源码的结构做了详细的说明。全文按照一个页面从请求到最终渲染的流程顺序，依次对其关键环节里对应源代码和原理进行了详细的说明。完成这篇花费时间巨大，代码基本读了个遍。之后我对于前端技术有了更深的理解，特别是页面异步加载的流程和布局原理。</p>
<p>感觉这篇完全靠的是对前端技术的热情完成的。手冢治虫说过，那些投稿的人，都是热爱着漫画，把画出一部作品作为自己生命意义的人。所以他们才能获得成功，成为马拉松里跑到最后的人。热情可以增加25个 IQ 值。如果一个人仿佛开悟了的高僧，失去任何欲求、愿望、不甘、烦恨与伤痛，那么即使他去画漫画，即使基因再好，天赋再高，也只会画成佛教的禅画罢了。在比尔.布莱森在《人体简史》这本书中提到一个镜子相关的实验，实验来自一名防碎眼镜商人，在1980年创办了胚种精选择库（Repository for Germinal Choice），这个精子库只有诺贝尔获奖者和其他杰出知识权威的镜子。他想的是能够提供最好的精子生出天才婴儿，结果是在出生的200名儿童里，没有一个杰出天才，甚至连一个眼镜工程师都没能造出来，可见对做的事情有热情更加重要，而不仅仅只要基因好就行。</p>
<h3 id="深入剖析-iOS-性能优化"><a href="#深入剖析-iOS-性能优化" class="headerlink" title="深入剖析 iOS 性能优化"></a>深入剖析 iOS 性能优化</h3><p><a href="https://ming1016.github.io/2017/06/20/deeply-ios-performance-optimization/">性能这篇</a>最重要的是独特性，开始只是针对日常开发性能需要注意的一些点进行了归纳总结，后来需要对启动项进行分析，于是做了分析的工具，其间我无意多查看了下 thread_basic_info_t 这个结构体里的字段，发现了 cpu_usage，觉得日后必有用，于是留了个心眼。后来负责性能的同学看了我的这篇文章，跑来找我，跟我说 App 连续几个版本都有线上反馈耗电太大，他们自己也很容易复现出来。这几个版本调整了定位频率，排查了各种怀疑的点，电量消耗依然很大。起初我也没有思路，instruments 也看不出问题来，于是我使用分析启动项的方法，查看运行中方法调用次数，排序来看谁调用的频繁，后来发现调用频繁的方法数量太多很难排查定位。</p>
<p>这时先前留意的 cpu_usage 字段起来关键的作用，通过定时刷新获取线程中 CPU 使用情况，连续高使用就揪出详细线程堆栈，后来小范围灰度上线检测，直接定位到了问题的堆栈，很快的解决了这个大难题。而且有了这个手段，后面也有了底气，在遇到问题也不会慌了，而且线下也可以使用这个方法进行压力测试，以免把问题带到了线上。这个方案也更新记录到了文章中，有了这个不寻常的经历，文章也就有了很强的独特性。</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>关于启动我写了两篇文章。第一篇是<a href="https://ming1016.github.io/2019/12/07/how-to-analyze-startup-time-cost-in-ios/">《如何对 iOS 启动阶段耗时进行分析》</a>，另一篇是<a href="https://ming1016.github.io/2020/12/18/thinking-in-how-to-speed-up-app/">《App 启动提速实践和一些想法》</a>。说起这两篇的独特性，那绝对是独一无二。我负责的这场血淋淋的战役真可以说是毕生难忘。项目起因不用猜也可以想到，启动速度持续劣化，导致用户体验变差，落后对手一倍，提速困难重重。临危受命，当时想到的只有一个字，那就是干。</p>
<p>开始最难的还是定方向和定策略以及决策。明确了整体的思路，所有任务就开始并行跑起来了。由于项目的重要性不言而喻，因此投入资源巨大，不光是我的人都参与了进来，还有很多其他团队也一起加入。停下所有手上低优事情，握紧拳头全力打赢关键战役。要的就是能够速战速决，一旦拖延，不光是士气没了，结果没达成，还会留下一堆烂摊子难有资源去清理。</p>
<p>由于初期谋划的方案全面、稠密以及有效，多个团队通力合作配合奇佳，使得在三周内超预期达成了目标，不光是领先了对手一倍，还比大部分头部 App 都要快。这三周说长不长，说短也不短，大量的开发、调试、工具设计开发、数据分析、检测和验证工作集中式的进行，对体力和脑力都是极大的挑战，且压力巨大。</p>
<p>第一篇记录了前期的策划内容以及一些提效工具的开发过程。对这三周干的事情进行了沉淀，沉淀的是一次独特的成功经验。第二篇是在一年后写的，更多的是记录了这一年我对启动这件事情的思考，一年时间的经历也很多，还主负责过包体积的项目，所以内容就显得更加丰富了些，有记录些对性能和调试工具的研究。</p>
<p>第二篇文章里我提到我发现了一个宝藏男孩<a href="https://eisel.me/">Michael Eisel</a>，发现了很多二手资料都是源自他的博客。另外由于这一年也发现了性能防劣化中，自动化分析工具和能力相关技术了解的不够深入。于是专门去探索了下这方面的情况。对于目前为了保持双端一直 libimobiledevice，我发现了 Facebook 专门针对苹果系统开发的 idb，idb 做法明显更聪明些。</p>
<p>这些探究的过程至少是独特的。更独特的地方是文中写的那个A库多线程问题的排查经历。痛苦的经历我已在文中清晰详细的记录了，历时三天三夜，当大家试完所有情况，士气全无时，才柳暗花明又一村。全因苹果的一个 bug。经历这么一遭，对于 GCD 的队列排查定位问题难这点，我看国外对 iOS 并发开发方式吐槽的声音也很大，于是我很想了解多线程问题苹果未来会怎么处理。这就有了文中 Swift 并发提案部分的分析。当时这份提案还未进入正式流程（现在已经在 Swift 5.5正式发布了），未来并不明朗，我也担心会遗漏关键信息，于是对涉及相关的提案都进行了阅读，包括那些提案下所有的评论也都看了。</p>
<p>这两篇文章跨越了整整一年时间，这一年期间我基本没有写其他的文章，但是却沉淀了很多，所以第二篇实际上可写的内容非常多，一口气挑着重点的说了一大篇后，还删减了大量内容。写完第二篇我感觉到化繁为简的巨大好处。自己做的记录、素材和资料往往都是大量的，深究下去都是无穷无尽的感觉。因此需要从中提炼出自己的观点。从那么多内容中提炼出观点是需要足够的休息和放松，让你的潜意识主动来帮助你。这些休息和放松也可以是在日常的行为中，比如洗澡、去超市买东西、骑自行车、走路、锻炼、吃饭和睡觉等，特别是走路和睡觉持续时间长，最容易进入深度思考。不断给自己提问题进而更大量的阅读找答案，思考内在逻辑和联系。发散的找，专注的收敛提取观点，这样的观点是用钱买不到的。</p>
<p>通过大白话讲清楚，分享出去，这样的观点在他人接收时是自然地，意识不到其背后所花的时间和功夫，这就跟优秀的 App 一样，用起来是那么简单有效，丝毫不拖泥带水，用户也意识不到开发 App 所付出的脑动。这种化繁为简的过程也是将无序杂乱的东西清理掉，让你宝贵精炼的思想能够有地方存放。</p>
<p>灌篮高手中流川枫打篮球行云流水，天赋异禀。背后的努力谁又能知晓。我印象最深的一段是樱木花道为了取得晴子芳心，但始终技不如流川枫，总以为是天赋不够。一天晚上樱木花道很晚来到篮球馆，发现流川枫还在苦练，才发现原来白天看起来懒散傲慢的流川枫原来比谁都要刻苦，简单轻松从来都不是廉价的。</p>
<p>对于分享，有智慧的人都懂得给予越多收获越大。友情比金钱价值更高，就好像有一个开电影公司的朋友比拥有一家电影公司要好。分享不是要得到他人的认可，如果你知道这点，你拥有的能量就是无穷的，力量也是无敌的。</p>
<h2 id="没怎么写过，那下一步怎么行动"><a href="#没怎么写过，那下一步怎么行动" class="headerlink" title="没怎么写过，那下一步怎么行动"></a>没怎么写过，那下一步怎么行动</h2><p>看到这里，你一定会想“看你说了那么多，但我双手放在键盘前，脑袋还是一片空白，无从下手”。</p>
<p>如果想帮其他人，让他真的动手去做些什么事情，其实更应该是要让做这件事情变得容易很多倍，但方向是一样的，这样下次他就更好接受些。互联网开始发布内容门槛高，后来有了微博和朋友圈这种能够一句话就快速发布出去的产品后，大家发内容就比以前更多了。去读资料和文章，可以懂更多的知识，自身能力还是需要通过练习才能够有提升。想把事情做好，还是需要去做。</p>
<p>因此你应该更重视动手写，如果你不知道如何写，可能就不知道如何思考。有叛逆和逆向思维的人常常是爱问问题的人，爱自问爱思考，对那些已经共识正在运作的事物提出疑问，寻找和关注答案，这样才会有打破现状的意识。一些人小时候就能看到有这样的特点，因此在别人教你怎样怎样做时，不要太当回事，相信自己实践出来的答案。多听你喜欢人说话，多倾听，不断问还有没想说的。</p>
<p>还要从各种类型人那学习，甚至是和你观点不同的人。因为在每个人坚持的思想里，都会有他自己独特的经历和实践总结来的结论。通过他们的结论，你也可以自己去实践和验证形成自己的观点，这样就会有复利效应。做的结果其实并不重要，重要的是在做的过程中，你自己有没有变得更好。</p>
<p>你说的话，你的观点，你的评论都不能代表你，而是你所做的事情，花了很多时间做的事情那才是你。改变一个人的行为来改变思维，比改变一个人的思维来改变行为要容易的多很多。</p>
<p>因此，光看光听不动手写是没用的。那行动起来的话，怎么做更好些呢？</p>
<h3 id="四个步骤"><a href="#四个步骤" class="headerlink" title="四个步骤"></a>四个步骤</h3><p>第一步，零散的想法、工作内容和看到的好的技术资料及时记录，先按照时间轴的方式记录。这一步是很容易操作的，几乎不用费脑，只需要机械的做记录就行，也不用考虑先前提到四个点里任何一个。</p>
<p>第二步，对于记录的内容进行分类，开始粒度可以粗一点，比如性能、架构、构建、编程语言、管理、成长、旅行和科技等，根据自身兴趣点和期望发展方向来就好。</p>
<p>第三步，做完一个项目，或者想对先前做的事情进行总结时，先一口气快速写出想表达的内容出来，这时写的内容体现出独特性，搭好骨架。然后针对写的内容中的一些技术点，进行真实感的完善。真实感的完善是需要很多素材和资料的，这时在第一步和第二步做的工作和积累就能够派上用场了。找到相关大分类进行细分来补充文章的血肉。</p>
<p>第四步，也是最后一步，可以充分发挥自己软实力和创造力，通过故事性和新意来披上文章的皮肤，让文章能够看起来更加完整和吸引人，提高阅读的体验。</p>
<p>完整完成这四个步骤并不容易，经常就会因为惰性半途而废。这时就需要 push 自己一把，方法的话，我这边的经验就是定目标，定时间节点。比如定好一个对外分享的时间，这样目标性更强，同时也有了约束和责任，自己的惰性在这一段时间内就能够得到很好的消减。</p>
<p>为了达成目的，彻底理清你想要啥，还需要清空干扰，方法很简单，除了当前最重要的事情，其它所有待做事情都记在备忘录里以便追踪防止遗漏。完成当前事情后，再去查看备忘录，然后定新目标新计划。</p>
<p>完成文章后可以通过下面八个问题来检查下文章的完成度。</p>
<ol>
<li>我为什么做这件事？</li>
<li>谁已经做了？他们都是怎么做的？效果怎样？</li>
<li>我和他们做的不一样在哪？怎么想到的？能详细具体说出涉及相关知识点吗？（⭐️重点，写好了的话，其他问题可有可无）</li>
<li>我碰到了什么困难？</li>
<li>我怎么解决的？</li>
<li>做的有亮点吗？为什么是亮点？</li>
<li>做完后效果是怎样的？超预期地方在哪？</li>
<li>以后还有计划打算吗？为什么？</li>
</ol>
<h3 id="所用软件"><a href="#所用软件" class="headerlink" title="所用软件"></a>所用软件</h3><p>下面是我写文章会用到的一些软件，以及我关注和用到的一些特性：</p>
<p>系统自带备忘录</p>
<ul>
<li>零散想法和灵感记录</li>
<li>待做事项记录（一个一个直接删掉的感觉不错）</li>
<li>聚焦想法思路，不用去考虑分类整理等</li>
</ul>
<p><a href="https://bear.app/cn/">熊掌记</a></p>
<ul>
<li>本地文档管理（多设备同步收费）</li>
<li>标签系统简化分类</li>
</ul>
<p><a href="https://www.notion.so/">Notion</a></p>
<ul>
<li>在线文档管理</li>
<li>数据库方式管理，分类、检索和排序</li>
<li>字段自定义添加，比如标签、类别、链接、标题等等都可以自定义</li>
<li>基于数据库和自定义字段可生成看板、时间轴、日历、列表、表格、网格等不同视图样式查看。</li>
<li>有chrome插件</li>
</ul>
<p><a href="https://code.visualstudio.com/">VS Code</a></p>
<ul>
<li>本地文档管理（文件夹，Git支持可多端同步）</li>
<li>Markdown 插件支持（Markdown All in One、Pangu-Markdown、Markdown Preview Enhanced、Word Count CJK）</li>
</ul>
<p><a href="https://obsidian.md/">Obsidian</a></p>
<ul>
<li>本地文档管理（文件夹）</li>
<li>Markdown原生支持</li>
<li>插件系统，比如有大纲和看板等插件可用</li>
<li>双向链接与关系图谱</li>
</ul>
<p><a href="https://procreate.art/cn">Procreate</a></p>
<ul>
<li>可以把在纸上的草图配上颜色</li>
</ul>
<p>软件使用上，我会通过备忘录或熊掌记快速记录一些素材和想法，定期挪到 Notion 里，我是把 Notion 当做一个大仓库，写作的第二阶段整理分类我就是在 Notion 中完成的，充分利用 Notion 的自定义字段能力，对所有资料进行各种维度划分和归档。开始写文章时，初期会用 VS Code 来写，如果文章写长了就会打开 Obsidian 来继续写，主要是 Obsidian 的大纲效果比较好些。最后文章的配图我会使用 Procreate 来画，里面有辅助线，打开后可以很方便做参照，写图中文字就不容易偏了。</p>
<p>工具只是工具，记录的内容和自己的思想才是核心。我现在读书还是喜欢在纸上写笔记，特别有感触的才会提炼一些观点敲到备忘录中，比如我看了网飞（Nexflix）的<a href="https://book.douban.com/subject/35102294/">《不拘一格》</a>后提炼了一些观点做了记录，笔记如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">制度都是围绕着怎么不阻碍所要的人发挥。比如假期自由安排、无审批、决策权非自上而下，而是在认识一致情况下松散耦合。</span><br><span class="line"></span><br><span class="line">要和不要什么样的人呢？</span><br><span class="line"></span><br><span class="line">不要的人：</span><br><span class="line"></span><br><span class="line">与人相处好，但能力平平</span><br><span class="line">工作狂，缺少判断力</span><br><span class="line">天资好，行动力强，但悲观、牢骚</span><br><span class="line">有才华的混蛋：</span><br><span class="line">特征</span><br><span class="line">听到赞美就自觉优秀</span><br><span class="line">对想法不明智的人，会进行嘲笑</span><br><span class="line">会侮辱天赋不如自己的人</span><br><span class="line">表现</span><br><span class="line">喜欢会上慷慨陈词，重复表达自己观点</span><br><span class="line">如没抓住他的要点，会打断别人的话</span><br><span class="line">别人发言，不赞同时会不听，做自己的事情</span><br><span class="line">别人啰嗦，没抓住要点，立刻打断</span><br><span class="line">总想着怎么做才能表现好，得奖金，缺少开放的认知空间</span><br><span class="line"></span><br><span class="line">为什么：管理花费精力多，讨论质量低，会排挤卓越员工。</span><br><span class="line"></span><br><span class="line">要的人：</span><br><span class="line"></span><br><span class="line">非凡创造力、工作出色（完成繁重任务）、合作好</span><br><span class="line">在放松状态下，会灵光乍现</span><br><span class="line">公司利益至上</span><br><span class="line">自觉追求成功，无论是否有奖金（已给予能力匹配市场最高价）</span><br><span class="line">当某一固定思维遇到瓶颈时，他总有办法摆脱瓶颈，或尝试不同角度看待问题</span><br><span class="line">在有才能，受爱戴的前提下，自己犯错大声说，成功小声说，让人感觉亲近、真诚和体贴。</span><br><span class="line">有良好的判断力</span><br><span class="line"></span><br><span class="line">为什么：优秀的人激励其他优秀的人，出色成果感染更多人才。</span><br><span class="line"></span><br><span class="line">只有公司里的员工都是上面提到的要的人时，公司的密度才高。这样的公司不是家庭而是专业运动队，运动队追求卓越，每个位置都是最佳人选；训练就是为了胜利，大家都能给予和接受反馈；成绩要好，不能只用努力就够了。</span><br><span class="line"></span><br><span class="line">书中详细介绍了网飞的制度由来，大量员工的实际案例，碰到了问题如何完善了制度。非常全面进行了制度介绍，甚至包含了进行创新的几个步骤的详细说明，还有网飞创始人里德是如何做到让大家认识一致的。</span><br><span class="line"></span><br><span class="line">最后是书中引用的小王子那段：</span><br><span class="line">如果你想造艘船，</span><br><span class="line">不要老催人去采木，</span><br><span class="line">忙着分配工作</span><br><span class="line">和发号施令。</span><br><span class="line">而是要激起他们</span><br><span class="line">对浩瀚无垠的</span><br><span class="line">大海的向往。</span><br></pre></td></tr></table></figure></p>
<h2 id="举个例子，怎么写这次WWDC21的见闻文章"><a href="#举个例子，怎么写这次WWDC21的见闻文章" class="headerlink" title="举个例子，怎么写这次WWDC21的见闻文章"></a>举个例子，怎么写这次WWDC21的见闻文章</h2><p>光说不练，这样不好吧，那就现举个例子，看看怎么按照上面的四个步骤一步一步写一篇技术文章。那就以现在刚开完的 WWDC21 为主题，写个《WWDC21我的见闻》吧。</p>
<p>首先我们先做第一步，从 WWDC21 开始，我就将我看到的信息、还有看感兴趣 Session 中有用的点都记录了下来，只考虑是否要记，二不考虑其它任何事情。你可以看我<a href="https://ming1016.github.io/2021/06/08/wwdc2021-day1-note/">WWDC21第一天的记录</a>，我将其发到了我的博客和公众号上。后面几天我也不断的收集记录着零碎的信息。然后对这些记录进行分类。接下来再开始内容的撰写。</p>
<p>写 WWDC21 见闻录，你可以先想想着你想要什么内容，有没人提供，有的话可以直接链过来，没有的话可以自己去体会，去想，去经历，然后分享出来。</p>
<p>我会先写个总览，内容如下。</p>
<h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p>WWDC21 官方通过一个页面汇总了发布的新技术，详见<a href="https://developer.apple.com/documentation/new-technologies-wwdc21">这里</a>。WWDC21 里的代码范例官方都有提供和汇总，详见<a href="https://developer.apple.com/sample-code">这里</a>。WWDC21 期间苹果也<a href="https://developer.apple.com/wwdc21/beyond-wwdc/">列出了</a>苹果公司之外围绕 WWDC 其它组织的学习、交流和娱乐的活动。</p>
<p>如果没有太多时间看 Session 视频，也可以直接看其他人的笔记，国外有<a href="https://www.wwdcnotes.com/">WWDC NOTES</a>，国内有老司机技术周刊的<a href="https://xiaozhuanlan.com/wwdc21">WWDC21 内参</a>。往届内容也有人做了<a href="https://github.com/Juanpe/About-SwiftUI">汇总</a></p>
<p>简单笔记可以查缺补漏，Alejandro Martinez 在这篇文章<a href="https://alejandromp.com/blog/wwdc21-notes/">WWDC21 notes</a>中对各种主题做了简单的记录，列出了关键字方便检索。</p>
<h3 id="Session推荐"><a href="#Session推荐" class="headerlink" title="Session推荐"></a>Session推荐</h3><p>全部 Session，在<a href="https://developer.apple.com/videos/wwdc2021/">这里</a>查看。这里有份<a href="https://useyourloaf.com/blog/wwdc-2021-viewing-guide/">推荐清单</a>。我也列了下我关注的 Session。如下：</p>
<p>SwiftUI 相关 Session：</p>
<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10018/">What’s new in SwiftUI</a>：包括了所有SwiftUI这次的更新内容介绍。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10021/">Add rich graphics to your SwiftUI app</a>：内容包括安全区域、材质包、画布API等。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10176/">Craft search experiences in SwiftUI</a>：.searchable修饰符的使用。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10023/">Direct and reflect focus in SwiftUI</a>：关于移动焦点的使用。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10062/">SwiftUI on the Mac: Build the fundamentals</a>：内容是一步一步构建一个macOS应用。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10289/">SwiftUI on the Mac: The finishing touches</a>：展示如何通过设置让人们灵活定制一个应用程序。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10022/">Demystify SwiftUI</a>：介绍了SwiftUI的三个核心Identity、Lifetime和Dependencies。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10019/">Discover concurrency in SwiftUI</a>：展示并发工作流如何和SwiftUI数据流进行结合。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10349/">SF Symbols in SwiftUI</a>：定义Symbols的大小，显示不同变体以及Symbols着色。</li>
</ul>
<p>Swift Concurrency 相关 Session：</p>
<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10132/">Meet async/await in Swift</a>：了解 async/await 开发模式。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10134/">Explore structured concurrency in Swift</a>：内容包括创建不同类型并发任务，如何创建任务组，如何取消正在进行的任务。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10133/">Protect mutable state with Swift actors</a>：内容有如何使用Swift actors组织资源竞争，actors如何工作等。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10254/">Swift concurrency: Behind the scenes</a>：了解更多Swift并发的细节，更安全的数据竞争和处理线程爆炸，和GCD的不同，线程模型怎么工作等。值得看多遍。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10194/">Swift concurrency: Update a sample app</a>：介绍async/await、actors和continuation在现实工作中的经验</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10058/">Meet AsyncSequence</a>：流式传输数据。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10095/">Use async/await with URLSession</a>：URLSession中怎么使用async/await和AsyncSequence。</li>
</ul>
<p>DocC：</p>
<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10166">Meet DocC documentation in Xcode</a>：了解如何使用DocC，如何生成DocC档案，并让他们显示在文档浏览器中。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10236">Host and automate your DocC documentation</a>：如何通过自己的服务器托管DocC，自动构建和分发DocC档案。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10167">Elevate your DocC documentation in Xcode</a>：介绍写文档的最佳实践。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10235">Build interactive tutorials using DocC</a>：编写交互教程。</li>
</ul>
<p>其它感兴趣的 Session：</p>
<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10253/">Write a DSL in Swift using result builders</a>：使用 result builders 来创建DSL，是代码更容易阅读和维护。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10076/">Create 3D models with Object Capture</a>：捕获现实对象，生成3D模型。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10097/">What’s new in SF Symbols</a>：SF Symbols的更新。介绍如何让自定义符号支持单色、分层、调色板和多色渲染模式。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10288/">Explore the SF Symbols 3 app</a>：SF Symbols应用程序的更新。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10250/">Create custom symbols</a>：创建自定义symbols。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10181/">Ultimate application performance survival guide</a>：关于性能优化的话题，内容包括性能相关工具、指标和范式。会涉及到Instruments、XCTest、MetricKit等等技术和工具。iOS 15的动态链接器做了优化能够启动提速并减少Swift二进制大小。可以参看<a href="https://medium.com/geekculture/how-ios-15-makes-your-app-launch-faster-51cf0aa6c520">这篇文章</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10211/">Symbolication: Beyond the basics</a>：介绍符号化的过程。</li>
<li><a href="https://developer.apple.com/videos/play/wwdc2021/10256/">Meet the Swift Algorithms and Collections packages</a>：讲的通俗易懂。</li>
</ul>
<h3 id="Swift-的一些更新"><a href="#Swift-的一些更新" class="headerlink" title="Swift 的一些更新"></a>Swift 的一些更新</h3><p>Paul Hudson 的这篇<a href="https://www.hackingwithswift.com/articles/233/whats-new-in-swift-5-5">What’s new in Swift 5.5?</a> 已经把这些更新说的非常详细了，每个更新点都有对应的例子可以试。今年苹果公司推出 AttributedString 用来替代 OC 时代的 NSAttributedString。AttributedString 是值类型，可以直接在 SwiftUI 的 Text 里使用。AttributedString 还支持简单的 Markdown 语法，Markdown 单行没问题，多行功能受限。</p>
<p>DocC 是通过 Xcode 编译后生成的文档，使用 Product -&gt; Build Documentation 就会生成DocC。在函数接口代码上使用 Shift+Cmd+A 快捷键就会创建文档模板，有参数和返回值的话也会将其提取出来，包括参数类型等，并生成标准文档格式，方便你进行内容编写。基本 Markdown 语法是支持的。详细的介绍可以看前面列出的官方 Session，或者看这篇文章<a href="https://www.hackingwithswift.com/articles/238/how-to-document-your-project-with-docc">How to document your project with DocC</a>。</p>
<h3 id="今年重头戏-Swift-Concurrency"><a href="#今年重头戏-Swift-Concurrency" class="headerlink" title="今年重头戏 Swift Concurrency"></a>今年重头戏 Swift Concurrency</h3><p>ABI 稳定后，Swift 的核心团队可以开始关注 Swift 语言一直缺失的原生并发能力了。最初是由<a href="https://twitter.com/clattner_llvm">Chris Lattner</a>在17年发的<a href="https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782">Swift并发宣言</a>，从此开阔了大家的眼界。后来 Swift Evolution 社区讨论了十几个提案，几十个方案，以及几百页的设计文件，做了大量的改进，社区中用户积极的参与反馈，Chris 也一直在 Evolution 中积极的参与设计。</p>
<p>Swift Concurrency 的实现用了<a href="https://llvm.org/docs/Coroutines.html">LLVM的协程</a>把 async/await 函数转换为基于回调的代码，这个过程发生在编译后期，这个阶段你的代码都没法辨识了。异步的函数被实现为 coroutines，在每次异步调用时，函数被分割成可调用的函数部分和后面恢复的部分。coroutine 拆分的过程发生在生成LLVM IR阶段。Swift使用了哪些带有自定义调用约定的函数保证尾部调用，并专门为Swift进行了调整。</p>
<p>Swift Concurrency 不是建立在 GCD 上，而是使用的一个全新的线程池。GCD 中启动队列工作会很快在提起线程，一个队列阻塞了线程，就会生成一个新线程。基于这种机制 GCD 线程数很容易比 CPU 核心数量多，线程多了，线程就会有大量的调度开销，大量的上下文切换，会使 CPU 运行效率降低。而 Swift Concurrency 的线程数量不会超过 CPU 内核，将上下文切换放到同一个线程中去做。为了实现线程不被阻塞，需要通过语言特性来做。做法是，每个线程都有一个堆栈记录函数调用情况，一个函数占一个帧。函数返回后，这个函数所占的帧就会从堆栈弹出。await 的 async 函数被作为异步帧保存在堆上等待恢复，而不阻碍其它函数入栈执行。在 await 后运行的代码叫 continuation，continuation 会在要恢复时放回到线程的堆栈里。异步帧会根据需要放回栈上。在一个异步函数中调用同步代码将添加帧到线程的堆栈中。这样线程就能够一直向前跑，而不用创建更多线程减少调度。</p>
<p>Douglas 在 Swift 论坛里发的 Swift Concurrency 下个版本的规划贴 <a href="https://forums.swift.org/t/concurrency-in-swift-5-and-6/49337">Concurrency in Swift 5 and 6</a>，论坛里还有一个帖子是专门用来<a href="https://forums.swift.org/t/swift-concurrency-feedback-wanted/49336">征集Swift Concurrency意见</a>的，帖子本身列出了 Swift Concurrency 相关的所有提案，也提出欢迎有新提案发出来，除了这些提案可以看外，帖子回复目前已经过百，非常热闹，可以看出大家对 Swift Concurrency 的关注度相当的高。</p>
<p>非常多的人参与了 Swift Concurrency 才使其看起来和用起来那么简单。Doug Gregor 在参与 John Sundell 的播客后，发了很多条推聊 Swift Concurrency，可以看到参与的人非常多，可见背后付出的努力有多大。下面我汇总了 Doug Gregor 在推上发的一些信息，你通过这些信息也可以了解 Swift Concurrency 幕后信息，所做的事和负责的人。</p>
<p><a href="https://twitter.com/pathofshrines">@pathofshrines</a>是 Swift Concurrency 整体架构师，包括低级别运行时和编译器相关细节。<a href="https://twitter.com/illian">@illian</a>是 async sequences、stream 和 Fundation 的负责人。<a href="https://twitter.com/optshiftk">@optshiftk</a>对 UI 和并发交互的极好的洞察力带来了很棒的 async 接口，<a href="https://twitter.com/phausler">@phausler</a>带来了 async sequences。Arnold Schwaighofer、<a href="https://twitter.com/neightchan">@neightchan</a>、<a href="https://twitter.com/typesanitizer">@typesanitizer</a>还有 Tim Northover 实现了 async calling convention。</p>
<p><a href="https://twitter.com/ktosopl">@ktosopl</a>有很深厚的 actor、分布式计算和 Swift-on-Server 经验，带来了 actor 系统。Erik Eckstein 为 async 函数和actors建立了关键的优化和功能。</p>
<p>SwiftUI是<a href="https://twitter.com/ricketson_">@ricketson_</a>和<a href="https://twitter.com/luka_bernardi">@luka_bernardi</a>完成的async接口。async I/O的接口是<a href="https://twitter.com/Catfish_Man">@Catfish_Man</a>完成的。<a href="https://twitter.com/slava_pestov">@slava_pestov</a>处理了 Swift 泛型问题，还指导其他人编译器实现的细节。async 重构工具是Ben Barham 做的。大量代码移植到 async 是由<a href="https://twitter.com/AirspeedSwift">@AirspeedSwift</a>领导，由 Angela Laar，Clack Cole，Nicole Jacques 和<a href="https://twitter.com/mishaldshah">@mishaldshah</a>共同完成的。</p>
<p><a href="https://twitter.com/lorentey">@lorentey</a>负责 Swift 接口的改进。<a href="https://twitter.com/jckarter">@jckarter</a>有着敏锐的语言设计洞察力，带来了语言设计经验和编译器及运行时实现技能。<a href="https://twitter.com/mikeash">@mikeash</a> 也参与了运行时开发中。操作系统的集成是<a href="https://twitter.com/rokhinip">@rokhinip</a>完成的，<a href="https://twitter.com/chimz">@chimz</a>提供了关于 Dispatch 和 OS 很好的建议，Pavel Yaskevich 和<br><a href="">@hollyborla</a>进行了并发所需要关键类型检查器的改进。<a href="https://twitter.com/kastiglione">@kastiglione</a>、Adrian Prantl和<a href="https://twitter.com/fred_riss">@fred_riss</a>实现了调试。<a href="https://twitter.com/etcwilde">@etcwilde</a>和<a href="https://twitter.com/call1cc">@call1cc</a>实现了语义模型中的重要部分。</p>
<p><a href="https://twitter.com/evonox">@evonox</a>负责了服务器Linux 的支持。<a href="https://twitter.com/compnerd">@compnerd</a>将 Swift Concurrency 移植到了 Windows。</p>
<p>Swift Concurrency 模型简单，细节都被隐藏了，比 Kotlin 和 C++的 Coroutine 接口要简洁很多。比如 Task 接口形式就很简洁。Swift Concurrency 大体可分为 async/await、Async Sequences、结构化并发和  Actors。下面展开说下。</p>
<h4 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h4><p>通过类似 throws 语法的 async 来指定函数为异步函数，异步函数才能够使用 await，使用异步函数要用 await。await 修饰在 suspension point 时当前线程可以让给其它任务执行，而不用阻塞当前线程，等 await 后面的函数执行完成再回来继续执行，这里需要注意的是回来执行不一定是在离开时的线程上。async/await 提案是<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296</a>。如果想把现有的异步开发带到 async/await 世界，请使用 withCheckedThrowingContinuation。</p>
<p>async/await 还有一个非常明显的好处，就是不会再有[weak self] dance 了。</p>
<h4 id="Async-Sequences"><a href="#Async-Sequences" class="headerlink" title="Async Sequences"></a>Async Sequences</h4><p>AsyncSequence 的使用方式是 for-await-in 和 for-try-await-in，系统提供了一些接口，如下：</p>
<ul>
<li>FileHandle.standardInput.bytes.lines</li>
<li>URL.lines </li>
<li>URLSession.shared.data(from: URL)</li>
<li>let (localURL, _ ) = try await session.download(from: url) 下载和get请求数据区别是需要边请求边存储数据以减少内存占用</li>
<li>let (responseData, response) = try await session.upload(for: request, from: data)</li>
<li>URLSession.shared.bytes(from: URL)</li>
<li>NotificationCenter.default.notifications</li>
</ul>
<h4 id="结构化并发"><a href="#结构化并发" class="headerlink" title="结构化并发"></a>结构化并发</h4><p>使用这些接口可以一边接收数据一边进行显示，AsyncSequence 的提案是<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298</a>（Swift 5.5可用）。AsyncStream 是创建自己异步序列的最简单的方法，处理迭代、取消和缓冲。AsyncStream 正在路上，提案是<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md">SE-0314</a>。</p>
<p>Task 为一组并发任务创建一个运行环境，async let 可以让任务并发执行，结构化并发（Structured concurrency，提案在路上<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304</a>）withTaskGroup 中 group.async 可以将并发任务进行分组。</p>
<h4 id="Actors"><a href="#Actors" class="headerlink" title="Actors"></a>Actors</h4><p>我们写的程序会在进程中被拆成一个一个小指令，这些指令会在某刻会一个接一个同步的或者并发的执行。系统会用多个线程执行并行的任务，执行顺序是调度器来管理的，现代多核可以同时处理多个线程，当一个资源在多个线程上同时被更改时就会出问题。并发任务对数据资源操作容易造成数据竞争，以前需要手动放到串行队列、使用锁、调度屏障或 Atomics 的方式来避免。以前处理容易导致昂贵的上下文切换，过多线程容易导致线程爆炸，容易意外阻断线程导致后面代码没法执行，多任务相互的等待造成了死锁，block 和内存引用容易出错等等问题。</p>
<p>现在 Swift Concurrency 可以通过 actor 来创建一个区域，在这个区域会自动进行数据安全保护，保证一定时间只有一个线程访问里面数据，防止数据竞争。actor 内部对成员访问是同步的，成员默认是隔离的，actor 外部对 actor 内成员的访问只能是异步的，隐式同步以防止数据竞争。MainActor 继承自能确保全局唯一实例的 GlobalActor，保证任务在主线程执行，这样你就可以抛弃掉在你的 ViewModel 里写 DispatchQueue.main.async 了。</p>
<p>Actors 的概念通常被用于分布式计算，Actor 模型参看<a href="https://en.wikipedia.org/wiki/Actor_model">Wikipedia</a>里的详细解释，Swift 中的实现效果也非常的理想。Actors 的提案<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306</a>已在 Swift 5.5落实。</p>
<p>很多语言都支持 actors 还有 async/await，实现的方式也类似，actor 使用的不是锁，而是用的 async/await 这样能够在一个线程中切换上下文来避免线程空闲的线程模型。actor 还利用编译器，提前做会引起并发问题的检查。</p>
<p>actor 是遵循 Sendable 协议的，只有结构体和 final 类才能够遵循 Sendable，继承于 Sendable 协议的 Excutor 协议表示方法本身，SerialExecutor 表示以串行方式执行。actor 使用 C++写的，源码在<a href="https://github.com/apple/swift/blob/main/stdlib/public/Concurrency/Actor.cpp">这里</a>，可以看到 actor 主要是通过控制各个 job 执行的状态的管理器。job 执行优先级来自 Task 对象，排队时需要确保高优 job 先被执行。全局 Executor 用来为 job 排队，通知 actor 拥有或者放弃线程，实现在<a href="https://github.com/apple/swift/blob/main/stdlib/public/Concurrency/GlobalExecutor.cpp">这里</a>。由于等待而放弃当前线程让其他 actor 执行的 actor，在收到全局 Executor 创建一个新的 job 的通知，使其可以进入一个可能不同线程，这个过程就是并发模型中描述的 Actor Reentrancy。</p>
<h4 id="Swift-Concurrency相关提案集合"><a href="#Swift-Concurrency相关提案集合" class="headerlink" title="Swift Concurrency相关提案集合"></a>Swift Concurrency相关提案集合</h4><p>所有相关提案清单如下：</p>
<ul>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">SE-0296: Async/await</a> <a href="https://kemchenj.github.io/2021-03-06/">【译】SE-0296 Async/await</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0317-async-let.md">SE-0317: async let</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">SE-0300: Continuations for interfacing async tasks with synchronous code</a> <a href="https://kemchenj.github.io/2021-03-31/">【译】SE-0300 Continuation – 执行同步代码的异步任务接口</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0302-concurrent-value-and-concurrent-closures.md">SE-0302: Sendable and @Sendable closures</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md">SE-0298: Async/Await: Sequences</a> <a href="https://kemchenj.github.io/2021-03-10/">【译】SE-0298 Async/Await 序列</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md">SE-0304: Structured concurrency</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0306-actors.md">SE-0306: Actors</a> <a href="https://kemchenj.github.io/2021-04-25/">【译】SE-0306 Actors</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0313-actor-isolation-control.md">SE-0313: Improved control over actor isolation</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0297-concurrency-objc.md">SE-0297: Concurrency Interoperability with Objective-C</a> <a href="https://kemchenj.github.io/2021-03-07/">【译】SE-0297 Concurrency 与 Objective-C 的交互</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md">SE-0314: AsyncStream and AsyncThrowingStream</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0316-global-actors.md">SE-0316: Global actors</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0310-effectful-readonly-properties.md">SE-0310: Effectful read-only properties</a> </li>
<li><a href="https://github.com/apple/swift-evolution/blob/main/proposals/0311-task-locals.md">SE-0311: Task Local Values</a> </li>
<li><a href="https://forums.swift.org/t/support-custom-executors-in-swift-concurrency/44425">Custom Executors</a> </li>
</ul>
<h4 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h4><p>如果打算尝试 Swift Concurrency 的话，按照先后顺序，可以先看官方手册介绍文章<a href="https://docs.swift.org/swift-book/LanguageGuide/Concurrency.html">Concurrency</a>。再看<a href="https://developer.apple.com/videos/play/wwdc2021/10132/">Meet async/await in Swift</a>这个Session，了解背后原理看<a href="https://developer.apple.com/videos/play/wwdc2021/10134">Explore structured concurrency in Swift</a>。动手照着试示例代码，看Paul的<a href="https://www.hackingwithswift.com/quick-start/concurrency">Swift Concurrency by Example</a>这个系列。接着看<a href="https://developer.apple.com/videos/play/wwdc2021/10133">Protect mutable state with Swift actors</a>来了解 actors 怎么防止数据竞争。通过<a href="https://developer.apple.com/videos/play/wwdc2021/10019">Discover concurrency in SwiftUI</a>看 concurrency 如何在 SwiftUI 中使用，<a href="https://developer.apple.com/videos/play/wwdc2021/10095">Use async/await with URLSession</a>来看怎么在 URLSession 中使用 async/await。最后听听负责 Swift Concurrency 的 Doug Gregor 参加的一个<a href="https://www.swiftbysundell.com/podcast/99/">播客的访谈</a>，了解下 Swift Concurrency 背后的故事。</p>
<h4 id="Swift-Concurrency-和-Combine"><a href="#Swift-Concurrency-和-Combine" class="headerlink" title="Swift Concurrency 和 Combine"></a>Swift Concurrency 和 Combine</h4><p>由于 Swift Concurrency 的推出和大量的 Session 发布，特别是<a href="https://developer.apple.com/documentation/swift/asyncsequence/">AsyncSequence</a>的出现，以及正在路上的<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0314-async-stream.md">AsyncStream、AsyncThrowingStream</a>和<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0300-continuation.md">continuation</a>提案（在Xcode 13.0 beta 3 AsyncStream 正式<a href="https://developer.apple.com/documentation/swift/asyncstream?changes=latest_beta">release</a>），这些越来越多和 Combine 功能重叠的特性出现在 Swift Concurrency 蓝图里时，大家开始猜测是否 Combine 会被 Swift Concurrency 替代。关于未来是 Swift Concurrency 还是 Combine，我的感觉是，Combine 更侧重在响应式编程上，而响应式编程并不是所有开发人员都会接受的，而 Swift Concurrency 是所有人都愿意接受的开发方式，从 Swift Concurrency 推出后开发者使用的数量和社区反应火热程度来看都比 Combine 要大。在苹果对 Combine 有下一步动作之前，我还是更偏向 Swift Concurrency。</p>
<p>见闻写到这里，把独特性比作骨架，真实感比作血肉，故事性和新意比作皮肤，你会发现没有写出自己的经历的话，就像进击巨人里的那些小巨人，即使有了完整的皮肤，但骨头架子不大是不会有开头踢破大门的只有骨架和血肉的巨型大巨人那么强大且震撼有力。</p>
<p>那么接下来我就描写一些我在 WWDC21 期间独特的一些经历。</p>
<h3 id="WWDC-playground直播活动"><a href="#WWDC-playground直播活动" class="headerlink" title="WWDC.playground直播活动"></a>WWDC.playground直播活动</h3><p>想想 WWDC21 过程中我还是有些经历，比如参加了苹果官方推荐的外围活动<a href="https://swift.gg/wwdc/">WWDC.playgournd by SwiftGG</a>。<br><img src="/uploads/my-little-idea-about-writing-technical-article/3.png" alt=""><br><img src="/uploads/my-little-idea-about-writing-technical-article/4.png" alt=""></p>
<p>连续看了5天活动直播，还参加了一天的 Live Coding 介绍 SwiftUI 的新特性。直播 Live Coding 准备的时间很少，而且以前我还没有现场当着几千人面写代码的经历，直播前一天晚上赶着通宵达旦看完了相关 Session，写了些代码样例测试，当天白天还开了一个很长的会，回家前和同事讨论一个技术问题时，我发现我嗓子还哑了。到家坐在桌前脚还抽筋了，你可想象到我当时内心有多崩溃。</p>
<p>在直播前，我还专门的给思琦先演练了一遍，其中在介绍 AsyncImage 处理失败、空白、成功还有默认情况时，编译器报错提示无法找到原因，还提示让我提交 bug 的错误信息。直播开始前一直没有找到原因，重新敲了一遍才解决，所以心里没底，直播开始时还一直担心这个问题会重现。直播时在写到这段时果然编译器错误又出现了，当时我脑袋一片空白，心中大呼救我。好在没多一会我突然发现先前一段演示的 placeholder 接口没有删掉，原因真的就是这个，删掉后就正常了，别提有多开心了。后面就轻松了很多。由于只有一天时间准备，很多内容准备了，当时一边敲代码一边说也漏说了很多，比如 AsyncImage 使用的是 URLSession，用的是 URLCache，还不能自定义缓存。Refreshable 只能用在 List 里。SwiftUI 和数组绑定的代码是可以兼容前一个版本的。</p>
<p>另外还有个 WWDC 期间很火的老系统UI挑战赛让我印象深刻，其中有个18岁小伙用 SwiftUI 开发了经典 iPhone4可用版本最火爆，Github 地址<a href="https://github.com/zzanehip/The-OldOS-Project">在这里</a>。</p>
<p>SwitUI 新特性太多了，直播没提到的还有 task modifier、separator、macOS 上的 table、Canvas、preview in landscape、@FocusState、more button 等等。当时直播有回放，可以在<a href="https://www.bilibili.com/video/BV1H44y167b7">这里看</a>。更完整详细介绍建议看前面提到 SwiftUI 相关 Session。</p>
<p>WWDC.playgournd 最后一天直播有场 WWDC21 学生挑战赛获奖者张紫怡的分享，她分享了怎样准备挑战赛的过程，通过详细的过程介绍，心得体会，还有思考，让大家了解到了她的热情和才华，而且分享的形式和效果非常有新意。最后一场的回放<a href="https://www.bilibili.com/video/BV1Fq4y1L7od">看这里</a>。看完这场后，我打算在19号 SwiftGG 和快手中学合办的 WWDC<T> 沙龙活动中使用一种不同的方式进行分享。原先打算的是使用先前写好的一个示例展示使用 SwiftUI 开发复杂应用如何快捷，同时介绍背后的技术。几天想来想去，反复推敲推翻，一直没有新思路。最后到了前一天，我有了个主意，可以使用 SwiftUI 来编写一个幻灯片程序来分享 SwiftUI 的内容啊，同时还能够分享这个幻灯片开发过程心得，这样才有独特性和真实感嘛。于是把准备了一年的内容都删了，就像当时启动那篇删得只剩一万字的文章一样，那篇文章发布前共删掉了四万个字。</p>
<h3 id="WWDC沙龙活动"><a href="#WWDC沙龙活动" class="headerlink" title="WWDC沙龙活动"></a>WWDC<T>沙龙活动</h3><p>可想法总是很容易，实践起来却又是另一种情况。我对自制幻灯片的初步设想是第一能够前后翻页展示内容，第二能够支持和 Keynote 不一样的动画效果和页面美化，第三能够直接在幻灯片上进行一些 SwiftUI 功能的交互演示。</p>
<p>接下来就要开始实际去做了，我先拿出上周用铅笔在 A4 纸画的人草图加工来丰富展示，发现加工的时间来不及了，虽然现在加工速度比以前快了，但是时间太紧，还要写幻灯片程序呢。SwiftUI 开发确实快，每个页面我都写成一个 View，标题、大纲和示意图的组合我做成了通用 View，通过传入不同标题、大纲数组和图片数组来展示不同页面的内容，定义一个 ObservableObject 的类 GlobalStateInfo 作为 View Model 来存储需要的状态数据，比如当前在哪页，当前文字颜色，当前页背景颜色等，每个 View 里使用 @EnvironmentObject 就可以去获取和设置 GlobalStateInfo 了。</p>
<p>关于为了传递数据，是直接调用 EnvironmentObject，还是通过子视图传递 ObservedObject，两种方式哪个更好，在 WWDC21 的 Digital Lounges 里，苹果工程师的回答是两者用途不同。当大部分 View 都需要用到一些通用数据时，推荐使用 EnvironmentObject，因为没有实际使用 ObservableObject 的 View 不会被与之相关的代码搞乱。如果模型不是基于 View 层次结构的对象图，使用 ObservedObject。另外还有个 Digital Lounges 的问题，是问怎么从旧的 AppDelegate/SceneDelegate 生命周期转换到新的 SwiftUI 2 生命周期。苹果工程师说可以使用 UIApplicationDelegateAdaptor 属性包装器，SwiftUI 将实例化你的 UIApplicationDelegate 的一个实例，并以正常方式调用它。更详细的解答和其他的话题可以参看这篇<a href="https://roblack.github.io/WWDC21Lounges/">SwiftUI Lounge QAs</a>，内容都是 roblack 从 Digital Lounges 里摘出来的，WWDC21 那几天我也在 Digital Lounges（报名早）看大家和苹果工程师的互动，后来看别人说 Digital Lounges 的 SwiftUI 那场爆满，已经超负荷运转了，感觉苹果最近变得更开放了，很多苹果工程师都开通了 Twitter 账号在 WWDC 期间积极和大家互动。</p>
<p>为了使页面不单调，我打算每页大纲的颜色做些区分，发现11页每个都配一遍看效果时间太紧，于是我选择了一些背景色通过随机读取，每次看到的颜色都是不同的，由于都是一个一个手动选出来的，所以不同组合效果也不会太差。</p>
<p>现在前后翻页展示内容这个想法是完成了，这也是 SwiftUI 开发的优势，能够快速构建页面架子和简单的数据页面同步设置。但是第二个想法，完成起来就非常费时费力且不那么顺利了。</p>
<p>首先说下字体，系统默认字体很正式，以往我都是直接用 iPad 手写，但是这次时间紧没法一个字一个字的写了，所以我打算选择其它字体，View 的 .font 修改器可以选择其它字体，方法是 .font(Font.custom(“font-name”, size: 110))。如果直接在Finder里查看字体没法得到可用的字体名，需要使用 NSFontManager.shared.availableMembers 来获取可用字体名。</p>
<p>接下来是标题，以往做幻灯，经常讲到具体内容时，特别是细节时，容易让看的人忘记当前页主题是啥。如果标题太大，可展示内容就少了，及时这样，观看的人也容易忽视主题。因此，我打算把标题做成一个循环的动画，这样就可以在我展开说内容的时候，看的人即使走神了还能够注意到当前页主题。标题的动画主要是控制好动画的时间，不能太快，不然会过于吸引注意。</p>
<p>以前 keynote 的转场动画我基本都试过，每次来回都是那些，很难和其他人做出差异来。只能靠图和配色作区分。这次我利用每页的内容大纲进入效果来作为转场动画。我先将大纲列表放到 VStack 里，ForEach 里获取到下标，通过下标获取列表数组里的 Text View。之所有要得到下标而不是直接获取列表数组里的 Text View，其原因是还会将这个下标用在转场动画效果上，我希望大纲列表的内容是一个接一个进来的，需要这个下标值来做时间间隔。Animation 的效果使用的是 interpolatingSpring，我将 damping 参数设置为0.3，这样弹性效果更佳。列表内容进入的是 GeometryEffect 协议，用来替代 AnimatableModifier，通过 AnimatablePair 来设置移动位置新旧值。直接一个方块滑入略显单调，使用 CGAffineTransform 里的 c 参数可以设置将矩形进行变形，会有一种被拉进来的感觉。变形过程配合滑入动画再加上 interpolatingSpring 设置的弹性效果，会让转场更有动感。</p>
<p>并行执行的动画越丰富，转场感觉就会更好，我想着每页都做个不同的效果，使用 Shape 绘制一些图形做背景动画，这样会有新鲜感。当第一页和第二页弄完后已经天亮了，经过一个上午，下午就要分享了。我还没有困意，因为后面还有那么多页面没有做完区分转场的动画和配色，更别说 SwiftUI 功能的交互演示了。而且具体分享的内容我还没有整体串一遍逻辑。一天一夜完成这个项目时间还是太紧，当时想着要再能多一天时间就好了。2点开始分享，1点我在旁边一个小会议室把整个内容自己在心里试着说了一遍。分享内容包括了自制低版本兼容 AsyncImage 演示、SwiftUI 那些版本兼容问题、SwiftUI 背后关键技术简介、SwiftUI 生命周期、布局、Modifier、不透明返回类型、属性包装、Result Builder、Geometry、Preview用的技术。</p>
<p>其中 SwiftUI 内部运作的机制是每个 View 都有自己的 Identity，SwiftUI 会将给 State 和 StateObject 分配内存空间的 Storage 和 View 的 Identity 绑定起来，共存亡。当相同 Identity 的状态数据发生变化了或者和 View 依赖关系改变了，就会重新建立 View 和 RenderNode 的依赖关系，他们之间的关系是图结构，图结构可以降低依赖关系检查复杂度。最后渲染出来。总的来说 SwiftUI 运行原理有三个点最重要，Identifier、生命周期和依赖。视图的生命周期是 Identifier 来决定的，state 生命周期和视图的生命周期是相同的。在生命周期中，state 有变化的时候会做diff，diff和渲染效率提升是使用图型依赖结构，只渲染状态依赖的视图，如果按照 UIKit 那样的树形结构做diff，效率会特别差。</p>
<p>现在很多常用开源库都已经对SwiftUI做了适配，苹果公司自己的App，比如天气、相册、快捷指令、地图和相册都有用到SwiftUI。以下是SwiftUI用到的语法特性：</p>
<ul>
<li>ResultBuilder</li>
<li>ViewBuilder</li>
<li>Trailing Closure</li>
<li>Opaque Type</li>
<li>Inline</li>
<li>PropertyWrapper</li>
<li>KeyPath</li>
<li>DynamicMemberLookup</li>
</ul>
<p>如果你使用这些特性也能够再造一个兼容低版本的类似 SwiftUI 的框架。SwiftUI 最显现的 DSL 技术使用的就是 ResultBuilder 语法特性，Result Builder的提案<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md">SE-0289</a> 里有详细的描述，通过 Result Builder 下面的方法可以自定义出一个简洁的 DSL 出来，提高特定业务开发效率。</p>
<ul>
<li>buildBlock：构建基本语句的block组合结果。</li>
<li>buildExpression：可选，给表达式提供上下文类型信息。</li>
<li>buildOptional：对没有else的if语句支持。</li>
<li>buildEither：构建选择语句不同结果。通过条件结果折叠成一个结果，实现对if-else和switch语句的支持。</li>
<li>buildArray：将所有迭代结果合并成一个结果的方式实现对for…in语句的支持。</li>
<li>buildFinalResult：可选，可以调用顶层函数体的结果进行处理，产生最终的返回结果。</li>
<li>buildLimitedAvailability：会在if #available的block部分结果上调用，使result builder可以擦除类型信息。</li>
</ul>
<p>这次的 WWDC 还专门有个 Session 讲解了怎么用 Result Builder 来做 DSL，这个 Session 是 <a href="https://developer.apple.com/videos/play/wwdc2021/10253/">Write a DSL in Swift using result builders</a>。</p>
<p>Swift 视图返回的类型是不固定的，因此使用了 Swift 的不透明类型语法特性来进行支持，支持其返回带有大量泛型参数的庞大类型，这个类型中还包括了 Result Builder 中的 if 条件类型值，支持多分支类型。Opaque Types的提案在这里<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md">SE-0244</a>。</p>
<p>跟着视图后面的点语法是 modifier，每个 modifier 都会在视图树中新建一个层，因此 modifier 的写的先后顺序不同，效果是不一样的。</p>
<p>对于数据的监听和响应使用的是 swift 里的属性包装语法特性，属性包装的提案是<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0258-property-wrappers.md">SE-0258</a>。包装后数据的使用就方便了很多，对于不同属性包装类别的选择可以按照数据类型和应用场景来，对于值类型，如果是只读的数据可以什么都不加，如果数据是可读写的，使用@State，如果数据是需要在其他视图进行读写并自己也同步响应的，使用@Binding进行声明。对于对象类型的数据，指向对象的引用能发生变化要用@ObservedObject来声明，引用不可改变，那么就用@StateObject，使用环境传递对象用@EnvironmentObject。</p>
<p>完整的 WWDC<T>沙龙活动回放可以扫下图中的二维码：<br><img src="/uploads/my-little-idea-about-writing-technical-article/5.jpeg" alt=""></p>
<p><img src="/uploads/my-little-idea-about-writing-technical-article/6.JPG" alt=""><br><img src="/uploads/my-little-idea-about-writing-technical-article/7.jpeg" alt=""></p>
<p>下面是当时现场演示的部分幻灯片，动画的效果可以看上面的视频回放：</p>
<p><img src="/uploads/my-little-idea-about-writing-technical-article/8.PNG" alt=""><br><img src="/uploads/my-little-idea-about-writing-technical-article/9.PNG" alt=""><br><img src="/uploads/my-little-idea-about-writing-technical-article/10.PNG" alt=""><br><img src="/uploads/my-little-idea-about-writing-technical-article/11.PNG" alt=""><br><img src="/uploads/my-little-idea-about-writing-technical-article/12.PNG" alt=""><br><img src="/uploads/my-little-idea-about-writing-technical-article/13.PNG" alt=""><br><img src="/uploads/my-little-idea-about-writing-technical-article/14.PNG" alt=""><br><img src="/uploads/my-little-idea-about-writing-technical-article/15.PNG" alt=""><br><img src="/uploads/my-little-idea-about-writing-technical-article/16.PNG" alt=""><br><img src="/uploads/my-little-idea-about-writing-technical-article/17.PNG" alt=""><br><img src="/uploads/my-little-idea-about-writing-technical-article/18.PNG" alt=""></p>
<p>至此，这篇WWDC21见闻就写完了，详细描写自己WWDC21期间的一些独特经历和其中涉及相关技术，这样会让文章的独特性和真实感有很大的提升。</p>
<h2 id="对独特性和新意的思考"><a href="#对独特性和新意的思考" class="headerlink" title="对独特性和新意的思考"></a>对独特性和新意的思考</h2><p>通篇看下来，你是不是感觉到故事性和真实性其实是非常容易做到的。可以理解为只要努力些，时间再长些，这两点就能够完成，且能线性得到提高。只埋头做事情比较容易和舒适，但一直这么干，熵就会越来越多，不可逆的无用能量无法排除。而独特性意味着你会去体验适应新的环境，去获取实践新的认知，去结识新的朋友碰撞新的思路，使得自己体验到不同以往的经验。新意成功几率很低，非线性的，类似于基因突变产生的进化，这和努力无关。新意和独特性一样属于逆熵过程，不能忽视，大跨步的进步需要对传统的颠覆。新意会带来新的独特经历形成一个新的循环，不去尝试就不会有新的机会。</p>
<p>如果把本文当成一篇笔记，其间又融入了写作心得；如果把本文当做一篇写作心得，其间又穿插了大量笔记内容。你说这是不是也是一种新意呢。</p>
<p>对于新意，我印象最深的还是权力的游戏的血色婚礼，神来之笔，当Joffrey正最可气，少狼主正得势时，剧情完全打破传统，效果非常震撼。凡人皆有一死，凡事皆有可能，于是乎对后面剧情的推进更加期待了。而这个新意是建立在整个剧对真实感上的毫不含糊，包括了扎实的世界观构建，服饰道具高度的还原，完全把观众带入了故事中。另外作者对古历史的专研和记者经历的结合产生出的鲜明的人物刻画和独特的剧情设计也是本剧的骨架支撑，独特性的体现。</p>
<h2 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h2><p>今天我说的这些心得可以作为下笔“记录和分享”技术的一个契机，但是对于自己技术的成长，写文章并不是最终的目的，写作是你对自己思想的研究和开发。文章的上限是你的技术能力，文章只是让人了解你技术一种手段。因此更重要的是你做的技术是否有突破有演进，获得应用，并在产品中取得了好的效果。还有那些孤独着研究技术的时光，经历着一直努力着奋斗着却一直不被看见，得不到认同，也没有结果的岁月，还能够一直被自己的热情感动而不放弃去取得一点点进步带来的满足感。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;非常感谢大家抽出生命中宝贵的一段时间来听我接下来的一大段关于写文章那些事的唠叨。写文章的好处看看&lt;a href=&quot;https://movie
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>深入剖析Auto Layout的幻灯片</title>
    <link href="http://ming1016.github.io/2021/07/13/deeply-analyse-autolayout-slides/"/>
    <id>http://ming1016.github.io/2021/07/13/deeply-analyse-autolayout-slides/</id>
    <published>2021-07-13T06:01:22.000Z</published>
    <updated>2021-07-13T06:10:00.107Z</updated>
    
    <content type="html"><![CDATA[<p>在2015年SegmentFault D-Day活动上分享用的幻灯片，发现以前没有发到博客中，现在补上。</p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/1.png" alt=""></p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/2.png" alt=""></p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/3.png" alt=""></p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/4.png" alt=""></p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/5.png" alt=""></p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/6.png" alt=""></p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/7.png" alt=""></p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/8.png" alt=""></p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/9.png" alt=""></p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/10.png" alt=""></p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/11.png" alt=""></p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/12.png" alt=""></p>
<p><img src="/uploads/deeply-analyse-autolayout-slides/13.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在2015年SegmentFault D-Day活动上分享用的幻灯片，发现以前没有发到博客中，现在补上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/deeply-analyse-autolayout-slides/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;im
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Autolayout" scheme="http://ming1016.github.io/tags/Autolayout/"/>
    
  </entry>
  
  <entry>
    <title>WWDC 2021 Day1 笔记</title>
    <link href="http://ming1016.github.io/2021/06/08/wwdc2021-day1-note/"/>
    <id>http://ming1016.github.io/2021/06/08/wwdc2021-day1-note/</id>
    <published>2021-06-08T08:54:01.000Z</published>
    <updated>2021-06-08T09:59:16.183Z</updated>
    
    <content type="html"><![CDATA[<p>WWDC开始了，一周时间会有大量Session可学习，这个页面<a href="https://github.com/twostraws/wwdc">https://github.com/twostraws/wwdc</a> 收集了来自社区的各种WWDC活动、新闻和教程的链接，随着WWDC的进行，页面内容会不断更新，去年2020年的汇总页在这里<a href="https://github.com/twostraws/wwdc/blob/3d3b093218af06465b6b268b23e13e2ad6e2d9f8/README.md">https://github.com/twostraws/wwdc/blob/3d3b093218af06465b6b268b23e13e2ad6e2d9f8/README.md</a> 。Apple官方收集的开发者组织活动页面是<a href="https://developer.apple.com/wwdc21/beyond-wwdc/">https://developer.apple.com/wwdc21/beyond-wwdc/</a> ，其中有SwiftGG翻译组组织的活动，介绍页<a href="https://swift.gg/wwdc/">https://swift.gg/wwdc/</a> ，会在本周每晚8点线上直播交流WWDC21中关注度高的话题以及live coding展示热点技术，嘉宾有喵神、故胤道长、mmoaay、61、钟颖、周楷雯等。</p>
<p><a href="https://www.wwdcnotes.com/">https://www.wwdcnotes.com/</a> 这是一些WWDC的笔记（比看视频快）汇总，可以订阅他的RSS，还在更新中</p>
<p>下载WWDC2021高清Session视频脚本：<a href="https://github.com/dmthomas/AppleVideoDownloadScripts">https://github.com/dmthomas/AppleVideoDownloadScripts</a></p>
<h2 id="一些关注点收集"><a href="#一些关注点收集" class="headerlink" title="一些关注点收集"></a>一些关注点收集</h2><ul>
<li>SharePlay（使用Group Activities框架）同步共享设备上App的操作和播放 </li>
<li>FaceTime on Web </li>
<li>Live Text（看讲座时可以直接拍照拷贝代码了，iPhoneX below not support） </li>
<li>iPadOS 多任务感觉更难用了 </li>
<li>Notes: Tag browser </li>
<li>Quick Note（方便） </li>
<li>Swift Playgrounds able to build apps（SwiftUI only）（Let’s try to build and upload App on iPad） </li>
<li>iCloud+ hides ip and location ==? VPN（VPN apps:”Shit”） </li>
<li>Craig drove Apple Car? </li>
<li>Universal Control （just support M1） </li>
<li>ShortCuts for Mac </li>
<li>Object Capture（Dream comes true） </li>
<li>Actor（Apple SDK会大量使用，<a href="/MainActor">@MainActor </a> 属性包装 in UIKit，BUT，Swift Concurrency requires a deployment target of macOS 12, iOS 15, tvOS 15, and watchOS 8 or newer. :( Damn that’s sad）  </li>
<li>A/B testing in App Store </li>
<li>Xcode Cloud（not in 99$，Bitrise die?）多设备云测试（截图）。自建的构建流程可以从中借鉴。 </li>
<li>TestFlight for the Mac </li>
<li>Xcode 13 has Vim mode </li>
<li>Xcode 13 一些重要优化和新功能： <ul>
<li>Smarter Swift Code Completion</li>
<li>Faster Swift Builds</li>
<li>Swift Documentation Compiler</li>
</ul>
</li>
<li>To build documentation for your Swift framework or package, choose Product &gt; Build Documentation </li>
<li>SwiftUI gains more control over lower-level drawing primitives with the new Canvas API. </li>
<li>SwiftUI AsyncImage <a href="https://developer.apple.com/documentation/swiftui/asyncimage">https://developer.apple.com/documentation/swiftui/asyncimage</a> </li>
<li><p>List has gained a lot of new capabilities this year: </p>
<ul>
<li>Swipe Actions <a href="https://developer.apple.com/documentation/swiftui/texteditor/swipeactions(edge:allowsfullswipe:content:">https://developer.apple.com/documentation/swiftui/texteditor/swipeactions(edge:allowsfullswipe:content:)?changes=latest_minor</a>?changes=latest_minor)</li>
<li>Pull-to-refresh (with .refreshable(action:)) （just work with List, not scroll view, bug?） <a href="https://developer.apple.com/documentation/swiftui/texteditor/refreshable(action:">https://developer.apple.com/documentation/swiftui/texteditor/refreshable(action:)?changes=latest_minor</a>?changes=latest_minor)</li>
<li>Separator customization</li>
</ul>
</li>
<li><p>SwiftUI has a new, pretty cool, <strong>debugging</strong> utility to help you understand what is causing a view to be reevaluated. Call <code>Self._printChanges()</code> inside the body of a view to print out the changes that have triggered the view update. </p>
</li>
<li>SwiftUI：Map、Photo、ShortCuts、Weather、Apple Pay、Find Mine(WatchOS) </li>
<li>SF Symbols update <a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/">https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/</a> </li>
<li>AttributedString：support Markdown syntax，init(markdown:options:baseURL:) （you can delete your hand-rolled markdown parser） <a href="https://developer.apple.com/documentation/foundation/attributedstring">https://developer.apple.com/documentation/foundation/attributedstring</a> </li>
<li>HTTP analyzer in Instruments, intriguing（Charles？） </li>
<li>Surge works fine on the iOS 15 beta 1. </li>
<li>StoreKit 2 APIs Provide Customer Support </li>
<li>New ⌘+Shift+G in Finder </li>
<li>macOS 12 Beta 上微信会崩 </li>
<li>iOS 15 Beta 非常流畅，九宫格键盘好用了 </li>
<li>UIButton support multiple lines of text </li>
<li>Selective Shader Debugger </li>
<li>Screen Time API 家庭控制，做限制 </li>
</ul>
<h2 id="一些SwiftUI相关Session"><a href="#一些SwiftUI相关Session" class="headerlink" title="一些SwiftUI相关Session"></a>一些SwiftUI相关Session</h2><ul>
<li>Write a DSL in Swift using result builders <a href="https://developer.apple.com/videos/play/wwdc2021/10253/">https://developer.apple.com/videos/play/wwdc2021/10253/</a></li>
<li>Demystify SwiftUI <a href="https://developer.apple.com/videos/play/wwdc2021/10022/">https://developer.apple.com/videos/play/wwdc2021/10022/</a></li>
<li>Discover concurrency in SwiftUI <a href="https://developer.apple.com/videos/play/wwdc2021/10019/">https://developer.apple.com/videos/play/wwdc2021/10019/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WWDC开始了，一周时间会有大量Session可学习，这个页面&lt;a href=&quot;https://github.com/twostraws/wwdc&quot;&gt;https://github.com/twostraws/wwdc&lt;/a&gt; 收集了来自社区的各种WWDC活动、新闻和教程的链
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>A站 的 Swift 实践</title>
    <link href="http://ming1016.github.io/2021/05/22/acfun-swift-practice/"/>
    <id>http://ming1016.github.io/2021/05/22/acfun-swift-practice/</id>
    <published>2021-05-22T10:16:12.000Z</published>
    <updated>2021-06-05T12:38:59.371Z</updated>
    
    <content type="html"><![CDATA[<p>文章已发在快手大前端公众号，欢迎关注，文章地址如下：</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s/rUZ8RwhWf4DWAa5YHHynsQ">A站 的 Swift 实践 —— 上篇</a></li>
<li><a href="https://mp.weixin.qq.com/s/EIPHLdxBMb5MiRDDfxzJtA">A站 的 Swift 实践 —— 下篇</a></li>
</ul>
<p>新文章写得贼累。完美错过了一览祖国大好人海的机会，TIANROAST🦔咖啡也没喝成，新买Switch怪物猎人崛起也仅限于炎火村。如果喜欢的话，求转发、“在看”和一个大大的赞。</p>
<p>下面是正文内容，我转到博客里来。</p>
<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p><img src="/uploads/acfun-swift-practice/01.png" alt=""></p>
<p>AcFun俗称为“A站”，作为一款二次元内容社区产品，以“认真你就输了”为文化导向，倡导轻松欢快的亚文化。AcFun涵盖了中长视频，小视频，番剧，文章等众多内容，支撑这些内容的大部分功能都选择了用Swift开发，早在2019年，AcFun的iOS技术团队就已将Swift作为AcFun app和水母app的开发首选语言。Swift的出现为用户提供了更稳定的使用体验和更快的产品更新节奏，同时也为研发工程师创造了更高效舒适的开发体验。Objective-C已成过去时，AcFun正全面拥抱Swift，驶入iOS开发快车道。</p>
<h3 id="苹果推出Swift的原因"><a href="#苹果推出Swift的原因" class="headerlink" title="苹果推出Swift的原因"></a>苹果推出Swift的原因</h3><p>谷歌作为苹果最大的竞争对手，除了Android上的Kotlin，还推出了Flutter和Fuchsia里在用的Dart语言，这些语言的口碑和易用性远高于苹果的Objective-C（后面简称OC）。OC历史久远，是C语言的超集，因此其发展受C语言限制。在这样的背景下，大家都以为苹果会忽视其它新语言，但其实苹果对于那些新语言特性垂涎已久，将想法施于行动的是当时还在苹果的<em> Chris Lattner</em>。<em>Chris</em>是狂热的编译器和编程语言爱好者，C、C++、OC语言编译器LLVM的创造者，在LLVM开发过程中，Chris对类C语言有着很多不满意的地方，比如预处理器、Trigraphs还有多年积累的奇怪东西。</p>
<p>为了能够兼顾类似React一样的编程范式和具备Java等正流行的语言的优秀特性，Swift经历了长期的ABI稳定和语言特性迭代增加的过程，最终推出了能和JSX声明式UI匹敌的Result Builders，并且通过SwiftUI和Combine这种能极大提升开发效率的框架让开发者收获了惊喜。</p>
<p>可能是Swift的ABI稳定得太晚，不止各大APP里已经积累了大量的OC库和业务代码，苹果系统里的OC占比也依然很高，<a href="https://blog.timac.org/2020/1019-evolution-of-the-programming-languages-from-iphone-os-to-ios-14/"><em>博客《Evolution of the programming languages from iPhone OS 1.0 to iOS 14》 </em></a>统计了 iOS 历史版本 OC 占比，从文章中可以看到最近的iOS 14版本里OC占比高达88%，C和C++主要用于音视频、电话、网络等比较基础的模块，其占比相对稳定，特别是C并没有明显增加。不过在最近几个版本中，Swift占比持续增高，iOS 14达到了8%，可以看出苹果正在使用Swift重构以前的库。</p>
<h3 id="苹果实际采取的行动"><a href="#苹果实际采取的行动" class="headerlink" title="苹果实际采取的行动"></a>苹果实际采取的行动</h3><p>为了让广大开发者能够用上更方便安全的Swift，苹果采取了一系列实际行动。比如不再给OC新加接口，而是用Swift替换SDK，WWDC17之后就已经看不到OC的例子了，苹果主推的一些前沿技术，比如AR、AI、Health等，在新版里也都只有Swift版本。所以，在未来的发展中，企业不考虑Swift或是缺少Swift人才，都将会影响到新技术的引入。</p>
<p>另外，苹果的RealityKit、CareKit、Create ML、System、WidgetKit、CryptoKit、Combine、SwiftUI等框架在与OC混编时都非常困难，从这些方面可以看出，苹果所有新开发的框架都在避免和OC产生关系，甚至自WWDC2020起新增加的App Widget只能用SwiftUI开发。</p>
<p>对于苹果一系列的行动，社区与之对应的反应是没有热情去回答OC的Bug了，因为有了更好的追求。OC三方库作者也没有维护的意愿，更新周期比Swift长很多，比如大家都知道的OC网络库AFNetworking，最新版本更新用了2年多时间，而该作者用Swift开发的对应的网络库Alamofire，更新频率接近半个月，作者对Swift的热情可见一斑。</p>
<p>iOS开发首选语言也是Swift，以后可能会面临OC工程师后继无人的局面，物以稀为贵，OC开发者的成本也会大增。使用Swift相关技术栈的团队在吸引人才方面也存在一定优势，AcFun的工程师田赛同学此前选择了快手，而拒绝了另外一家公司的offer，一个重要因素就是AcFun可以使用Swift开发。AcFun的iOS开发工程师关旭航说：“起初我们团队在业务开发中探索Swift时，对Swift不够熟悉，并不敢主动尝试使用，通过组内的培训以及业余时间的学习，我对这门语言越来越感兴趣，看到其他同学写的Swift代码既简洁又易懂，我也慢慢开始尝试使用，现在我已经不想写Objective-C了”。</p>
<p>按照目前这个趋势，使用Swift势在必行。</p>
<h3 id="Swift在AcFun的演进"><a href="#Swift在AcFun的演进" class="headerlink" title="Swift在AcFun的演进"></a>Swift在AcFun的演进</h3><p>2019年AcFun完成了Swift的调研和初期基础设施建设，团队Swift培训以及业务的试点。在Swift调研探索过程中，AcFun开发同学体验到了Swift的优雅、精简以及安全，也经历混编构建时间长和代码补全慢等问题。其中构建问题只要遵循官方Module的最佳实践就可以规避，代码补全问题在Xcode12中得到了很好的改善。2020年上半年AcFun开始了混编工程优化、组件化以及二进制化建设，借LLVM Module抹平模块API在语言上的差异，基础库进行了Module化问题修复，并基于主站二进制化方案，完善了对Swift混编的支持。目前二进制化率为80%，约50%的组件完成了LLVM Module化，构建速度提升了60%以上。</p>
<p>AcFun 当前的 Swift &amp; OC 混编架构如下图所示。Infra层包含自研基础库、快手系中台SDK以及第三方库。Business Support层为各业务Feature提供通用业务支撑。Business Modules层包含当前已完成解耦和Module化的业务模块，模块之间通过依赖注入容器和路由进行通信。当前Main Target中仍然存在尚未解耦的混编代码，OC 和 Swift 之间通过桥接进行交互，另外有一些尚未Module化的OC基础库仍然需要通过Bridging Header桥接给Swift使用。这些桥接是影响编译时间以及代码补全速度的主要因素。</p>
<p><img src="/uploads/acfun-swift-practice/02.png" alt=""></p>
<p>随着架构的演进和组件化的推进，未来理想目标架构愿景如下图所示。Infra 和 Business Support 层为业务提供更完整的基础和通用业务支撑，业务模块全面解耦、Module化和二进制化，组件均以Module的形式组织和聚合，Main Target 实现壳工程化。</p>
<p><img src="/uploads/acfun-swift-practice/03.png" alt=""></p>
<p>目前AcFun的Swift文件数占工程总数40%之多，崩溃率减少了52%。AcFun采用混编后，性能方面，比如启动时间、页面流畅度、内存、CPU/GPU负载等方面差别不大。AcFun的QA负责人邵国强不禁感叹：“AcFun的移动端研发同学开始探索Swift时，QA团队起初没有明显感知，但随着研发团队Swift建设的推进，发版频率也提速到单周以后，研发同学能持续高质量交付，真是太棒了。”</p>
<p>Swift的内存管理是通过严格的、确定性的引用计数来自动管理的，可以将内存的使用量降到最低，还可以避免垃圾收集在错误线程使用Finalizer，执行多次不能管理数据库句柄之类资源的问题。ARC的Retain和Release开销在垃圾收集里也会有，比如在存储一个对象属性时用Write Barrier。ARC的算法类似Go的Tricolor算法。垃圾回收还会移动和压缩对象，如果调用C代码，可能还会得到一个Dangling Pointer，比如JNI，就明确需要引入和维护对象，无形中增加了复杂度，还很容易出问题。</p>
<p>在atp播客205期节目中 <a href="https://atp.fm/205-chris-lattner-interview-transcript"><em>Episode 205: Chris Lattner Interview Transcript</em></a>，Chris Lattner 指出OC之所以不安全的原因是因为OC是基于C语言，有指针，有不完全初始化的变量，会数组越界，即使对工具链和编译器有完全的控制权，也无法很好地解决以上的问题，解决Dangling Pointer就需要解决生命周期问题，而C没有一个框架能解决，改成兼容方式进入系统也是行不通的。因此苹果团队经过思考，决定创建一门“安全”的编程语言，这种安全不止是指没有Bug，而是在保持安全的同时还能够保证高性能，进而推动整个编程模型前进。</p>
<p>Swift消除了整个类别的不安全代码。变量在使用前总是被初始化，数组和整数会被检查是否有溢出，内存会被自动管理，对内存的独占访问可以防止许多编程错误。</p>
<p>Swift有静态调度安全的特性，比C语言更安全，很多问题能在编译时提前发现。代码中发生内存溢出，编译器会发出诊断信息，比如常量中的内存溢出很难查。数组越界检查，还有函数返回可达性检测，确保返回值和函数定义的类型一致。</p>
<p>编译器中的类型安全性可以让问题更早暴露。例如Swift Optional的设计在编译期阻断了空值访问，又如利用范型类型推导在编译期提供约束，从而避免Unsafe Type Casting。水母的研发工程师赵赫在使用Swift过程中，发现代码中的很多问题和隐患都可以在编译期暴露出来，在大部分情况下代码只要能编译通过，运行效果就不会离预期有很大的偏差，这让他对其代码交付质量更加充满信心。</p>
<h3 id="Swift语言的演进"><a href="#Swift语言的演进" class="headerlink" title="Swift语言的演进"></a>Swift语言的演进</h3><p>Swift的演进比较稳定，并没有在初期版本一股脑把特性都加上，而是每个版本迭代增加特性。演进之路如下图所示：</p>
<p><img src="/uploads/acfun-swift-practice/04.png" alt=""></p>
<p>Swift第一个版本推出了基本语法，Swift2.0主要是将泛型和协议能力做了提升，并对Linux进行了支持，后端框架Vapor和Perfect也是在Swift2.0时出现的，Swift也是在这个版本开源的。Swift3.0出了Swift Package Manager，对标准库API进行了重新的设计。4.0 推出Codable协议和Key path。5.0终于ABI稳定，Swift运行时内置到了iOS12系统里。5.1版本推出了让大家感到苹果活力的SwiftUI和Combine，新增了一大堆围绕提升开发舒适度的Property Wrapper、Opaque Type等语言特性，随之，社区开始异常活跃起来，与之对应的技术文章大量输出。AcFun就使用了5.1版本的Property Wrapper包装了UserDefaults，Codable，RxSwift Relay等，业务开发过程中避免雷同代码的编写。</p>
<p>Swift 6的 <a href="https://forums.swift.org/t/on-the-road-to-swift-6/32862"><em>Roadmap</em></a><em> </em>表明了Swift下一步发展方向是优化Swift部署安装，比如LSP和包管理等；丰富开源生态，包括完善标准库，开发类似科学计算这样的新库；围绕开发体验的构建和代码补全提速、丰富诊断信息、稳定调试体验等；DSL能力提升；完善低级别系统编程和机器学习等重要领域的拓展；提供内存所有权和并发等主要语言特性的方案，要做到出色为止。</p>
<p>目前Swift这个项目的负责人叫 <a href="https://twitter.com/tkremenek"><em>Ted Kremenek</em></a>，斯坦福博士，他之前还是Rust的主力开发。在苹果工作的十年，一个人做了Clang的静态分析器，后面一直管理着Clang和Swift项目，向Chris汇报。Swift项目团队核心成员还有Dave Abrahams（已退出）、John McCall、Doug Gregor、Joe Groff、Saleem Abdulrasool（移植Swift到windows）、Tom Doron（创建SwiftNIO）等，他们的身影活跃在Github的Swift各个提案中。</p>
<p>回到我们身边，国内Swift用的情况怎么样？</p>
<p>一些耳熟能详的App，比如微信、淘宝、百度、支付宝、拼多多、京东、哔哩哔哩、优酷、小红书等都已经开始尝试使用Swift，这些App无一例外都采用了Swift和OC混编开发。由于国内业务竞争压力大，很难像国外公司Uber那样花大半年时间全部用Swift重构，因此如果要在现有工程基础上引入Swift开发，不可避开采用混编开发。很多App使用Swift混编，也是因为苹果对Widget功能开发语言设置了限制，即只能使用Swift，看来苹果公司这个策略是相当有效的。</p>
<h2 id="框架选择"><a href="#框架选择" class="headerlink" title="框架选择"></a>框架选择</h2><p>而正式进入混编开发前，需要先做开发框架的选型，我们先从架构演进开始说起。</p>
<h3 id="架构演进"><a href="#架构演进" class="headerlink" title="架构演进"></a>架构演进</h3><p>一般App经过多年发展，架构都会经过如下四个阶段：</p>
<p><img src="/uploads/acfun-swift-practice/05.png" alt=""></p>
<p>如图所示，App架构从单Module，MVC架构到几百个Module，无依赖，动态跳转。团队从小变大，如今App的架构更偏重高质量、稳定性和高可维护性。苹果公司也是顺应发展趋势，先后推出提高稳定性的Swift语言，而后推出提高可维护性的SwiftUI和Combine。</p>
<h3 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h3><p>对于一个基于UIKit的项目是没有必要全部用SwiftUI重写的，在UIKit里使用SwiftUI的视图非常容易，UIHostingController是UIViewController的子类，可以直接用在UIKit里，因此直接将SwiftUI视图加到UIHostingController中，就可以在UIKit里使用SwiftUI视图了。</p>
<p>SwiftUI的布局核心是 GeometryReader、View Preferences和Anchor Preferences。如下图所示：</p>
<p><img src="/uploads/acfun-swift-practice/06.png" alt=""></p>
<p>SwiftUI的数据流更适合Redux结构，如下图所示：</p>
<p><img src="/uploads/acfun-swift-practice/07.png" alt=""></p>
<p>如上图，Redux结构是真正的单向单数据源结构，易于分割，能充分利用SwiftUI内置的数据流Property Wrapper。UI组件干净、体量小、可复用并且无业务逻辑，因此开发时可以聚焦于UI代码。业务逻辑放在一起，所有业务逻辑和数据Model都在Reducer里。<a href="https://github.com/Dimillian/ACHNBrowserUI"><em>ACHNBrowserUI</em></a> 和 <a href="https://github.com/Dimillian/MovieSwiftUI"><em>MovieSwiftUI</em></a> 开源项目都是使用的Redux架构。最近比较瞩目的TCA（The Composable Architecture）也是类Redux/Elm的架构的框架，<a href="https://github.com/pointfreeco/swift-composable-architecture"><em>项目地址见</em></a>。</p>
<p>提到数据流就不得不说下苹果公司新出的Combine，对标的是RxSwift，由于是苹果公司官方的库，所以应该优先选择。不过和SwiftUI一样，这两个新库对APP支持最低的系统版本都要求是iOS13及以上。那么怎么能够提前用上SwiftUI和Combine呢？或者说现在使用什么库可以以相同接口方式暂时替换它们，又能在以后改为SwiftUI和Combine时成本最小化呢？</p>
<p>对于SwiftUI，AcFun自研了声明式UI Ysera，类似SwiftUI的接口，并且重构了AcFun里收藏模块列表视图和交互逻辑，如下图所示：</p>
<p><img src="/uploads/acfun-swift-practice/10.png" alt=""></p>
<p>通过上图可以看到，swift代码量相比较OC减少了65%以上，原先使用Objective-C实现的相同功能代码超过了1000行，而Swift重写只需要350行，对于AcFun的业务研发工程师而言，同样的需求实现代码比之前少了至少30%，面对单周迭代这样的节奏，团队也变得更从容。代码可读性增加了，后期功能迭代和维护更容易了，Swift让AcFun驶入了iOS开发生态的“快车道”。</p>
<p>SwiftUI全部都是基于Swift的各大可提高开发效率特性完成的，比如前面提到的，能够访问只给语言特性级别行为的Property Wrapper，通过Property Wrapper包装代码逻辑，来降低代码复杂度，除了SwiftUI和Combine里@开头的Property Wrapper外，Swift还自带类似<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0195-dynamic-member-lookup.md"><em>@dynamicMemberLookup</em></a> 和<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md"><em>@dynamicCallable</em></a> 这样重量级的Property Wrapper。还有<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md"><em>ResultBuilder</em></a><em> </em>这种能够简化语法的特性，有些如GraphQL、REST和Networking实际使用ResultBuilder的<a href="https://github.com/carson-katri/awesome-result-builders"><em>范例可以参考</em></a>。这些Swift的特性如果也能得到充分利用，即使不用SwiftUI也能使开发效率得到大幅提升。</p>
<p>网飞（Netflix）App已使用SwiftUI重构了登录界面，网飞增长团队移动负责人故胤道长记录了SwiftUI在网飞的落地过程，详细描述了<a href="https://mp.weixin.qq.com/s/oRPRCx78owLe3_gROYapCw"><em>SwiftUI的收益</em></a>。网飞能够直接使用SwiftUI得益于他们最低支持iOS 13系统。</p>
<p>不过如最低支持系统低于iOS 13，还有开源项目<a href="https://github.com/rakutentech/AltSwiftUI"><em>AltSwiftUI</em></a><em> </em>也实现了SwiftUI的语法和特性，能够向前兼容到iOS 11。</p>
<p>对于Combine，也有开源实现<a href="https://github.com/OpenCombine/OpenCombine"><em>OpenCombine</em></a>，目前都未完全实现所有特性。因此，具体在工程中使用还是需要了解Combine的核心原理。</p>
<h3 id="RxSwift"><a href="#RxSwift" class="headerlink" title="RxSwift"></a>RxSwift</h3><p>Combine的灵感来源于RxSwift。RxSwift的核心，这里有份实现了RxSwift核心逻辑的<a href="https://github.com/sergdort/HandMadeRx/tree/master/HandMadeRx.playground/Sources"><em>简版样例代码</em></a>，可以窥视其核心逻辑。整体流程如下图：</p>
<p><img src="/uploads/acfun-swift-practice/08.png" alt=""></p>
<p>如上图所示，RxSwift整体流程非常简单，主要就是订阅者和发布者之间进行订阅、发布、取消操作，订阅者会监听和处理这些事件。具体RxSwift数据传递关系如下图：</p>
<p><img src="/uploads/acfun-swift-practice/09.png" alt=""></p>
<p>上图中的Observable是发布者，Observer是订阅者。取消订阅是通过CompositeDisposable来进行管理，管理方式就是加个中间订阅者来决定是否发送事件给原订阅者。SinkDisposable是一个中间层用来把中间订阅者和原订阅者还有事件转发的逻辑放到一起。新增一个操作符就会新增一个SinkDisposable，比如新增filter操作符就会新增FilterObserver和FilterObservable，如果没有操作符就是AnoymousObserver和AnoymousObservable。订阅是通过Disposer类来管理的，会判断是否完成或者出错，执行Dispose方法。</p>
<h3 id="Combine"><a href="#Combine" class="headerlink" title="Combine"></a>Combine</h3><p>Combine的思路基本和RxSwift一样，只是接口命名不同，这里有份<a href="https://github.com/CombineCommunity/rxswift-to-combine-cheatsheet"><em>表格</em></a>，列出了Combine和RxSwift功能的对应关系，可以看出目前Combine相较于RxSwift还缺少很多能力，Combine毕竟新生儿，还需要时间成长。但是Combine有个特性是RxSwift没有的，那就是Backpressure，Backpressure可自定义策略控制Subscribe能够接收的数量。</p>
<p>除了SwiftUI和Combine，在Swift开发中还有哪些库是可以直接拿来使用的呢？这里有份 <a href="https://github.com/matteocrippa/awesome-swift"><em>Swift开源库的awesome</em></a>，在这里可以查缺补漏。AcFun主要使用了Swift开源库有<a href="https://github.com/apple/swift-protobuf"><em>Protobuf</em></a>,<em> </em><a href="https://github.com/ReactiveX/RxSwift"><em>RxSwift</em></a>, <a href="https://github.com/hyperoslo/Cache"><em>Cache</em></a>, <a href="https://github.com/slazyk/Observable-Swift"><em>Observable</em></a>。</p>
<p>以上，为《A站 的 Swift 实践》的上篇内容，下篇我们会继续详细介绍OC和Swift是怎么混编的，以及Swift的动态性。</p>
<h2 id="如何混编"><a href="#如何混编" class="headerlink" title="如何混编"></a>如何混编</h2><p>昨天刚刚结束的Google I/O让人想起了Kotlin在三年前曾经上过一次热搜，Google I/O官宣Kotlin替代Java，正式成为Android开发的首选语言。正所谓演进的力量，这一切都要归功于苹果公司在2014年推出的Swift替代了Objective-C，成为iOS乃至苹果全平台首选的开发语言，从而提高了iOS开发者的热情。上篇介绍了Swift的技术背景以及如何选择开发框架。下篇的内容会介绍大多数以OC为主体的工程如何与Swift共舞，以及如何利用Swift动态性解决工程难题。</p>
<p><img src="/uploads/acfun-swift-practice/11.png" alt=""></p>
<p>如果你的工程是OC开发的，要用上Swift就需要进行OC和Swift的混编开发。</p>
<p>然而，混编开发应该怎么开始呢？有没有什么前置条件？</p>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>混编本质上就是把OC语法的声明通过编译工具生成Swift语法的声明，这样Swift就可以通过生成的声明直接调用OC接口。反之，OC调用Swift接口也可以通过相同的方法，把Swift语法的声明生成OC语法的头文件。这些转换生成的编译工具都集成在开发工具Xcode里。</p>
<p>Xcode其实就是执行多命令行的工具，比如Clang、ld等等。Xcode、Project文件里包含了这些命令的参数和它们执行的顺序，也有所有待编译文件和它们的依赖关系。<a href="https://github.com/apple/swift-llbuild/"><em>llbuild</em></a>是低等级构建系统，根据Xcode Project里的配置按顺序执行命令。命令行工具的参数配置是在Xcode的Build Settings里进行设置的。如果是在同一个Project里混编，首先需要将Build Settings里Always Embed Swift Standard Libraries设置为YES，然后在桥接文件，也就是ProductName-Bridging-Header.h里导入需要暴露给Swift的OC类。如果Swift要调用的OC在不同Project里，则需要将OC的Project设置为Module，将Defines Module设为YES，再把Module里的头文件导入到OC Modulemap文件里的Umbrella Header里。</p>
<h3 id="如何设置CocoaPods"><a href="#如何设置CocoaPods" class="headerlink" title="如何设置CocoaPods"></a>如何设置CocoaPods</h3><p>Swift Pod的Podspec需要写明对OC Pod的依赖。在工程Podfile中，OC Pod后面要写 :modular_headers =&gt; true。开启Modular Header就是把Pod转换为Module。那CocoaPods究竟做了什么？执行  Pod Install – Verbose就可以看到，在生成Pod Targets时，CocoaPods会生成Module Map File和Umbrella Header。</p>
<p>每个工程设置的情况千奇百怪，而CocoaPods主要是通过自己的dsl配置来完成这些编译参数的设置，所以就需要先了解些混编设置的编译参数和概念：</p>
<ul>
<li>前面提到的Defines Module，需要设置为YES。</li>
<li>Module Map File表示 Module Map的路径。</li>
<li>Header Search Paths代表Module Map定义的OC头文件路径。</li>
<li>Product Module Name的默认设置和Target Name一样。</li>
<li>Framework Search Paths是设置依赖Framework的搜索路径。</li>
<li>Other C Flags可以用来配置依赖其它Module文件路径。</li>
<li>Other Swift Flags可以配置其Module Map文件路径。</li>
</ul>
<p>CocoaPods的主要组件有解析命令的<a href="https://github.com/CocoaPods/CLAide"><em>CLAide</em></a><em>、</em>用来解析Pod描述文件，比如Podfile、Podfile.lock和PodSpec文件的<a href="https://github.com/CocoaPods/Core"><em>Cocoapods-core</em></a><em>、</em>拉仓库代码和资源的<a href="https://github.com/CocoaPods/cocoapods-downloader"><em>Cocoapods-downloader</em></a><em>、</em>分析依赖的<a href="https://github.com/CocoaPods/Molinillo"><em>Molinillo</em></a><em>、</em>以及创建和编辑Xcode的.xcodeproj和.xcworkspace文件的<a href="https://github.com/CocoaPods/Xcodeproj"><em>Xcodeproj</em></a>。在执行了Pod Install以后，组件调用流程以及配置Module所处流程位置，如下图所示：</p>
<p><img src="/uploads/acfun-swift-practice/12.png" alt=""></p>
<p>按照上图的逻辑，Integrates这一步主要是用来配置Module的。先检查Targets，主要是对于包括Swift版本和Module依赖等问题的检查，然后再使用Xcodeproj组件做Module的工程配置。</p>
<p>完成以上工作后，如果我们想要在Swift里使用OC开发的库FMDB，就可以直接使用Import来导入，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> FMDB</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwiftTestClass</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> db:<span class="type">FMDB</span>.<span class="type">FMDatabase</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">init</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">self</span>.db <span class="operator">=</span> <span class="type">FMDB</span>.<span class="type">FMDatabase</span>(path: <span class="string">&quot;dbname&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;init ok&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，Import FMDB将FMDB的Module倒入进来后，接口依然能够直接使用Swift语法调用。</p>
<p>这里需要注意的是，Module依赖的Pod也需要是Module。因此改造时需要从底向上地改造成Module。另外，开启Module后，如果某个头文件在Umbrella Header里，那么其它包含这个头文件的Pod也需要打开Module。</p>
<h3 id="为什么要用Module？"><a href="#为什么要用Module？" class="headerlink" title="为什么要用Module？"></a>为什么要用Module？</h3><p>在Module被使用之前，开发者们需要对要导入的C语言编译器处理方式类头文件进行预处理，查找头文件里还导入了哪些头文件，递归直到找到全部头文件。但是，预处理的方式会遇到许多问题。其一，编译的复杂度高且耗时长，这是因为每个可编译的文件都会单独编译进行预处理，所以在预处理过程中递归查找导入头文件的工作会重复很多次，尤其是当包含关系很深的头文件被很多.m所导入的时候；其二，会出现宏定义冲突时需要重新排序以及和解依赖的问题等。</p>
<p>Module相对来说更加简易，它的头文件只需要解析一次，所以编译的复杂度会指数级降低，且编译器对Module的处理方式和C语言的预处理方式是完全不同的。编译器会将要编译的文件导入的头文件生成二进制格式，存储在Module Cache中，编译时如果碰到需要导入模块时，会先检查Module Cache，有对应的二进制文件就直接加载，没有才会解析，以此来保证Module解析只有一次。重新解析编译Module只会发生在头文件包含的任何头文件有变动，或者依赖另外一个模块有更新的时候。比如下面的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> &lt;FMDB/FMDatabase.h&gt;</span><br></pre></td></tr></table></figure>
<p>Clang会先从FMDB.framework的Headers目录里查找FMDatabase.h，再去FMDB.framework的Modules目录里查找module.modulemap文件，分析module.modulemap来判断FMDatabase.h是否是模块的一部分。Module Map用来定义Module和头文件之间的关系。FMDB.framework的module.modulemap的内容如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">framework <span class="class"><span class="keyword">module</span> <span class="title">FMDB</span> &#123;</span></span><br><span class="line">  umbrella header <span class="string">&quot;FMDB-umbrella.h&quot;</span></span><br><span class="line"></span><br><span class="line">  export *</span><br><span class="line">  <span class="class"><span class="keyword">module</span> * &#123; <span class="title">export</span> * &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>想要确定FMDatabase.h是否是Module的一部分就要看module.modulemap里的Umbrella Header文件，即FMDB-umbrella.h目录里是否包含了FMDatabase.h。在Headers目录里查看FMDB-umbrella.h文件，内容如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __OBJC__</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FOUNDATION_EXPORT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOUNDATION_EXPORT extern <span class="meta-string">&quot;C&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOUNDATION_EXPORT extern</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;FMDatabase.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;FMDatabaseAdditions.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;FMDatabasePool.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;FMDatabaseQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;FMDB.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;FMResultSet.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">FOUNDATION_EXPORT <span class="keyword">double</span> FMDBVersionNumber;</span><br><span class="line">FOUNDATION_EXPORT <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> FMDBVersionString[];</span><br></pre></td></tr></table></figure>
<p>上面代码中可以看到FMDatabase.h已经包含在文件中，因此Clang会将FMDB作为Module导入。Umbrella框架是对框架的一个封装，目的是隐藏各个框架之间的复杂依赖关系。构建完的Module会被存放到 ~/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/ 这个目录下面。</p>
<p>Clang编译单个OC文件是通过导入头文件方式进行的，而Swift没有头文件，所以Swift编译器Swiftc就需要先查找声明，再来生成接口。除此之外，Swiftc还会在Module Map文件和Umbrella Header文件中暴露的声明里查找OC声明。</p>
<p>如果工程要构建二进制库，需要支持Swift 5.1加的Module Stability和Library Evolution。</p>
<h3 id="Name-Mangling"><a href="#Name-Mangling" class="headerlink" title="Name Mangling"></a>Name Mangling</h3><p>找到OC声明后，Swiftc就需要进行Name Mangling。Name Mangling的作用在一方面是会像C++那样防止命名冲突，另外一方面是会对OC接口命名进行Swift风格化重命名。如果对Name Mangling命名的效果不满意，还可以回到OC源码中用NS_SWIFT_NAME重新定义想要在Swift使用的名字。</p>
<p>Swiftc的Name Mangling相比较于C和C++的Name Mangling会生成更多信息，比如下面的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">int2string</span>(<span class="params">number</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;<span class="subst">\(number)</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Swiftc编译后，使用nm -g查看生成如下的信息：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000000003de0 <span class="type">T</span> <span class="keyword">_</span><span class="variable">$s8demotest10int2string6numberSSSi_tF</span></span><br></pre></td></tr></table></figure>
<p>如上所示，信息中的$s表示全局，8demotest的demotest是Module名，8是Module名的长度。int2string是函数名，前面的10是类名长度，6number是参数名。SS表示参数类型是Int。Si表示的是String类型，_tF表示前面的Si是返回类型。</p>
<p>接下来对比一下Clang和Swiftc的编译过程，首先是Clang的编译过程，如下图：</p>
<p><img src="/uploads/acfun-swift-practice/13.png" alt=""></p>
<p>其次是Swift的编译过程，如下图：</p>
<p><img src="/uploads/acfun-swift-practice/14.png" alt=""></p>
<p>从两者的对比中可以看出，Swift编译过程缺少了头文件，因为它通过分组编译模糊了文件的概念，减少了很多重复查找声明的工作，这样不仅仅可以简化代码的编写，还可以给编译器更多的发挥空间。</p>
<p>至于OC怎样调用Swift接口，Swiftc会生成一个头文件，代码中有Public的声明会先按文件生成Swiftmodule，文件链接完会合并Swiftmodule，最后整体生成到一个头文件里。过程如下图所示：</p>
<p><img src="/uploads/acfun-swift-practice/15.png" alt=""></p>
<h3 id="为什么可以调OC接口？"><a href="#为什么可以调OC接口？" class="headerlink" title="为什么可以调OC接口？"></a>为什么可以调OC接口？</h3><p>Swift代码之所以可以调OC接口，是因为OC的接口会被编译器自动生成为Swift语法接口文件。在Xcode中，在OC头文件中点击左上角的 Related Items，选择Generated Interface，就可以选择查看生成的Swift版本接口文件。自动转换成的Swift接口文件可以直接供Swift调用，在转换过程中，编译器会将NSString这种OC的基础库转换成Swift里对应的String、Date等Swift库。OC的初始化方法也会被转换成Swift的构造器方法。错误处理也会被转换成Swift风格。下面是OC和Swift转换对应的类型：</p>
<p><img src="/uploads/acfun-swift-practice/16.png" alt=""></p>
<p>但是，仅仅只依赖于编译器的转换肯定是不够的，为了能让Swift调用得更加舒服，还需要对OC接口做些修改适配，比如将函数改成使用OC泛型，NSArray paths转成Swift是open var paths:[Any]；如果使用了泛型，将其改成 NSArray paths，那对应的Swift就是open var paths:[KSPath]，这种接口Swift使用起来会更方便有效。</p>
<p>苹果公司也提供了一些宏来帮助生成好用的Swift接口。</p>
<p>众所周知，OC之前一直缺少是非空的类型信息，可以通过 NS_ASSUME_NONNULL_BEGIN和NS_ASSUME_NONNULL_END包起来，这样就不用逐个去指定是非空了。NS_DESIGNATED_INITIALIZER宏可以将初始化设置为Designated，不加这个宏为Convenience。NS_SWIFT_NAME用来重命名Swift中使用的名称，NS_REFINED_FOR_SWIFT可以解决数据不一致的问题。</p>
<p>在iOS开发的过程中不可避免地需要访问 Core Foundation 类型，Core Fundation框架一旦导入到Swift混编环境中，它的类型就会被自动转为Swift类，Swift也会自动管理Annotated Core Foundation对象的内存，而不用像在OC中那样手动调用CFRetain、CFRelease或者CFAutorelease函数。Unannotated的对象会被包装在一个Unmanaged结构里，比如下面的代码：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFStringRef</span> showTwoString(<span class="built_in">CFStringRef</span> s1, <span class="built_in">CFStringRef</span> s2)</span><br></pre></td></tr></table></figure>
<p>转成Swift就是：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showTwoString</span>(<span class="keyword">_</span>: <span class="type">CFString</span>!, <span class="keyword">_</span>: <span class="type">CFString</span>!)</span> -&gt; <span class="type">Unmanaged</span>&lt;<span class="type">CFString</span>&gt;! &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上面代码所示，Core Fundation 类型的名字转换后会去掉后缀Ref，这是因为在Swift中所有类都是引用类型，Ref后缀比较多余。上面的Unmanaged结构有两个方法，一个是takeUnretainedValue()，另一个是takeRetainedValue()，这两个方法都是用来返回对象的原始未封装类型。如果对象之前没有Retain就用takeUnretainedValue()，已经Retain了，就用takeRetainedValue()。</p>
<p>在Swift里用getVaList(<em>:</em>:<em>:) 或withVaList(</em>:<em>:) 函数调用C的Variadic函数，比如 vasprintf(</em>:<em>:</em>:)。</p>
<p>调用指针参数的C函数，和Swift映射如下图：</p>
<p><img src="/uploads/acfun-swift-practice/17.png" alt=""></p>
<p>Swift也有无法调用的C接口，比如复杂的宏、C风格的Variadic参数，复杂的Array成员等。简单赋值的宏会被转换成Swift里的常量赋值，对于复杂的宏定义，编译器无法自动转换，如果还是想享受宏带来的好处，比如可以避免重复输入大量模板代码和避免类型检查约束，可以通过函数和泛型替换获取同样的好处。</p>
<p>Swift写出来的Module也可以给OC来调用。但是这样的调用会有很多限制，因为Swift中有很多类型是没法给OC用的，比如在Swift里定义的枚举、Swift定义的结构体、顶层定义的函数、全局变量、Typealiases、Nested类型，但是如果绕过这些类型，Swift也变得不那么Swift了。</p>
<p>即使是实现了混编，开发者们还需要面对许多难题。因为在OC时代的很多问题，例如Hook，无痕埋点等可以在OC运行时很方便地实现，而Swift却缺少天然的支持。下面介绍一下Swift的动态性，在官方完善前，我们应该怎么使用它。</p>
<h2 id="动态性"><a href="#动态性" class="headerlink" title="动态性"></a>动态性</h2><p>Swift在处理纯粹的Swift语言时是有自己的运行时的，但是对于“这个运行时是不提供访问的接口”的问题，Swift核心团队不是不做动态特性，而是因为如果想要支持动态特性就需要处理虚函数表（Virtual Method Table）的动态调用对SIL函数优化的影响，比如类没有被Override就会自动优化到静态调用，而这需要大量的时间。现阶段还有优先级更高的事情要做，比如并发模型、系统编程、静态分析支持类型状态等。因此，有人选择自己去实现一套Swift运行时，使得Swift代码具有动态特性。<a href="https://twitter.com/UINT_MIN"><em>Jordan Rose</em></a>实现了一个<a href="https://belkadan.com/source/ppc-swift-project/tree/refs/heads/dev:/stdlib/_Runtime"><em>精简版的Swift</em></a>运行时，更加严谨的运行时实现可以参考<a href="https://github.com/Azoy/Echo"><em>Echo</em></a>和<a href="https://github.com/wickwirew/Runtime"><em>Runtime</em></a>。</p>
<p>有人可能会问，SwiftUI的Preview不就是典型的在运行时替换方法的吗？他是怎么做到的呢？其实他使用的是@_dynamicReplacement属性，这是一个可以直接拿着用来进行方法替换的内部使用属性。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@_dynamicReplacement</span>(for: runSomething())</span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">_replaceRunSomething</span>()</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="string">&quot;replaced&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想要把上面的代码放到一个库中，并且在运行时加载这个库进行运行时方法替换可以通过这样的方式：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">runSomething()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> file <span class="operator">=</span> <span class="type">URL</span>(fileURLWithPath: <span class="string">&quot;/path/of/replaceLib.dylib&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> handle <span class="operator">=</span> dlopen(file.path, <span class="type">RTLD_NOW</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">fatalError</span>(<span class="string">&quot;oops dlopen failed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runSomething()</span><br></pre></td></tr></table></figure>
<p>除了这个方法以外，还有其他办法可以进行运行时的方法替换吗？</p>
<h3 id="值类型的方法替换"><a href="#值类型的方法替换" class="headerlink" title="值类型的方法替换"></a>值类型的方法替换</h3><p>通过 AnyClass和class_getSuperclass方法可以查看Swift对象的继承链，没有继承NSObject的Swift类，会有一个隐含的Super Class，这个类会带有一个生成的带前缀的SwiftObject，比如_TtCs12_SwiftObject。Swift是实现了NSObject的一个objc运行时的类型，这个类型不能和OC交互。但是如果继承了NSObject就可以和OC交互。</p>
<p>如果方法或属性声明了 @objc dynamic，那么就可以在运行时通过动态派发在Swift对象上去调用，方法是：使用AnyObject的Perform方法去执行NSSelectorFromString里传入的方法或属性名。</p>
<p>对于Swift里的值类型，比如Struct、Enum、Array等，可以遵循_ObjectiveCBridgeable协议，经过Type Casting（显示或隐式）转成对应的OC对象类型。举个例子，如果想要查看Array的类继承关系，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">classes</span>(<span class="params">of</span> <span class="params">cls</span>: <span class="type">AnyClass</span>)</span> -&gt; [<span class="type">AnyClass</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> clses:[<span class="type">AnyClass</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">var</span> cls: <span class="type">AnyClass</span>? <span class="operator">=</span> cls</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> _cls <span class="operator">=</span> cls &#123;</span><br><span class="line">        clses.append(_cls)</span><br><span class="line">        cls <span class="operator">=</span> class_getSuperclass(_cls)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clses</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arrays <span class="operator">=</span> [<span class="string">&quot;jone&quot;</span>, <span class="string">&quot;rose&quot;</span>, <span class="string">&quot;park&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(classes(of: object_getClass(arrays)<span class="operator">!</span>))</span><br><span class="line"><span class="comment">// [Swift.__SwiftDeferredNSArray, Swift.__SwiftNativeNSArrayWithContiguousStorage, Swift.__SwiftNativeNSArray, __SwiftNativeNSArrayBase, NSArray, NSObject]</span></span><br></pre></td></tr></table></figure>
<p>如上面代码所示，Swift的Array最终都是继承自NSObject，其它值类型也类似。可以看出，所有Swift类型都是可兼容objc运行时的。因此可以给这些值类型添加objc运行时方法，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: 为Swift类型提供动态派发的能力</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">structWithDynamic</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> str: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">show</span>(<span class="keyword">_</span> <span class="params">str</span>: <span class="type">String</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Say <span class="subst">\(str)</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">showDynamic</span>(<span class="keyword">_</span> <span class="params">obj</span>: <span class="type">AnyObject</span>, <span class="params">str</span>: <span class="type">String</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> show(str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> structValue <span class="operator">=</span> structWithDynamic(str: <span class="string">&quot;Hi!&quot;</span>)</span><br><span class="line"><span class="comment">// 为 structValue 添加Objc运行时方法</span></span><br><span class="line"><span class="keyword">let</span> block: <span class="keyword">@convention(block)</span>(<span class="type">AnyObject</span>, <span class="type">String</span>) -&gt; <span class="type">String</span> <span class="operator">=</span> structValue.showDynamic</span><br><span class="line"><span class="keyword">let</span> imp <span class="operator">=</span> imp_implementationWithBlock(<span class="built_in">unsafeBitCast</span>(block, to: <span class="type">AnyObject</span>.<span class="keyword">self</span>))</span><br><span class="line"><span class="keyword">let</span> dycls: <span class="type">AnyClass</span> <span class="operator">=</span> object_getClass(structValue)<span class="operator">!</span></span><br><span class="line">class_addMethod(dycls, <span class="type">NSSelectorFromString</span>(<span class="string">&quot;objcShow:&quot;</span>), imp, <span class="string">&quot;@24@0:8@16&quot;</span>)</span><br><span class="line"><span class="comment">// 使用Objc动态派发</span></span><br><span class="line"><span class="keyword">_</span> <span class="operator">=</span> (structValue <span class="keyword">as</span> <span class="type">AnyObject</span>).perform(<span class="type">NSSelectorFromString</span>(<span class="string">&quot;objcShow:&quot;</span>), with: <span class="type">String</span>(<span class="string">&quot;Bye!&quot;</span>))<span class="operator">!</span></span><br></pre></td></tr></table></figure>
<p>如上面代码所示，取出函数闭包可以通过 @convertion(block)转换成C函数Call Convention来调用，C函数也可以直接去执行这个指针。使用 Memory Dump 工具可以查看Swift函数内存结构，以及解析出符号信息DL_Info。Memory Dump工具有Mikeash的<a href="https://github.com/mikeash/memorydumper2"><em>memorydumper2</em></a>，源码解读可以参考<a href="https://www.mikeash.com/pyblog/friday-qa-2014-08-29-swift-memory-dumping.html"><em>Swift Memory Dumping</em></a>。逆向查看内存布局可以参考<a href="https://github.com/neil-wu/FridaHookSwiftAlamofire/blob/master/howto.md"><em>《初探Swift Runtime：使用Frida实现针对Alamofire的抓包工具》</em></a><br>__</p>
<h3 id="类的方法替换"><a href="#类的方法替换" class="headerlink" title="类的方法替换"></a>类的方法替换</h3><p>在运行时进行类方法的替换时，先将方法的Block以AnyObject类型传入imp_implementationWithBlock方法，返回一个imp，然后使用 class_getInstanceMethod 来获取实例的原方法，再通过 class_replaceMethod 进行方法替换，完整代码可以参看<a href="https://github.com/steipete/InterposeKit"><em>InterposeKit</em></a>，另外还有一个使用libffi的方法替换库，参见<a href="https://github.com/623637646/SwiftHook"><em>SwiftHook</em></a>。</p>
<p>另外，通过获取函数地址来改变函数指向位置的方法在Swift里实现比较困难，这是因为NSInvocation不可用了，因此需要通过C的函数来Hook Swift。在Swift的AnyClass中有类似OC的布局，记录了指向类和类成员函数的数据，这样就可以使用汇编来做函数指针替换的事情。思路是：保存寄存器，调用新函数，然后恢复寄存器，还原函数。具体可以参考项目<a href="https://github.com/johnno1962/SwiftTrace"><em>SwiftTrace</em></a>。</p>
<h3 id="插桩"><a href="#插桩" class="headerlink" title="插桩"></a>插桩</h3><p>使用编译插桩的方式也可以实现运行中的方法替换，关键步骤在于编译时，需要使用DYLD_INSERT_LIBRARIES进行拦截，CommandLine.arguments可以得到Swiftc的执行参数，以查找待编译的Swift文件。通过苹果公司的<a href="https://github.com/apple/swift-syntax"><em>SwiftSyntax</em></a>源代码解析、生成和转换的工具可以查出所有方法，并插入特定的方法替换逻辑代码。修改完通过-output-file-map来获取mach-o的地址去覆盖先前产物。使用self.originalImplementation(…)调用原始的实现作为闭包传入execute(arguments:originalImpl:)方法。</p>
<h3 id="ClassContextDescriptorBuilder"><a href="#ClassContextDescriptorBuilder" class="headerlink" title="ClassContextDescriptorBuilder"></a>ClassContextDescriptorBuilder</h3><p>Swift运行时给每个类型保留了Metadata信息。Metadata是由编译器静态生成的，有了Metadata的调试才能够发现类型的信息。Metadata偏移-1是Witness table 指针，Witness Table 提供分配、复制和销毁类型的值，Witness Table 还记录了类型大小、对齐、Stride等其它属性。Metadata偏移量0的地方是Kind字段，其描述了Metadata所描述的类型的种类，例如Class、Struct、Enum、Optional、Opaque、Tuple、Function、Protocol等类型。这些类型的Metadata具体详述可见<a href="https://github.com/apple/swift/blob/main/docs/ABI/TypeMetadata.rst"><em>Type Metadata 的官方文档</em></a>，代码描述可以在<a href="https://github.com/apple/swift/blob/3ed11125f3e987722c14c10ac9c1c7ec25a86c65/include/swift/ABI/MetadataValues.h"><em>include/swift/ABI/MetadataValues.h</em></a>里看到。比如在Metadata里类的方法数量会比实际代码里写的方法数量要多，那是因为编译器会自动生成一些方法，这些方法的种类在MethodDescriptorFlags类中Kind里描述了，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">class</span> <span class="title">Kind</span> </span>&#123;</span><br><span class="line">    <span class="type">Method</span>,</span><br><span class="line">    <span class="type">Init</span>,</span><br><span class="line">    <span class="type">Getter</span>,</span><br><span class="line">    <span class="type">Setter</span>,</span><br><span class="line">    <span class="type">ModifyCoroutine</span>,</span><br><span class="line">    <span class="type">ReadCoroutine</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>可以看到，Getter、Setter以及线程相关读写的ModifyCoroutine、ReadCoroutine类型都是自动生成的。</p>
<p>Class的内存结构生成方法可以在<a href="https://github.com/apple/swift/blob/3ed11125f3e987722c14c10ac9c1c7ec25a86c65/lib/IRGen/GenMeta.cpp"><em>/lib/IRGen/GenMeta.cpp</em></a>里找到：</p>
<ul>
<li>ClassContextDescriptorBuilder这个类是用来生成Class内存结构的，它继承于TypeContextDescriptorBuilderBase。</li>
<li>Enum、Struct等类型的内存结构Builder基类都是继承于ContextDescriptorBuilderBase的TypeContextDescriptorBuilderBase。</li>
<li>ContextDescriptorBuilderBase 是最基础的基类，Module、Extension、Anonymous、Protocol、Opaque Type、Generic都是继承于它。</li>
<li>Struct的Metadata和Enum的Metadata共享内存布局，Struct会多个指向Type Context Descriptor的指针。</li>
</ul>
<p>内存布局指的是使用一个Struct或者Tuple，根据每个字段的大小和对齐方式决定怎样来安排内存中的字段，在这个过程中，不仅需要描述清楚每个字段的偏移量，还有Struct或Tuple整体的大小和对齐方式。下面就是GenMeta里和Class类型相关的内存方法代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最底层基类 ContextDescriptorBuilderBase的布局方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">layout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">asImpl</span>().<span class="built_in">addFlags</span>();</span><br><span class="line">  <span class="built_in">asImpl</span>().<span class="built_in">addParent</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeContextDescriptorBuilderBase的布局方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">layout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">asImpl</span>().<span class="built_in">computeIdentity</span>();</span><br><span class="line"></span><br><span class="line">  super::<span class="built_in">layout</span>();</span><br><span class="line">  <span class="built_in">asImpl</span>().<span class="built_in">addName</span>();</span><br><span class="line">  <span class="built_in">asImpl</span>().<span class="built_in">addAccessFunction</span>();</span><br><span class="line">  <span class="built_in">asImpl</span>().<span class="built_in">addReflectionFieldDescriptor</span>();</span><br><span class="line">  <span class="built_in">asImpl</span>().<span class="built_in">addLayoutInfo</span>();</span><br><span class="line">  <span class="built_in">asImpl</span>().<span class="built_in">addGenericSignature</span>();</span><br><span class="line">  <span class="built_in">asImpl</span>().<span class="built_in">maybeAddResilientSuperclass</span>();</span><br><span class="line">  <span class="built_in">asImpl</span>().<span class="built_in">maybeAddMetadataInitialization</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ClassContextDescriptorBuilder的布局方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">layout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  super::<span class="built_in">layout</span>();</span><br><span class="line">  <span class="built_in">addVTable</span>();</span><br><span class="line">  <span class="built_in">addOverrideTable</span>();</span><br><span class="line">  <span class="built_in">addObjCResilientClassStubInfo</span>();</span><br><span class="line">  <span class="built_in">maybeAddCanonicalMetadataPrespecializations</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据GenMeta可以看到Swift的Class类型内存布局是根据ContextDescriptorBuilderBase、TypeContextDescriptorBuilderBase再到ClassContextDescriptorBuilder继承层层叠加的，因此对应Class类型的Nominal Type Descriptor就可以用如下C结构来描述：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SwiftClassInfo</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> flag;</span><br><span class="line">    <span class="keyword">uint32_t</span> parent;</span><br><span class="line">    <span class="keyword">int32_t</span> name;</span><br><span class="line">    <span class="keyword">int32_t</span> accessFunction;</span><br><span class="line">    <span class="keyword">int32_t</span> reflectionFieldDescriptor;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">uint32_t</span> vtable;</span><br><span class="line">    <span class="keyword">uint32_t</span> overrideTable;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>代码中可见，add的前缀就是增加的偏移记录，addFlags后面的addParent就是下一个偏移的记录。FieldDescriptor换成ReflectionFieldDescriptor是苹果公司在5.0版本对Metadata做的改变，官方Mirror反射目前还不完善，有些信息还没法提供，因此在Metadata里增加了一些反射相关信息。</p>
<p>OC动态调用方法会把_cmd作为第一个参数，第二个参数是Self，后面是可变参数列表，动态调度可以在运行时添加类、变量和方法。而在Swift中动态调用方法是基于VTable的，运行时没法对方法进行动态搜索，地址在编译时静态写在了VTable里，运行时不能改，可以用静态地址调用，或dlsym来搜索名称。</p>
<p>VTable的地址在TypeContextDescriptor之后，OverrideTable存储位置在VTable之后，有三个字段来描述，第一个是记录哪个类被重写，第二个是被重写的函数，第三个是用来重写的函数相对的地址。因此通过OverrideTable就可以找到重写前和重写后函数指针，这样就有机会在VTable里找到对应函数进行函数指针的替换，达到Hook的效果。要注意，在Swift编译器设置优化时VTable的函数地址可能会清空或使用直接地址调用，这两种情况发生的话就没法通过VTable进行方法替换。</p>
<p>那么还有其它思路吗？</p>
<h3 id="Mach-override"><a href="#Mach-override" class="headerlink" title="Mach_override"></a>Mach_override</h3><p>使用<a href="https://github.com/rentzsch"><em>Wolf Rentzsch</em></a>写的<a href="https://github.com/rentzsch/mach_override">_Mach<em>override</em></a>也是一种方法，可以在原始函数的汇编里加个jmp，跳到自定义函数，然后再跳回原始函数。Mach_override_ptr的三个参数分别是，一，要覆盖函数的指针；二，去覆盖函数的指针；三，参数可以设置为原函数的指针地址，待Mach_override_ptr返回成功，就可以调原函数。Mach_override会分配一个虚拟内存页，使其可写可执行。需要注意的是，Mach_override_ptr初始函数和重入函数指针相同，调用后，重入函数将调用替换函数而不是原始函数。在Swift中如何使用Mach_override可参考<a href="https://github.com/lombax85/SwiftOverride"><em>SwiftOverride</em></a>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上下篇的介绍，想必你已经了解到A站为拥抱Swift都做了哪些事情。基于A站以及快手主站的一些架构师对于Swift的热爱，以及为之付于的实践，A站的开发体验才得以蜕变。</p>
<p>为了让OC开发同学能够掌握Swift，以更“Swift”的方式进行开发，A站组织了十多次Swift组内的培训和分享，并规范了Swift代码风格和静态检查流程。针对开发体验上的痛点，A站在2020年上半年就开始了混编工程的优化、组件化以及二进制化的建设。完成了分层设计，渐进式地将模块解耦下沉到对应的分层，进而可以借助LLVM Module来抹平模块API在语言上的差异，从而代替Swift和Objective-C在主工程的桥接，为10+ A站和中台的基础库进行了Module化问题修复，并基于主站的二进制化方案 （GUNDAM）完善了对Swift以及混编的支持。从Swift ABI Stability进化为Module Stability的XCFramework，WWDC的<a href="https://developer.apple.com/videos/play/wwdc2019/416/"><em>Session</em></a>很好的说明XCFramework的原理，同时表示XCFramework格式对Objective-C/C/C++也有很好的支持。目前组件的二进制化率约为80%，约有50%的组件已经完成了LLVM Module化，构建时间提升了60%以上。随着Swift优势的逐渐体现以及团队Swift能力建设的推进，A站更多的工程师开始倾向于使用Swift进行业务开发，而Swift带来的“加速度”，也让技术团队切实地感受到了强烈的“推背感“。</p>
<p>当然，A站也曾遇到一些Swift的Bug，比如打包RxSwift5后遇到模块名和类名一样所产生的Bug和<a href="https://bugs.swift.org/browse/SR-12647"><em>Issue</em></a>，RxSwift6通过避免使用Typealias的类型曲线形地解决了这个问题，目前此问题已被官方标记为“解决”，后面的版本可以正常使用。另外还有两个未解决的问题，一个是在Module的接口中出现Ambiguous Type Name Error问题，参考<a href="https://bugs.swift.org/browse/SR-12646"><em>Issue</em></a><em>；</em>另一个是Import后产生.swiftinterface出现的错误，参见网站<a href="https://bugs.swift.org/browse/SR-11422"><em>Issue</em></a>。</p>
<p>最后想说的是，Swift开发并不容易，不要被Swift简洁的语法所迷惑，各种大小括号组合会让开发者们感到困惑，还有一些特性会让直观理解变得很困难，比如下面的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str:<span class="type">String</span>! <span class="operator">=</span> <span class="string">&quot;Hi&quot;</span></span><br><span class="line"><span class="keyword">let</span> strCopy <span class="operator">=</span> str</span><br></pre></td></tr></table></figure>
<p>根据Swift类型推导的特性，按道理str类型加上感叹符号后，strCopy就会被自动推导为非可选String类型。但实际情况是，按照<a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html"><em>官方文档</em></a>的说法，strCopy没有直接指明类型，即隐式可选值时，str类型是String后加上感叹号，这种是属于隐含解包可选值String无法推导出非可选String类型，因此Swift会先将strCopy作为一个普通可选值来用，这样和直观的感觉非常不一样。</p>
<p>本以为5.0的ABI在稳定后，Swift学起来会更容易，但是其实新的SwiftUI和Combine这样重量级的框架需要开发者继续钻研，真是“Write Swift, Learn Every Year”。Swift不断从其它语言中吸取精髓，接下来的async/await，你准备好了吗？要用上，先得看咱家APP系统最低版本是不是能够支持这些新特性。</p>
<p>虽说不容易，但为了稳定和效率，终究跟上了时代的步伐。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章已发在快手大前端公众号，欢迎关注，文章地址如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/rUZ8RwhWf4DWAa5YHHynsQ&quot;&gt;A站 的 Swift 实践 —— 上篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a h
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
  </entry>
  
  <entry>
    <title>深入剖析 JavaScript 编译器/解释器引擎 QuickJS - 多了解些 JavaScript 语言</title>
    <link href="http://ming1016.github.io/2021/02/21/deeply-analyse-quickjs/"/>
    <id>http://ming1016.github.io/2021/02/21/deeply-analyse-quickjs/</id>
    <published>2021-02-21T04:03:09.000Z</published>
    <updated>2021-04-11T14:42:09.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>最近在做 JavaScript 和 Native 打交道的工作，虽然6年前服务端和前端包括 JavaScript 经验也有些，不过如今前端标准和前端引擎也发展了很多，这里做个记录吧。本文会着重介绍 QuickJS，其中会针对 js 语言的一些特性来看这些特性在 QuickJS 是如何解释执行和优化的，能够加深对 js 语言的理解。QuickJS 是在 MIT 许可下发的一个轻量 js 引擎包含 js 的编译器和解释器，支持最新 TC39 的 ECMA-262 标准。QuickJS 和其它 js 引擎的性能对比，可以参看 QuickJS 的 benchmark 对比<a href="https://bellard.org/quickjs/bench.html">结果页</a>，从结果看，JerryScript 内存和体积小于 QuickJS，但各项性能均低于 QuickJS，Hermes 体积和内存大于 QuickJS，性能和 QuickJS 差不多，但 Hermes 对于 TC39 的标准支持并没 QuickJS 全。Frida 在<a href="https://frida.re/news/2020/10/28/frida-14-0-released/">14.0版本</a>引入了 QuickJS，经作者验证内存使用只有 V8的五分之一，于是设为默认引擎。14.3版本将默认引擎切回 V8，主要是因为某些场景 V8表现和调试功能更好，对于调试已经在 Fabrice bellard 的规划里了，未来可期。</p>
<p>在详细介绍和剖析 QuickJS 之前，我先跟你聊聊 JavaScript 的背景和 QuickJS 作者的背景吧。我觉得这样更有助于理解 QuickJS。</p>
<p>先说说 JavaScript。</p>
<h3 id="JavaScript-背景"><a href="#JavaScript-背景" class="headerlink" title="JavaScript 背景"></a>JavaScript 背景</h3><p>第一个图文浏览器是1993年的 Mosaic，由 Marc Andreessen 开发。后替代 Mosaic 的是 Netscape 的 Netscape Navigator 浏览器。Brendan Eich 给 Netscape 开发 Java 辅助语言 Mocha（后更名为 JavaScript），耗时10天出原型（包含了eval 函数），集成到 Netscape 2预览版里，Mocha 基于对象而非 Java 那样基于类。Mocha 采用源码解析生成字节码解释执行方式而非直接使用字节码的原因是 Netscape 公司希望 Mocha 代码简单易用，能够直接在网页代码中编写。</p>
<p>直到现在各 js 引擎都还不直接使用字节码，这是由于不同的 js 引擎都有自己的字节码规范，不像 js 代码规范有统一一套，而且字节码会有捆绑版本和验证难的问题。 TC39 有份中间代码的提案，叫做 Binary AST，提案在这 <a href="https://github.com/tc39/proposal-binary-ast">Binary AST Proposal Overview</a>。Binary AST 这份提案还会去设计解决变量的绑定机制对解析性能影响，还有延缓 Early Error 语义到最近的 enclosing 函数或全局执行脚本的时候来提升解析性能，解决区分列表表达式和箭头函数参数列表的区别需要做回溯等可能会存在字符层面歧义，还有单字节和双字节编码检查的问题，字符串和标识符使用 UTF-8，不用转义码。Binary AST 借鉴 WebAssembly 对解析后得到的 AST 使用基本 primitives（字符串、数字、元组）来进行简单二进制编码，再压缩，每个文件都会有个 header 来保证向前和向后的兼容，节点种类通过 header 的索引来引用，避免使用名称可能带来的版本问题，为减少大小会支持 presets。</p>
<p>下面回到90年代，接着说代号是 Mocha 的 JavaScript 发展历程。</p>
<p>Mocha 的动态的对象模型，使用原型链的机制能够更好实现，对象有属性键和对应的值，属性的值可以是多种类型包括函数、对象和基本数据类型等，找不到属性和未初始化的变量都会返回 undefined，对象本身找不到时返回 null，null 本身也是对象，表示没有对象的对象，因此 typeof null 会返回 object。基础类型中字符串还没支持 Unicode，有8位字符编码不可变序列组成，数字类型由 IEEE 754 双精度二进制64位浮点值组成。新的属性也可以动态的创建，使用键值赋值方式。</p>
<p>Brendan Eich 喜欢 Lisp，来 Netscape 本打算是将 lisp 引入浏览器的。因此 Mocha 里有着很多的 lisp 影子，比如函数一等公民和 lambda，函数是一等公民的具体表现就是，函数可以作为函数的参数，函数返回值可以是函数，也可将函数赋值给变量。Brendan Eich 的自己关于当时开发的回顾文章可以看他博客<a href="https://brendaneich.com/2008/04/">这篇</a>，还有这篇《<a href="https://web.archive.org/web/20190320112431/https://brendaneich.com/2011/06/">New JavaScript Engine Module Owner</a>》，访谈稿《<a href="https://www.infoworld.com/article/2077132/bending-over-backward-to-make-javascript-work-on-14-platforms.html">Bending over backward to make JavaScript work on 14 platforms</a>》。</p>
<p>Netscape 2 正式版将 Mocha 更名为 JavaScript，后简称 js。1.0 版本 js 语法大量借鉴 C 语言。行末可不加分号，一开始 js 就是支持的。1.1版 js 支持隐式类型转换，可以把任意对象转成数字和字符串。1.0版 js 对象不能继承，1.1 加入对象的 prototype 属性，prototype 的属性和实例的对象共享。为了加到 ISO 标准中，Netscape 找到了 Ecma，因为 ISO 对 Ecma 这个组织是认可的。接着 Ecma 组建了 TC39 技术委员会负责创建和维护 js 的规范。期间，微软为了能够兼容 js，组建了团队开发 JScript，过程比较痛苦，因为 js 的规范当时还没有，微软只能自己摸索，并写了份规范 <a href="http://archives.ecma-international.org/1996/TC39/96-005.pdf">The JScript Language Specification, version 0.1</a> 提交给 TC39，微软还将 VBScript 引入 IE。96年 Netscape 为 JavaScript 1.1 写了规范 <a href="http://archives.ecma-international.org/1996/TC39/96-002.pdf">Javascript 1.1 Specification in Winword format</a> 作为 TC39 标准化 js 的基础。97年 TC39 发布了 <a href="https://www.ecma-international.org/wp-content/uploads/ECMA-262_1st_edition_june_1997.pdf">ECMA-262 第一版规范</a>。</p>
<p>Netscape 3 发布后，Brendan Eich 重构了 js 引擎核心，加了嵌套函数、lambda、正则表达式、伪属性（动态访问修改对象）、对象和数组的字面量、基于标记和清除的 GC。lambda 的函数名为可选，运行时会创建闭包，闭包可递归引用自己作为参数。新 js 引擎叫 SpiderMonkey。js 语言增加新特性，从更多语言那做了借鉴，比如 Python 和 Perl 的数组相关方法，Perl 对于字符串和正则的处理，Java 的 break / continue 标签语句以及 switch。语言升级为 JavaScript 1.2（<a href="https://web.archive.org/web/19970630092641/http://developer.netscape.com/library/documentation/communicator/jsguide/intro.htm">特性详细介绍</a>），和 SpiderMonkey 一起集成到 Netscape 4.0。<a href="https://www.ecma-international.org/wp-content/uploads/ECMA-262_3rd_edition_december_1999.pdf">ES3</a> 结合了 js 1.2 和 JScript 3.0，I18N 小组为 ES3 加入了可选 Unicode 库支持。开始兼容 ES3的浏览器是运行微软 JScript 5.5的 IE 5.5，运行 js 1.5 的 Netscape 6。</p>
<p>ES3 标准坚持了10年。</p>
<p>这10年对 js 设计的抱怨，也可以说 js 不让人满意的地方，在这个地方 <a href="https://wtfjs.com/">wtfjs - a little code blog about that language we love despite giving us so much to hat</a> 有汇总。当然也有人会站出来为 js 正名，比如 Douglas Crockford，可以看看他的这篇文章 <a href="http://www.crockford.com/javascript/javascript.html">JavaScript:The World’s Most Misunderstood Programming Language</a>，里面提到很多书都很差，比如用法和特性的遗漏等，只认可了 JavaScript: The Definitive Guide 这本书。并且 Douglas Crockford 自己还写了本书 JavaScript: The Good Parts，中文版叫《JavaScript语言精粹》。另外 Douglas Crockford 做出的最大贡献是利用 js 对象和数组字面量形式实现了独立于语言的数据格式 JavaScript Object Notation，并加入 TC39 的标准中，JavaScript Object Notation 也就是我们如今应用最多的数据交换格式 JSON 的全称。</p>
<p>ES4 初期目标是希望能够支持类、模块、库、package、Decimal、线程安全等。2000年微软 Andrew Clinick 主导的.NET Framework 开始支持 JScript。微软希望通过 ES4 标准能够将 JScript 应用到服务端，并和以往标准不兼容。浏览器大战以 Netscape 失败结束后，微软取得了浏览器统治地位，对 TC39 标准失去了兴趣，希望用自家标准取而代之，以至 TC39 之后几年没有任何实质进展。这个期间流行起来的 Flash 使用的脚本语言 ActionScript 也只是基于 ES3 的，2003年 ActionScript 2.0 开始支持 ES4 的提案语法以简化语义，为了提升性能 Flash 花了3年，在2007年开发出 AVM2虚机支持静态类型的 ActionScript 3.0。那时我所在的创业公司使用的就是 flash 开发的图形社交网站 xcity，网站现在已经不在了，只能在 <a href="https://tieba.baidu.com/f?ie=utf-8&amp;kw=xcity">xcity贴吧</a>找到当年用户写的故事截的图。</p>
<p>Brendan Eich 代表 Mozilla 在2004年开始参与 ES4 的规划，2006年 Opera 的 Lars Thomas Hansen 也加入进来。Flash 将 AVM2 给了 Mozilla，命名为 Tamarin。起初微软没怎么参与 ES4 的工作，后来有20多年 Smalltalk 经验的 Allen Wirfs-Brock 加入微软后，发现 TC39正在设计中 ES4 是基于静态类型的 ActionScript 3.0，于是提出动态语言加静态类型不容易成，而且会有很大的兼容问题，还有个因素是担心 Flash 会影响到微软的产品，希望能够夺回标准主动权。Allen Wirfs-Brock 的想法得到在雅虎的 Douglas Crockford 的支持，他们一起提出新的标准提案，提案偏保守，只是对 ES3 做补丁。</p>
<p>AJAX，以及支持 AJAX 和解决浏览器兼容性问题的库 jQuery 库（同期还有 Dojo 和 Prototype 这样 polyfill 的库）带来了 Web2.0时代。polyfill 这类库一般使用命名空间对象和 IIFE 方式解决库之间的命名冲突问题。我就是这个时期开始使用 js 来开发自己的网站 <a href="http://www.starming.com/">www.starming.com</a>，当时给网站做了很多小的应用比如图片收藏、GTD、博客系统、记单词、RSS订阅，还有一个三国演义小说游戏，记得那会通过犀牛书（也就是 Douglas Crockford 推荐的 JavaScript: The Definitive Guide ，中文版叫《JavaScript 权威指南》）学了 js 后，就弄了个兼容多浏览器的 js 库，然后用这个库做了个可拖拽生成网站的系统。2013年之后 starming 已经做成了一个个人博客，现在基于 hexo 的静态博客网站。2013年之前的 starming 网站内容依然可以通过 <a href="https://web.archive.org/">https://web.archive.org/</a> 网站查看到，点击这个<a href="https://web.archive.org/web/20130124221354/http://www.starming.com/">地址</a>。</p>
<p>2006年 Google 的 Lars Bak 开始了 V8 引擎的开发，2008 基于 V8 的 Chrome 浏览器发布，性能比 SpiderMonkey 快了10倍。V8 出来后，各大浏览器公司开始专门组建团队投入 js 引擎的性能角逐中。当时 js 引擎有苹果公司的 SquirrelFish Extreme、微软 IE9 的 Chakra 和 Mozilla 的 TraceMonkey（解释器用的是 SpiderMonkey）。</p>
<p>随着 IBM、苹果和 Google 开始介入标准委员会，更多的声音带来了更真实的诉求，TC39 确定出 ES4 要和 ES3 兼容，同时加入大应用所需的语言特性，比如类、接口、命名空间、package，还有可选静态类型检查等等。部分特性被建议往后延，比如尾调用、迭代器生成器、类型自省等。现在看起来 ES4 10年设计非常波折，激进的加入静态类型，不兼容老标准，把标准当研究而忽略了标准实际上是需要形成共识的，而不是要有风险的。在 TC39 成员达成共识后，ES4 还剔除了 package 和命名空间等特性，由于 Decimal 的设计还不成熟也没能加入。由于 ES4 很多特性无法通过，而没法通过标准，因此同步设计了10年多的 ES 3.1 最终改名为 ES5，也就是 ECMA-262 第 5 版。ES5 主要特性包括严格模式，对象元操作，比如setter、getter、create等，另外添加了些实用的内置函数，比如 JSON 相关解析和字符串互转函数，数组增加了高阶函数等等。ES5 的测试套件有微软 Pratap Lakshman 的，<a href="https://www.ecma-international.org/archive/ecmascript/2009/TC39/tc39-2009-030.zip">这里</a>可以下载看到，谷歌有 <a href="https://blog.chromium.org/2009/06/launching-sputnik-into-orbit.html">Sputnik</a>，有5000多个测试，基于他们，TC39 最后统一维护著名的 Test262 测试套件。</p>
<p>ES5 之后 TC39 开始了 Harmony 项目，Harmony 开始的提案包括类、const、lambda、词法作用域、类型等。从 Brenda Eich 的 《<a href="https://brendaneich.com/2011/01/harmony-of-my-dreams/">Harmony Of My Dreams</a>》这篇文章可以 js 之父对于 Harmony 的期望，例如文章中提到的 # 语法，用来隐藏 return 和 this 词法作用域绑定，最终被 ES2015 的箭头函数替代，但 # 用来表示不可变数据结构没有被支持，模块和迭代器均获得了支持。Harmony 设计了 Promise 的基础 Realm 规范抽象、内部方法规范 MOP、Proxy 对象、WeakMap、箭头函数、完整的 Unicode 支持、属性 Symbol 值、尾调用、类型数组等特性。对于类的设计，TC39 将使用 lambda 函数、类似 Scheme 的词法捕获技术、构造函数、原型继承对象、实例对象、扩展对象字面量语法来满足类所需要的多次实例化特性。模块的设计思路是通过 module 和 import 两种方式导入模块，import 可以用模块声明和字符串字面量的方式导入模块。模块导入背后是模块加载器的设计，设计的加载流程是，先处理加载标识的规范，再处理预处理，处理模块间的依赖，关联上导入和导出，最后再进行依赖模块的初始化工作。整个加载过程可以看这个 js 实现的<a href="https://github.com/jorendorff/js-loaders">原型</a>，后来这个加载器没有被加入规范，而由浏览器去实现。CommonJS 作者 Kevin Dangoor 的文章《<a href="https://www.blueskyonmars.com/2010/01/29/commonjs-the-first-year/">CommonJS: the First Year</a>》写下做 CommonJS 的初衷和目标，标志着 js 开始在服务端领域活跃起来。CommonJS 的思路就是将函数当作模块，和其他模块交互是通过导出局部变量作为属性提供值，但是属性能被动态改变和生成，所以对于模块使用者，这是不稳定的。Ryan Dahl 2009 开发的 Node.js （介绍参看作者<a href="https://www.youtube.com/watch?v=ztspvPYybIY&amp;feature=youtu.be&amp;ab_channel=stri8ted">jsconf演讲</a>）就是用 CommonJS 的模块加载器。Node.js 链接了 POSIX API，网络和文件操作，有个自己的 Event Loop，有些基础的 C 模块，还包含了 V8 引擎。</p>
<p>2010 年开始出现其他语言源码转 js 源码这种转译器的风潮，最有代表的是 CoffeeScript，CoffeeScript 某种程度上是对 js 开发提供了更优雅更先进的开发语言辅助。从 CoffeeScript 一些特性在开发者的反馈，能够更好的帮助 TC39 对 js 特性是否进入标准提供参考。后来还有以优化性能为目的的 Emscripten 和 asm.js 翻译成高效 js 代码的转译器。转义器对于 Harmony 甚至是后面的 ES2015 来说有着更重要的意义。当时的用户没有主动进行软件升级的习惯，特别是由系统绑定的浏览器。适配 IE6的痛苦，相信老一辈的前端开发者会有很深的体会。大量浏览器低版本的存在对于新的标准推广造成了很大的阻碍，因此使用新标准编写代码转移成可兼容低版本浏览器的代码能够解决兼容问题。在 Harmony 项目开发过程中除了 Mozilla 使用 SpiderMonkey 引擎开发的 <a href="https://github.com/mozilla/narcissus/">Narcissus</a> 转译器外，还有直到目前还在使用的 <a href="https://babeljs.io/">Babel</a> 和 <a href="https://www.typescriptlang.org/">TypeScript 语言</a>的转译器。另外还有使用 rust 写的 js 编译器 <a href="https://github.com/swc-project/swc">swc</a>，主打速度，打算来替代 babel。</p>
<p>2015年，<a href="https://www.ecma-international.org/wp-content/uploads/ECMA-262_6th_edition_june_2015.pdf">ECMAScript 2015</a>发布。ECMAScript 2015 之后，由于各个浏览器都开始更快的迭代更新， TC39 开始配合更新的节奏，开始每年更新标准，以年作为标准的版本号。</p>
<p>ES2016 增加了 async/await 异步语法特性，纵观 js 的异步历程，从最开始的 Callback方式到 Promise/then，js 解决了回调地狱的问题，但缺少能够暂停函数和恢复执行的方法，因此在 ES2015 加入了生成器，其实现核心思想就是协程，协程可以看作是运行中线程上的可暂停和恢复执行的任务，这些任务都是可通过程序控制的。在 ES2016 加入简洁的 async/await 语法来更好的使用协程。js 异步编程历程如下图：<br><img src="/uploads/deeply-analyse-quickjs/1.png" alt=""></p>
<p>ECMAScript 2016 开始 js 进入了框架百家争鸣的时代。</p>
<p>js 框架方面，早期 js 的框架是以兼容和接口优雅为基准比较胜出的 PrototypeJS 和 jQuery。MVC 流行起来的框架是 Backbone，MVVM 时代是 AngularJS 为代表的数据双向绑定只用关注 Model 框架新星崛起。Vue 在 MVVM 基础上增加了用来替代 Options API 的 Composition API 比拟 React 的 Hooks。React（React 的创作者是 <a href="https://twitter.com/jordwalke">Jord Walke</a>，在 facebook，不过现在已经离开了 facebook，创立了自己的公司）后来居上，以函数式编程概念拿下头牌，这也是因为 React 核心团队成员喜欢 OCaml 这样的函数式编程语言的原因。。React 的组件有阿里的 <a href="https://ant.design/index-cn">Ant Design</a> 和 <a href="https://fusion.design/">Fusion Design</a> 可用。React 对于逻辑复用使用的是更优雅的 Hooks，接口少，以声明式方式供使用，很多开发者会将自己开发的逻辑抽出来做成 hooks，出现了很多基于 hooks 状态管理公用代码。对于状态的缓存维护由 React 的内核来维护，这能够解决一个组件树渲染没完成又开始另一个组件树并发渲染状态值管理问题，开发者能够专注写函数组件，和传统 class 组件的区别可以看 Dan Abramov 的这篇文章《<a href="https://overreacted.io/how-are-function-components-different-from-classes/">How Are Function Components Different from Classes?</a>》。js 框架的演进如下图：<br><img src="/uploads/deeply-analyse-quickjs/2.png" alt=""></p>
<p>为了使 js 能够应用于更大的工程化中，出现了静态类型 js 框架。静态类型的 js 框架有微软的 TypeScript 和 Facebook 的 <a href="https://flow.org/">Flow</a>。TypeScript 的作者是当年我大学时做项目使用的 IDE Delphi 的作者 Anders Hejlsberg，当时的 Delphi 开发体验非常棒，我用它做过不少项目，改善了大学生活品质。</p>
<p>对于 React 的开发，现需要了解脚手架 <a href="https://github.com/facebook/create-react-app">create-react-app</a>，一行命令能够在 macOS 和 Windows 上不用配置直接创建 React 应用。然后是使用 JSX 模版语法创建组件，组件是独立可重用的代码，组件一般只需要处理单一事情，数据通过参数和上下文共享，上下文共享数据适用场景类似于 UI 主题所需的数据共享。为了确保属性可用，可以使用 defaultProps 来定义默认值，使用 propTypes 在测试时进行属性类型设置和检查。在组件里使用状态用的是 Hooks，最常见的 Hooks 是 setState 和 useEffect，项目复杂后，需要维护的状态就会很复杂，React 本身有个简单使用的状态管理库 React Query 数据请求的库，作用类似 Redux，但没有模版代码，更轻量和易用，还可用 Hooks。React Router 是声明式路由，通过 URL 可以渲染出不同的组件。react 跑在 QuickJS 上的方法可以参看 QuickJS 邮件列表里<a href="https://www.freelists.org/post/quickjs-devel/Running-React-on-QuickJS">这封邮件</a>。</p>
<p>React 框架对应移动端开发的是 React Native。</p>
<p>React Native 使用了类似客户端和服务器之间通讯的模式，通过 JSON 格式进行桥接数据传递。React Native 中有大量 js 不适合编写的功能和业务逻辑，比如线程性能相应方面要求高的媒体、IO、渲染、动画、大量计算等，还有系统平台相关功能特性的功能业务代码。</p>
<p>这样的代码以前都是使用的原生代码和 C++ 代码编写，C++ 代码通过静态编译方式集成到工程中，也能实现部分平台通用，但是 C++ 编写代码在并发情况下非常容易产生难查的内存安全和并发问题，对于一些比较大的工程，开启 Monkey 测试由于插桩导致内存会增大好几倍，从而无法正常启动，查问题更加困难。当然 Rust 也许是另一种选择，rust 语言层面对 FFI 有支持，使用 extern 就可以实现 rust 与其他编程语言的交互。rust 对内存安全和并发的问题都能够在编译时发现，而不用担心会在运行时发现，这样开发体验和效率都会提高很多，特别是在重构时不会担心引入未知内存和并发问题。使用 rust 编译 iOS 架构的产物也很简单，先安装 Rustup，然后在 rustup 里添加 iOS 相关架构，rust 的包管理工具是 cargo，类似于 cocoapods，cargo 的子命令 cargo-lipo 可以生成 iOS 库，创建一个 C 的桥接文件，再集成到工程中。对于 Android 平台，rust 有专门的 android-ndk-rs 库。rust 的 ffi 在多语言处理中需要一个中间的通信层处理数据，性能和安全性都不高，可以使用 flatbuffers 。关于序列化方案性能比较可以参看 <a href="https://codeburst.io/json-vs-protocol-buffers-vs-flatbuffers-a4247f8bda6f">JSON vs Protocol Buffers vs FlatBuffers</a> 这篇文章。</p>
<p>React Native 本身也在往前走。以前 React Native 有三个线程，分别是执行 js 代码的 JS Thread，负责原生渲染和调用原生能力的 UI Thread，模拟虚拟 DOM 将 Flexbox 布局转原生布局的 Shadow Thread。三个线程工作方式是 JS Thread 会先对 React 代码进行序列化，通过 Bridge 发给 Shadow Thread，Shadow Thread 会进行反序列化，形成虚拟 DOM 交由 Yogo 转成原生布局，Shadow Thread 再通过 Bridge 传给 UI Thread，UI Thread 获取消息先反序列化，再按布局信息进行绘制，可以看出三个线程交互复杂，而且消息队列都是异步，使得事件难保处理，序列化都是用的 JSON 性能和 Protocol Buffers 还有 FlatBuffers 相比差很多。新架构会从线程模型做改进，高优先级线程会直接同步调用 js，低优先级更新 UI 的任务不在主线程工作。同时新架构的核心 JSI 方案简化 js 和原生调用，改造成更轻量更高效的调用方式，用来替换 Bridge。JSI 使得以前的三个线程通信不用都通过 Bridge 这种依赖消息序列化异步通信方式，而是直接同步通信，消除异步通信会出现的拥塞问题，具体使用例子可以看这篇文章《<a href="https://medium.com/@christian.falch/https-medium-com-christian-falch-react-native-jsi-challenge-1201a69c8fbf">React Native JSI Challenge</a>》。另外 React Native 新架构的 JSI 是一个轻量的 C++桥接框架，通信对接的 js 引擎比如 JSC、Hermes、V8、QuickJS、JerryScript 可以很方便的替换。关于 JSI 的详情和进展可以参考其<a href="https://github.com/react-native-community/discussions-and-proposals/issues/91">提案地址</a>。</p>
<p>2019 年出现的 Svelte。Svelte 的特点是构建出的代码小，使用时可以直接使用构建出带有少量仅会用到逻辑的运行时的组件，不需要专门的框架代码作为运行时使用，不会浪费。Svelte 没有 diff 和 patch 操作，也能够减少代码，减少内存占用，性能会有提升。当然 Svelte 的优点在项目大了后可能不会像小项目那么明显。</p>
<p>CSS 框架有 Bootstrap、Bulma、Tailwind CSS，其中认可度最高的是 Tailwind CSS，近年来 Bootstrap 持续降低，Tailwind CSS 和 Bootstrap 最大的不同就是 Tailwind CSS 没有必要的内置组件，因此非常轻量，还提供了 utility class 集合和等价于 Less、Sass 样式声明的 DSL。浏览器对 CSS 样式和 DOM 结合进行渲染的原理可以参看我以前《<a href="https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/">深入剖析 WebKit</a>》这篇文章。</p>
<p>在浏览器之外领域最成功的框架要数 Node.js 了。</p>
<p>Ryan Dahl 基于 V8 开发了 Node.js，提供标准库让 js 能够建立 HTTP 服务端应用。比如下面的 js 代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span>;</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>);</span><br><span class="line">  res.end(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码运行后会起了个服务应用，访问后会输出 hi。Node.js 会涉及到一些系统级的开发，比如 I/O、网络、内存等。</p>
<p>Node.js 作者 Ryan Dahl 后来弄了 Deno，针对 Node.js 做了改进。基于 Node.js 开发应用服务的框架还有 Next.js，Next.js 是一个 React 框架，包括了各种服务应用的功能，比如 SSR、路由和打包构建，Netflix 也在用 Next.js。最近前端流行全栈无服务器 Web 应用框架，包含 React、GraphQL、Prisma、Babel、Webpack 的 Redwood 框架表现特别突出，能够给开发的人提供开发 Web 应用程序的完整体验。</p>
<p>Node.js 后的热点就是开发工具，工程构建，最近就是 FaaS 开发。工程开发工具有依赖包管理的 npm 和 yarn，webpack、Snowpack、Vite、<a href="https://github.com/evanw/esbuild">esbuild</a> 和 rollup 用来打包。其中 esbuild 的构建速度最快。</p>
<p>测试框架有 Karma、Mocha、Jest，React 测试库 Enzyme。其中 Jest 非常简单易用，可进行快照测试，可用于 React、Typescript 和 Babel 里，Jest 目前无疑是测试框架中最火的。另外还有个 Testing Library 可用来进行 DOM 元素级别测试框架，接口易用，值得关注。</p>
<p>最近比较热门的是低代码，低代码做的比较好的有 <a href="https://github.com/imgcook/imove">iMove</a> 等，他们通过拖拽可视化操作方式编辑业务事件逻辑。这里有份<a href="https://github.com/taowen/awesome-lowcode">低代码的 awesome</a>，收录了各厂和一些开源的低代码资源。</p>
<p>2020 年 Stack Overflow 开发者调查显示超过半数的开发者会使用 js，这得益于多年来不断更新累积的实用框架和库，还有生态社区的繁荣，还有由各大知名公司大量语言大师专门为 js 组成的技术委员会 TC39，不断打磨 js。</p>
<p>js 背景说完了，接下来咱们来聊聊 QuickJS 的作者吧。</p>
<h3 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h3><p>QuickJS 作者 Fabrice Bellard 是一个传奇人物，速度最快的<a href="https://bellard.org/tcc/">TCC</a>，还有功能强大，使用最广的视频处理库 <a href="http://ffmpeg.org/">FFmpeg</a> 和 Android 模拟器 QEMU 都是出自他手。</p>
<p>一个人在一个项目或者一个方向上取得很大成果就很厉害了，但是 Fabrice Bellard 却在C语言、数据压缩、数值方法、信号处理、媒体格式、解析器方面弄了很多的实用明星项目，涉及编译、虚拟机、操作系统、图形学、数学等领域。还能后续维护和管足文档，比如 QuickJS 就会配套的对新 ECMAScript 特性、运行时新 API进行支持更新。各项都在性能、可移植核灵活性上做到极致，非常牛了。我觉得 Fabrice Bellard 和 John D. Carmack II 一样，属于一人可抵一个军团的天才，关于 John D. Carmack II 的介绍可以参看《<a href="https://book.douban.com/subject/1152971/">DOOM启世录</a>》这本书。下面是他项目的介绍：</p>
<ul>
<li>1989：<a href="http://bellard.org/lzexe.html">LZEXE</a> 高中时候写的 DOS 上很有名的可执行压缩程序。那时 Fabrice Bellar 使用 Amstrad PC1512 编程，由于 Amstrad PC1512磁盘空间非常有限，于是他使用8086汇编重写了 LZSS 压缩算法，并优化了代码结构，新的压缩程序就是 LZEXE，LZEXE 解压速度非常快，充分显示了他超高的编程天赋。</li>
<li>1996：<a href="http://web.archive.org/web/19990117093837/http:/www.irisa.fr/compose/harissa/harissa.html">Harissa</a> Java 虚拟机。</li>
<li>1997： <a href="https://bellard.org/pi/pi2700e9/">Pi 计算世界纪录保持者</a>。Fabrice Bellard 的计算圆周率的公式 <a href="https://bellard.org/pi/">Bellard 公式</a>，是 BBP 公式的变体，计算中使用优化的查德诺夫斯基方程算法计算，复杂度从O(n3)降到了O(n2)。用 BBP 公式来验证结果。Bellard 公式比 Bailey-Borwein-Plouffe 公式快43%，在圆周率竞赛中取胜成为最快的计算圆周率算法，创造了Pi 计算世界纪录，直到2010年8月被余智恒和近藤茂打破，他们完成了五万亿位的 Pi 计算，使用的是可以充分利用超过4核多线程达到12核24超线程的分布式大型服务器级机器计算的 y-cruncher 来完成的计算。不过 Fabrice Bellard 使用的机器配置要低很多，使用了116天提案算出了2700亿位。</li>
<li>1999：<a href="http://bellard.org/linmodem.html">Linmodem</a></li>
<li>2000：<a href="http://ffmpeg.org/">FFmpeg</a> 主要是做音视频编解码和转换，在苹果没有开放硬件解码接口时候，在 iOS 上各种视频 App 都会用 FFmpeg 来解码视频，OpenGL ES 渲染。常见的视频特效、贴纸都用到了 FFmpeg。如今苹果开放了 Metal 硬件解码接口，AVFoundation 可以直接使用硬件解码，这样就可以不用 FFmpeg 了，不过 FFmpeg 现在依然应用在各专业领域，比如滤镜，性能效率依然强劲。FFmpeg 就像一篇博士论文，并且比其他论文要好很多。FFmpeg 可以作为库在应用中使用，也可以直接使用里面的工具。FFmpeg 由音视频编解码库 libavcodec 模块和负责流到输出互转过程的 Libavformat 模块组成，两模块提供解析和不同格式转换的能力，并且灵活易扩展，很多媒体工具和播放器都集成了他们。音视频数据不同格式有不同算法，编码就是写数据，解码就是读数据，编码解码由 libavcodec 模块负责。一个媒体数据会有多个流，比如视频流和音频流，多个流混合单输出叫 multiplexing，demultiplexing 是将单输出返回成多个流。multiplexing 和 demultiplexing 依靠的就是 Libavformat 模块。</li>
<li>2000：<a href="https://bellard.org/mersenne.html">计算当时已知最大素数26972593-1</a></li>
<li>2001：<a href="http://bellard.org/tcc/">TinyCC(Tiny C Compiler)</a> 是、是GNU/Linux环境下最小的 ANSI C 语言编译器，目前编译速度是最快的。</li>
<li>2002：<a href="http://bellard.org/TinyGL/">TinyGL</a> 来自他在1998年 VReng 虚拟现实引擎分布式3D 应用，是一个非常快速、紧凑的OpenGL子集。TinyGL 比 Mesa（后被 VMWare 收购） 还要快要小，占用更少的资源。</li>
<li>2002：<a href="https://bellard.org/qemacs/">QEmacs</a>，Bellard 为他的 QEmacs 写了个包括 HTML/XML/CSS2/DocBook 渲染引擎，如果配合 QuickJS 组装成一个浏览器一点问题也没有。Emacs 处理大文件很拿手，一个文件也能多开独立窗口，我觉得 QuickJS 5万行的核心代码是 Bellard 在自己的 QEmacs 里写的，因为 QEmacs 有个显著的特性是使用高度优化的内部表示法和对文件进行 mmaping，这样带来的好处是上百兆的文件编辑起来也不会慢。</li>
<li>2003：<a href="https://www.qemu.org/">QEMU</a> 在一台物理机器上管理数百个不同计算环境。QEMU 中 Fabrice Bellard 声明了两百多个版权声明，占了近1/3。QEMU 不是一次翻译一条指令，会将多个指令翻译后一次记到 chunk 里，如果这多个指令会执行多次，那么这个翻译过程就会被省掉，从而提高执行速度。VirtualBox、Linux Kernel-based 虚拟机(KVM)、Android 模拟器都是基于 QEMU。</li>
<li>2004：<a href="http://bellard.org/tcc/tccboot.html">TinyCC Boot Loader</a> 可在15秒内从代码编译到启动 Linux 系统。</li>
<li>2005：<a href="https://bellard.org/dvbt/">DVB-T computer-hosted transmitter</a> 用普通 PC 外加 VGA 卡，产生VHF信号，充当模拟数字电视系统。</li>
<li>2011：<a href="https://bellard.org/jslinux/">JSLinux</a> 用 Javascript 开发的 PC 模拟器，可以在浏览器里运行 Linux。</li>
<li>2012：<a href="https://bellard.org/lte/">LTEENB</a> 是 PC 软件实现4G LTE/5G NR基站。能跑在一个普通4核 CPU 的 PC 上。据说是 Fabrice Bellard 一个人10个月做出来的，有人调侃说10个月自己可能协议都读不完。目前 LTEENB 用在他创办的 Amarisoft 公司里。</li>
<li>2014：<a href="https://bellard.org/bpg/">BPG</a> 基于HEVC的新图像格式，使用 JavaScript 解码器。相比较JPEG，BPG 有着更高的压缩算法，相同质量体积少半。</li>
<li>2017：<a href="https://bellard.org/tinyemu/">TinyEMU</a> 被开发出来，TinyEMU可以模拟128位精简指令集 RISC-V（基于 RISC 开源指令集架构） 和 x86 CPU 指令集的小型模拟器，另外 TinyEMU 还有 js 版，可以运行 Linux 和 Windows 2000。</li>
<li>2019：<a href="https://bellard.org/quickjs/">QuickJS</a> 本篇主角 JavaScript 引擎。</li>
</ul>
<p>更详细的介绍可以看 Fabrice Bellard 的无样式<a href="https://bellard.org/">个人网站</a> 以及网站上列出他的各个项目代码。</p>
<h3 id="Decimal"><a href="#Decimal" class="headerlink" title="Decimal"></a>Decimal</h3><p>QuickJS 在2020-01-05版本加入–bignum flag 用来开启 Decimal 科学计算，依靠他以前写的 <a href="https://bellard.org/libbf/">LibBF</a> 来处理 BigInt、BigFloat 和 BigDecimal 数字。LibBF可以处理任意精度浮点数的库，使用渐进最优算法，基本算术运算接近线性运行时间。使用的 IEEE 754语义，操作都是按 IEEE 754标准来进行四舍五入。基本加减乘除和平方根算术运算都具有接近线性的运行时间，乘法使用 SIMD 优化的 Number Theoretic Transform 来运算，SIMD（Single instruction, multiple data）是单指令多数据的意思，表示某时刻一个指令能够并行计算，适合任务包括调音量和调图形对比度等多媒体操作。能够支持sin、cos、tan这样的函数。</p>
<p>TC39这些年来一直在考虑加入高精度的小数类型 Decimal。</p>
<p>这些都是什么数字呢？</p>
<p>Int 的最大值是2的31次方减1，十进制就是2147483647，共31位，如果需要更大位数就需要用于科学计算的 Decimal。Decimal128是128位的高精度精确小数类型。</p>
<p>为什么要使用 Decimal 这种类型呢？</p>
<p>decimal 分数通常不能用二进制浮点精确表示，当建立十进制字符串表示量相互作用模型时，二进制浮点精度效果较差，所以涉及财务计算都不用二进制浮点数字，还有些小数不能用二进制表示，尾数部分会一直循环，所以会截断，这样精度就会有影响，比如0.1 + 0.2 == 0.3就是 false，0.2 + 0.2 == 0.4就是 true。出现这个情况的原因是二进制唯一的质因数是2，因此以2作为质因数表示分母的分数没有问题，而以5或10作为分母的分数是重复的小数，0.1的是分母为10的分数1/10，0.2是分母为5的分数1/5，这些重复小数进行运算然后转换为十进制时就会出现问题。这里有个网站<a href="https://0.30000000000000004.com/">0.30000000000000004.com</a>专门收集了各种语言 0.1 + 0.2 的结果，也包含了 C、C++、Kotlin、Objective-C、Swift 和 JavaScript，同时也列出了如何使用语言支持方法来得到 0.3 的准确结果，比如 swift 已经有了 Decimal 函数，通过 Decimal(0.1) + Decimal(0.2) 就能够得到 0.3。<a href="https://floating-point-gui.de/">The Floating-Point Guide - What Every Programmer Should Know About Floating-Point Arithmetic</a>这个网站包含了 Decimal 方方面面，还有各种语言的处理范例。</p>
<p>Decimal 函数的实现在 swift 源码 stdlib/public/Darwin/Foundation/Decimal.swift 路径下，Java BigDecimal的实现在<a href="https://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html">这里</a>，js 也有个人使用 js 实现的更高精度的浮点运算库，比如 <a href="https://github.com/mikemcl">Michael M 的 GitHub</a> 上就有 <a href="https://github.com/MikeMcl/bignumber.js">bignumber.js</a>、<a href="https://github.com/MikeMcl/decimal.js">decimal.js</a> 和 <a href="https://github.com/MikeMcl/big.js">big.js</a>。QuickJS 采用的方式就是使用数字加m字面量，表现起来就是 0.1m + 0.2m，结果是0.3m。浮点运算中使用很多的数字进行相加，会产生渐进的累加误差，特别是在财务计算这种对精度要求高的应用上，这些误差就会成为大事故。先前做包大小优化时，模块很多，发现四舍五入位数少取一位时偏差还蛮大。因此提高浮点表示的精度，就可以减少中间计算造成的累积舍入误差。</p>
<p>当需要更高精度时，浮点运算可以用可变长度的比如指数来实现，大小根据需要来，这就是任意精度浮点运算。更高精度就需要浮点硬件，叫浮点扩展，比如 double-double arithmetric，用在 C 的 long double 类型。就算精度再高吧，有些有理数比如1/3，也没法全用二进制浮点数表示，如果要精确表现这些有理数，需要有理算术软件包，软件包对每个整数使用 bignumber 运算。在计算机的代数系统（比如Maple）里，可以评估无理数比如 π 直接处理底层数学，而不需要给每个中间计算使用近似值。</p>
<p>再看看对应的标准和各编程语言的实现情况。</p>
<p>那什么是IEEE 754-2008标准？为什么要有这个标准？</p>
<p>以前很早的时候大概在七八十年代，计算机制造商的浮点标准比如字大小、表示方法还有四舍五入等都不一样，不同系统浮点的兼容就是个很大的问题，因此当时英特尔和摩托罗拉都提出了浮点标准的诉求。</p>
<p>85年IEEE 754-2008 decimal 浮点标准出来，IBM大型机进行了支持。标准在计算机硬件和编程语言中应用非常广，其基本格式有单精度，双精度和扩展精度，单精度在 C 里是 float 类型，7位小数。双精度在 C 里是 double 类型，占8个字节，64位双精度的范围是2 × 10的负308次方到2 × 10的308次方。扩展精度在 C99和 C11 标准的附件IEC 60559 浮点运算里定义了 long double 类型。四精度，34位小数。decimal32、decimal64和 decimal128都是用于执行十进制进位。</p>
<p>IEEE 754-2008标准还定义了32位、64位和128位 decimal 浮点表示法。规定了一些特殊值的表示方法，比如正无穷大 +∞ ，负无穷大 -∞，不是一个数字表示为 NaNs 等。定义了浮点单元（FPU），也可以叫数学协处理器，专门用来执行浮点运算。</p>
<p>IBM在1998年在大型机里引入了 IEEE 兼容的二进制浮点运算，05年加了 IEEE 兼容的decimal 浮点类型。</p>
<p>除了IEEE 754-2008标准外，还有其他浮点格式标准吗？</p>
<p>现在对机器学习模型训练而言，范围比精度更有用，因此有了 Bfloat16标准，Bfloat16标准和 IEEE 754半精度格式的内存量一样，而指数要更多，IEEE 754是5位，Bfloat16是8位。很多机器学习硬件加速器都提供了支持Bfloat16支持，Nvidia 甚至还支持了 TensorFloat-32 格式标准，指数位数更多，达到10位。</p>
<p>如今 TC39正在努力将 Decimal 加到标准中，<a href="https://github.com/tc39/proposal-bigint">BigInt</a> 提案已接受。TC39提案用 BigDecimal/Decimal128 语法是类似 1.23m 这样。Swift 已经有了支持，对应的是 <a href="https://developer.apple.com/documentation/foundation/decimal">Decimal</a>。python也有，<a href="https://docs.python.org/2/library/decimal.html">文档</a>。数据库MongoDB的<a href="https://docs.mongodb.com/manual/core/shell-types/#shell-type-decimal">说明</a>。C 和 C++语言对于32、64和128位 IEEE 754 decimal 类型还是一个<a href="http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1312.pdf">提案</a>，只是GCC编译器实现了<a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/decimal/decimal.h">一个</a>，Clang不支持decimal floating point types，所以 QuickJS 专门实现了 BigInt 和 BigDecimal 的处理。BigInt 可以使 JavaScript 有任意大小的整数。QuickJS BigInt 性能上这里有个 js 程序 <a href="https://bellard.org/quickjs/pi_bigint.js">pi_bigint.js</a> 算10万位的 pi，相同机器上 V8 是2.3s，QuickJS 是0.26s。BigDecimal 相对于 BigInt 多了小数位，用做高精度小数计算。BigDecimal 使用十进制而不是二进制 BigInt 表示非小数部分，然后用 scale 来表示小数位置。这样的表示就不会有精度问题，使用 BigDecimal 计算是在 BigInt 之间进行运算，scale进行小数点位置更新。Fabrice Bellard用BigDecimal写了这段代码来计算pi的位数，代码在<a href="https://bellard.org/quickjs/pi_bigdecimal.js">这里</a>。</p>
<h3 id="QuickJS"><a href="#QuickJS" class="headerlink" title="QuickJS"></a>QuickJS</h3><p>QuickJS 只有210KB，体积小，启动快，解释执行速度快，支持最新 ECMAScript 标准（ECMA-262）。</p>
<p>ECMAScript 标准最大的变化是发生在 ES2015。类、箭头函数、静态类型数组、let关键字、maps、sets、promise等特性都是在 ES2015（ES6）增加的，ECMAScript 2016 主要增加了 await/async 关键字，ECMAScript 2017 主要增加了 rest/spread 运算符，ECMAScript 2020 主要增加了 BigInt。CMAScript 标准通读比较枯燥，最好在碰到坑时查阅。最新的 ECMAScript 标准在这里 <a href="https://tc39.es/ecma262/">ecma-262</a>。QuickJS包含了 ecma-262 标准测试套件 Test262，将 <a href="https://github.com/tc39/test262">test262 测试套件</a>安装到 QuickJS test262 目录下，QuickJS 运行测试套件的程序源文件是 run-test262.c，test262.conf 包含各种测试的选项，test262_error.txt 是记录当前显示错误信息的列表。到今年 Test262里面有已包含了三万多个单独测试 ECMAScript 规范的测试，而 QuickJS 几乎全部通过了测试，和 V8差不多，比 JavaScriptCore 强。Test262 是 ECMAScript 测试套件，在 <a href="https://test262.report/">Test262 Report 网站</a>上可以看到各个 js 引擎对 ECMAScript 标准支持情况，最新情况如下：<br><img src="/uploads/deeply-analyse-quickjs/7.png" alt=""><br>如上图所示，在语法、内置对象上 QuickJS 和 V8 都不相上下，附加特性上做的最好。</p>
<p>QuickJS 发布以来功能的更新都会发布在 <a href="https://bellard.org/quickjs/Changelog">QuickJS 的 changelog 里</a> 上，20年重要的更新就是 <a href="https://github.com/tc39/proposal-decimal">TC39 BigDecimal 提案</a>的支持还有更新了下 TC39的 <a href="https://github.com/tc39/proposal-operator-overloading">Operator overloading</a> 提案，更新的commit在<a href="https://github.com/tc39/proposal-operator-overloading/commit/c26e0fdc44864051c1047d032ad72760d35200d7">这里</a>，并修改了运算符重载语义使之更接近于TC39的提案。os和std模块做了更新和新增，包括 os.realpath、os.getcwd、os.mkdir、os.stat、os.lstat、os.readlink、os.readdir、os.utimes、os.exec、os.chdir、std.popen、std.loadFile、std.strerror、std.FILE.prototype.tello、std.parseExtJSON、std.setenv、std.unsetenv、std.getenviron。加了官方 <a href="https://github.com/bellard/quickjs">Github 镜像</a>。</p>
<p>下面我们通过安装 QuickJS 来小试下吧。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>QuickJS 的编译和咱们通过 Xcode 工程配置编译的方式不同，使用的是 makefile 来配置编译和安装的，和一些开源 C/C++ 工程编译使用 cmake 方式也有些不同，以前我们写些简单 c/c++ 的 demo 后，会简单的通过 clang 命令加参数进行编译和链接，但如果需要编译和链接的文件多了，编译配置复杂了，每次手工编写就太过复杂，因此就会用到 makefile 或者 cmake 来帮助减少复杂的操作提高效率。那什么是 makefile？ 和 cmake 有什么关系呢？</p>
<p>我先介绍下什么是 makefile 吧。</p>
<h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><p>makefile 是在目录下叫 Makefile 文件，由 make 这个命令工具进行解释执行。把源代码编译生成的中间目标文件 .o 文件，这个阶段只检测语法，如果源文件比较多，Object File 也就会多，再明确的把这些 Object File 指出来，链接合成一个执行文件就会比较繁琐，期间还会检查寻找函数是否有实现。为了能够提高编译速度，需要对没有编译过的或者更新了的源文件进行编译，其他的直接链接中间目标文件。而且当头文件更改了，需要重新编译引用了更改的头文件的文件。上面所说的过程只需要 make 命令和编写的 makefile 就能完成。</p>
<p>简单说，makefile 就是一个纯手动的 IDE，通过手动编写编译规则和依赖来配合 make 命令来提高编译工作效率。make 会先读入所有 include 的 makefile，将各文件中的变量做初始化，分析语法规则，创建依赖关系链，依据此关系链来定所需要生成的文件。</p>
<p>那么 makefile 的语法规则是怎样的呢？</p>
<p>makefile 的语法规则如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target ... : prerequisites ...</span><br><span class="line">    command</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>其中的 target 可以是一个目标文件，也可以是一个可执行的文件，还可以是一个label。prerequisites 表示是 target 所依赖的文件或者是 target。prerequisites 的文件或 target 只要有一个更新了，对应的后面的 command 就会执行。command 就是这个 target 要执行的 shell 命令。</p>
<p>举个例子，我们先写个 main.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;foo.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hi! \n&quot;</span>);</span><br><span class="line">    sayHey();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再写个 foo.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;foo.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayHey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hey! \n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再写个 makefile</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">hi: main.o foo.o</span></span><br><span class="line">    cc -o hi main.o foo.o</span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.c foo.h</span></span><br><span class="line">    cc -c main.c</span><br><span class="line"></span><br><span class="line"><span class="section">foo.o: foo.c foo.h</span></span><br><span class="line">    cc -c foo.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm hi main.o foo.o</span><br></pre></td></tr></table></figure>
<p>在该目录下直接输 make 就能生成 hi 可执行文件，如果想要清掉生成的可执行文件和中间目标文件，只要执行 make clean 就可以了。</p>
<p>上面代码中冒号后的 .c 和 .h 文件就是表示依赖的 prerequisites。你会发现.o 文件的字符串重复了两次，如果是这种重复多次的应该如何简化呢，类似 C 语言中的变量，实际上在 makefile 里是可以有类似变量的语法，在文件开始使用 = 号来定义就行。写法如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o foo.o</span><br></pre></td></tr></table></figure>
<p>使用这个变量的语法是 $(objects)，使用变量语法后 makefile 就变成下面的样子：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o foo.o</span><br><span class="line"></span><br><span class="line"><span class="section">hi: <span class="variable">$(objects)</span></span></span><br><span class="line">    cc -o hi <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.c foo.h</span></span><br><span class="line">    cc -c main.c</span><br><span class="line"></span><br><span class="line"><span class="section">foo.o: foo.c foo.h</span></span><br><span class="line">    cc -c foo.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm hi <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure>
<p>makefile 具有自动推导的能力，比如 target 如果是一个 .o 文件，那么 makefile 就会自动将 .c 加入 prerequisites，而不用手动写，并且 cc -c xxx.c 也会被推导出，利用了自动推导的 makefile 如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o foo.o</span><br><span class="line"></span><br><span class="line"><span class="section">hi: <span class="variable">$(objects)</span></span></span><br><span class="line">    cc -o hi <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o: foo.h</span></span><br><span class="line"><span class="section">foo.o:</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm hi <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure>
<p>make 中通配符和 shell 一样，~/js 表示是 $HOME 目录下的 js 目录，*.c 表示所有后缀是c的文件，比如 QuickJS 的 makefile 里为了能够随时保持纯净源码环境会使用 make clean 清理中间目标文件和生成文件，其中 makefile 的 clean 部分代码如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f repl.c qjscalc.c out.c</span><br><span class="line">    rm -f *.a *.o *.d *~ unicode_gen regexp_test <span class="variable">$(PROGS)</span></span><br><span class="line">    rm -f hello.c test_fib.c</span><br><span class="line">    rm -f examples/*.so tests/*.so</span><br><span class="line">    rm -rf <span class="variable">$(OBJDIR)</span>/ *.dSYM/ qjs-debug</span><br><span class="line">    rm -rf run-test262-debug run-test262-32</span><br></pre></td></tr></table></figure>
<p>上面的 repl.c、qjscalc.c 和 out.c 是生成的 QuickJS 字节码文件，<em>.a、</em>.o、*.d 表示所有后缀是a、o、d的文件。</p>
<p>如果要简化到编译并链接所有的 .c 和 .o 文件，可以按照下面的写法来写：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objects := <span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,$(<span class="built_in">wildcard</span> *.c)</span>)</span><br><span class="line">foo : <span class="variable">$(objects)</span></span><br><span class="line">    cc -o foo <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure>
<p>上面代码中的 patsubst 是模式字符串替换函数，%表示任意长度字符串，$加括号表示要执行 makefile 的函数，wildcard 的作用是扩展通配符，因为在变量定义和函数引用时，通配符会失效，因此这里 wildcard 的作用是获取目录下所有后缀是 .c 的文件。patsubst的语法如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">patsubst</span> &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)</span></span><br></pre></td></tr></table></figure>
<p>根据此语法，上例里，就是将目录下所有 .c 后缀文件返回成同名 .o 的文件。在 patsubst 和 wildcard 在 QuickJS 的 makefile 里广泛使用，比如下面这段：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ifdef</span> CONFIG_LTO</span><br><span class="line"><span class="section">libquickjs.a: $(patsubst %.o, %.nolto.o, <span class="variable">$(QJS_LIB_OBJS)</span>)</span></span><br><span class="line">    <span class="variable">$(AR)</span> rcs <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"><span class="keyword">endif</span> <span class="comment"># CONFIG_LTO</span></span><br></pre></td></tr></table></figure>
<p>上面这段表示在配置打开 lto 后，会把 QJS_LIB_OBJS 这个变量定义的那些中间目标 .o 文件后缀缓存 .nolto.o 后缀。</p>
<p>QuickJS 的 makefile 中使用的函数除了patsubst 和 wildcard 还有 shell。shell 的作用就是可以直接调用系统的 shell 函数，比如 QuickJS 里的 $(shell uname -s)，如果在 macOS 上运行会返回 Darwin，使用此方法可以判断当前用户使用的操作系统，从而进行不同的后续操作。比如 QuickJS 的 makefile 是这么做的：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(<span class="built_in">shell</span> uname -s)</span>,Darwin)</span><br><span class="line">CONFIG_DARWIN=y</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
<p>上面代码可以看出，通过判断 shell 函数返回值来确定是否是 Darwin内核，将结果记录在变量 CONFIG_DARWIN 变量中。通过这个结果后续配置编译器为 clang。</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ifdef</span> CONFIG_DARWIN</span><br><span class="line"><span class="comment"># use clang instead of gcc</span></span><br><span class="line">CONFIG_CLANG=y</span><br><span class="line">CONFIG_DEFAULT_AR=y</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>
<p>在编写 makefile 时有些 prerequisites 和 target 会变，这样在命令中就不能写具体的文件名，在 makefile 里有种自动产生变量的规则，叫做自动化变量可以解决这样的问题，自动化变量还能解决 makefile 冗余问题，因为自动化变量用简短的语法替代重复编写 target 和 prerequisites，自动化变量有$@、$%、$&lt;、$?、$+等，比如$@表示的是target，$^表示 prerequisites，GNU make 里在自动化变量里加入 D 或者 F 会变成变种自动化变量，能够代表更多意思，比如$(@F)表示在路径中取出文件名部分。自动化变量在 QuickJS 的 makefile 里使用很多。比如下面的代码：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(OBJDIR)</span>/%.o: %.c | <span class="variable">$(OBJDIR)</span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS_OPT)</span> -c -o <span class="variable">$@</span> <span class="variable">$&lt;</span></span><br></pre></td></tr></table></figure>
<p>上面这段代码的作用是当.o文件依赖的编译中间产物或 c 源文件有更新时，会重新编译生成.o文件 $@ 表示的是 $(OBJDIR)/%.o，$&lt; 表示的是 %.c | $(OBJDIR)，简化了代码，$@ 就像数组那样会依次取出 target，然后执行。</p>
<p>依赖关系里会有.h 头文件，你一定奇怪在 QuickJS 的 makefile 里那些头文件为什么就没有出现在 prerequisites 中了，这是为什么呢？</p>
<p>这是因为有办法让 makefile 自动生成依赖关系。如果没有这办法自动生成依赖关系的话，在大型工程中，你就需要对每个 c 文件包含了那些头文件了解清楚，并在 makefile 里写好，当修改 c 文件时还需要手动的维护 makefile，因此这种工作不光重复而且一不小心还会错。</p>
<p>那有办法能解决重复易错的问题么？</p>
<p>编译器，比如 clang 有个选项 -MMD -MF 可以生成依赖关系，生成为同名的 .d 文件，.d 文件里有相应 .c 的所依赖的文件。因此可以在 makefile 里利用编译器这个特性，使用变种自动化变量$(@F)来设置编译配置，自动设置同名文件名的.d文件。在 QuickJS 中是这么配置编译标识的：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ifdef CONFIG_CLANG</span><br><span class="line">  HOST_CC=clang</span><br><span class="line">  CC=$(CROSS_PREFIX)clang</span><br><span class="line">  CFLAGS=-g -Wall -MMD -MF $(OBJDIR)/$(@F).d</span><br><span class="line">  CFLAGS += -Wextra</span><br><span class="line">  CFLAGS += -Wno-sign-compare</span><br><span class="line">  CFLAGS += -Wno-missing-field-initializers</span><br><span class="line">  CFLAGS += -Wundef -Wuninitialized</span><br><span class="line">  CFLAGS += -Wunused -Wno-unused-parameter</span><br><span class="line">  CFLAGS += -Wwrite-strings</span><br><span class="line">  CFLAGS += -Wchar-subscripts -funsigned-char</span><br><span class="line">  CFLAGS += -MMD -MF $(OBJDIR)/$(@F).d</span><br></pre></td></tr></table></figure>
<p>上面代码中的$(@F).d 表示会根据 target 的文件名生成对应的包含依赖关系的 .d 文件。</p>
<p>生成完 .d 文件后，需要用 include 命令把这些规则加到 makefile 里，看下 QuickJS 的做法：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-include $(wildcard $(OBJDIR)/*.d)</span><br></pre></td></tr></table></figure>
<p>makefile 还有些隐含的规则，比如把源文件编译成中间目标文件这一步可以省略不写，make 会自动的推导生成中间目标文件，对应命令是 $(CC) –c $(CPPFLAGS) $(CFLAGS)，链接目标文件是通过运行编译器的ld来生成，也可以省略，对应的命令是$(CC) $(LDFLAGS) <n>.o $(LOADLIBES) $(LDLIBS)。隐含规则使用的变量包括命令变量和命令参数变量，隐含规则命令变量有 AR，默认命令是 ar 用来对函数库打包，AS 默认是 as，CXX 默认是 g++，CC 默认命令是 cc，是 C 语言的编译程序，QuickJS 的 CC 会根据系统进行区分设置，如果是 macOS 这种 Darwin 系统，会使用clang，其他的用 gcc。如果不是 Darwin 系统同时开启 lto，那么 AS 会设置为 llvm-ar 命令，对应 QuickJS 的 makefile 代码如下：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ifdef</span> CONFIG_DEFAULT_AR</span><br><span class="line">  AR=<span class="variable">$(CROSS_PREFIX)</span>ar</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">ifdef</span> CONFIG_LTO</span><br><span class="line">    AR=<span class="variable">$(CROSS_PREFIX)</span>llvm-ar</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    AR=<span class="variable">$(CROSS_PREFIX)</span>ar</span><br><span class="line">  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><br>上面 CROSS_PREFIX 变量实际上已经没用了，以前是因为要兼容在 Linux 下运行 Windows 所需要添加 mingw32 的前缀，目前这段变量定义已经被注释掉了。 隐含规则命令参数有编译器参数 CFLAGS 和链接器参数 LDFLAGS 等，这些变量可以根据条件判断或者平台区分，配置不同参数。</p>
<h3 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h3><p>由于 GNU 的 make 和其他工具，比如微软的 nmake 还有 BSD 的 pmake 的 makefile 语法规则标准有不同，因此如果想为多个平台和工具编写可编译的 makefile 需要写多份 makefile 文件。</p>
<p>为了应对这样重复繁琐的工作，cmake 出现了。</p>
<p>我们可以编写 CMakeList.txt 这样的文件来定制编译流程，cmake 会将其转换成平台和工具相应的 makefile 文件和对应的工程文件（比如 Xcode 工程或Visual Studio工程）。比如你所熟悉的 LLVM 就是用的 cmake，源码各个目录下都有对应的 CMakeList.txt 文件。具体可以参看<a href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html">官方教程</a>。</p>
<p>使用 qjsc -e 生成的 C 代码，通过编写如下的 CMakeLists.txt 配置：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION <span class="number">3.10</span>)</span><br><span class="line">project(runtime)</span><br><span class="line">add_executable(runtime</span><br><span class="line">        # 如果有多个 C 文件，在这里加</span><br><span class="line">        src/main.c)</span><br><span class="line"></span><br><span class="line"># 头文件和库文件</span><br><span class="line">include_directories(/usr/local/include)</span><br><span class="line">add_library(quickjs STATIC IMPORTED)</span><br><span class="line">set_target_properties(quickjs</span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        <span class="string">&quot;/usr/local/lib/quickjs/libquickjs.a&quot;</span>)</span><br><span class="line"></span><br><span class="line"># 链接到 <span class="function">runtime</span></span><br><span class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">(runtime</span></span></span><br><span class="line"><span class="params"><span class="function">        quickjs)</span></span></span><br></pre></td></tr></table></figure><br>按照上面代码编写，可以编译出可执行的文件了。</p>
<p>github 上有个 <a href="https://github.com/mezum/quickjs-cmake">QuickJS 工程的 cmake 脚本</a>，可以用来下载编译 QuickJS 库。</p>
<h3 id="Xcode-来编译安装和调试-QuickJS-源码"><a href="#Xcode-来编译安装和调试-QuickJS-源码" class="headerlink" title="Xcode 来编译安装和调试 QuickJS 源码"></a>Xcode 来编译安装和调试 QuickJS 源码</h3><p>由于 QuickJS 使用的是 makefile 管理，而 makefile 不能直接转成 Xcode 的工程文件，因此需要使用 Xcode 的 External Build System，创建工程 QuickJSXcode 后，给工程添加 QuickJS 源码文件，直接导入到工程即可，使用 ⌘ + B 构建工程，在 Product/Scheme/Edit Scheme 里选择 Run/Info，在 Executable 里选择刚才构建生成的 qjs 可执行文件。如下图：<br><img src="/uploads/deeply-analyse-quickjs/8.png" alt=""><br>然后添加命令行工具 Target 辅助，在 Target 的 Dependencies 里添加 QuickJSXcode，在 Link Binary With Libraries 里添加编译出来的 libquickjs.a。最后在 Build Settings 的 Search Paths 里，将 QuickJS 代码路径添加到 Header Search Paths 和 Library Search Paths 里。完成后现在就可以使用 Xcode 进行 QuickJS 源码断点调试、自动补全和跳转了。如下图所示：<br><img src="/uploads/deeply-analyse-quickjs/6.png" alt=""><br>通过断点调试，更加方便阅读理解源码。可调试工程我放到了Github上，在<a href="https://github.com/ming1016/study/tree/master/QuickJS">这里</a>。</p>
<p>QuickJS 在 VSCode 的调试的话，先 fork 一份 Koushik Dutta 的 QuickJS 修改版本，代码在<a href="https://github.com/koush/quickjs">这</a>，VSCode 扩展的 <a href="https://github.com/koush/vscode-quickjs-debug">github 地址</a>，<a href="https://marketplace.visualstudio.com/items?itemName=koush.quickjs-debug">VSCode 扩展市场链接</a>，对 QuickJS 修改的详细 Koushik Dutta 在邮件里有说明，邮件地址<a href="https://www.freelists.org/post/quickjs-devel/QuickJS-Debugger-implementation-for-VSCode">在这</a>，Fabrice Bellard 看了也<a href="https://www.freelists.org/post/quickjs-devel/QuickJS-Debugger-implementation-for-VSCode,4">回邮件</a>表示以后会增加调试接口。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>按照<a href="https://bellard.org/quickjs/quickjs.html#Installation">官方手册写的方式</a>使用 makefile 安装后，命令行工具会被安装到 /usr/local/bin 目录下，此目录下会有 JS 解释器 qjs，有编译器 qjsc（QuickJS compiler） 编译 js 文件为可执行文件（QuickJS引擎 + js 文件打包，qjs 解释执行目标 js 文件），还有一个可以对任意长度数字计算的 qjscalc。编译的库会放到 /usr/local/lib/quickjs/ 目录下，有静态库 libquickjs.a，可以生成更小和速度更快的库 libquickjs.lto.a，lto（Link-Time-Optimization）需要在编译时加上 -flto 标识。</p>
<p>qjsc 还可以把 js 文件编译成 QuickJS 虚拟机的字节码，比如编写下面的一段 javascript 代码，保存为 helloworld.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myString1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myString2 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myString1 + <span class="string">&quot; &quot;</span> + myString2 + <span class="string">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qjsc -o hello helloworld.js</span><br></pre></td></tr></table></figure>
<p>就能够输出一个可执行文件 hello 可执行文件，运行后输出 hello world !。把参数改成-e 可以输出.c文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qjsc -e -o helloworld.c helloworld.js</span><br></pre></td></tr></table></figure>
<p>文件内容如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* File generated automatically by the QuickJS compiler. */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;quickjs-libc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint32_t</span> qjsc_helloworld_size = <span class="number">173</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint8_t</span> qjsc_helloworld[<span class="number">173</span>] = &#123;</span><br><span class="line"> <span class="number">0x02</span>, <span class="number">0x09</span>, <span class="number">0x12</span>, <span class="number">0x6d</span>, <span class="number">0x79</span>, <span class="number">0x53</span>, <span class="number">0x74</span>, <span class="number">0x72</span>,</span><br><span class="line"> <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x67</span>, <span class="number">0x31</span>, <span class="number">0x12</span>, <span class="number">0x6d</span>, <span class="number">0x79</span>, <span class="number">0x53</span>,</span><br><span class="line"> <span class="number">0x74</span>, <span class="number">0x72</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x67</span>, <span class="number">0x32</span>, <span class="number">0x0a</span>, <span class="number">0x48</span>,</span><br><span class="line"> <span class="number">0x65</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span>, <span class="number">0x0a</span>, <span class="number">0x57</span>, <span class="number">0x6f</span>, <span class="number">0x72</span>,</span><br><span class="line"> <span class="number">0x6c</span>, <span class="number">0x64</span>, <span class="number">0x0e</span>, <span class="number">0x63</span>, <span class="number">0x6f</span>, <span class="number">0x6e</span>, <span class="number">0x73</span>, <span class="number">0x6f</span>,</span><br><span class="line"> <span class="number">0x6c</span>, <span class="number">0x65</span>, <span class="number">0x06</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span>, <span class="number">0x67</span>, <span class="number">0x02</span>, <span class="number">0x20</span>,</span><br><span class="line"> <span class="number">0x02</span>, <span class="number">0x21</span>, <span class="number">0x1a</span>, <span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span>,</span><br><span class="line"> <span class="number">0x77</span>, <span class="number">0x6f</span>, <span class="number">0x72</span>, <span class="number">0x6c</span>, <span class="number">0x64</span>, <span class="number">0x2e</span>, <span class="number">0x6a</span>, <span class="number">0x73</span>,</span><br><span class="line"> <span class="number">0x0e</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0xa0</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x01</span>,</span><br><span class="line"> <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x52</span>, <span class="number">0x01</span>, <span class="number">0xa2</span>, <span class="number">0x01</span>,</span><br><span class="line"> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3f</span>, <span class="number">0xe1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"> <span class="number">0x80</span>, <span class="number">0x3f</span>, <span class="number">0xe2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x3e</span>,</span><br><span class="line"> <span class="number">0xe1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x82</span>, <span class="number">0x3e</span>, <span class="number">0xe2</span>, <span class="number">0x00</span>,</span><br><span class="line"> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x82</span>, <span class="number">0x04</span>, <span class="number">0xe3</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"> <span class="number">0x3a</span>, <span class="number">0xe1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0xe4</span>, <span class="number">0x00</span>,</span><br><span class="line"> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3a</span>, <span class="number">0xe2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x38</span>,</span><br><span class="line"> <span class="number">0xe5</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x42</span>, <span class="number">0xe6</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"> <span class="number">0x00</span>, <span class="number">0x38</span>, <span class="number">0xe1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0xe7</span>,</span><br><span class="line"> <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xe2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line"> <span class="number">0x00</span>, <span class="number">0x9d</span>, <span class="number">0x04</span>, <span class="number">0xe8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x9d</span>,</span><br><span class="line"> <span class="number">0x24</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0xcd</span>, <span class="number">0x28</span>, <span class="number">0xd2</span>, <span class="number">0x03</span>, <span class="number">0x01</span>,</span><br><span class="line"> <span class="number">0x04</span>, <span class="number">0x3d</span>, <span class="number">0x3f</span>, <span class="number">0x35</span>, <span class="number">0x36</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> JSContext *<span class="title">JS_NewCustomContext</span><span class="params">(JSRuntime *rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  JSContext *ctx = JS_NewContextRaw(rt);</span><br><span class="line">  <span class="keyword">if</span> (!ctx)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  JS_AddIntrinsicBaseObjects(ctx);</span><br><span class="line">  JS_AddIntrinsicDate(ctx);</span><br><span class="line">  JS_AddIntrinsicEval(ctx);</span><br><span class="line">  JS_AddIntrinsicStringNormalize(ctx);</span><br><span class="line">  JS_AddIntrinsicRegExp(ctx);</span><br><span class="line">  JS_AddIntrinsicJSON(ctx);</span><br><span class="line">  JS_AddIntrinsicProxy(ctx);</span><br><span class="line">  JS_AddIntrinsicMapSet(ctx);</span><br><span class="line">  JS_AddIntrinsicTypedArrays(ctx);</span><br><span class="line">  JS_AddIntrinsicPromise(ctx);</span><br><span class="line">  JS_AddIntrinsicBigInt(ctx);</span><br><span class="line">  <span class="keyword">return</span> ctx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  JSRuntime *rt;</span><br><span class="line">  JSContext *ctx;</span><br><span class="line">  rt = JS_NewRuntime();</span><br><span class="line">  js_std_set_worker_new_context_func(JS_NewCustomContext);</span><br><span class="line">  js_std_init_handlers(rt);</span><br><span class="line">  JS_SetModuleLoaderFunc(rt, <span class="literal">NULL</span>, js_module_loader, <span class="literal">NULL</span>);</span><br><span class="line">  ctx = JS_NewCustomContext(rt);</span><br><span class="line">  js_std_add_helpers(ctx, argc, argv);</span><br><span class="line">  js_std_eval_binary(ctx, qjsc_helloworld, qjsc_helloworld_size, <span class="number">0</span>);</span><br><span class="line">  js_std_loop(ctx);</span><br><span class="line">  JS_FreeContext(ctx);</span><br><span class="line">  JS_FreeRuntime(rt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，长度173的数组 qjsc_helloworld 记录的就是 quickjs 编译生成的字节码。js_std_loop 就是 Event Loop 处理的函数，是调用用户 js 回调的主循环，js_std_loop 函数实现代码很简洁，如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* main loop which calls the user JS callbacks */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">js_std_loop</span><span class="params">(JSContext *ctx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JSContext *ctx1;</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="comment">/* execute the pending jobs */</span></span><br><span class="line">        <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">            err = JS_ExecutePendingJob(JS_GetRuntime(ctx), &amp;ctx1);</span><br><span class="line">            <span class="keyword">if</span> (err &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    js_std_dump_error(ctx1);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!os_poll_func || os_poll_func(ctx))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面代码中的 os_poll_func 就是 js_os_poll 函数的调用，js_os_poll 函数在 quickjs-libc.c 里定义，会在主线程检查有没有需要执行的任务，没有的话会在后台等待事件执行。</p>
<p>简单说QuickJS集成使用过程是先将 QuickJS 源码编译成静态或动态库。makefile 会把头文件、库文件和可执行文件 copy 到标准目录下。然后 C 源码调用 QuickJS 提供的 API 头文件。最后编译生成可执行文件。</p>
<p>那么 js 和原生 c 的交互如何做呢？</p>
<h2 id="调用原生函数"><a href="#调用原生函数" class="headerlink" title="调用原生函数"></a>调用原生函数</h2><p>在 QuickJS 的 js 代码里可以通过 import 导入一个 c 的库，调用库里的函数。比如 QuickJS 中的 fib.c 文件，查看其函数 js_fib 就是对 js 里调用的 fib 函数的实现，使用的是 JS_CFUNC_DEF 宏来做 js 方法和对应 c 函数映射。映射代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> JSCFunctionListEntry js_fib_funcs[] = &#123;</span><br><span class="line">    JS_CFUNC_DEF(<span class="string">&quot;fib&quot;</span>, <span class="number">1</span>, js_fib ),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 js 中使用起来也很简单，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fib &#125; <span class="keyword">from</span> <span class="string">&quot;./fib.so&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> f = fib(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>quickjs-libc 内置了些 std 和 os 原生函数可以直接供 js 使用，比如 std.out.printf 函数，先看在 js_std_file_proto_funcs 里的映射代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JS_CFUNC_DEF(<span class="string">&quot;printf&quot;</span>, <span class="number">1</span>, js_std_printf ),</span><br></pre></td></tr></table></figure>
<p>可以看到对应的是 js_std_printf 函数，JS_CFUNC_DEF 宏的第二个参数为1表示 out。在 js 里使用的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> std <span class="keyword">from</span> <span class="string">&#x27;std&#x27;</span></span><br><span class="line"><span class="keyword">const</span> hi = <span class="string">&#x27;hi&#x27;</span></span><br><span class="line">std.out.printf(<span class="string">&#x27;%s&#x27;</span>, hi)</span><br></pre></td></tr></table></figure>
<p>怎么新建一个自己的库呢？</p>
<p>QuickJS 里的 fib 就是个例子，通过生成的 test_fib.c 可以看到下面的代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> JSModuleDef *<span class="title">js_init_module_fib</span><span class="params">(JSContext *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</span><br><span class="line">js_init_module_fib(ctx, <span class="string">&quot;examples/fib.so&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码可以看到，可以声明一个 js_init_module_fib 函数并指定库的路径，创建一个 c 模块。在库的源文件 fib.c 里看实现 js_init_module_fib 函数的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> JS_SHARED_LIBRARY</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JS_INIT_MODULE js_init_module</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JS_INIT_MODULE js_init_module_fib</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JSModuleDef *<span class="title">JS_INIT_MODULE</span><span class="params">(JSContext *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *module_name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JSModuleDef *m;</span><br><span class="line">    m = JS_NewCModule(ctx, module_name, js_fib_init);</span><br><span class="line">    <span class="keyword">if</span> (!m)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    JS_AddModuleExportList(ctx, m, js_fib_funcs, countof(js_fib_funcs));</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面代码可以看到，创建模块使用的是 JS_NewCModule 函数，接着通过 JS_AddModuleExportList 将模块的函数加到模块导出列表里。JS_SetModuleLoaderFunc 会设置读取库的函数为 js_module_loader，js_module_loader 会判断路径后缀，如果是.so 会调用 js_module_loader_so 函数。js_module_loader_so 会使用 dlopen 和 dlsym 来调用 so 库。</p>
<p>QuickJS 对调用 c 网络的使用可以参看 <a href="https://github.com/khanhas/minnet-quickjs">minnet-quickjs</a> 的 minnet.c 封装接口实现。</p>
<p>js 调用 iOS 的 Objective-C 的方法可以参看 <a href="https://github.com/quickjs-ios/quickjs-ios">QuickJS iOS Bridge</a> 这个工程，使用示例可以参看<a href="https://github.com/quickjs-ios/quickjs-ios/blob/464b2501e37dd749f6c1db16af73b9d2e36e7bee/QuickJS-iOSTests/QuickJS_iOSTests.m#L276">这段调用 Objective-C 网络请求的代码</a>。</p>
<p>另外在 QuickJS 的邮件列表中看到些同学对 QuickJS 做了写扩展工作，将 QuickJS 的能力进行了增强。比如将 QuickJS 移植到 <a href="http://fuchsia.dev">Fuchsia 操作系统</a>上，在<a href="https://fuchsia.googlesource.com/third_party/quickjs">这里</a>可以看到。<a href="https://github.com/ratboy666/qjs-ffi">qjs-ffi</a> 对 QuickJS 增加 ffi 的支持。Eduard Suica 开发了 <a href="https://github.com/eduardsui/jib.js">jib.js</a> 可将 QuickJS 作为 js 解释器 的 js 运行时环境，兼容 Node.js，支持 socket、管道、文件和控制台。</p>
<p>接下来，我们深入 QuickJS 内部，看看 QuickJS 的源代码结构以及说说源码的原理。</p>
<h2 id="源码文件介绍"><a href="#源码文件介绍" class="headerlink" title="源码文件介绍"></a>源码文件介绍</h2><p>我先对 QuickJS 源码文件做个介绍，主要文件如下：</p>
<ul>
<li>quickjs.c 和 quickjs.h：QuickJS 的核心代码，其他文件基本都会依赖于它。</li>
<li>quickjs-lib.c 和 quickjs-lib.h：调用 QuickJS 接口 API，供 C 程序使用。</li>
<li>quickjs-atom.h：定义了js的关键字原子字符串。</li>
<li>quickjs-opcode.h：定义了字节码操作符</li>
</ul>
<p>文件夹：</p>
<ul>
<li>examples/：一些 js 代码的示例，包含了和 c 交互的 js 代码</li>
<li>tests/：测试 QuickJS 核心功能用的</li>
<li>doc/：QuickJS 官方使用说明文档</li>
</ul>
<p>一些可执行程序相关的文件：</p>
<ul>
<li>qjsc.c：编译完生成可执行文件 qjsc，是 QuickJS 的 Javascript 编译器。</li>
<li>qjs.c：可交互解释执行的程序 qjs，是 QuickJS 的解释器。qjs 具有栈虚机内核，通过读取 js 文件解释执行，函数调用链是 main-&gt;eval_file-&gt;eval_buf-&gt;JS_EvalFunction-&gt;JS_EvalFunctionInternal-&gt;JS_CallFree-&gt;JS_CallInternal</li>
<li>repl.js：js写的REPL程序。</li>
<li>qjscalc.js：一个计算器程序。</li>
</ul>
<p>其中 qjsc.c 会根据参数输入，挨个调用 compile_file 函数进行编译。参数说明如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ming@mingdeMacBook-Pro ~ % qjsc -h</span><br><span class="line">QuickJS Compiler version <span class="number">2020</span><span class="number">-11</span><span class="number">-08</span></span><br><span class="line">usage: qjsc [options] [files]</span><br><span class="line"></span><br><span class="line">options are:</span><br><span class="line">-c          只输出字节码 C 文件，默认是输出可执行文件</span><br><span class="line">-e          输出带 main 函数的字节码 C 文件</span><br><span class="line">-o output   设置输出文件名，默认是 a.out 或者 out.c</span><br><span class="line">-N cname    设置输出 c 文件的字节码数组的变量名</span><br><span class="line">-m          编译成 JavaScript 模块</span><br><span class="line">-D module_name         编译动态加载模块或 worker，也就是用了 <span class="keyword">import</span> 或 os.Worker 的情况</span><br><span class="line">-M module_name[,cname] 给外部 C 模块添加初始化代码</span><br><span class="line">-x          big endian 和 little endian 翻转，用于交叉编译</span><br><span class="line">-p prefix   设置 C 变量名的前缀</span><br><span class="line">-S n        设置最大栈大小，默认是 <span class="number">262144</span></span><br><span class="line">-flto       编译成可执行文件使用 clang 的链接优化</span><br><span class="line">-fbignum    big number 支持的开启</span><br><span class="line">-fno-[date|eval|<span class="built_in">string</span>-normalize|regexp|json|proxy|<span class="built_in">map</span>|typedarray|promise|<span class="keyword">module</span>-loader|bigint]</span><br><span class="line">            让一些语言特性不可用，从而能够让生成的代码更小</span><br></pre></td></tr></table></figure>
<p>编译的过程是先使用 js_load_file 读取 js 文件内容，使用 JS_Eval 函数生成 JSValue 的对象，JSValue 是基本的值或指针地址，比如函数、数组、字符串都是值，然后使用 output_object_code 函数把对象的字节码写到文件里，也就是 dump 成二进制。生成可执行文件使用的函数是 output_executable。</p>
<p>qjs 的 Options -e 表示执行表达式，-i 表示进入交互模式，-I 表示加载文件，-d 会统计内存使用情况。</p>
<p>另外还有一些辅助函数 cutils.c、cutils.h。unicode 相关函数文件 libunicode.c、libunicode.h、libunicode-table.h。正则表达式支持相关文件 libregexp.c、libregexp.h、libregexp-opcode.h。链表 list.h。Decimal 任意精度科学计算 libBF libbf.c、libbf.h。</p>
<h2 id="QuickJS-架构"><a href="#QuickJS-架构" class="headerlink" title="QuickJS 架构"></a>QuickJS 架构</h2><p>QuickJS 的结构图如下：<br><img src="/uploads/deeply-analyse-quickjs/5.png" alt=""><br>如上图所示，其中最上层是 qjs 和 qjsc，qjs 包含了命令行参数处理，引擎环境创建，加载模块和 js 文件读取解释执行。qjsc 可以编译 js 文件成字节码文件，生成的字节码可以直接被解释执行，性能上看是省掉了 js 文件解析的消耗。</p>
<p>中间层是核心，JSRuntime 是 js 运行时，可以看做是 js 虚拟机环境，多个 JSRuntime 之间是隔离的，他们之间不能相互调用和通信。JSContext 是虚机里的上下文环境，一个 JSRuntime 里可以有多个 JSContext，每个上下文有自己的全局和系统对象，不同 JSContext 之间可以相互访问和共享对象。JS_Eval 和 JS_Parse 会把 js 文件编译为字节码。JS_Call 是用来解释执行字节码的。JS_OPCode 是用来标识执行指令对应的操作符。JSClass 包含标准的 js 的对象，是运行时创建的类，对象类型使用 JSClassID 来标记，使用 JS_NewClassID 和 JS_NewClass 函数注册，使用 JS_NewObjectClass 来创建对象。JSOpCode 是字节码的结构体，通过 quickjs-opcode.h 里的字节码的定义可以看到，QuickJS 对于每个字节码的大小都会精确控制，目的是不浪费内存使用，比如8位以下用不到1个字节和其他信息一起放在那1个字节里，8位用2个字节，整数在第2个字节里，16位用后2个字节。Unicode 是 QuickJS 自己做的库 libunicode.c，libunicode 有 Unicode 规范化和脚本通用类别查询，包含所有 Unicode 二进制属性，libunicode 还可以单独出来用在其他工程中。中间层还包含支持科学计算 BigInt 和 BigFloat 的 libbf 库，正则表达式引擎 libregexp。扩展模块 Std Module 和 OS Module，提供标准能力和系统能力，比如文件操作和时间操作等。</p>
<p>底层是基础，JS_RunGC 使用引用计数来管理对象的释放。JS_Exception 是会把 JSValue 返回的异常对象存在 JSContext 里，通过 JS_GetException 函数取出异常对象。内存管理控制 js 运行时全局内存分配上限使用的是 JS_SetMemoryLimit 函数，自定义分配内存用的是 JS_NewRuntime2 函数，堆栈的大小使用的是 JS_SetMaxStackSize 函数来设置。</p>
<p>总的来说 QuickJS 的运行方式如下图：<br><img src="/uploads/deeply-analyse-quickjs/3.png" alt=""></p>
<h2 id="QuickJS-核心代码流程"><a href="#QuickJS-核心代码流程" class="headerlink" title="QuickJS 核心代码流程"></a>QuickJS 核心代码流程</h2><p>quickjs.c 有5万多行代码。分析 QuickJS 代码可以从他解析执行 JS 代码的过程一步一步的分析。调用 QuickJS 执行一段 JS 代码的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JSRuntime *rt = JS_NewRuntime();</span><br><span class="line">JSContext *ctx = JS_NewContext(rt);</span><br><span class="line">js_std_add_helpers(ctx, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *scripts = <span class="string">&quot;console.log(&#x27;hello quickjs&#x27;)&quot;</span>;</span><br><span class="line">JS_Eval(ctx, scripts, <span class="built_in">strlen</span>(scripts), <span class="string">&quot;main&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码中 rt 和 ctx 是先构造一个 JS 运行时和上下文环境，js_std_add_helpers 是调用 C 的 std 方法帮助在控制台输出调试信息。</p>
<h3 id="新建-Runtime"><a href="#新建-Runtime" class="headerlink" title="新建 Runtime"></a>新建 Runtime</h3><p>JS_NewRuntime 函数会新建一个 JSRuntime rt，Runtime的结构体 JSRuntime 包含了内存分配函数和状态，原子大小 atom_size 和原子结构数组指针 atom_array，记录类的数组 class_array，用于 GC 的一些链表 head，栈头 stack_top，栈空间大小（bytes）stack_size，当前栈帧 current_stack_frame，避免重复出现内存超出错误的 in_out_of_memory 布尔值，中断处理 interrupt_handler，module 读取函数 module_loader_func，用于分配、释放和克隆 SharedArrayBuffers 的 sab_funcs，Shape 的哈希表 shape_hash，创建一般函数对象外，还有种避开繁琐字节码处理更快创建函数对象的方法，也就是 Shape，创建 Shape 的调用链是 JS_NewCFunctionData -&gt; JS_NewObjectProtoClass -&gt; js_new_shape。创建 shape 的函数是 js_new_shape2，创建对象调用的函数是 JS_NewObjectFromShape。</p>
<p>创建的对象是 JSObject 结构体，JSObject 是 js 的对象，JSObject 的字段会使用 union，结构体和 union 的区别是结构体的字段之间会有自己的内存，而 union 里的字段会使用相同的内存，union 内存就是里面占用最多内存字段的内存。union 使用的内存覆盖方式，只能有一个字段的值，每次有新字段赋值都会覆盖先前的字段值。JSObject 里第一个 union 是用到引用计数的，<code>__gc_ref_count</code> 用来计数，<code>__gc_mark</code> 用来描述当前 GC 的信息，值为 JSGCObjectTypeEnum 枚举。extensible 是表示对象能否扩展。is_exotic 记录对象是否是 exotic 对象，es 规范里定义只要不是普通的对象都是 exotic 对象，比如数组创建的实例就是 exotic 对象。fast_array 为 true 用于JS_CLASS_ARRAY、JS_CLASS_ARGUMENTS和类型化数组这样只会用到 get 和 put 基本操作的数组。如果对象是构造函数 is_constructor 为 true。当 is_uncatchable_error 字段为 true 时表示对象的错误不可捕获。class_id 对应的是 JS_CLASS 打头的枚举值，这些枚举值定义了类的类型。原型和属性的名字还有 flag 记在 shape 字段，存属性的数组记录在 prop 字段。</p>
<p>first_weak_ref 指向第一次使用这个对象做键的 WeakMap 地址。在 js 中 WeakMap 的键必须要是对象，Map 的键可以是对象也可以是其他类型，当 Map 的键是对象时会多一次对对象引用的计数，而 WeakMap 则不会，WeakMap没法获取所有键和所有值。键使用对象主要是为了给实例存储一些额外的数据，如果使用 Map 的话释放对象时还需要考虑 Map 对应键和值的删除，维护起来不方便，而使用 WeakMap，当对象在其他地方释放完后对应的 WeakMap 键值就会被自动清除掉。</p>
<p>JS_ClASS 开头定义的类对象使用的是 union，因为一个实例对象只可能属于一种类型。其中 JS_CLASS_BOUND_FUNCTION 类型对应的结构体是 JSBoundFunction，JS_CLASS_BOUND_FUNCTION 类型是使用 bind() 方法创建的函数，创建的函数的 this 被指定是 bind() 的第一个参数，bind 的其他参数会给新创建的函数使用。JS_CLASS_C_FUNCTION_DATA 这种类型的对象是 QuickJS 的扩展函数，对应结构体是 JSCFunctionDataRecord。JS_CLASS_FOR_IN_ITERATOR 类型对象是 for…in 创建的迭代器函数，对应的结构体是 JSForInIterator。</p>
<p>JS_CLASS_ARRAY_BUFFER 表示当前对象是 ArrayBuffer 对象，ArrayBuffer 是用来访问二进制数据，比如加快数组操作，还有媒体和网络 Socket 的二进制数据，ArrayBuffer 对应 swift 里的 byte array，swift 的字符串类型是基于 Unicode scalar 值构建的，一个 Unicode scalar 是一个21位数字，用来代表一个字符或修饰符，比如 U+1F600 对应的修饰符是 😀，U+004D 对应的字符是 M。因此 Unicode scalar 是可以由 byte array 来构建的。byte array 和字符之间也可以相互转换，如下面的 swift 代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符转 byte array</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;starming&quot;</span></span><br><span class="line"><span class="keyword">let</span> byteArray: [<span class="type">UInt8</span>] <span class="operator">=</span> str.utf8.map&#123; <span class="type">UInt8</span>(<span class="variable">$0</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// byte array 转字符</span></span><br><span class="line"><span class="keyword">let</span> byteArray:[<span class="type">UInt8</span>] <span class="operator">=</span> [<span class="number">115</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">109</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>]</span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="type">String</span>(data: <span class="type">Data</span>(bytes: byteArray, count: <span class="number">8</span>), encoding: .utf8)</span><br></pre></td></tr></table></figure>
<p>上面代码中，将 starming 字符串转换成了 [115, 116, 97, 114, 109, 105, 110, 103] byte array，逆向过来也没有问题。</p>
<p>typed_array 字段包含如下类型：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    JS_CLASS_UINT8C_ARRAY,      <span class="comment">/* u.array (typed_array) */</span></span><br><span class="line">    JS_CLASS_INT8_ARRAY,        <span class="comment">/* u.array (typed_array) */</span></span><br><span class="line">    JS_CLASS_UINT8_ARRAY,       <span class="comment">/* u.array (typed_array) */</span></span><br><span class="line">    JS_CLASS_INT16_ARRAY,       <span class="comment">/* u.array (typed_array) */</span></span><br><span class="line">    JS_CLASS_UINT16_ARRAY,      <span class="comment">/* u.array (typed_array) */</span></span><br><span class="line">    JS_CLASS_INT32_ARRAY,       <span class="comment">/* u.array (typed_array) */</span></span><br><span class="line">    JS_CLASS_UINT32_ARRAY,      <span class="comment">/* u.array (typed_array) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_BIGNUM</span></span><br><span class="line">    JS_CLASS_BIG_INT64_ARRAY,   <span class="comment">/* u.array (typed_array) */</span></span><br><span class="line">    JS_CLASS_BIG_UINT64_ARRAY,  <span class="comment">/* u.array (typed_array) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    JS_CLASS_FLOAT32_ARRAY,     <span class="comment">/* u.array (typed_array) */</span></span><br><span class="line">    JS_CLASS_FLOAT64_ARRAY,     <span class="comment">/* u.array (typed_array) */</span></span><br><span class="line">    JS_CLASS_DATAVIEW,          <span class="comment">/* u.typed_array */</span></span><br></pre></td></tr></table></figure>
<p>typed_array 也就是类型化数组，其结构体是 JSTypedArray。类型化数组把实现分为 ArrayBuffer 对象缓冲，使用视图读写缓冲对象中的内容，视图会将数据转换成有类型的数组。</p>
<p>map_state 字段的结构体是 JSMapState，用来存放以下对象类型的状态：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JS_CLASS_MAP,               <span class="comment">/* u.map_state */</span></span><br><span class="line">JS_CLASS_SET,               <span class="comment">/* u.map_state */</span></span><br><span class="line">JS_CLASS_WEAKMAP,           <span class="comment">/* u.map_state */</span></span><br><span class="line">JS_CLASS_WEAKSET,           <span class="comment">/* u.map_state */</span></span><br></pre></td></tr></table></figure>
<p>上面对象类型的状态，状态包括是否是 weak 的Map、Map 记录链接头、记录数量、链接头哈希表、哈希大小、调整哈希表大小的次数。</p>
<p>Map 的迭代器类型是 JS_CLASS_MAP_ITERATOR 和 JS_CLASS_SET_ITERATOR，对应的结构体是 JSMapIteratorData。数组迭代器的类型是 JS_CLASS_ARRAY_ITERATOR 和 JS_CLASS_STRING_ITERATOR，对应结构体是 JSArrayIteratorData。正则表达式迭代器的类型是 JS_CLASS_REGEXP_STRING_ITERATOR，对应结构体是 JSRegExpStringIteratorData。function 后带一个星号这样表示的函数是生成器函数，类型是 JS_CLASS_GENERATOR，结构体是 JSGeneratorData，生成器函数会返回一个 generator 对象。生成器函数用于 coroutine，函数内通过 yield 语句可以将函数执行暂停，让其他函数可以执行，再次执行可以从暂停处继续执行。</p>
<p>最后就是 big number 的数值运算，包括 bigint_ops、bigfloat_ops、bigdecimal_ops。</p>
<p>JS_NewRuntime 函数对 JSRuntime 和 JSMallocState 初始化使用的是 memset 函数，这个函数一般是对比较大些的结构体进行初始化，因为是直接操作内存，所以很快。JS_NewRuntime 函数使用的 JSMallocFunctions 结构体来记录 JSMallocState 分配内存状态。 JSRuntime 里用 context_list 记录所有的上下文，gc_obj_list 记录分配的 GC 对象，在调用 JS_FreeValueRT 函数时如果 JSValue 的 tag 是字节码，同时不在 GC 清理周期内时，会将 GC 对象加到 gc_zero_ref_count_list 里。</p>
<p>接着 JS_NewRuntime 函数会调用 JS_InitAtoms 函数去初始化 Atom，包括那些 js 的关键字和symbol等。QuickJS 使用 include quickjs-atom.h 文件方式导入的 atom，代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    __JS_ATOM_NULL = JS_ATOM_NULL,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF(name, str) JS_ATOM_ ## name,</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;quickjs-atom.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> DEF</span></span><br><span class="line">    JS_ATOM_END,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上面代码中的 JS_ATOM_END 作为枚举的最后一个值，同时能够表示 atom 的数量，atom 还会记录在 js_atom_init[] 里。代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> js_atom_init[] =</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF(name, str) str <span class="meta-string">&quot;\0&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;quickjs-atom.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> DEF</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure>
<p>定义枚举的作用就是能够在编译时确定 atom 的数量，比在运行时通过计算数组数量性能消耗少。在 JS_InitAtoms 函数里通过 JS_ATOM_END 将遍历 js_atom_init 函数初始化每个 atom，js_atom_init 函数里会先使用 js_alloc_string_rt 为字符串分配内存将字符串拷贝到空间内，最后调用 <code>__JS_NewAtom</code> 函数新建 atom。</p>
<p>JS_NewRuntime 函数最后会用 init_class_range 函数创建对象、数组和函数类，每个类新建用的是 JS_NewClass1 函数，这里会完成 JSClass 结构体的初始化，重置上下文类原型数组和类数组。通过 JSClassCall 和 JSClassExoticMethods 来设置 JSClass。JSClassCall 会调用 js_call_c_function、js_c_function_data_call、js_call_bound_function、js_generator_function_call。JSClassExoticMethods exotic 是外来行为的指针，没有可以为 NULL，JS_NewRuntime 函数会设置 js_arguments_exotic_methods、js_string_exotic_methods、js_module_ns_exotic_methods 三个行为。</p>
<h3 id="新建上下文"><a href="#新建上下文" class="headerlink" title="新建上下文"></a>新建上下文</h3><p>JS_NewContext 函数会通过 JS_NewContextRaw 初始化一个上下文，并将上下文 JSContext 的 rt 字段，也就是 JSRuntime 结构体字段指向入参 rt。JSContext 结构体里面包含了 GC 对象的 header，JSRuntime，对象数量和大小，shape的数组，全局对象 global_obj 和全局变量包括全局 let/const 的定义。跟 big number 相关的 bf_ctx，rt-&gt;bf_ctx 是指针，共享所有上下文。fp_env 是全局 FP 环境。通过 bignum_ext 来控制是否开启数学模式，all_operator_overload 来控制是否开启 operator overloading。当计数器为0后，JSRuntime.interrupt_handler 就会被调用。loaded_modules 是 JSModuleDef.link 的列表。compile_regexp 函数如果返回的 JSValue是 NULL 表示输入正则表达式的模式不被支持。eval_internal 函数如果返回 NULL 表示输入的字符串或者文件 eval 没法执行。</p>
<p>使用 JS_AddIntrinsicBasicObjects 函数对上下文初始化内置构造函数的原型对象。JS_AddIntrinsicBaseObjects 函数会往全局对象 ctx-&gt;global_obj 里添加标准库的对象 Object、函数 Function、错误 Error、迭代器原型、数组 Array、Number、布尔值 Boolean、字符串 String、Math、ES6反射、ES6 symbol、ES6 Generator等，然后定义全局属性和初始化参数。JS_AddIntrinsicDate 函数会添加 Date，JS_AddIntrinsicEval 会设置内部 eval 函数为 <code>__JS_EvalInternal</code>。JS_AddIntrinsicStringNormalize 函数会设置属性 normalize。</p>
<p>JS_AddIntrinsicRegExp 函数会添加 正则表达式库 RegExp。JS_AddIntrinsicJSON 函数会在全局对象中添加 JSON 标准库。JS_AddIntrinsicProxy 函数用来添加为 js 提供元编程能力的 Proxy，用来进行目标对象拦截、运算符重载、对象模拟等。</p>
<p>JS_AddIntrinsicMapSet 函数会添加 Map。JS_AddIntrinsicTypedArrays 会添加由 Lars T. Hansen 设计的 SharedArrayBuffer 和 Atomics，也就是共享内存和原子特性，该<a href="https://github.com/tc39/ecmascript_sharedmem">提案在这</a> 17年被 TC39 合并到 ecma262 规范中，共享内存可以让多线程并发读写数据，使用原子控制并发，协调有竞争关系线程，其目的就是让 web worker 间共享数据协调更快更简单避免幽灵漏洞。</p>
<p>JS_AddIntrinsicPromise 函数会添加 <a href="https://tc39.es/ecma262/#sec-promise-objects">Promise</a>、<a href="https://tc39.es/ecma262/#sec-async-function-objects">AsyncFunction</a> 和 <a href="https://tc39.es/ecma262/#sec-asyncgeneratorfunction-objects">AsyncGeneratorFunction</a></p>
<p>如果开启了 big number JS_NewContext 函数会调用 JS_AddIntrinsicBigInt 添加 BigInt 来支持科学计算。</p>
<h3 id="JS-Eval"><a href="#JS-Eval" class="headerlink" title="JS_Eval"></a>JS_Eval</h3><p>JS_Eval 方法就是执行 JS 脚本的入口方法。JS_Eval 里调用情况如下：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JS_Eval -&gt; JS_EvalThis -&gt; JS_EvalInternal -&gt; eval_internal(__JS_EvalInternal)</span><br></pre></td></tr></table></figure>
<p>实际起作用的是 <code>__JS_EvalInternal</code> 函数，内部会先声明整个脚本解析涉及的内容，比如 JSParseState s、函数对象和返回值 fun_obj、栈帧 sf、变量指针 var_refs、函数字节码 b、函数 fd、模块 m 等。通过函数 js_parse_init 来设置初始化 JSParseState。有上下文 ctx、文件名 filename、根据输入 input 字符串长度设置缓存大小和初始化 token 等。</p>
<p>js_parse_init 函数执行完后会过滤 Shebang，Shebang 一般是会在类 Unix 脚本的第一行，规则是开头两个字符是#!，作用是告诉系统希望用什么解释器执行脚本，比如#!/bin/bash 表示希望用 bash 来执行脚本。在 QuickJS 里显然 Shebang 起不了什么用，因此通过 skip_shebang 函数过滤掉。</p>
<p>eval_type 获取 eval 的类型，eval 的 type 有四种，JS_EVAL_TYPE_GLOBAL 00 表示默认全局代码，JS_EVAL_TYPE_MODULE 01 表示模块代码，JS_EVAL_TYPE_DIRECT 10 表示在 internal 直接调用，JS_EVAL_TYPE_INDIRECT 11 表示在 internal 非直接调用。eval 的 flag有四种，JS_EVAL_FLAG_STRICT 10xx 表强行 strict 模式，JS_EVAL_FLAG_STRIP 100xx 表强行 strip 模式，JS_EVAL_FLAG_COMPILE_ONLY 1000xx 表示仅编译但不运行，返回是一个有 JS_TAG_FUNCTION_BYTECODE 或 JS_TAG_MODULE tag 的对象，通过 JS_EvalFunction() 函数执行。JS_EVAL_FLAG_BACKTRACE_BARRIER 10000xx 表示在 Error 回溯中不需要之前的堆栈帧。</p>
<p><code>__JS_EvalInternal</code> 函数使用 js_new_function_def 函数创建一个顶层的函数定义节点，其第二个参数为父函数设置为 NULL，后面再解析出来的函数都会成为他的子函数，js_new_function_def 会返回一个初始化的 JSFunctionDef。JSFunctionDef 的字段 parent_scope_level 是当前函数在父层作用域的层级。parent_cpool_idx 是当前函数在父层的常量池子里索引。child_list 是子函数列表。is_eval 如果为 true 表示当前函数代码是 eval 函数调用的。is_global_var 表示当前函数是否不是局部的，比如是全局的，在 module 中或非 strict。</p>
<p>has_home_object 表示当前函数是否是 home object。每个函数都有一个 slot 用来存函数的 home object，这个 slot 可以通过[[HomeObject]]访问到，home object 就是函数的初始定义。slot 只有在函数定义为 class 或 object literals 才会被设置，其他情况会返回 undefined。如下的函数定义：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ol = &#123; foo () &#123;&#125; &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c</span> </span>&#123; foo () &#123;&#125; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><br>上面的 f 函数会直接返回 undefined，c 是 class，ol 是 object literals，当 super 方法被调用时会查看当前函数的[[HomeObject]]，从而获取原型，通过原型调用到 super 方法。</p>
<p>has_prototype 是指当前函数是否有 prototype，class 都有 prototype。has_parameter_expressions 指是否有参数表达式，如果有就会创建参数作用域。has_use_strict 表示是否是强制模式。has_eval_call 表示函数里是否有调用 eval 函数。</p>
<p>has_arguments_binding 指函数是否有参数绑定，如果有就是箭头函数。箭头函数是使用 =&gt; 定义函数，如下面代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带参数</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="params">v</span> =&gt;</span> v</span><br><span class="line"><span class="comment">// 对应如下非箭头函数</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123; <span class="keyword">return</span> v &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参数</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function">() =&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="comment">// 对应如下非箭头函数</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure>
<p>箭头函数内的 this 是指定义时的对象，而不是运行时的对象，使 this 从动态变成静态。不能使用 new 命令，不可以用 arguments 对象，使用 rest 参数代替，不可以使用 yield。</p>
<p>箭头函数的意图主要是可以让表达更简洁，如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不用箭头函数</span></span><br><span class="line"><span class="keyword">var</span> sortedGroup = group.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line"><span class="keyword">var</span> sortedGroup = group.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br></pre></td></tr></table></figure>
<p>箭头符号前面的小括号内是参数，代码整体看起来简洁了很多。</p>
<p>36年图灵开发的有计算功能的数学模型叫图灵机，而同期 Alan Church 开发的模型叫 λ 演算，λ 就是 lambda，Lisp 就是用 lambda 来表示函数，至今函数表达式也叫 lambda。因此 λ 演算算得上最早的编程语言。《<a href="https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/">ES6 In Depth:Arrow functions</a>》博客里提到 fixed point 函数如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fix = λf.(λx.f(λv.x(x)(v)))(λx.f(λv.x(x)(v)))</span><br></pre></td></tr></table></figure>
<p>上面的 fix 函数可以使用箭头函数，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fix = <span class="function"><span class="params">f</span> =&gt;</span> (<span class="function"><span class="params">x</span> =&gt;</span> f(<span class="function"><span class="params">v</span> =&gt;</span> x(x)(v)))</span><br><span class="line">               (<span class="function"><span class="params">x</span> =&gt;</span> f(<span class="function"><span class="params">v</span> =&gt;</span> x(x)(v)));</span><br></pre></td></tr></table></figure>
<p>上面代码看起来更加简洁和清晰。</p>
<p>使用函数式编程设计为 js 提供了类似 each、map、reduce、filter 等使用功能的著名<a href="http://underscorejs.org/">underscorejs</a> ，就是重度使用了箭头函数，以简化 underscorejs 的使用接口。</p>
<p>完整的箭头函数定义参看 ecma262 <a href="https://tc39.es/ecma262/#sec-arrow-function-definitions">Arrow Function Definitions</a> 部分。</p>
<p>has_this_binding 指函数里是否可以用 new.target。new_target_allowed 指 new.target 的返回是指向构造方法，因此如果没有 new.target 表示只是普通的函数。super_call_allowed 指函数是否可调用 super 函数，构造函数里调用父类构造器。super_allowed 表示函数是否可以用 super 或 super[]，类的 method 可以调，普通的函数不能调。arguments_allowed 表示当前函数是否可以使用 arguments，箭头函数不能使用 arguments。arguments和剩余变量区别在剩余变量是个数组，arguments需要通过 Array.prototype.slice.call 函数转成真正的数组。is_derived_class_constructor 表示当前函数是否为派生函数，继承自其他类的类叫派生类。in_function_body 是看函数是否是在函数的 body 里定义的，如果是 false 表示函数可能是在参数里定义。func_name 是函数名，如果没有函数名 func_name 为 JS_ATOM_NULL。vars 是函数里定义的变量列表。var_size 是给变量列表分配的空间大小。var_count 是变量的数量。args 是函数参数的列表。arg_size 是给参数列表分配的空间大小。arg_count 是参数的个数。defined_arg_count 表示函数期望的参数数，也就是实际传递给函数的参数，比如有默认值的参数就不会计算在内。arguments_var_idx 是 arguments 变量在函数变量列表里的索引。func_var_idx 是当前函数在函数变量列表里的索引。eval_ret_idx 是当前函数返回值在函数变量列表里的索引。this_var_idx 指 this 在函数变量列表里的索引。new_target_var_idx 是包含 new.target 的变量在函数变量列表里的索引。this_active_func_var_idx 是包含 this.active_func 变量在函数变量列表里的索引。home_object_var_idx 是 home object 变量在函数变量列表里的索引，使用这个索引可以取到父函数。scope_level 是当前函数作用域层级，也就是 fd-&gt;scopes 的索引。scope_first 是第一个作用域。scope_size 是为函数多个作用域分配的大小。scope_count 指一共有多少个作用域。scopes 指当前函数所有作用域的数组。body_scope 是函数 body 的作用域。byte_code 是函数的字节码。last_opcode_pos 是最后一个字节码操作符。last_opcode_line_num 是最后一个字节码操作符所在行数。cpool 是定义常量的池子，比如字符串、数字、对象、数组等。closure_var_count 是闭包的数量。closure_var_size 是闭包的大小。closure_var 闭包都放在这个数组里。filename 指函数所在的文件的文件名。line_num 是函数的行数。pc2line 表示代码行号。source 是函数源码。source_len 是源文件大小。module 也会当作函数一样处理。</p>
<h3 id="创建顶级函数定义"><a href="#创建顶级函数定义" class="headerlink" title="创建顶级函数定义"></a>创建顶级函数定义</h3><p>js_new_function_def 会通过运行 JS_NewAtom 函数，来返回一个文件名 JSAtom。JS_NewAtom 函数调用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JS_NewAtom -&gt; JSNewAtomLen -&gt; JS_NewAtomStr -&gt; __JS_NewAtom</span><br></pre></td></tr></table></figure>
<p>JSAtom 是 uint32_t 类型整数，用来记录关键字等字符串，作用是提高字符串内存占用和使用的效率。JSAtom 的类型有 JS_ATOM_TYPE_STRING、JS_ATOM_TYPE_GLOBAL_SYMBOL、JS_ATOM_TYPE_SYMBOL、JS_ATOM_TYPE_PRIVATE。JS_NewRuntime 函数执行时会把 quickjs-atom.h 里定义的 JS 关键字比如 if、new、try等，保留字比如 class、enum、import 等，标识符 name、get、string 等加到内存中，解析中加的会按需使用。字符串转 JSAtom 是通过 <code>__JS_NewAtom</code> 函数来做的，<code>__JS_NewAtom</code> 函数会先尝试看已注册的 atom 里是否已经有对应的字符串，没有就根据定义的规则算出字符串的 hash 值 i，然后把字符串指针加到 JSAtomStruct 类型的 atom_array 里。</p>
<p>如果已经有相同的 atom 在 atom_array 里，goto 到 done label里，C 语言中的 goto 语句是一种把控制无条件转移到同函数内label处的语句。我觉得使用 goto 主要是为了减少多个 return 的情况，特别是逻辑多，最后需要进行统一处理时，代码上看起来会更顺，按顺序读，可读性会好。<code>__JS_NewAtom</code> 函数出现异常就会 goto 到 fail label中，将 i 设置为 JS_ATOM_NULL 类型。done label会执行 js_free_string 函数，调用的是 JS_FreeAtomStruct 函数，目的是从 atom_array 里移出 atom，过程是先从链表中移出 atom 然后在 atom_array 里将其标记为空闲，这样新加的 atom 就可以放置到这个位置。</p>
<p>字符串存储的结构是 JSString，ascii 会存放在 JSString 的 union 中 str8 中。在 JS_NewAtomLen 函数里会先将字符串通过 JS_NewStringLen 转成 JSValue，然后通过宏 JS_VALUE_GET_STRING 将其转成 JSString。</p>
<p>最后 <code>__JS_NewAtom</code> 函数会对 atom_array 做些边界处理。</p>
<p>js_new_function_def 函数执行完创建了顶级函数定义后，会做个判断，如果创建失败会直接使用 goto 语法跳转到<br>fail1 label处，fail1 label会释放所有 JSModuleDef。</p>
<p>如果没有失败 <code>__JS_EvalInternal</code> 函数会先将 JSParseState 的当前函数设置为 js_new_function_def 创建的函数 fd。然后对 fd 进行字段的设置。使用 push_scope 生成一个作用域，后面解析的内容会放到这个作用域内。接下来就开始执行解析函数 js_parse_program，入参是 JSParseState 类型的 s，s 记录着 fd，用来作为解析内容的输入。</p>
<h3 id="js-解析和生成字节码"><a href="#js-解析和生成字节码" class="headerlink" title="js 解析和生成字节码"></a>js 解析和生成字节码</h3><p>js_parse_program 函数会先调用 next_token 获取一个 token 到传入的 JSParseState 里。接着通过 js_parse_directives 来解析 use strict 指令。如果在模块头部加上了 use strict 指令，表示 ES 模块需要使用严格模式。严格模式会对一些语法做限制，具体可以参看 ecma262 里 <a href="https://tc39.es/ecma262/#sec-strict-mode-of-ecmascript">The Strict Mode of ECMAScript</a> 说明。然后 js_parse_program 函数会一直调用 js_parse_source_element 函数直到返回的 token 是 TOK_EOF（文件结束符）为止。</p>
<p>对于一个 JS 脚本里的代码，可以分为四个种类，一种是表达式声明，使用 js_parse_statement_or_decl 函数解析，解析类似 if、while 这样语句。一种是函数声明，使用js_parse_function_decl 函数解析，另外两种是 export，使用 js_parse_export 解析模块导出 和 import，使用 js_parse_import 解析模块导入。js_parse_source_element 函数根据每个 token 的种类选择不同的函数进行解析。</p>
<p>js_parse_export 函数和 js_parse_import 函数解析模块的两个主要功能，其中 export 主要是负责定义模块对外部的接口，import 主要是负责接受外部模块的接口以供调用。JS 的一个模块如果想让其他模块使用其内部的变量、函数和类就需要使用 export 命令，比如在某个js文件中定义可被其他模块访问的数据的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> aExportVar = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> anotherExportVar = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;anotherExportVar&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>上面代码中 aExportVar、anotherExportVar 变量和 foo 函数 都能被其他模块读取。如果想重命名导出，可以使用 as 关键字，比如 export {a as b}。如果想都导出可以用 export * from “mod”，在 js_parse_export 函数解析中，对于类、函数、大括号、from、var、let、const、as等涉及 export 的关键字均有处理，解析规则参看 ecma262 的 <a href="https://tc39.es/ecma262/#sec-exports">Exports</a> 部分，关于 default 这种 export 和 import 的复合写法提案 <a href="https://github.com/tc39/proposal-export-default-from">export default from</a>，在 QuickJS 里也得到了支持，在 js_parse_export 函数的 TOK_DEFAULT 条件处理里可以看到。解析的 export 数据会通过 add_export_entry 返回一个 JSExportEntry 并放到 JSModuleDef 的 export_entries 数组中记录。</p>
<p>import 会将模块 export 定义输出的接口加载到自己的模块中，规则可参看 TC39 的 <a href="https://tc39.es/ecma262/#sec-imports">Import</a>，为了支持 import 函数能够支持动态加载，TC39 merge 了 <a href="https://github.com/tc39/proposal-dynamic-import">Dynamic import</a> 这个提案，Dynamic Import 配合 webpack 的代码分割实现异步懒加载，对于页面加载性能是个很好的方案。js_parse_import 函数会将 import 模块通过 add_import 函数将 import 数据转成 JSImportEntry 添加到 JSModuleDef 的 import_entries 数组中。</p>
<p>接下来看下第三种，函数定义解析函数 js_parse_function_decl。js_parse_function_decl 内是执行的 js_parse_function_decl2 函数。js_parse_function_decl2 函数会依据 JSParseFunctionEnum 枚举值 func_type 进行不同的解析和字节码生成，生成的字节码的函数是前缀为 emit 的函数，字节码会存在 JSParseState 的当前函数 cur_func 的 byte_code 字段中。func_type 有 statement、var、expr、arrow、getter、setter、method、类的构造函数、派生类的构造函数。其中 statement、var、expr、arrow 类型都是匿名函数。</p>
<p>创建一个新的函数，将 s-&gt;cur_func 作为其父函数，通过 s-&gt;cur_func = fd; 将 JSParseState 的当前函数设置为新创建的 JSFunctionDef，以此能够生成函数定义树结构。然后开始解析参数，参数通过 add_arg 函数添加到 fd 的 args 数组中。小括号内的参数通过 js_parse_expect(s, ‘(‘) 函数起始，在 while (s-&gt;token.val != ‘)’) 闭包内解析。小括号内如有中括号和大括号，也就是有数组和对象的情况就使用 js_parse_destructuring_element 函数进行解析，由于对象和数组会出现在各种 js 的语法中，所以将其处理包装成了一个通用的递归函数 js_parse_destructuring_element 用来简化写法。</p>
<p>设置完参数变量作用域后，就开始函数 body 的解析。如果是箭头函数，QuickJS 会特殊处理，并在处理完直接 goto 到 done label。js_parse_function_decl2 函数对于箭头函数会用两个函数先做检查，一个是检查函数名函数 js_parse_function_check_names，如果有函数名就直接 goto 到 fail label。另一个检查函数是 js_parse_assign_expr 赋值表达式解析函数，比如 = 或 += 这样的符号，如果箭头函数后面是赋值表达式，那么也会直接 goto 到 fail。如箭头函数规则符合，会使用 emit_op 生成 OP_return 字节码操作符，并用将源码保存在 fd-&gt;source 里。</p>
<p>不是箭头函数就在大括号内执行递归函数 js_parse_source_element 解析表达式和子函数，形成完整的函数定义树结构。递归调用代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (s-&gt;token.val != <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (js_parse_source_element(s))</span><br><span class="line">        goto fail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成后也会保存源码到 JSFunctionDef 的 source 字段里。eat } 符号后 js_parse_function_decl2 函数会 goto 到 fail。无论是 done label还是 fail label都会将 cur_func 设置为父函数，回到父函数里继续解析后面的代码。</p>
<p>最后第四种，js_parse_statement_or_decl 声明和表达式解析函数。</p>
<p>js_parse_statement_or_decl 函数主要依据 token 的值类型来分别调用对应的解析函数。token 的值是大括号时会调用 js_parse_block 解析。return 会看下一个 token 的值，如果不是 ;、}，那么就会调用 js_parse_expr 函数。throw 也会调用 js_parse_expr，如果没有表达式就添加 OP_throw 字节码操作符。</p>
<p>let、const、var 都会调用 js_parse_var 函数解析。js_parse_var 处理等号右侧使用的是 js_parse_assign_expr2 函数来解析赋值表达式，其中会使用 js_parse_cond_expr 来解析问号和冒号这样的条件运算符，解析 ?: 表达式，?: 运算符是三元运算符，条件为真执行 ? 后面表达式，为假执行 : 后面表达式，规则参看 <a href="https://tc39.es/ecma262/#sec-conditional-operator">Condition Operator</a>，冒号部分使用的是 Coalesce 表达式解析函数 js_parse_coalesce_expr，解析 ?? 表达式，?? 运算符是非空运算符，如果第一个参数不是 null 或 undefined，那么就会返回第一个参数，不然就返回第二个参数。与或使用 js_parse_logical_and_or 函数解析 &amp;&amp; 或 || 这样表达式，二元表达式使用 js_parse_expr_binary 函数，解析 * + == 等表达式， 一元使用 js_parse_unary 函数，比如 + ! 等。如果赋值是字符串、数字等最小单元就使用 js_parse_postfix_expr 函数。</p>
<p>if 会在开始和结束分别调用作用域的进栈 push_scope 和出栈 pop_scops 函数，if 内会递归调用 js_parse_statement_or_decl 函数。while 会用 new_label 函数创建条件和退出的 label，使用 push_break_entry 加到 BlockEnv 结构体中记录。while 解析完会调用 pop_break_entry 函数将 fd-&gt;top_break 设置为 BlockEnv 的前一个 break。while 内也是递归调用 js_parse_statement_or_decl 函数。相比较于 while，for 会多调用 js_parse_for_in_of 去解析 for/in 或者 for/of。break 和 continue 都会直接 goto 到 fail。</p>
<p>switch、try、with 主要是 BlockEnv 设置不同，其他部分都是按照正常声明和表达式方式解析。如果是 class 的话，会调用 js_parse_class 函数来解析 class。es 标准里的 empty statement 和 debugger statement 虽然只是简单的 goto 到 fail，但也都有处理。js_parse_statement_or_decl 函数处理详细标准可以参看 ecma262 的 <a href="https://tc39.es/ecma262/#sec-ecmascript-language-statements-and-declarations">Statements and Declarations</a>。</p>
<p><code>__JS_EvalInternal</code> 函数执行完解析函数 js_parse_program 后开始调用 js_create_function 函数来创建函数对象和所有包含的子函数。</p>
<h3 id="js-create-function-创建函数对象及包含的子函数"><a href="#js-create-function-创建函数对象及包含的子函数" class="headerlink" title="js_create_function 创建函数对象及包含的子函数"></a>js_create_function 创建函数对象及包含的子函数</h3><p>js_create_function 函数会从 JSFunctionDef 中创建一个函数对象和子函数，然后释放 JSFunctionDef。开始会重新计算作用域的关联，通过四步将作用域和变量关联起来，方便在作用域和父作用域中查找变量。第一步遍历函数定义里的作用域，设置链表头。第二步遍历变量列表，将变量对应作用域层级链表头放到变量的 scope_next 里，并将变量所在列表索引放到变量对应作用域层级链表头里。第三步再遍历作用域，将没有变量的作用域指向父作用域的链表。第四步将当前作用域和父作用域变量链表连起来。通过 fd-&gt;has_eval_call 来看是否有调用 eval，如果有，通过 add_eval_variables 来添加 eval 变量。如果函数里有 eval 调用，add_eval_variables 函数会将 eval 里的闭合变量按照作用域排序。add_eval_variables 函数会为 eval 定义一个给参数作用域用的额外的变量对象，还有需定义可能会使用的 arguments，还在参数作用域加个 arguments binding，另外，eval 可以使用 enclosing 函数的所有变量，因此需要都加到闭包里。</p>
<h4 id="pass-1"><a href="#pass-1" class="headerlink" title="pass 1"></a>pass 1</h4><p>js_create_function 函数还会使用 add_module_variables 函数添加模块闭包中的全局变量。import 其他模块的全局会通过 js_parse_import 函数作为闭包变量添加进来，add_module_variables 函数是添加 module 里的全局变量，将模块的全局变量通过 add_closure_var 函数加到当前函数定义里，并处理类型是 JS_EXPORT_TYPE_LOCAL 的 exports 的变量。add_module_variables 函数会先添加通过 js_parse_import 函数导入作为闭包变量的全局变量，添加闭包变量调用的是 add_closure_var 函数。遍历 fd-&gt;child_list 递归使用 js_create_function 函数创建所有子函数，将创建的子函数对象保存在 fd-&gt;cpool 里，cpool 是一个 JSValue 结构体，JSValue 是最基本的单位，这个结构体会有一个 tag 来标示 JSValue 的类型，值是保存在 JSValueUnion 里，值可以是整型和浮点，也可以是一个对象的指针，指针指向的对象是由引用计数来进行管理的，引用计数结构体是 JSRefCountHeader。这里 JSValue 的值是个数组。</p>
<p>如果打开了 DUMP_BYTECODE（将 #define DUMP_BYTECODE  (1) 这段注释打开），js_create_function 函数会先进行第一次 dump_byte_code 函数调用，dump_byte_code 函数入参 tab 是字节码，函数主要通过 get 前缀的函数，比如 get_u32 和 get_u16 来取字节码的值，并打印出来。</p>
<p>前面 js_create_function 函数 dump 的字节码可以称为 pass 1，如果只 dump 这个阶段字节码，将 DUMP_BYTECODE 设置为4，dump pass 2 阶段字节码需要调用 resolve_variables 函数。</p>
<h4 id="pass-2（resolve-variables）"><a href="#pass-2（resolve-variables）" class="headerlink" title="pass 2（resolve_variables）"></a>pass 2（resolve_variables）</h4><p>解析当前函数的字节码的操作符，op 就是当前的操作符。add_scope_var 函数用来添加变量，add_scope_var 函数会调用 add_var 函数将变量添加到函数定义 JSFunctionDef 的 vars 字段里，add_var 调用完，add_scope_var 函数会继续设置变量定义结构体 JSVarDef 的 scope_level、scope_next 和 scope_first，其中 scope 的作用是在进入新作用域时能找到最临近的变量。QuickJS 在解析时会生成使用变量的字节码，比如 OP_scope_get_var 字节码操作符。</p>
<p>resolve_variables 函数会在需要的时候将全局变量访问转换成局部变量或闭包变量。resolve_variables 函数会先做运行时检查，然后遍历所有字节码，字节码操作符是 OP_eval 和 OP_apply_eval 时将作用域索引转换成调整后的变量索引。当字节码是 OP_scope_get_var_undef、OP_scope_get_var、OP_scope_put_var、OP_scope_delete_var、OP_scope_get_ref、OP_scope_put_var_init、OP_scope_make_ref 时都会调用 resolve_scope_var 函数，在作用域里查找变量，对字节码操作符进行优化。对应 QuickJS 代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> OP_scope_get_var_undef:</span><br><span class="line"><span class="keyword">case</span> OP_scope_get_var:</span><br><span class="line"><span class="keyword">case</span> OP_scope_put_var:</span><br><span class="line"><span class="keyword">case</span> OP_scope_delete_var:</span><br><span class="line"><span class="keyword">case</span> OP_scope_get_ref:</span><br><span class="line"><span class="keyword">case</span> OP_scope_put_var_init:</span><br><span class="line">    var_name = get_u32(bc_buf + pos + <span class="number">1</span>);</span><br><span class="line">    scope = get_u16(bc_buf + pos + <span class="number">5</span>);</span><br><span class="line">    pos_next = resolve_scope_var(ctx, s, var_name, scope, op, &amp;bc_out,</span><br><span class="line">                                 <span class="literal">NULL</span>, <span class="literal">NULL</span>, pos_next);</span><br><span class="line">    JS_FreeAtom(ctx, var_name);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p>
<p>resolve_variables 函数就是使用前面添加的变量。resolve_variables 函数先遍历当前函数定义的作用域，如果找到对应的符号就生成对应优化的字节码操作符，没有找到会看函数内是否存在 eval 的调用，依然没有会到父作用域查找，还没有的话，就会在全局作用域查找，任何环节找到的处理方式是一致的。</p>
<p>resolve_scope_var 函数会确定作用域里的变量类别，看是本地变量、全局变量、参数、伪变量。做法是先通过 is_pseudo_var 布尔值来判断是否解决伪变量问题，伪变量就是类似 new.target 和 this 这样的关键字，接下来就是处理作用域局部变量，如果是，生成取局部变量的字节码操作符 OP_get_loc。检查 eval 对象和在参数作用域内的 eval 对象，然后再在更上的作用域进行检查，如果不是当前作用域的变量，生成取自由变量的字节码操作符 OP_get_var_ref ，找出相应的闭包变量，并添加到闭包变量列表里，这样做的原因由自由变量定义来定的，自由变量是不在所使用的声明作用域中进行的声明。resolve_scope_var 函数会将全局变量生成对应的取全局变量的字节码操作符 OP_get_var。由 label_done 来确定是否字节码更新，如果更新 JSFunctionDef 的 label_slots 的 pos2 需要重新更新伪 bc-size。</p>
<p>resolve_variables 函数在遍历到字节码操作符是 OP_scope_get_private_field 时会调用 resolve_scope_private_field 函数，private field 是 js 类里私有变量和方法的定义，目前还在提案的第三个阶段，也就完成前最后一个阶段，这个阶段表示方案已确定，设计上的问题已解决，包括兼容性等问题。private field 是 ES2020 草案提出的，提案相关信息在 <a href="https://github.com/tc39/proposal-class-fields">Class field declarations for JavaScript</a> 这里，详细方案设计在 <a href="https://tc39.es/proposal-class-fields/">Public and private instance fields proposal</a> 这里。QuickJS 在处理 token 阶段在 next_token 函数里碰到 # 字符会调 parse_ident 函数取出定义的变量名出来寄存到 token.u.ident.atom 里，类型设置为 TOK_PRIVATE_NAME，通过 add_private_class_field 函数将变量添加到当前作用域变量列表里。resolve_variables 函数使用 resolve_scope_private_field 函数处理 private field，函数内调用 resolve_scope_private_field1 函数查作用域链的上层来检查是否可处理 private field，如果不行直接返回 -1，可以的话会生成取 private field 的字节码操作符 OP_get_private_field。</p>
<p>当开启 OPTIMIZE 宏定义时，碰到函数结束相关字节码操作符比如 OP_tail_call、OP_tail_call_method、OP_return、OP_return_undef、OP_throw、OP_throw_error、OP_ret 等时 resolve_variables 会调用 skip_dead_code 去掉无用的代码。</p>
<p>OP_label 字节码操作符对应是 js 的 label 语句，label 语句的 ecma262 部分是 <a href="https://tc39.es/ecma262/#sec-labelled-statements">Labelled Statements</a>，js 的 label 不像 c 语言有 goto，因此都是配合 break 和 continue 一起使用。</p>
<p>进入作用域的字节码操作符是 OP_enter_scope。会检查进入的作用域中的函数和变量列表，如果变量类型是 JS_VAR_FUNCTION_DECL 或 JS_VAR_NEW_FUNCTION_DECL 会优化生成字节码操作符 OP_put_loc，如果是其他类型就生成 OP_set_loc_uninitialized。在进入作用域时，先处理 js 的 Hoisting，也就是变量提升，变量提升是指在编译阶段会在内存中将变量和函数声明放到执行其他代码前，如果包含了新作用域情况就会复杂些，需要特殊处理，这样说比较抽象。我举个例子，代码 A：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> say = <span class="string">&quot;hi!&quot;</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(say);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<p>按照变量提升规范定义，上面代码会输出 hi，和你想的一样吧。如果换成下面的代码 B：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> say = <span class="string">&quot;hi!&quot;</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(say);</span><br><span class="line">    <span class="keyword">var</span> say = <span class="string">&quot;see u again!&quot;</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<p>你先想想上面的代码会输出什么。QuickJS 处理 Hoisting 使用的是 instantiate_hoisted_definitions 函数，instantiate_hoisted_definitions 函数 会先将函数参数和变量加到 Hoisting 里，闭包里会包含所有 enclosing 变量，如果外部有变量环境，在外部为变量创建一个属性，对应的 QuickJS 的 instantiate_hoisted_definitions 函数处理代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; s-&gt;global_var_count; i++) &#123;</span><br><span class="line">    JSGlobalVar *hf = &amp;s-&gt;global_vars[i];</span><br><span class="line">    <span class="keyword">int</span> has_closure = <span class="number">0</span>;</span><br><span class="line">    BOOL force_init = hf-&gt;force_init;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(idx = <span class="number">0</span>; idx &lt; s-&gt;closure_var_count; idx++) &#123;</span><br><span class="line">        JSClosureVar *cv = &amp;s-&gt;closure_var[idx];</span><br><span class="line">        <span class="keyword">if</span> (cv-&gt;var_name == hf-&gt;var_name) &#123;</span><br><span class="line">            has_closure = <span class="number">2</span>;</span><br><span class="line">            force_init = FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cv-&gt;var_name == JS_ATOM__var_ ||</span><br><span class="line">            cv-&gt;var_name == JS_ATOM__arg_var_) &#123;</span><br><span class="line">            dbuf_putc(bc, OP_get_var_ref);</span><br><span class="line">            dbuf_put_u16(bc, idx);</span><br><span class="line">            has_closure = <span class="number">1</span>;</span><br><span class="line">            force_init = TRUE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!has_closure) &#123;</span><br><span class="line">        <span class="comment">// 局部和全局不冲突的处理</span></span><br><span class="line">        ... <span class="comment">// 省略处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hf-&gt;cpool_idx &gt;= <span class="number">0</span> || force_init) &#123;</span><br><span class="line">        <span class="comment">// 冲突但可初始化的处理</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>从上面代码可以看出，闭包内定义变量和外部变量相同时，会设置 has_closure 为2，同时设置 force_init 为 FALSE。根据之后代码可以看出这样设置后就不会进行初始化处理，从而能看出闭包内变量是不会初始化的。因此上面举例的代码 B 输出的结果是 undefined。</p>
<p>接下来，如果是函数变量，则先创建闭包，字节码操作符是 OP_fclosure，然后将闭包设置为字节码操作符 OP_put_loc 局部变量。其他情况对该作用域中的变量进行未初始化声明，对应字节码操作符是 OP_set_loc_uninitialized。退出作用域时生成关闭局部变量的 OP_close_loc 字节码操作符。resolve_variables 函数最后会将 DynBuf bc_out 放到 JSFunctionDef 的 byte_code 字段里。</p>
<p>执行完 resolve_variables 后，将 DUMP_BYTECODE 设置为2，可以看到 resolve_variables 函数执行完后的字节码。下一步是执行 resolve_labels 函数。这个阶段是 pass 3</p>
<h4 id="pass3（resolve-labels）"><a href="#pass3（resolve-labels）" class="headerlink" title="pass3（resolve_labels）"></a>pass3（resolve_labels）</h4><p>resolve_labels 主要是做 peephole 优化和处理 goto 和 labels。peephole 是指的小指令集，在 QuickJS 里就是 js_parse_program 函数执行后生成的字节码，peephole 顾名思义就是优化 QuickJS 的字节码。对 peephole 优化常用技术有冗余指令删除，包括没用的存和取指令还有不会执行的指令。然后是合并操作，多个操作如果可以用一个操作替代，就进行替换。利用 Algebraic 规则简化和重排指令相关优化。最后就是使用一些特殊的指令来优化。比如 Java 字节码的 aload 指令如果重复执行，可以替换成 dup 指令。另外，如果编译器在调用子程序之前将寄存器保存在堆栈上，返回时进行恢复，多次调用子程序就会产生多余的堆栈，如果后面的调用 不依赖之前的寄存器，多余的 POP/PUSH 都可以删除。再比如汇编里的多次 sh 指令加 ldc1 多存一取可以通过 xor 异或指令减少访问存储操作，可以提升性能。当碰到跳转到跳转的指令时，可以做跳转指令优化，做法是直接跳到目标地址，还可以检查哪些分支不会被跳转也可以做指令删除优化。</p>
<p>下面例子是消除冗余的 load stores。比如下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = b + c;</span><br><span class="line">d = a + e;</span><br></pre></td></tr></table></figure>
<p>转为下面的指令：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MOV b, R0  ; 把 b 拷到寄存器</span><br><span class="line">ADD c, R0  ; 添加 c 到寄存器，寄存器现在是 b+c</span><br><span class="line">MOV R0, a  ; 把 R0 寄存器拷给 a</span><br><span class="line">MOV a, R0  ; 将 a 拷到寄存器</span><br><span class="line">ADD e, R0  ; Add  e to the register, the register is now a+e [(b+c)+e] 将 e 添加到寄存器，现在寄存器是 a+e，a 是 b+c，因此此时寄存器是 b+c+e</span><br><span class="line">MOV R0, d  ; 把寄存器拷给 d</span><br></pre></td></tr></table></figure>
<p>上面的 MOV a, RO 是多余的，也就是说将 a 拷给寄存器是冗余步骤。</p>
<p>本质上 peephole 优化还是编译阶段的优化，只是处于一般编译后端的优化，由于 QuickJS 解析后是直接生成了字节码，并直接解释执行生成的字节码，所以很多编译的优化技术是用不上的，其他的优化包括有循环优化的诱导变量、强度降低、循环融合、循环反转、循环互换、循环不变的代码运动、循环嵌套优化、循环展开、循环拆分、循环解除切换、软件流水线、自动并行化等；数据流分析的常见的子表达消除、常量折叠、诱导变量识别和消除、死库消除、使用定义链、活变量分析、可用表达方式；SSA-based 的全局值编号，稀疏条件常数传播；Code generation 的寄存器分配、指令选择、指令调度、Rematerialization；函数的尾调用消除、消除中间数据结构的 Deforestation；全局有过程间优化。</p>
<p>静态分析的优化有别名分析、指针分析、形状分析、转义分析、阵列访问分析、依赖性分析、控制流分析、数据流分析等。其他的优化包括消除边界检查、编译时函数执行、消除死代码、内联扩展、跳线程、按配置优化等。peephole 优化属于 base block 级别的优化，llvm 会在 SSA 优化时做 module-scheduling 和 peephole 优化。</p>
<p>下面我们来看看 resolve_labels 函数是怎么做 peephole 优化的。</p>
<p>resolve_labels 函数先初始化伪变量，比如前面提到的 new.targe 和 this，还有 home_object、this.active_func 变量，其中 this 变量在派生类的构造函数中是没有初始化的。随后会初始化参数变量、当前函数引用、变量环境对象。这些都会生成 OP_special_object 字节码操作符，并根据不同变量类型生成对应的值，类型定义枚举是 OPSpecialObjectEnum。</p>
<p>接下来就是遍历字节码，针对不同字节码指令进行优化。</p>
<p>OP_line_num 是用于调试的行号，记在 line_num 整型变量里。使用 JSOpCode 结构体计算栈的大小，遍历指令集时，堆栈大小通过 oi-&gt;n_push - n_pop 获取。OP_label 操作符最终生成字节码的偏移量会被确定。OP_goto、OP_gosub、OP_if_true、OP_if_false 和 OP_label 一样会确定最终偏移量，通过 find_jump_target 函数找到目标 label，通过 update_label 函数移除 jump 指令。</p>
<p>遇到 OP_null，通过 code_match 函数来看前一个字节码操作符如果是 OP_strict_eq，那么就可以优化成 OP_is_null。对于 OP_push_i32，如果前字节码操作符是 OP_neg，会用 push_short_int 函数在 val 前加上 - 符号来精简指令。OP_push_i32、OP_push_atom_value 和 OP_drop 指令紧相邻的话可以都移出。</p>
<p>另外OP_to_propkey、OP_to_propkey2、OP_undefined、OP_insert2、OP_dup、OP_get_loc、OP_get_arg、OP_get_var_ref、OP_put_loc、OP_put_arg、OP_put_var_ref、OP_post_inc、OP_post_dec、OP_typeof 等字节码操作符进行优化，相同的处理通过 goto 跳到 label 标签的方式来处理。有shrink、has_label、has_goto、has_constant_test 等 label 来统一优化逻辑。主要是将长的操作数转成短操作数，合并指令，还有将操作数移到操作符里把长的字节码指令转换成短指令。</p>
<p>resolve_labels 函数最后还会遍历一遍 s-&gt;jump_slots 做更多的跳转指令的优化。</p>
<p>resolve_labels 函数执行完后，pass 3 阶段 js_create_function 还需要调用 compute_stack_size 函数广度优先方式来计算堆栈大小。compute_stack_size 函数对会对栈有影响的指令使用 ss_check 检查字节码的buffer 是否有字节码缓冲区溢出、堆栈溢出或堆栈大小不一致问题，并在 s-&gt;stack_level_tab 里记录每个位置的栈大小，然后用 js_resize_array 更新 s-&gt;pc_stack 数组。</p>
<p>总的来说从脚本生成最终字节码有两个阶段，第一个阶段是脚本解析，这个阶段会先将生成的 token 使用解析各种语句和表达式的函数直接在解析时生成 pass 1字节码，然后生成函数定义树。第二阶段是优化阶段，主要是 resolve_variables 函数和 resolve_labels 函数。resolve_variables 会优化变量，比如全局变量、本地变量、自由变量、参数等，将作用域操作简化成对应定义变量种类字节码。resolve_labels 主要是对跳转相关的优化，比如通过确定最终跳转地址来优化中间跳转。</p>
<p>总的来看，js_create_function 函数整体依赖如下图：<br><img src="/uploads/deeply-analyse-quickjs/4.png" alt=""><br>如上图所示，在创建函数时，如果当前函数使用的变量是上一级函数的局部变量，就会将上一级函数的局部变量添加到上一级函数的闭包变量的列表里。</p>
<h3 id="解释执行-JS-EvalFunctionInternal"><a href="#解释执行-JS-EvalFunctionInternal" class="headerlink" title="解释执行 JS_EvalFunctionInternal"></a>解释执行 JS_EvalFunctionInternal</h3><p><code>__JS_EvalInternal</code> 函数执行完 js_create_function，还会装载使用 js_resolve_module 函数处理当前模块所需所有模块。最后就是要开始解释执行函数对象 fun_obj 了。</p>
<p>函数对象字节码信息结构体是 JSFunctionBytecode，js 函数在运行时的数据结构是 JSFunctionBytecode，创建函数就是初始化 JSFunctionBytecode 结构体，并设置里面所需的字段，这个过程就是将扫描代码生成的临时 JSFunctionDef 对应到 JSFunctionBytecode 中，由 js_create_function 函数负责处理。JSFunctionBytecode 结构体里的 byte_code_buf 字段是函数对象自己字节码的指针，vardefs 里是函数的参数和局部变量；closure_var 是用于存放外部可见的闭包变量，closure_var 通过 add_closure_var 函数进行添加，add_closure_var 函数会把要用到的变量添加成闭包变量，通过 get_closure_var2 函数往上层级递归给每层级函数添加闭包变量，直到找到目标函数；stack_size 是指堆栈的大小，stack_size 主要作用是为初始化栈时能够减少内存占用；cpool 是函数内常量池。</p>
<p>QuickJS 解释执行的方式有五种，flag 定义了 JS_EVAL_FLAG_STRICT 表示按照 strict 模式执行，JS_EVAL_FLAG_STRIP 表示会按 strip 模式执行，JS_EVAL_FLAG_COMPILE_ONLY 指只生成函数对象，不解释执行，但返回的结果的结果是带有字节码或 JS_TAG_MODULE 的函数对象，这个函数对象也是可以使用 JS_EvalFunctionInternal 来解释执行的。JS_EVAL_FLAG_BACKTRACE_BARRIER 表示出现问题进行回溯时不需要之前堆栈帧。</p>
<p>QuickJS 解释执行的函数是 JS_EvalFunctionInternal，JS_EvalFunctionInteral 函数会用 JS_VALUE_GET_TAG 来看函数对象是带字节码的 JS_TAG_FUNCTION_BYTECODE 还是 JS_TAG_MODULE。</p>
<p>如果是 JS_VALUE_GET_TAG 是 JS_TAG_MODULE 表示当前函数对象是一个模块，因此需要按照模块的方式处理，JS_EvalFunctionInternal 函数会先调用 js_create_module_function 找出模块中导出的变量，js_create_module_function 函数调用链如下：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">js_create_module_function -&gt; js_create_module_bytecode_function -&gt; js_create_module_var</span><br></pre></td></tr></table></figure>
<p>执行完 js_create_module_function，会调用 js_link_module 函数，js_link_module 函数会处理所有要导入的变量，将其保存在 JSModuleDef 的 req_module_entries 数组里供解释执行时使用。然后 js_link_module 还会检查间接的导入。最后将导出的变量保存在模块 JSExportEntry 的 export_entries 数组里，然后使用 JS_Call 函数执行导出的这些全局变量的初始化。</p>
<p>JS_EvalFunctionInteral 函数对于 tag 是 JS_TAG_FUNCTION_BYTECODE 的函数对象会调用 js_closure 和 JS_CallFree 两个函数进行字节码的解释执行。</p>
<p>js_closure 函数最终会生成函数闭包对象，这个对象会设置属性。js_closure 还会生成设置变量属性，比如来源和类型，并存在当前函数的 var_refs 里，变量处理使用的是 js_closure2 函数。js_closure 先使用 JS_NewObjectClass 将 func_obj 类型由 js_closure2 函数会遍历闭包变量，通过 get_var_ref 函数来看闭包变量来自哪一层上下文，最后存在当前函数的 JSVarRef 里，JSVarRef 表变量引用。在 js_closure2 函数中，当发现自由变量的 is_local 为 false 也就是变量来自外层，就会直接从 js_closure2 函数传入的上层的参数 cur_var_refs 里取出变量，存在 var_refs 里，当 JS_CallInternal 执行时当遇到 OP_get_var_ref 字节码操作符时函数闭包会直接通过索引从 var_refs 里取出变量并通过 JS_DupValue 将引用加1，同时把引用加到栈顶。OP_put_var_ref 使用 set_value 函数将栈顶值更新到 var_refs 对应索引位置，并 pop 栈顶值。js_function_set_properties 函数设置属性。</p>
<p>创建了闭包环境，接下来执行 JS_Call 函数，JS_Call 函数会逐个执行字节码的指令。JS_Call 会调用 JS_CallInternal 函数，QuickJS 的字节码执行架构是基于栈指令的，JavaScriptCore 是基于寄存器解释执行的，关于 JavaScriptCore 的详细介绍可以参看我以前的文章《<a href="https://ming1016.github.io/2018/04/21/deeply-analyse-javascriptcore/">深入剖析 JavaScriptCore</a>》。JSStackFrame 是模拟栈，在一个运行时只会有一个模拟栈在使用，generator 通过保存一个还在运行中没结束的栈来达到挂起的目的。</p>
<p>JS_CallInternal 会对字节码的每条指令都进行解释执行。会先为变量、存放数据的栈还有参数等进行内存的分配。然后再对每条字节码指令一个一个进行解释执行，指令类型有 push 开头的入栈指令。goto、if 打头的跳转指令。call 开头的调用指令。交换类的指令有 swap、nip、dup、perm、drop 等。用于计算的指令有加减乘除、一元计算、逻辑计算等。处理指令时生成 JSValue 用的是 JS_MKVAL 和 JS_MKPTR 这两个宏。新建字符串类型用的是 JS_NewString，对象是 JS_NewObject，数组是 JS_NewArray等。类型转换使用的函数有 JS_toString 来转换成字符串类型，JS_ToNumeric 转换成数字，JS_ToObject 转换成对象等。</p>
<p>内存相关指令有 JS_DupValue 函数对 JSRefCountHeader 进行引用计数加1，JS_FreeValue 对引用计数减1，触发GC使用 js_trigger_gc 函数，添加一个 GC 对象使用 add_gc_object 函数，移出使用 remove_gc_object 函数。触发 GC 的时机是可以看哪里调用了 JS_NewObjectProtoClass 这个函数，JS_NewObjectProtoClass 函数会调用 JS_NewObjectFromShape 函数会触发 js_trigger_gc 函数，js_trigger_gc 函数会判断内存大小是否大于 malloc_gc_threshold，超过就会调用 JS_RunGC 函数。对应判断代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">force_gc = ((rt-&gt;malloc_state.malloc_size + size) &gt;</span><br><span class="line">                rt-&gt;malloc_gc_threshold);</span><br></pre></td></tr></table></figure>
<p>如果定义了 FORCE_GC_AT_MALLOC 这个宏，每次都会调用 JS_RunGC 函数。JS_RunGC 函数会调用三个函数，代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">JS_RunGC</span><span class="params">(JSRuntime *rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* decrement the reference of the children of each object. mark =</span></span><br><span class="line"><span class="comment">       1 after this pass. */</span></span><br><span class="line">    gc_decref(rt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* keep the GC objects with a non zero refcount and their childs */</span></span><br><span class="line">    gc_scan(rt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* free the GC objects in a cycle */</span></span><br><span class="line">    gc_free_cycles(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上代码中，gc_decref 函数会遍历 gc_obj_list 减少每个对象的子对象的引用，减到0的会存到 temp_obj_list 里，gc_scan 函数会调用 gc_scan_incref_child 将子对象引用加1，保持 GC 对象计数和他们子对象。gc_free_cycles 函数在周期中释放 GC 对象，JS_GC_OBJ_TYPE_JS_OBJECT 和 JS_GC_OBJ_TYPE_FUNCTION_BYTECODE 类型的和 JSValue 相关的会释放，其他的会删除。</p>
<p>总的说来，GC 是通过 add_gc_object 函数调用开始的，调用了 add_gc_object 函数的函数都是会涉及到 GC，比如 JS_CallInternal、js_create_function、JS_NewObjectFromShape 等函数。其中 JS_DupValueRT 会对引用计数做加1操作。free_var_ref 和 JS_FreeValueRT 函数会对引用计数减1，当减到0时会调用 JS_FreeValueRT 释放移除引用对象。</p>
<p>下面详细讲解不同类型指令怎么解释执行的。</p>
<p>pc 指向当前正在执行的字节码地址。sp 指向堆栈，堆栈存着运行时的数据，通过 pc 指向的操作指令进行堆栈的入栈和出栈操作。</p>
<p>OP_push_i32 使用 JS_NewInt32 将当前字节码的值转成 JSInt32，sp++ 将值入栈。通过 quickjs-opcode.h 文件可以看到 OP_push_i32 相关定义：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEF(       push_i32, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, i32)</span><br></pre></td></tr></table></figure>
<p>上面OPCode 定义中第一个参数 id 表示 OPCode 的名字，第二个 size 表示 OPCode 的字节大小，第三个 n_pop 表示出栈元素的数量，第四个参数 n_push 表示入栈元素的数量，第五个参数 f 表示字节码的类型。第二个参数可以看到 OP_push_i32 的大小是5字节，那么下个字节码需要 pc 指针增加4 加上通过栈操作得到的偏移值1加在一起是5，因此可以移到下一个指令。</p>
<p>对于8位以下整数，使用的是 OP_push 加位数的字节码，大小是1个字节。使用 JS_NewInt32 进行类型转换然后入栈。8位整数使用的是 OP_push_i8，8位整数放在第2个字节里，16位整数需要2个字节，所以对应的字节码是 OP_push_i16。OP_push_empty_string 会将 JS_ATOM_empty_string 这个 atom 使用 JS_AtomToString 转成 JSValue 入栈。OP_push_atom_value 会将 atom 的值转成对应字符串 JSValue 进行入栈。当遇到 OP_undefined、OP_null、OP_push_false、OP_push_true时将对应的特殊值定义，比如 JS_UNDEFINED 和 JS_NULL 入栈。</p>
<p>当字节码操作符是 OP_fclosure 或 OP_fclosure8 闭包时，会调用 js_closure 去创建闭包解释环境，解释执行包内指令。闭包就是函数和周边状态的引用合在一起的组合，内层可以访问外层作用域。比如下面这个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面代码可以看出，add 函数内执行加法的函数能够访问到外层的入参变量 a，从而和返回函数的入参变量 b 进行加法运算，返回相加后的值。解析时，会生成 scope_get_var 和 scope_put_var，在执行 resolve_variable 函数时会将解析后的指令转换成局部变量 get_loc 和 put_loc，自由变量 get_var_ref 和 put_var_ref。获取局部和外层变量使用的是 get_closure_var 函数，get_closure_var 函数会将当前函数所要用的变量记录在函数定义对象 JSFunctionDef 的 closure_var 里。变量结构是 JSClosureVar，表示闭包变量信息，记录闭包里变量的各种信息，比如变量的索引、名字等，其字段 is_local 如果是 true 表示变量是局部变量，false 表示是上层变量。在执行 OP_fclosure 字节码操作符时，会根据 JSFunctionDef 的 closure_var 生成 var_refs，也就是自由变量的引用，获取这些自由变量的字节码操作符是 OP_get_var_ref，是通过 var_refs 里的索引获取。</p>
<p>字节码操作符操作 OP_push_this 分为普通处理和严格模式处理，普通处理是直接将this指向指针入栈，再对引用计数加1。严格模式对于 NULL 和未定义的 this 会将全局对象指针入栈，如果 this 是一个对象，就按照普通模式处理，其他类型会尝试使用 JS_ToObject 转成对象，如果有异常则会 goto 到 exception label。</p>
<p>OP_object 表示需要在运行时创建一个对象，也就是不在编译时创建，QuickJS 使用的是 JS_NewObject 函数（最终调用的是 JS_NewObjectProtoClass 函数），创建 JSShape 的 JSValue，文章前面也说了，shape 是一种避开繁琐字节码处理更快创建函数对象的方法。另外针对一些定义在 OPSpecialObjectEnum 枚举里特殊的对象创建的字节码操作符是 OP_special_object，参数和变量类型最终都会调用 JS_NewObjectProtoClass 函数创建 shape 对象，this 和 home_object 会返回对应的指针，import 会导入模块。</p>
<p>drop、nip 和 dup 开头的字节码是对 sp 堆栈里的顶层值进行删除和复制。insert 开头的字节码是加入对象指针，perm 是交换对象和值的栈层级。swap 开头的是交换值的栈层级，rot 是整体翻转。</p>
<p>call 开头的字节码操作符和 OP_eval 会递归调用 JS_CallInternal 函数进行对应位置的执行。OP_call_constructor 会调用 JS_CallConstructorInternal 函数执行构造函数指令，最终函数的指令也是通过 JS_CallInternal 解释执行。</p>
<p>创建数组，使用的是 OP_array_from，对应函数是 JS_NewArray，JS_NewArray 函数会执行 JS_NewObjectFromShape 函数，参数设置类型为 JS_CLASS_ARRAY，JS_NewObjectFromShape 会创建一个数组对象 Shape。</p>
<p>OP_apply 会调用 js_function_apply 函数，如果没有参数就会直接调用 JS_Call 解释执行，有参数的话使用 build_arg_list 函数获取参数列表，对于构造函数 js_function_apply 会使用 JS_CallConstructor2 函数执行，其他的直接使用 JS_Call 执行。</p>
<p>OP_eval 和 OP_apply_eval 会检查 eval 执行参数，如果没有会调用 JS_EvalObject 函数，JS_EvalObject 函数会依据 val 参数是否是字符串决定是直接返回 val 地址还是调用 JS_EvalInternal 解析字符串。</p>
<p>OP_regexp 会使用 js_regexp_constructor_internal 函数创建一个正则函数对象放到堆栈中。OP_get_super 会使用 JS_GetPrototype 函数来获取原型对象放到堆栈中。OP_import 是动态获取 import 内容，使用 js_new_promise_capability 函数检查是否是 promise，然后调用 JS_CallConstructor 函数执行。</p>
<p>对于全局变量存取字节码，是调用的 JS_GetGlobalVar 和 JS_SetGlobalVar 函数。全局变量和函数的定义使用的是 JS_DefineGlobalVar 和 JS_DefineGlobalFunction 函数。局部变量和参数 put 使用的是 JS_DupValue 函数入栈，set 使用的是 set_value 函数。对全局变量、局部变量和参数后加 check 的指令是在入栈或设置值前会用 JS_IsUninitialized 函数来判断他们是否是 JS_TAG_UNINITIALIZED，在他们之前加 make 表示在运行时添加对象，会先用 JS_NewObjectProto 创建含 JSShape 的 JSValue 入栈，在栈里再取出 JSObject 设置变量引用，再入栈变量的 atom。OP_close_loc 用的是 close_lexical_var 来取消局部变量的引用。</p>
<p>goto 这样的字节码指令在 quickjs-opcode.h 里定义的值类型都是 label，通过取出指令对应 label 的偏移量，让 pc 加上偏移量直接跳转到对应字节码。OP_if_true 有五个字节，因此 pc += 4 为下个指令指针地址。从 sp 栈里取出栈顶 op，使用 JS_VALUE_GET_TAG 取出 tag 值，判断小于 JS_TAG_UNDEFINED 就执行下个指令。这里 JS_TAG_UNDEFINED 和其他 tag 类型都定义在一个匿名枚举里，有引用计数的类型都是负数，比如 JS_TAG_BIG_INT -10、JS_TAG_STRING -7、JS_TAG_MODULE -3、JS_TAG_FUNCTION_BYTECODE -2、JS_TAG_OBJECT -1。整数、布尔值、NULL 类型也满足小于 JS_TAG_UNDEFINED 条件。OP_if_false 执行下条指令逻辑和 OP_if_true 相反。</p>
<p>for 遍历语法关键字相关字节码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEF(   for_in_start, 1, 1, 1, none)</span><br><span class="line">DEF(   for_of_start, 1, 1, 3, none)</span><br><span class="line">DEF(for_await_of_start, 1, 1, 3, none)</span><br><span class="line">DEF(    for_in_next, 1, 1, 3, none)</span><br><span class="line">DEF(    for_of_next, 2, 3, 5, u8)</span><br></pre></td></tr></table></figure>
<p>从上述字节码定义里可以看到，定义的字节码对应的是 JavaScript 的 for…in 和 for…of 语法。for…in 是用在对象的遍历，会遍历所有对象以字符串为键的枚举属性，也包括继承的属性。for…of 语句是在可迭代对象上创建迭代的循环，这样的对象有字符串、数组、参数、NodeList、TypedArray、Map、Set等。for…in 会通过 build_for_in_iterator 函数来处理，for…of 会用 JS_GetIterator 函数里的 JS_CreateAsyncFromSyncIterator 函数创建所需的迭代的循环。</p>
<p>获取属性的字节码操作符是 OP_get_field，JS_CallInternal 函数会调用的是 JS_GetProperty。OP_put_field 是设置类属性，JS_CallInternal 函数会调用 JS_SetPropertyInternal 函数。创建一个新属性使用的是 OP_define_field 字节码操作符。私有属性的获取、设置、定义字节码调用的函数分别是 JS_GetPrivateField、JS_SetPrivateField、JS_DefinePrivateField。属性获取会调用的是 find_own_property 函数，设置属性会在调用属性基础上多调用 set_value 函数对属性值进行设置，定义会多调用 add_property 函数，add_property 函数会先检查是否先前已经定义过，如果没有就会调用 add_shape_property 函数新建属性。删除属性会调用 delete_property 函数。</p>
<p>私有符号 private symbol 对应的字节码操作符是 OP_private_symbol，调用的是 JS_NewSymbolFromAtom 函数，参数 atom_type 为 JS_ATOM_TYPE_PRIVATE。<a href="https://github.com/zenparsing/proposal-private-symbols">private symbol 提案</a>和 private field 的提案一样都在完成的最后一个阶段。以前实例的属性是可以被外部的代码修改，没法保护，一些库会用下划线字符作为前缀标记属性为私有，TypeScript 靠编译器来检查私有属性否会被外部修改。另一种方法就是内部使用闭包隐藏属性，把属性和外部代码的修改隔离开，缺点就是每个实例都要额外为私有的属性创建闭包。private symbol 语法能起到保护私有属性的作用，在标准和语法层面支持，而不依赖三方定制编译规则或额外加闭包保护。编写 private symbol 代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;s1 是否等于 s1： &quot;</span> + (s1 === s2));</span><br></pre></td></tr></table></figure>
<p>上面代码执行的结果是 false，表示即使 Symbol 参数是相同字符串，返回的 symbol 都是唯一的。private symbol 字节码处理函数 JS_NewSymbolFromAtom 参数 atom_type 对应的是 JS_ATOM_TYPE_PRIVATE，JS_NewSymbolFromAtom 函数调用链是 JS_NewSymbolFromAtom -&gt; JS_NewSymbol -&gt; <code>__JS_NewAtom</code>， <code>__JS_NewAtom</code> 函数对于 atom_type 是 JS_ATOM_TYPE_PRIVATE 相关处理代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    JS_ATOM_TYPE_STRING = <span class="number">1</span>,</span><br><span class="line">    JS_ATOM_TYPE_GLOBAL_SYMBOL,</span><br><span class="line">    JS_ATOM_TYPE_SYMBOL,</span><br><span class="line">    JS_ATOM_TYPE_PRIVATE,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (atom_type &lt; JS_ATOM_TYPE_SYMBOL) &#123;</span><br><span class="line">    <span class="comment">// 看看是否已经有相同的字符串</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 尝试定位已注册的 atom</span></span><br><span class="line">    len = str-&gt;len;</span><br><span class="line">    <span class="comment">// 计算 hash 值</span></span><br><span class="line">    h = hash_string(str, atom_type);</span><br><span class="line">    h &amp;= JS_ATOM_HASH_MASK;</span><br><span class="line">    <span class="comment">// h1 的作用是用来保证 h 是在 hash_size 的范围里</span></span><br><span class="line">    h1 = h &amp; (rt-&gt;atom_hash_size - <span class="number">1</span>);</span><br><span class="line">    i = rt-&gt;atom_hash[h1];</span><br><span class="line">    <span class="comment">// 判断是否有相同的 atom 在 atom_array 里</span></span><br><span class="line">    <span class="keyword">while</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">        p = rt-&gt;atom_array[i];</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;hash == h &amp;&amp;</span><br><span class="line">            p-&gt;atom_type == atom_type &amp;&amp;</span><br><span class="line">            p-&gt;len == len &amp;&amp;</span><br><span class="line">            js_string_memcmp(p, str, len) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!__JS_AtomIsConst(i))</span><br><span class="line">                p-&gt;header.ref_count++;</span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line">        &#125;</span><br><span class="line">        i = p-&gt;hash_next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 处理 symbol 类型</span></span><br><span class="line">    h1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (atom_type == JS_ATOM_TYPE_SYMBOL) &#123;</span><br><span class="line">        h = JS_ATOM_HASH_SYMBOL;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// private symbol 在后面的处理和 symbol 一样</span></span><br><span class="line">        h = JS_ATOM_HASH_PRIVATE;</span><br><span class="line">        atom_type = JS_ATOM_TYPE_SYMBOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>从上面 QuickJS 对于 private symbol 的处理可以看出，依据枚举定义小于 JS_ATOM_TYPE_SYMBOL 类型的是字符串和全局 symbol，他们会做去重处理，会检查先前是否有注册，如果有就会复用，对于 symbol 类型无论是 symbol 还是 private symbol 都会按照不复用，每个都使用新建的方式来处理。</p>
<p>设置对象操作符是 OP_set_name 和 OP_set_name_computed。其中 OP_set_name_computed 用来设置计算的属性名，计算的属性名语法是在 ECMAScript 2015 标准里开始支持的。该语法允许在[]中加入表达式，这个表达式会将计算结果作为属性名。比如下面 js 代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;[<span class="string">&#x27;k&#x27;</span> + num]: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以直接使用 o.k1 来获取 k1 键对应的值1。计算的属性名也可以用模板字元，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;[<span class="string">`k<span class="subst">$&#123;num&#125;</span>`</span>]: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>QuickJS 对对象设置和计算的属性名对象设置的函数分别是 JS_DefineObjectName 和 JS_DefineObjectNameComputed，他们都会通过 JS_isObject 函数检查是否是对象类型，js_object_has_name 函数判断是否是有键名对象，JS_DefinePropertyValue 函数设置属性值。不同的是计算的属性名会调用 js_get_function_name 来处理属性名计算问题。</p>
<p>定义方法字节码操作符是 OP_define_method，先从堆栈取出持有方法的对象，然后再调用 js_method_set_properties 函数设置方法为对象的属性，然后通过 JS_DefineProperty 来定义设置的属性。</p>
<p>定义类使用的是 js_op_define_class 函数，js_op_define_class 会先处理有父类和无父类的情况，调用 JS_NewObjectProtoClass 函数创建类对象，返回 JSValue，将这个值传入 js_closure2 获取类的详细信息，包括类对应的字节码、home_object、变量等。js_method_set_home_object 函数设置 home_object，使用 JS_DefinePropertyValue 来定义属性值，计算的属性用 JS_DefineObjectNameComputed 函数，构造函数属性必须是第一个，构造函数属性可以被计算的属性覆盖。</p>
<p>定义数组元素使用字节码操作符是 OP_define_array_el，调用 JS_DefinePropertyValueValue 函数，插入数组元素用的是 OP_append，调用 js_append_enumerate 函数。获取对象的属性和设置对象的属性函数分别是 JS_GetPropertyValue 和 JS_SetPropertyValue 函数。对象的属性其实在 js 语法中被包装成不同的概念，比如数组的属性其实就是数组的元素，因此下面这些字节码都会用到获取对象属性和设置对象属性的函数：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DEF(   get_array_el, 1, 2, 1, none)</span><br><span class="line">DEF(  get_array_el2, 1, 2, 2, none) /* obj prop -&gt; obj value */</span><br><span class="line">DEF(   put_array_el, 1, 3, 0, none)</span><br><span class="line">DEF(get_super_value, 1, 3, 1, none) /* this obj prop -&gt; value */</span><br><span class="line">DEF(put_super_value, 1, 4, 0, none) /* this obj prop value -&gt; */</span><br><span class="line">DEF(  get_ref_value, 1, 2, 3, none)</span><br><span class="line">DEF(  put_ref_value, 1, 3, 0, none)</span><br></pre></td></tr></table></figure>
<p>OP_add 是加指令字节码操作符，OP_add 会先从 sp 栈里取出待相加两个数，使用 JS_VALUE_IS_BOTH_INT 和 JS_VALUE_IS_BOTH_FLOAT 函数判断两个数是否类型一样，相同的话可以直接相加，整数的话先使用64位计算，然后用32位比较是否相同，不同的话 goto 到 add_slow label 中进行计算。int 和 float 外的比如 big int 等科学计算也 goto 到 add_slow 中计算，add_slow label 里实际调用的是 js_add_slow 函数。减、乘、除的字节码操作符对应的分别是 OP_sub、OP_mul、OP_div，其实现和加字节码操作符类似，不同的是他们的复杂计算都会 goto 到 binary_arith_slow label，调用的是 js_binary_arith_slow 函数。一元计算字节码操作符 OP_plus、OP_neg、OP_inc、OP_dec、OP_inc_loc、OP_dec_loc，他们的复杂计算会调用 js_unary_arith_slow 函数。逻辑计算 OP_shl、OP_sar、OP_and、OP_or、OP_xor，复杂计算会调用 js_binary_logic_slow 函数。</p>
<p>OP_to_object 字节码操作符会根据栈中定义对象类型来将一些非对象类型转为对象，调用的是 JS_ToObject 函数，内主要是调用 JS_NewObjectFromShape 函数来处理，类型 class_id 来区分不同的数据类型。OP_to_propkey 和 OP_to_propkey2 是将键值的类型转为键可支持的字节码操作符，其主要处理就是除了整型、字符串和 symbol 外类型通过 JS_ToStringInternal 函数转化为字符 JSValue 类型。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;最近在做 JavaScript 和 Native 打交道的工作，虽然6年前服务端和前端包括 JavaScript 经验也有些，不过如今前端标
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="Web" scheme="http://ming1016.github.io/tags/Web/"/>
    
      <category term="编译" scheme="http://ming1016.github.io/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="JavaScript" scheme="http://ming1016.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>App 启动提速实践和一些想法</title>
    <link href="http://ming1016.github.io/2020/12/18/thinking-in-how-to-speed-up-app/"/>
    <id>http://ming1016.github.io/2020/12/18/thinking-in-how-to-speed-up-app/</id>
    <published>2020-12-18T08:14:09.000Z</published>
    <updated>2021-04-11T14:42:09.930Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/thinking-in-how-to-speed-up-app/1.png" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>启动是门面，好的印象也助于留存率提高。苹果也在系统启动上不断努力，提升用户体验，最新的 M1 宣传中还特别强调了翻盖秒开 macOS，可以看出其对极致启动速度的追求。<a href="https://farfetchtechblog.com/en/blog/post/mobile-app-launch-performance-ii/">这篇文章</a>提到，据 <a href="https://wemakewebsites.com/blog/improve-page-load-speed-increase-conversion/">Akamai</a> 调查，每多1秒等待，转化率会下降7%，KissMetrics 的一份报告说启动超5秒，会使19%的用户放弃等待卸载 App。<br><img src="/uploads/thinking-in-how-to-speed-up-app/2.png" alt=""></p>
<p>高德 App 启动优化专项完成后已经有一段时间了，一直保持实属不易，我一年前在这篇<a href="https://ming1016.github.io/2019/12/07/how-to-analyze-startup-time-cost-in-ios/">文章</a>里也做了些总结。我这里再补充些启动优化用到一些手段和一些想法，希望这些能够对你有帮助。</p>
<h2 id="通过-Universal-Links-和-App-Links-优化唤端启动体验"><a href="#通过-Universal-Links-和-App-Links-优化唤端启动体验" class="headerlink" title="通过 Universal Links 和 App Links 优化唤端启动体验"></a>通过 Universal Links 和 App Links 优化唤端启动体验</h2><p>App 都会存在拉新和导流的诉求，如何提高这样场景的用户体验呢？这里会用到唤端技术。包含选择什么样的换端协议，我们先看看唤端路径，如下：<br><img src="/uploads/thinking-in-how-to-speed-up-app/3.png" alt=""></p>
<p>唤端的协议分为自定义协议和平台标准协议，自定义协议在 iOS 端会有系统提示弹框，在 Android 端 chrome 25 后自定义协议失效，需用 Intent 协议包装才能打开 App。如果希望提高体验最好使用平台标准协议。平台标准协议在 iOS 平台叫 Universal Links，在 iOS 9 开始引入的，所以 iOS 9 及以上系统都支持，如果用户安装了要跳的 App 就会直接跳到 App，不会有系统弹框提示。相对应的 Android 平台标准协议叫 App Links，Android 6 以上都支持。</p>
<p>这里需要注意的是 iOS 的 Universal Links 不支持自动唤端，也就是页面加载后自动执行唤端是不行的，需要用户主动点击进行唤端。对于自定义协议和平台标准协议在有些 App 里是遇到屏蔽或者那些 App 自定义弹窗提示，这就只能通过沟通加白来解决了。</p>
<p>另外对于启动时展示 H5 启动页，或唤端跳转特定功能页，可以将拦截判断置前，判断出启动去往功能页，优先加载功能页的任务，主图相关任务项延后再加载，以提升启动到特定页面的速度。</p>
<h2 id="H5启动页"><a href="#H5启动页" class="headerlink" title="H5启动页"></a>H5启动页</h2><p>现在 App 启动会在有活动时先弹出活动运营 H5 页面提高活动曝光率。但如果 H5 加载慢势必非常影响启动的体验。</p>
<p>iOS 的话可以使用 ODR(On-Demand Resources) 在安装后先下载下来，点击启动前实际上就可以直接加载本地的了。ODR 安装后立刻下载的模式，下载资源会被清除，所以需要将下载内容移动到自定义的地方，同时还需要做自己兜底的下载来保证在 On-Demand Resources 下载失败时，还能够再从自己兜底服务器上拉下资源。</p>
<p>On-Demand Resources 还能够放很多资源，甚至包括脚本代码的预加载，可以减少包体积。由于使用的是苹果服务器，还能够减少 CDN 产生的峰值成本。</p>
<p>如果不使用 On-Demand Resources 也可以对 WKWebView 进行预加载，虽然安装后第一次还是需要从服务器上加载一次，不过后面就可以从本地快速读取了。</p>
<p>iOS 有三套方案，一套是通过 WKBrowsingContextController 注册 scheme，使用 URLProtocol 进行网络拦截。第二套是基于 WKURLSchemeHandler 自定义 scheme 拦截请求。第三套是在本地搭建 local server，拦截网络请求重定向到本地 server。第三套搭建本地 server 成本高，启动 server 比较耗时。第二套 WKURLSchemeHandler 使用自定义 scheme，对于 H5 适配成本很高，而且需要 iOS 11 以上系统支持。</p>
<p>第一套方案是使用了 WKBrowsingContextController 的 registerSchemeForCustomProtocol: 这个方法，这个方法的参数设置为 http 或 https 然后执行，后面这类 scheme 就能够被 NSURLProtocol 处理了，具体实现可以在<a href="https://github.com/Yeatse/NSURLProtocol-WebKitSupport">这里</a>看到。</p>
<p>Android 通过系统提供的资源拦截Api即可实现加载拦截，拦截后根据请求的url识别资源类型，命中后设置对应的mimeType、encoding、fileStream即可。</p>
<h2 id="下载速度"><a href="#下载速度" class="headerlink" title="下载速度"></a>下载速度</h2><p><img src="/uploads/thinking-in-how-to-speed-up-app/4.png" alt=""><br>App 安装前的下载速度也直接影响到了用户从选择你的 App 到使用的体验，如果下载大小过大，用户没有耐心等待，可能就放弃了你的 App，4G5G 环境下超 200MB 会弹窗提示是否继续下载，严重影响转化率。</p>
<p>因此还对下载大小做了优化，将 __TEXT 字段迁移到自定义段，使得 iPhone X 以前机器的下载大小减少了1/3的大小，这招之所以对 iPhone X 以前机器管用的原因是因为先前机器是按照先加密再压缩，压缩率低，而之后机器改变了策略因此下载大小就会大幅减少。Michael Eisel 这篇博客<a href="https://eisel.me/app-size">《One Quick Way to Drastically Reduce your iOS App’s Download Size》</a> 提出了这套方案，你可以立刻应用到自己应用中，提高老机器下载速度，效果立竿见影。</p>
<p>Michael Eisel 还用 Swift 包装了 <a href="https://github.com/simdjson/simdjson">simdjson</a> 写了个库 <a href="https://github.com/michaeleisel/ZippyJSON">ZippyJSONDecoder</a> 比系统自带 JSONDecoder 快三倍，很符合本篇“要更快”的主题对吧，人类对速度的追求是没有止境的，最近 YY 大神 ibireme 也在写 JSON 库 <a href="https://github.com/ibireme/yyjson">YYJSON</a> 速度比 simdjson 还快。Michael 还写个了提速构建的自制链接器 <a href="https://github.com/michaeleisel/zld">zld</a>，项目说明还描述了如何开发定制自己的链接器。还有主线程阻塞（ANR）检测的 swift 类 <a href="https://gist.github.com/michaeleisel/77b8efc9bedab1444dbb71a5915dbd15">ANRChecker</a>，还有通过hook 方式记录系统错误日志的<a href="https://gist.github.com/michaeleisel/8eddd0082b4fd7f2bd118d97e79bf12e">例子</a>展示如何通过截获自动布局错误，函数是 UIViewAlertForUnsatisfiableConstraints ，malloc 问题替换函数为 malloc_error_break 即可。Michael 的这些性能问题处理手段非常实用，真是个宝藏男孩。</p>
<p>通过每月新增激活量、浏览到新增激活转换率、下载到激活转换率、转换率受体积因素影响占比、每个用户获取成本，使用公式计算能够得到每月成本收益，把你们公司对应具体参数数值套到公式中，算出来后你会发现如果降低了50多MB，每月就会有非常大的收益。</p>
<p>对于 Android 来说，很多功能是可以放在云端按需下载使用，后面的方向是重云轻端，云端一体，打通云端链路。</p>
<p>下载和安装完成后，就要分析 App 开始启动时如何做优化了，我接下来跟你说说 Android 启动 so 库加载如何做监控和优化。</p>
<h2 id="Android-so-库加载优化"><a href="#Android-so-库加载优化" class="headerlink" title="Android so 库加载优化"></a>Android so 库加载优化</h2><h3 id="编译阶段-静态分析优化"><a href="#编译阶段-静态分析优化" class="headerlink" title="编译阶段-静态分析优化"></a>编译阶段-静态分析优化</h3><p>依托自动化构建平台，通过构建配置实现对源码模块的灵活配置，进行定制化编译。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-ffunction-sections -fdata-sections <span class="comment">// 实现按需加载</span></span><br><span class="line">-fvisibility=hidden -fvisibility-inlines-hidden <span class="comment">// 实现符号隐藏</span></span><br></pre></td></tr></table></figure>
<p>这样可以避免无用模块的引入，效果如下图：<br><img src="/uploads/thinking-in-how-to-speed-up-app/7.png" alt=""></p>
<h3 id="运行阶段-hook分析优化"><a href="#运行阶段-hook分析优化" class="headerlink" title="运行阶段-hook分析优化"></a>运行阶段-hook分析优化</h3><p>Android Linker 调用流程如下：<br><img src="/uploads/thinking-in-how-to-speed-up-app/5.png" alt=""><br>注意，find_library 加载成功后返回 soinfo 对象指针，然后调用其 call_constructors 来调用 so 的 init_array。call_constructors 调用 call_array，其内部循环调用 call_funtion 来访问 init_array 数组的调用。</p>
<p>高德Android小伙伴们基于 <a href="https://github.com/frida/frida-gum">frida-gum</a> 的 hook 引擎开发了线下性能监控工具，可以 hook c++ 库，支持 macos、android、ios，针对 so 的全局构造时间和链接时间进行 hook，对关键 so 加载的关键节点耗时进行分析。dlopen 相关 hook 监控点如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">target_func_t</span> android_funcs_22[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;__dl_dlopen&quot;</span>, <span class="number">0</span>, (<span class="keyword">void</span> *)my_dlopen&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;__dl_ZL12find_libraryPKciPK12android_dlextinfo&quot;</span>, <span class="number">0</span>, (<span class="keyword">void</span> *)my_find_library&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;__dl_ZN6soinfo16CallConstructorsEv&quot;</span>, <span class="number">0</span>, (<span class="keyword">void</span> *)my_soinfo_CallConstructors&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;__dl_ZN6soinfo9CallArrayEPKcPPFvvEjb&quot;</span>, <span class="number">0</span>, (<span class="keyword">void</span> *)my_soinfo_CallArray&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">target_func_t</span> android_funcs_28[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;__dl_Z9do_dlopenPKciPK17android_dlextinfoPKv&quot;</span>, <span class="number">0</span>, (<span class="keyword">void</span> *)my_do_dlopen_28&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;__dl_Z14find_librariesP19android_namespace&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;__dl_ZN6soinfo17call_constructorsEv&quot;</span>, <span class="number">0</span>, (<span class="keyword">void</span> *)my_soinfo_CallConstructors&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;__dl_ZL10call_arrayIPFviPPcS1_EEvPKcPT_jbS5_&quot;</span>, <span class="number">0</span>, (<span class="keyword">void</span> *)my_call_array_28&lt;constructor_func&gt;&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;__dl_ZN6soinfo10link_imageERK10LinkListIS&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;__dl_g_argc&quot;</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;__dl_g_argv&quot;</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;__dl_g_envp&quot;</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>android 版本不同对应 hook 方法有所不同，要注意当 so 有其他外部链接依赖时，针对 dlopen 的监控数据，不只包括自身部分，也包括依赖的 so 部分。在这种情况下，so 加载顺序也会产生很大的影响。</p>
<p>JNI_OnLoad 的 hook 监控代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ABTOR_ANDROID</span></span><br><span class="line"><span class="function">jint <span class="title">my_JNI_ONLoad</span><span class="params">(JavaVM* vm, <span class="keyword">void</span>* reserved)</span> </span>&#123;</span><br><span class="line">    asl::HookEngine::HoolContext *ctx = asl::HookEngine::getHookContext();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> start = PerfUtils::getTickTime();</span><br><span class="line">    jint res = asl::CastFuncPtr(my_JNI_OnLoad, ctx-&gt;org_func)(vm, reserved);</span><br><span class="line">    <span class="keyword">int</span> duration = (<span class="keyword">int</span>)(PerfUtils::getTickTime() - start);</span><br><span class="line"></span><br><span class="line">    LibLoaderMonitorImpl *monitor = (LibLoaderMonitorImpl*)LibLoaderMonitor::getInstance();</span><br><span class="line">    monitor-&gt;addOnloadInfo(ctx-&gt;user_data, duration);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>如上代码所示，linker 的 dlopen 完成加载，然后调用 dlsym 来调用目标 so 的 JNI_OnLoad，完成 JNI 涉及的初始化操作。</p>
<p>加载 so 需要注意并行出现 loadLibrary0 锁的问题，这样会让多线程发生等锁现象。可以减少并发加载，但不能简单把整个加载过程放到串行任务里，这样耗时可能会更长，并且没法充分利用资源。比较好的做法是，将耗时少的串行起来同时并行耗时长的 so 加载。</p>
<p>至此完成了 so 的初始化和链接的监控。</p>
<p>说完 Android，那么 iOS 的加载是怎样的，如何优化呢？我接着跟你说。</p>
<h2 id="App-加载"><a href="#App-加载" class="headerlink" title="App 加载"></a>App 加载</h2><p>_dyld_start 之前做了什么，dyld_start 是谁调用的，通过查看<a href="https://opensource.apple.com/tarballs/xnu/">xnu的源码</a>可以理出，当 App 点击后会通过__mac_execve 函数 fork 进程，加载解析 Mach-O 文件，调用 exec_activate_image() 开始激活 image 的过程。先根据 image 类型来选择 imgact，开始 load_machfile，这个过程会先解析 Mach-O，解析后依据其中的 LoadCommand 启动 dyld。最后使用 activate_exec_state() 处理结构信息，thread_setentrypoint() 设置 entry_point App的入口点。</p>
<p>_dyld_start 之后要少些动态库，因为链接耗时；少些 +load、C 的 constructor 函数和 C++ 静态对象，因为这些会在启动阶段执行，多了就会影响启动时间。因此，没有用的代码就需要定期清理和线上监控。通过元类中flag的方式进行监控然后定期清理。</p>
<h2 id="iOS-主线程方法调用时长检测"><a href="#iOS-主线程方法调用时长检测" class="headerlink" title="iOS 主线程方法调用时长检测"></a>iOS 主线程方法调用时长检测</h2><p>+load 方法时间统计，使用运行时 swizzling 的方式，将统计代码放到链接顺序的最前面即可。静态初始化函数在 DATA 的 mod_init_func 区，先把里面原始函数地址保存，前后加上自定义函数记录时间。</p>
<p>在 Linux上 有 strace 工具，还有库跟踪工具 ltrace，OSX 有包装了 dtrace 的 instruments 和 dtruss 工具，不过在某些场景需求下不好用。objc_msgSend 实际上会通过在类对象中查找选择器到函数的映射来重定向执行到实现函数。一旦它找到了目标函数，它就会简单地跳转到那里，而不必重新调整参数寄存器。这就是为什么我把它称为路由机制，而不是消息传递。Objective-C 的一个方法被调用时，堆栈和寄存器是为 objc_msgSend 调用配置的，objc_msgSend 路由执行。objc_msgSend 会在类对象中查找函数表对应定向到的函数，找到目标函数就跳转，参数寄存器不会重新调整。</p>
<p>因此可以在这里 hook 住做统一处理。hook objc_msgSend 还可以获取启动方法列表，用于二进制重排方案中所需要的 AppOrderFiles，不过  AppOrderFiles 还可以通过 Clang SanitizerCoverage 获得，具体可以看宝藏男孩 Michael Eisel 这个这篇博客《<a href="https://eisel.me/order">Improving App Performance with Order Files</a>》 的介绍。</p>
<p>objc_msgSend 可以通过 fishhook 指定到你定义的 hook 方法中，也可以使用创建跳转 page 的方式来 hook。做法是先用 mmap 分配一个跳转的 page，这个内存后面会用来执行原函数，使用特殊指令集将CPU重定向到内存的任意位置。创建一个内联汇编函数用来放置跳转的地址，利用 C 编译器自动复制跳转 page 的结构，指向 hook 的函数，之前把指令复制到跳转 page 中。ARM64 是一个 RISC 架构，需要根据<a href="https://www.element14.com/community/servlet/JiveServlet/previewBody/41836-102-1-229511/ARM.Reference_Manual.pdf">指令种类</a>检查分支指令。可以在 <a href="https://opensource.apple.com/source/objc4/objc4-647/runtime/Messengers.subproj/objc-msg-arm64.s">_objc_msgSend</a> 里找到 b 指令的检查。相关代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ENTRY _objc_msgSend</span><br><span class="line">MESSENGER_START</span><br><span class="line"></span><br><span class="line">cmp x0, #<span class="number">0</span>          <span class="comment">// nil check and tagged pointer check</span></span><br><span class="line">b.le    LNilOrTagged        <span class="comment">//  (MSB tagged pointer looks negative)</span></span><br><span class="line">ldr x13, [x0]       <span class="comment">// x13 = isa</span></span><br><span class="line"><span class="keyword">and</span> x9, x13, #ISA_MASK  <span class="comment">// x9 = class</span></span><br></pre></td></tr></table></figure>
<p>检查通过就可以用这个指针读取偏移量，并修改指向跳转地址，跳转page完成，hook 函数就可以被调用了。</p>
<p>接下来看下 hook _objc_msgSend 的函数，这个我在以前博客《<a href="https://ming1016.github.io/2017/06/20/deeply-ios-performance-optimization/">深入剖析 iOS 性能优化</a>》写过，不过多赘述，只做点补充说明。从<a href="https://github.com/ming1016/GCDFetchFeed/blob/master/GCDFetchFeed/GCDFetchFeed/Lib/SMLagMonitor/SMCallTraceCore.c">这里的源码</a>可以看实现，其中的attribute((naked)) 表示无参数准备和栈初始化， asm 表示其后面是汇编代码，volatile 是让后面的指令避免被编译优化到缓存寄存器中和改变指令顺序，volatile 使其修饰变量被访问时都会在共享内存里重新读取，变量值变化时也能写到共享内存中，这样不同线程看到的变量都是一个值。如果你发现不加 volatile 也没有问题，你可以把编译优化选项调到更优试试。stp表示操作两个寄存器，中括号部分表示压栈存入sp偏移地址，!符号表合并了压栈指令。</p>
<p>save() 的作用是把传递参数寄存器入栈保存，call(b, value)用来跳到指定函数地址，call(blr, &amp;before_objc_msgSend) 是调用原 _objc_msgSend 之前指定执行函数，call(blr, orig_objc_msgSend) 是调用 objc_msgSend 函数，call(blr, &amp;after_objc_msgSend) 是调用原 _objc_msgSend 之后指定执行函数。before_objc_msgSend 和 after_objc_msgSend 分别记录时间，差值就是方法调用执行的时长。</p>
<p>调用之间通过 save() 保存参数，通过 load() 来读取参数。call 的第一个参数是blr，blr 是指跳转到寄存器地址后会返回，由于 blr 会改变 lr 寄存器X30的值，影响 ret 跳到原方法调用方地址，崩溃堆栈找方法调研栈也依赖 lr 在栈上记录的地址，所以需要在 call() 之前对 lr 进行保存，call() 都调用完后再进行恢复。跳转到hook函数，hook函数可以执行我们自定义的事情，完成后恢复CPU状态。</p>
<h2 id="进入主图后的优化"><a href="#进入主图后的优化" class="headerlink" title="进入主图后的优化"></a>进入主图后的优化</h2><p><img src="/uploads/thinking-in-how-to-speed-up-app/12.png" alt=""></p>
<p>进入主图后，用户就可以点击按钮进入不同功能了，是否能够快速响应按钮点击操作也是启动体验感知很重要的事情。按钮点击的两个事件 didTouchUp 和 didTouchDown 之间也会有延时，因此可以在 didTouchDown 时在主线程先 async 初始化下一个 VC，把初始化提前完成，这样做可以提高50ms-100ms的速度，甚至更多，具体收益依赖当前主线程繁忙情况和下一个页面 viewDidLoad 等初始化方法里的耗时，启动阶段主线程一定不会闲，即使点击后主线程阻塞，使用 async 也能保证下一个页面的初始化不会停。</p>
<h2 id="线程调度和任务编排"><a href="#线程调度和任务编排" class="headerlink" title="线程调度和任务编排"></a>线程调度和任务编排</h2><h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><p>对于任务编排有种打法，就是先把所有任务滞后，然后再看哪个是启动开始必须要加载的。效果立竿见影，很快就能看到最好的结果，后面就是反复斟酌，严格把关谁才是必要的启动任务了。</p>
<p>启动阶段的任务，先理出相关依赖关系，在框架中进行配置，有依赖的任务有序执行，无依赖独立任务可以在非密集任务执行期串行分组，组内并发执行。</p>
<p>这里需要注意的是Android 的 SharedPreferences 文件加载导致的 ContextImpl 锁竞争，一种解法是合并文件，不过后期维护成本会高，另一种是使用串行任务加载。你可能会疑惑，我没怎么用锁，那是不是就不会有锁等待的问题了。其实不然，比如在 iOS中，dispatch_once 里有 dispatch_atomic_barrier 方法，此方法就有锁的作用，因此锁其实存在各个 API 之下，如不用工具去做检查，有时还真不容易发现这些问题。</p>
<p>有 IO 操作的任务除了锁等待问题，还有效率方面也需要特别注意，比如 iOS 的 Fundation 库使用的是 NSData writeToFile:atomically: 方法，此方法会调用系统提供的 fsync 函数将文件描述符 fd 里修改的数据强写到磁盘里，fsync 相比较与 fcntl 效率高但写入物理磁盘会有等待，可能会在系统异常时出现写入顺序错乱的情况。系统提供的 write() 和 mmap() 函数都会用到内核页缓存，是否写入磁盘不由调用返回是否成功决定，另外 c 的标准库的读写 API fread 和 fwrite 还会在系统内核页缓存同步对应由保存了缓冲区基地址的 FILE 结构体的内部缓冲区。因此启动阶段 IO 操作方法需要综合做效率、准确和重要性三方面因素的权衡考虑，再进行有 IO 操作的任务编排。</p>
<p>针对初始化耗时的库，比如埋点库，可以延后初始化，先将所需要的数据存储到内存中，待到埋点库初始化时再进行记录。对一些主图上业务网络可以延后请求，比如闪屏、消息盒子、主图天气、限行控件数据请求、开放图层数据、Wi-Fi信息上报请求等。</p>
<h3 id="多线程共享数据的问题"><a href="#多线程共享数据的问题" class="headerlink" title="多线程共享数据的问题"></a>多线程共享数据的问题</h3><p>并发任务编排缺少一个统一的异步编程模型，并发通信共享数据方式的手段，比如代理和通知会让处理到处飞，闭包这种匿名函数排查问题不方便，而且回调中套回调前期设计后期维护和理解很困难，调试、性能测试也乱。这些通过回调来处理异步，不光复杂难控，还有静态条件、依赖关系、执行顺序这样的额外复杂度，为了解决这些额外复杂度，还需要使用更多的复杂机制来保证线程安全，比如使用低效的 mutex、超高复杂度的读写锁、双重检查锁定、底层原子操作或信号量的方式来保护数据，需要保证数据是正确锁住的，不然会有内存问题，锁粒度要定还要注意避免死锁。</p>
<p>并发线程通信一般都会使用 libdispatch（GCD）这样的共享数据方式来处理，也就异步再回调的方式。libdispatch 的 async 策略是把任务的 block 放到队列链表，使用时会在底层的线程池里找可用线程，有就直接用，没有就新建一个线程（参看 <a href="https://github.com/apple/swift-corelibs-libdispatch">libdispatch</a> 源码，监控线程池 <a href="https://github.com/apple/swift-corelibs-libdispatch/blob/main/src/event/workqueue.c">workqueue.c</a>，队列调度 <a href="https://github.com/apple/swift-corelibs-libdispatch/blob/main/src/queue.c">queue.c</a>），使用这样的策略来减少线程创建。当并发任务多时，比如启动期间，即使线程没爆，但 CPU 在各个线程切换处理任务时也是会有时间开销的，每次切换线程，CPU 都需要执行调度程序增加调度成本和增加 CPU 使用率，并且还容易出现多线程竞争问题。单次线程切换看起来不长，但整个启动，切换频率高的话，整体时间就会增大。</p>
<p>多线程的问题以及处理方式，带来了开发和排查问题的复杂性，以及出现问题机率的提高，资源和功能云化也有类似的问题，云化和本地的耦合依赖、云化之间的关系处理、版本兼容问题会带来更复杂的开发以及测试挑战，还有问题排查的复杂度。这些都需要去做权衡，对基础建设方案提出了更高的要求，对容错回滚的响应速度也有更高的要求。</p>
<p>这里有个 <a href="https://mirrors.edge.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html">book</a> 专门来说并行编程难的，并告诉你该怎么做。<a href="https://gist.github.com/tclementdev/6af616354912b0347cdf6db159c37057">这里有篇文章</a> 列出了苹果公司 libdispatch 的维护者 Pierre Habouzit 关于 libdispatch 的讨论邮件。</p>
<p>说了一堆共享数据方式的问题，没有体感，下面我说个最近碰到的多线程问题，你也看看排查有多费劲。</p>
<h3 id="一个具体多线程问题排查思路"><a href="#一个具体多线程问题排查思路" class="headerlink" title="一个具体多线程问题排查思路"></a>一个具体多线程问题排查思路</h3><p>问题是工程引入一个系统库，暂叫 A 库，出现的问题现象是 CoreMotion 不回调，网络请求无法执行，除了全局并发队列会 pending block 外主线程和其它队列工作正常。</p>
<p>第一阶段，排查思路看是否跟我们工程相关，首先看是不是各个系统都有此问题，发现 iOS14 和 iOS13 都有问题。然后把A库放到一个纯净 Demo 工程中，发现没有出问题了。基于上面两种情况，推测只有将A库引入我们工程才会出现问题。在纯净 Demo 工程中，A库使用时 CPU 会占用60%-80%，集成到我们工程后涨到100%，所以下个阶段排查方向就是性能。</p>
<p>第二阶段的打法是看是否是由性能引起的问题。先在纯净工程中创建大量线程，直到线程打满，然后进行大量浮点运算使 CPU 到100%，但是没法复现，任务通过 libdispatch 到全局并发队列能正常工作。</p>
<p>怎么在 Demo 里看到出线程已爆满了呢？</p>
<p>libdispatch 可以使用线程数是有上限的，在 libdispatch 的<a href="https://opensource.apple.com/tarballs/libdispatch/">源码</a>里可以看到 libdispatch 的队列初始化时使用 pthread 线程池相关代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DISPATCH_USE_PTHREAD_POOL</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span></span><br><span class="line">_dispatch_root_queue_init_pthread_pool(<span class="keyword">dispatch_queue_global_t</span> dq,</span><br><span class="line">        <span class="keyword">int</span> pool_size, <span class="keyword">dispatch_priority_t</span> pri)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">dispatch_pthread_root_queue_context_t</span> pqc = dq-&gt;do_ctxt;</span><br><span class="line">    <span class="keyword">int</span> thread_pool_size = DISPATCH_WORKQ_MAX_PTHREAD_COUNT;</span><br><span class="line">    <span class="keyword">if</span> (!(pri &amp; DISPATCH_PRIORITY_FLAG_OVERCOMMIT)) &#123;</span><br><span class="line">        thread_pool_size = (<span class="keyword">int32_t</span>)dispatch_hw_config(active_cpus);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pool_size &amp;&amp; pool_size &lt; thread_pool_size) thread_pool_size = pool_size;</span><br><span class="line">    ... <span class="comment">// 省略不相关代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上面代码所示，dispatch_hw_config 会用 dispatch_source 来监控逻辑 CPU、物理 CPU、激活 CPU 的情况计算出线程池最大线程数量，如果当前状态是 DISPATCH_PRIORITY_FLAG_OVERCOMMIT，也就是会出现 overcommit 队列时，线程池最大线程数就按照 DISPATCH_WORKQ_MAX_PTHREAD_COUNT 这个宏定义的数量来，这个宏对应的值是255。因此通过查看是否出现 overcommit 队列可以看出线程池是否已满。</p>
<p>什么时候 libdispatch 会创建一个新线程？</p>
<p>当 libdispatch 要执行队列里 block 时会去检查是否有可用的线程，发现有可用线程时，在可用线程去执行 block，如果没有，通过 pthread_create 新建一个线程，在上面执行，函数关键代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_dispatch_root_queue_poke_slow(<span class="keyword">dispatch_queue_global_t</span> dq, <span class="keyword">int</span> n, <span class="keyword">int</span> <span class="built_in">floor</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 如果状态是overcommit，那么就继续添加到pending</span></span><br><span class="line">    <span class="keyword">bool</span> overcommit = dq-&gt;dq_priority &amp; DISPATCH_PRIORITY_FLAG_OVERCOMMIT;</span><br><span class="line">    <span class="keyword">if</span> (overcommit) &#123;</span><br><span class="line">        os_atomic_add2o(dq, dgq_pending, remaining, relaxed);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!os_atomic_cmpxchg2o(dq, dgq_pending, <span class="number">0</span>, remaining, relaxed)) &#123;</span><br><span class="line">            _dispatch_root_queue_debug(<span class="string">&quot;worker thread request still pending for &quot;</span></span><br><span class="line">                    <span class="string">&quot;global queue: %p&quot;</span>, dq);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    t_count = os_atomic_load2o(dq, dgq_thread_pool_size, ordered);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        can_request = t_count &lt; <span class="built_in">floor</span> ? <span class="number">0</span> : t_count - <span class="built_in">floor</span>;</span><br><span class="line">        <span class="comment">// 是否有可用</span></span><br><span class="line">        <span class="keyword">if</span> (remaining &gt; can_request) &#123;</span><br><span class="line">            _dispatch_root_queue_debug(<span class="string">&quot;pthread pool reducing request from %d to %d&quot;</span>,</span><br><span class="line">                    remaining, can_request);</span><br><span class="line">            os_atomic_sub2o(dq, dgq_pending, remaining - can_request, relaxed);</span><br><span class="line">            remaining = can_request;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 线程满</span></span><br><span class="line">        <span class="keyword">if</span> (remaining == <span class="number">0</span>) &#123;</span><br><span class="line">            _dispatch_root_queue_debug(<span class="string">&quot;pthread pool is full for root queue: &quot;</span></span><br><span class="line">                    <span class="string">&quot;%p&quot;</span>, dq);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (!os_atomic_cmpxchgvw2o(dq, dgq_thread_pool_size, t_count,</span><br><span class="line">            t_count - remaining, &amp;t_count, acquire));</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        _dispatch_retain(dq); <span class="comment">// 在 _dispatch_worker_thread 里取任务并执行</span></span><br><span class="line">        <span class="keyword">while</span> ((r = pthread_create(pthr, attr, _dispatch_worker_thread, dq))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r != EAGAIN) &#123;</span><br><span class="line">                (<span class="keyword">void</span>)dispatch_assume_zero(r);</span><br><span class="line">            &#125;</span><br><span class="line">            _dispatch_temporary_resource_shortage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--remaining);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上面代码所示，can_request 表示可用线程数，通过当前最大可用线程数减去已用线程数获得，赋给 remaining后，用来判断线程是否满和控制线程创建。dispatch_worker_thread 会取任务并执行。</p>
<p>当 libdispatch 使用的线程池中线程过多，并且有 pending 标记，当等待超时，也就是 libdispatch 里 DISPATCH_CONTENTION_USLEEP_MAX 宏定义的时间后，也会触发创建一个新的待处理线程。libdispatch 对应函数关键代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span></span><br><span class="line">__DISPATCH_ROOT_QUEUE_CONTENDED_WAIT__(<span class="keyword">dispatch_queue_global_t</span> dq,</span><br><span class="line">        <span class="keyword">int</span> (*predicate)(<span class="keyword">dispatch_queue_global_t</span> dq))</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">bool</span> pending = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">            <span class="comment">// 添加pending标记</span></span><br><span class="line">            (<span class="keyword">void</span>)os_atomic_inc2o(dq, dgq_pending, relaxed);</span><br><span class="line">            pending = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _dispatch_contention_usleep(sleep_time);</span><br><span class="line">        ...</span><br><span class="line">        sleep_time *= <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (sleep_time &lt; DISPATCH_CONTENTION_USLEEP_MAX);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (pending) &#123;</span><br><span class="line">        (<span class="keyword">void</span>)os_atomic_dec2o(dq, dgq_pending, relaxed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status == DISPATCH_ROOT_QUEUE_DRAIN_WAIT) &#123;</span><br><span class="line">        _dispatch_root_queue_poke(dq, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// 创建新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status == DISPATCH_ROOT_QUEUE_DRAIN_READY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上所示，在创建新的待处理线程后，会退出当前线程，负载没了就会去用新建的线程。</p>
<p>接下来使用 Instruments 进行分析 Trace 文件，发现启动阶段立刻开始使用A库的话，CPU 会突然上升，如果使用 A 库稍晚些，CPU 使用率就是稳定正常的。这说明在第一个阶段性能相关结论只是偶现情况才会出现，出问题时，并没有出现系统资源紧张的情况，可以得出并不是性能问题的结论。那么下一个阶段只能从A库的使用和排查我们工程其它功能的问题。</p>
<p>第三个阶段的思路是使用功能二分排查法，先排出 A 库使用问题，做法是在使用最简单的 A 库初始化一个页面在首屏也会复现问题。</p>
<p>我们的功能主要分为渲染、引擎、网络库、基础功能、业务几个部分。将渲染、引擎、网络库拉出来建个Demo，发现这个 Demo 不会出现问题。那么有问题的就可能在基础功能、业务上。</p>
<p>先去掉的功能模块有 CoreMotion、网络、日志模块、定时任务（埋点上传），依然复现。接下来去掉队列里的 libdispatch 任务，队列里的任务主要是由 Operation 和 libdispatch 两种方式放入。其中 Operation 最后是使用 libdispatch 将任务 block 放入队列，期间会做优先级和并发数的判断。对于 libdispatch 可以 Hook 住可以把任务 block 放到队列的 libdispatch 方法，有 dispatch_async、dispatch_after、dispatch_barrier_async、dispatch_apply 这些方法。任务直接返回，还是有问题。</p>
<p>推测验证基础能力和业务对出现问题队列有影响，instruments 只能分析线程，无法分析队列，因此需要写工具分析队列情况。</p>
<p>接下来进入第四个阶段。</p>
<p>先 hook 时截获任务 block 使用的 libdispatch 方法、执行队列名、优先级、做唯一标识的入队时间、当前队列的任务数、还有执行堆栈的信息。通过截获的内容按照时间线看，当出现全局并发队列 pending block 数量堆积时，新的使用 libdispatch 加入的部分任务可以得到执行，也有没执行的，都执行了也会有问题。</p>
<p>然后去掉 Operation 的任务：通过日志还能发现 Operation 调用 libdispatch 的任务直接 hook libdispatch 的方法是获取不到的，可能是 Operation 调用方法有变化。另外在无法执行任务的线程上新建的 libdispatch 任务也无法执行，无法执行的 Operation 任务达到所设置的 maxConcurrentOperationCount，对应的 OperationQueue 就会在 Operation 的队列里 pending。由此可以推断出，在局并发队列 pending 的 block 包含了直接使用 libdispatch 的和 Operation 的任务，pending 的任务。因此还需要 hook 住 Operation，过滤掉所有添加到 Operation Queue 的任务，但结果还是复现问题。</p>
<p>此时很崩溃，本来做好了一个一个下掉功能的准备（成本高），这时，有同学发现前阶段两个不对的结论。</p>
<p>这个阶段定为第五阶段。</p>
<p>第一个不对的结论是经 QA 同学长时间多轮测试，只在14.2及以上系统版本有问题，由于只有这个版本才开始有此问题，推断可能是系统 bug；第二个不对的是只有渲染、引擎、网络库的 Demo 再次检查，可复现问题，因此可以针对这个 Demo 进行进一步二分排查。</p>
<p>于是，咱们针对两个先前错误结论，再次出发，同步进行验证。对 Demo 排除了网络库依然复现，后排除引擎还是复现，同时使用了自己的示例工程在iOS14.2上复现了问题，和第一阶段纯净Demo的区别是往全局并发队列里方式，官方 Demo 是 Operation，我们的是 libdispatch。</p>
<p>因此得出结论是苹果系统升级问题，原因可能在 OperationQueue，问题重现后，不再运行其中的 operation。14.3beta 版还没有解决。五个阶段总结如下图所示：</p>
<p><img src="/uploads/thinking-in-how-to-speed-up-app/13.png" alt=""></p>
<p>那么看下 Operation 实现，分析下系统 bug 原因。</p>
<p><a href="https://github.com/apportable/Foundation">ApportableFoundation</a> 里有Operation的开源实现 <a href="https://github.com/apportable/Foundation/blob/master/System/Foundation/src/NSOperation.m">NSOperation.m</a>，相比较 <a href="http://www.gnustep.org/">GNUstep</a> 和 <a href="http://www.cocotron.org/">Cocotron</a> 更完善，可以看到 Operation 如何在 _schedulerRun 函数里通过 libdispatch 的 async 方法将 operation 的任务放到队列执行。</p>
<p><a href="https://github.com/apple/swift-corelibs-foundation/">swift源码</a>里的fundation也有实现 <a href="https://github.com/apple/swift-corelibs-foundation/blob/main/Sources/Foundation/Operation.swift">Operation</a>，我们看看 _schedule 函数的关键代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">_schedule</span>()</span> &#123;</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">    <span class="comment">// 按优先级顺序执行</span></span><br><span class="line">    <span class="keyword">for</span> prio <span class="keyword">in</span> <span class="type">Operation</span>.<span class="type">QueuePriority</span>.priorities &#123;</span><br><span class="line">        <span class="operator">...</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> operation <span class="operator">=</span> op<span class="operator">?</span>.takeUnretainedValue() &#123;</span><br><span class="line">            <span class="operator">...</span></span><br><span class="line">            <span class="keyword">let</span> next <span class="operator">=</span> operation.__nextPriorityOperation</span><br><span class="line">            <span class="operator">...</span></span><br><span class="line">            <span class="keyword">if</span> <span class="type">Operation</span>.__NSOperationState.enqueued <span class="operator">==</span> operation._state <span class="operator">&amp;&amp;</span> operation._fetchCachedIsReady(<span class="operator">&amp;</span>retest) &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> previous <span class="operator">=</span> prev<span class="operator">?</span>.takeUnretainedValue() &#123;</span><br><span class="line">                    previous.__nextPriorityOperation <span class="operator">=</span> next</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    _setFirstPriorityOperation(prio, next)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="operator">...</span></span><br><span class="line">                <span class="keyword">if</span> __mainQ &#123;</span><br><span class="line">                    queue <span class="operator">=</span> <span class="type">DispatchQueue</span>.main</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    queue <span class="operator">=</span> __dispatch_queue <span class="operator">??</span> _synthesizeBackingQueue()</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> schedule <span class="operator">=</span> operation.__schedule &#123;</span><br><span class="line">                    <span class="keyword">if</span> operation <span class="keyword">is</span> _BarrierOperation &#123;</span><br><span class="line">                        queue.async(flags: .barrier, execute: &#123;</span><br><span class="line">                            schedule.perform()</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        queue.async(execute: schedule)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                op <span class="operator">=</span> next</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="operator">...</span> <span class="comment">// 添加</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码可见，可以看到 _schedule 函数根据 Operation.QueuePriority.priorities 优先级数组顺序，从最高 barrier 开始到 veryHigh、high、normal、low 到最低的 veryLow，根据 operation 属性设置决定 libdispatch 的 queue 是什么类型的，最后通过 async 函数分配到对应的队列上执行。</p>
<p>查看 operation 代码更新情况，最新 operation 提交修复了一个问题，commit <a href="https://github.com/apple/swift-corelibs-foundation/commit/9f44ed353c77a438d6f4ba879b2b388210e2107f">在这</a>，根据修复问题的描述来看，和 A 库引入导致队列不可添加 OperationQueue 的情况非常类似。修复的地方可以看下图：<br><img src="/uploads/thinking-in-how-to-speed-up-app/8.png" alt=""></p>
<p>如图所示，在先前 _schedule 函数里使用 nextOperation 而不用 nextPriorityOperation 会导致主操作列表里的不同优先级操作列表交叉连接，可能会在执行后面操作时被挂起，而 A 库里的 OperationQueue 都是高优的，如果有其它优先级的 OperationQueue 加进来就会出现挂起的问题。</p>
<p>从提交记录看，19年6月12日的那次提交变更了很多代码逻辑，描述上看是为了更接近 objc 的实现，changePriority 函数就是那个时候加进去的。提交的 commit 如下图所示：<br><img src="/uploads/thinking-in-how-to-speed-up-app/9.png" alt=""></p>
<p>怀疑（只是怀疑，苹果官方并没有说）可能是在 iOS14 引入 swift 版的 Operation，因此这个 Operation 针对 objc 调用做了适配。之所以14.2之前 Operation 重构后的 bug 没有引起问题，可能是当时 A 库的 Queue 优先级还没调高，14.2版本A库的 Queue 优先级开始调高了，所以出现了优先级交叉挂起的情况。</p>
<p>从这次排查可以发现，目前对于并发的监测还是非常复杂的。那么并发问题在 iOS 的将来会得到解决吗？</p>
<h3 id="多线程并行计算模型"><a href="#多线程并行计算模型" class="headerlink" title="多线程并行计算模型"></a>多线程并行计算模型</h3><p>既然共享数据方式问题多，那还有其它选择吗？</p>
<p>实际上在服务端大量使用着 Actor 这样的并行计算模型，在并行世界里，一切都是 actor，actor 就像一个容器，会有自己的状态、行为、串行队列的消息邮箱。actor 之间使用消息来通信，会把消息发到接受消息 actor 的消息邮箱里，消息盒子可并行接受消息，消息的处理是依次进行，当前处理完才处理下一个，消息邮箱这套机制就好像 actor 们的大管家，让 actor 之间的沟通井然有序。</p>
<p>有谁是在使用 actor 模型呢？</p>
<p>actor 历史悠久，<a href="https://www.erlang.org/">Erlang</a>（<a href="http://erlang.org/download/armstrong_thesis_2003.pdf">Elang设计论文</a>），<a href="http://akka.io/">Akka</a>（<a href="https://www.scala-lang.org/">Scala</a> 编写的 <a href="http://doc.akka.io/docs/akka/current/scala/actors.html">Akka actor</a> 系统，Akka 使用多，相对成熟）、Go（使用的 goroutine，基于 <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">CSP</a> 构建）都是基于 actor 模型实现数据隔离。</p>
<p><a href="https://forums.swift.org/t/swift-concurrency-roadmap/41611">Swift并发路线图</a>也预示着 Swift 要加入 actor，Chris Lattner 也希望 Swift 能够在多核机器，还有大型服务集群能够得到方便的使用，分布式硬件的发展趋势必定是多核，去共享内存的硬件的，因为共享内存的编程不光复杂而且原子性访问比非原子性要慢近百倍。提案中设计到 actor 的设计是把 actor 设计成一种特殊类，让这个类有引用语义，能形成 map，可以 weak 或 unowned 引用。actor 类中包含一些只有 actor 才有的方法，这些方法提供 actor 编程模型所需安全性。但 actor 类不能继承自非 actor 类，因为这样 actor 状态可能会有机会以不安全的方式泄露。actor 和它的函数和属性之间是静态关系，这样可以通过编译方式避免数据竞争，对数据隔离，如果不是安全访问 actor 属性的上下文，编译器可以处理切换到那个上下文中。对于 actor 隔离会借鉴<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0176-enforce-exclusive-access-to-memory.md">强制执行对内存的独占访问</a>提案的思想，比如局部变量、inout参数、结构体属性编译器可以分析变量的所有访问，有冲突就可以报错，类属性和全局变量要在运行时可以跟踪在进行的访问，有冲突报错。而全局内存还是没法避免数据竞争，这个需要增加一个全局 actor 保护。</p>
<p>按 actor 模型对任务之间通讯重新调整，不用回调代理等手段，将发送消息放到消息邮箱里进行类似 RxSwift 那样 next 的方式一个一个串行传递。说到 RxSwift，那 RxSwift 和 Combine 这样的框架能替代 actor 吗？</p>
<p>对这些响应式框架来说解决线程通信只是其中很小的一部分，其还是会面临闭包、调试和维护复杂的问题，而且还要使用响应式编程范式，显然还是有些重了，除非你已经习惯了响应式编程。</p>
<p>任务都按 actor 模型方式来写，还能够做到功能之间的解耦，如果是服务器应用，actor 可以布到不同的进程甚至是不同机器上。</p>
<p>actor 中消息邮件在同一时间只能处理一个消息，这样等待返回一个值的方式，需要暂停，内部有返回再继续执行，这要怎么实现呢？</p>
<p>答案是使用 Coroutine</p>
<p>在 Swift 并发路线提案里还提到了基于 coroutine 的 async/await 语法，这种语法风格已经被广泛采纳，比如Python、Dart、JavaScript 都有实现，这样能够写出简洁好维护的并发代码。</p>
<p>上述只是提案，最快也需要两个版本的等待，那么语言上的支持还没有来，怎么能提前享用 coroutine 呢？</p>
<p><img src="/uploads/thinking-in-how-to-speed-up-app/14.png" alt=""></p>
<p>处理暂停恢复操作，可以使用 context 处理函数 setjmp 和 longjmp，但 setjmp 和 longjmp 较难实现临时切换到不同的执行路径，然后恢复到停止执行的地方，所以服务器用一般都会使用 ucontext 来实现，gnu 的举的例子 <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#System-V-contexts">GNU C Library: Complete Context Control</a>，这个例子在于创建 context 堆栈，swapcontext 来保存 context，这样可以在其它地方能执行回到原来的地方。创建 context 堆栈代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uc[<span class="number">1</span>].uc_link = &amp;uc[<span class="number">0</span>];</span><br><span class="line">uc[<span class="number">1</span>].uc_stack.ss_sp = st1;</span><br><span class="line">uc[<span class="number">1</span>].uc_stack.ss_size = <span class="keyword">sizeof</span> st1;</span><br><span class="line">makecontext (&amp;uc[<span class="number">1</span>], (<span class="keyword">void</span> (*) (<span class="keyword">void</span>)) f, <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>上面代码中 uc_link 表示的是主 context。保存 context 的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapcontext (&amp;uc[n], &amp;uc[<span class="number">3</span> - n]);</span><br></pre></td></tr></table></figure>
<p>但是在 Xcode 里一试，出现错误提示如下：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implicit declaration of function &#x27;swapcontext&#x27; is invalid in c99</span><br></pre></td></tr></table></figure>
<p>原来最新的 POSXI 标准已经没有这个函数了，IEEE Std 1003.1-2001 / Cor 2-2004，应用了项目XBD/TC2/D6/28，标注 getcontext()、makecontext()、setcontext()和swapcontext() 函数过时了。在 POSIX  2004第743页说明了原因，大概意思就是建议使用 pthread 这种系统编程上，后来的 Rust 和 Swift coroutine 的提案里都是使用的系统编程来实现 coroutine，长期看系统编程实现 coroutine 肯定是趋势。那么在 swift 升级之前还有办法在 iOS 用 ucontext 这种轻量级的 coroutine 吗？</p>
<p>其实也是有的，可以考虑临时过渡一下。具体可以看看 ucontext 的汇编实现，重新在自己工程里实现出来就可以了。<a href="https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/x86_64/getcontext.S.html">getcontext</a>、<a href="https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/x86_64/setcontext.S.html">setcontext</a>、<a href="https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/x86_64/makecontext.c.html">makecontext</a>、<a href="https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/x86_64/swapcontext.S.html">swapcontext</a> 的在 linux 系统代码里能看到。ucontext_t 结构体里的 uc_stack 会记录 context 使用的栈。getcontext() 是把各个寄存器保存到内存结构体里，setcontext() 是把来自 makecontext() 和 getcontext() 的各寄存器恢复到当前 context 的寄存器里。switchcontext() 合并了 getcontext() 和 setcontext()。</p>
<p>ucontext_t 的结构体设计如下：<br><img src="/uploads/thinking-in-how-to-speed-up-app/6.png" alt=""></p>
<p>如上图所示，ucontext_t 还包含了一个更高层次的 context 封装 uc_mcontext，uc_mcontext 会保存调用线程的寄存器。上图中 eax 是函数入参地址，寄存器值入栈操作代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">movl    $<span class="number">0</span>, oEAX(%eax)</span><br><span class="line">movl    %ecx, oECX(%eax)</span><br><span class="line">movl    %edx, oEDX(%eax)</span><br><span class="line">movl    %edi, oEDI(%eax)</span><br><span class="line">movl    %esi, oESI(%eax)</span><br><span class="line">movl    %ebp, oEBP(%eax)</span><br></pre></td></tr></table></figure>
<p>以上代码中 oECX、oEDX 等表示相应寄存器在内存结构体里的位置。esp 指向返回地址值，由 eip 字段记录，代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl    (%esp), %ecx</span><br><span class="line">movl    %ecx, oEIP(%eax)</span><br></pre></td></tr></table></figure>
<p>edx 是 getcontext() 的栈寄存器会记录 ucontext_t.uc_stack.ss_sp 栈顶的值，oSS_SIZE 是栈大小，通过指令addl 可以找到栈底。makecontext() 会根据 ecx 里的参数去设置栈，setcontext() 是 getcontext 的逆操作，设置当前 context，栈顶在 esp 寄存器。</p>
<p>轻量级的 coroutine 实现了，下面咱们可以通过 Swift <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md">async/await提案</a>（已加了编号0296，表示核心团队已经认可，上线可期）看下系统编程的 coroutine 是怎么实现的。Swift async/await 提案中的思路是让开发者编写异步操作逻辑，编译器用来转换和生成所需的隐式操作闭包。可以看作是个语法糖，并像其它实现那样会改变完成处理程序被调用的队列。工作原理类似 try，也不需要捕获 self 的转义闭包。挂起会中断原子性，比如一个串行队列中任务要挂起，让其它任务在一个串行队列中交错运行，因此异步函数最好是不阻塞线程。将异步函数当作一般函数调用，这样的调用会暂时离开线程，等待当前线程任务完成再从它离开的地方恢复执行这个函数，并保证是在先前的actor里执行完成。</p>
<h2 id="启动性能分析工具"><a href="#启动性能分析工具" class="headerlink" title="启动性能分析工具"></a>启动性能分析工具</h2><h3 id="iOS-官方工具"><a href="#iOS-官方工具" class="headerlink" title="iOS 官方工具"></a>iOS 官方工具</h3><p>Instruments 中 Time Profiles 中的 Profile 可以方便的分析模块中每个方法的耗时。Time Profiles 中的 Samples 分析将更加准确的显示出 App 启动后每一个 CPU 核心在一个时间片内所执行的代码。如果在模块开发中有以下的需求，可以考虑使用 Samples 分析：</p>
<ol>
<li>希望更精确的分析某个方法具体执行代码的耗时</li>
<li>想知道一个方法到另一个方法的耗时情况（跨方法耗时分析）</li>
</ol>
<p>MetricKit 2.0 开始加强了诊断特性，通过收集调用栈信息能够方便我们来进行问题的诊断，通过 didReceive 回调 MXMetricPayload 性能数据，可包含 MXSignpostMetric 自定义采集数据，甚至是你捕获不到的崩溃信号的系统强杀崩溃信息传到自己服务器进行分析和报警。</p>
<h3 id="如何在-iOS-真机和模拟器上实现自动化性能分析"><a href="#如何在-iOS-真机和模拟器上实现自动化性能分析" class="headerlink" title="如何在 iOS 真机和模拟器上实现自动化性能分析"></a>如何在 iOS 真机和模拟器上实现自动化性能分析</h3><p>苹果有个 usbmux 协议会给自己 macOS 程序和设备进行通信，场景有备份 iPhone 还有真机调试。macOS 对应的是/System/Library/PrivateFrameworks/MobileDevice.framework/Versions/A/Resources/ 下的 usbmuxd 程序，usbmuxd 是 IPC socket 和 TCP socket 用来进行进程间通信，<a href="https://github.com/libimobiledevice/usbmuxd">这里</a>有他的一个开源实现。对于在手机端是 lockdown 来起服务。因此利用 usbmuxd 的协议，就可以自建和设备通信的应用比如 lookin，实现方式可以参考这个 <a href="https://github.com/rsms/peertalk">demo</a>。使用 usbmux 协议的 <a href="https://github.com/libimobiledevice/libimobiledevice">libimobiledevice</a>（相当于 Android 的 adb）提供了更多能力，可以获取设备的信息、搭载 <a href="https://github.com/libimobiledevice/ifuse">ifuse</a> 访问设备文件系统（没越狱可访问照片媒体、沙盒、日志）、与调试服务器连接远程调试。无侵入的库还有 <a href="https://www.gamebench.net/">gamebench</a> 也用到了 libimobiledevice。</p>
<p>instruments 可以导出 .trace 文件，以前只能用 instruments 打开，Xcode12 提供了 xctrace 命令行工具可以导出可分析的数据。Xcode12 之前的时候是能使用 <a href="https://github.com/Qusic/TraceUtility">TraceUtility</a> 这个库，TraceUtility 的做法是链上 Xcode 里 instruments 用的那些库，比如 DVTFoundation 和 InstrumentsKit 等，调用对应的方法去获取.trace文件。使用 libimobiledevice 能构造操作 instruments 的应用，将 instruments 的能力自动化。</p>
<p><a href="https://perfdog.qq.com/">perfdog</a>就是使用了libimobiledevice调用了instruments的接口（见<a href="https://recon.cx/2018/montreal/schedule/system/event_attachments/attachments/000/000/043/original/RECON-MTL-2018-Discovering_the_iOS_Instruments_Server.pdf">接口研究</a>，<a href="https://github.com/troybowman/ios_instruments_client">实现代码</a>）来实现instruments的一些功能，并进行了扩展定制，无侵入的构建本地性能监控并集成到自动测试中出数据，减少人工成本。无侵入的另一个好处就是可以方便用同一套标准看到其他APP的表现情况。</p>
<p>要到具体场景去跑 case 还需要流程自动化。Appium 使用的是 Facebook 开发的一套基于 W3C 标准交互协议 <a href="https://w3c.github.io/webdriver/">WebDriver</a> 的库 <a href="https://github.com/facebookarchive/WebDriverAgent">WebDriverAgent</a>，python 版可以看<a href="https://github.com/openatx/facebook-wda">这个</a>，不过后来 Facebook 开发了新的一套命令行工具<a href="https://github.com/facebook/idb/">idb(iOS Development Bridge)</a>，归档了 WebDriverAgent。idb 可以对 iOS 模拟器和设备跑自动化测试，idb 主要有两个基于 macOS 系统库 CoreSimulator.framework、MobileDevice.framework，包装的 FBSimulatorControl 和 FBDeviceControl 库。FBSimulatorControl 包含了 iOS 模拟器的所有功能，Xcode 和 simctl 都是用的 CoreSimulator，自动化中输入事件是逆向了 iOS 模拟器 Indigo 服务的协议，Indigo 是模拟器通过 mach IPC 通道 mach_msg_send 接受触摸等输入事件的协议。破解后就可以模拟输入事件了。MobileDevice.framework 也是 macOS 的私有库，macOS 上的 Finder、Xcode、Photos 这些会使用 iOS 设备的应用都是用了 MobileDevice，文件读写用的是包装了 AMDServiceConnection 协议的 AFC 文件操作 API，idb 的 instruments 相关功能是在<a href="https://github.com/facebook/idb/blob/master/FBDeviceControl/Management/FBInstrumentsClient.h">这里</a>实现了 DTXConnectionServices 服务协议。libmobiledevice 可以看作是重新实现了 MobileDevice.framework。<a href="https://github.com/iOSForensics/pymobiledevice">pymobiledevice</a>、<a href="https://github.com/mountainstorm/MobileDevice">MobileDevice</a>、C 编写的 <a href="https://github.com/samdmarshall/SDMMobileDevice/">SDMMobileDevice</a>，还有Objective-C 编写的 <a href="https://github.com/cipi1965/MobileDeviceAccess">MobileDeviceAccess</a>，这些库也是用的 MobileDevice.framework。</p>
<p>总结如下图所示：</p>
<p><img src="/uploads/thinking-in-how-to-speed-up-app/15.png" alt=""></p>
<h3 id="Android-Profiler"><a href="#Android-Profiler" class="headerlink" title="Android Profiler"></a>Android Profiler</h3><p>Android Profiler 是 Android 中常用的耗时分析工具，以各种图表的形式展示函数执行时间，帮助开发者分析耗时问题。</p>
<p>启动优化着实是牵一发动全身的事情，手段既琐碎又复杂。如何能够将监控体系建设起来，并融入到整个研发到上线流程中，是个庞大的工程。下面给你介绍下我们是如何做的吧。</p>
<h2 id="管控流程体系保障平台建设"><a href="#管控流程体系保障平台建设" class="headerlink" title="管控流程体系保障平台建设"></a>管控流程体系保障平台建设</h2><p>APM自动化管控和流程体系保障平台，目标是通过稳定环境更自动化的测试，采集到的性能数据能够通过分析检测，发现问题能够更低成本定位分发告警，同时大盘能够展示趋势和详情。平台设计如下图：</p>
<p><img src="/uploads/thinking-in-how-to-speed-up-app/10.png" alt=""></p>
<p>开发过程会 daily 出迭代报告，开发完成后，会有集成卡口，提前卡住迭代性能问题。</p>
<p>集成后，在集成构建平台能够构建正式包和线下性能包，进行线下测试和线上性能数据采集，线下支持录制回放、Monkey 等自动化测试手段，测试期间会有生成版本报告，发布上线前也会有发布卡口，及时处理版本问题。</p>
<p>发布后，通过云控进行指标配置、阈值配置还有采集比例等。性能数据上传服务经异常检测发现问题会触发报警，自动在 Bug 平台创建工单进行跟踪，以便及时修复问题减少用户体验损失。服务还会做统计、分级、基线对比、版本关联以及过滤等数据分析操作，这些分析后的性能数据最终会通过版本、迭代趋势等统计报表方式在大盘上展示，还能展示详情，包括对比展示、问题详情、场景分类、条件查询等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/thinking-in-how-to-speed-up-app/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>2020年涂图</title>
    <link href="http://ming1016.github.io/2020/05/04/draw-in-2020/"/>
    <id>http://ming1016.github.io/2020/05/04/draw-in-2020/</id>
    <published>2020-05-04T15:47:57.000Z</published>
    <updated>2021-04-11T14:42:09.916Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/draw-in-2020/01.jpg" alt=""><br><img src="/uploads/draw-in-2020/02.jpg" alt=""><br><img src="/uploads/draw-in-2020/03.jpg" alt=""><br><img src="/uploads/draw-in-2020/04.png" alt=""><br><img src="/uploads/draw-in-2020/05.png" alt=""><br><img src="/uploads/draw-in-2020/06.jpg" alt=""><br><img src="/uploads/draw-in-2020/07.jpg" alt=""><br><img src="/uploads/draw-in-2020/08.jpg" alt=""><br><img src="/uploads/draw-in-2020/09.png" alt=""><br><img src="/uploads/draw-in-2020/10.png" alt=""><br><img src="/uploads/draw-in-2020/11.jpg" alt=""><br><img src="/uploads/draw-in-2020/12.jpg" alt=""><br><img src="/uploads/draw-in-2020/13.jpg" alt=""><br><img src="/uploads/draw-in-2020/14.png" alt=""><br><img src="/uploads/draw-in-2020/15.png" alt=""></p>
<p><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/08.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/09.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/10.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/11.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/12.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/13.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/14.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/15.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/16.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/17.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/19.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/20.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/21.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/22.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/23.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/24.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/25.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/26.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/27.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/draw-in-2020/01.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/draw-in-2020/02.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/draw-in-2020/03.
    
    </summary>
    
      <category term="My painting" scheme="http://ming1016.github.io/categories/My-painting/"/>
    
    
      <category term="Painting" scheme="http://ming1016.github.io/tags/Painting/"/>
    
      <category term="iPad" scheme="http://ming1016.github.io/tags/iPad/"/>
    
      <category term="Procreate" scheme="http://ming1016.github.io/tags/Procreate/"/>
    
  </entry>
  
  <entry>
    <title>我为什么写了《跟戴铭学iOS编程》这本书</title>
    <link href="http://ming1016.github.io/2020/04/12/why_write_study_ios_programming_with_daiming_book_and_draw_recently/"/>
    <id>http://ming1016.github.io/2020/04/12/why_write_study_ios_programming_with_daiming_book_and_draw_recently/</id>
    <published>2020-04-12T12:31:03.000Z</published>
    <updated>2021-04-11T14:42:09.936Z</updated>
    
    <content type="html"><![CDATA[<p>在我改了几次封面后，书已上架。</p>
<p><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/01.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/02.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/03.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/04.png" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/05.jpg" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/06.png" alt=""><br><img src="/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/07.png" alt=""></p>
<h2 id="为什么写《跟戴铭学iOS编程》"><a href="#为什么写《跟戴铭学iOS编程》" class="headerlink" title="为什么写《跟戴铭学iOS编程》"></a>为什么写《跟戴铭学iOS编程》</h2><p>又到了新的一年开始换工作的季节，我身边好多熟人也都开始寻找机会，看起来离职原因各有不同，有绩效不好的、和领导处不好的、多年难晋升的、做的事情难提升自己的、有更好机会的。但究其核心，我觉得还是危机感，想着如果脱离现在所处公司环境，没有现在的级别位置，自己还剩下什么，在一群候选人里，自己有没有胜于其他人的亮点，是否能够脱颖而出。我时常会思考这些问题，做了多年技术，一直在想，相同时间里接触和学习什么知识才是物有所值的。</p>
<p>计算机领域，作为开发者最开始接触，同时也是运用最多的就是编程语言，现在学习 iOS 开发一定要选择用 Swift。那么，从 Swift 官方手册学习完 Swift 语法，熟练进行 App 开发上架及日常迭代开发后，还要学习什么才能够让自己能够更进一步呢，才能让自己更有竞争力，我觉得这个是需要反复思考的。我不觉得无休止的跟进每年系统升级新特性，比如 ARKit、WatchKit、Force Touch、iBeacon、SiriKit 等，或者熟练系统和开源控件，比如Segmented Control、Picker View、Pop、能够对自己有本质的提高。不是说学这些没用，而是够用就行，毕竟开发 App 来服务用户，最终还是需要由这些来支持功能开发。</p>
<p>我想表达的是，对于你个人来说，当你要从普通开发者往架构设计师这条路上走，除了满足用户功能需求的开发，还需要了解更多技术选型，才能为团队开发效率和质量提供支持保障。这不光是凭借经验就能够做到的，还需要对编程语言和编程范式有更多的了解，我在写《跟戴铭学iOS编程》这本书时，我对 Swift 语言做了深挖，而不是照搬手册，也是想让你能够通过泛型，集合、内存和范式更多了解 Swfit 这门语言。同时结合实际开发中使用最频繁的场景，比如 JSON 数据处理，网络请求和界面布局，从底层源码层面来剖析这些应用场景背后的代码实现原理。本书 Swift 章节最后还详细说了怎么用 Swift 开发了语言转换器和解释器，一步一步掌握语言解析的过程，这部分内容是对上次我在 @Swift 大会上讲的内容的补充，大会幻灯片可见：<a href="https://ming1016.github.io/2018/09/17/produce-slides-of-third-at-swift-conference/">这次swift大会分享准备的幻灯片和 demo | 戴铭的博客 - 星光社</a>。</p>
<p>对语言编译过程的学习，价值是很高的，本书也着重介绍了编译以及编译产物的知识和运用。你可以回想下，当碰到一个以前没有做过的需求，解决一个没有碰到过的线上问题时，处理的方案肯定是有高低之分的，了解的越多越深入，方案就更有效，比如先前热修复时期，为了能够让原生开发不学前端代码进行热修复，利用 Clang 进行代码转换，从而节省了学习成本，再到后来，为了提升修复代码性能而内置解释器解释编译出的字节码，说明了贫穷往往会限制想象力，而富有的知识能够提高想象空间。当然编译的知识不光只限于这些，比如使用 LLVM 中的静态检查能力可以辅助监控代码质量，学习编译前端知识也能够使自己具有动手处理代码的能力，比如根据自己工程特点进行代码的批量处理，省时省力。我在最近做启动优化时发现，使用编译前端的知识还能够很轻松的处理特定规则的文件，甚至直接从代码中提取需要的部分，从而提高分析启动问题的效率。</p>
<p>对编译产物结构进行了解，不光能逆向看竞品，还能够了解和处理其它很多其它事情，比如 c 语言方法 hook，方法调用堆栈符号化的原理，启动时二进制加载过程的了解等。这些知识点既不容易过时也具有通用性，这些年来，计算机底层不断演进，系统不断趋同，特别是数据结构的设计就有很多值得学习和借鉴的，比如去了解编译产物导出符号为什么 trie 数据结构，能够学习到时间和空间复杂度在实际场景中是如何做选择的。</p>
<p>现在各公司正在尝试运用跨端技术，当你从 React Native 到 Weex，再到小程序，直到现在 Google 出的 Flutter，一路跟过来，你一定会觉得很疲惫，即使你都已熟练掌握了怎么使用，开发了很多功能，趟过了无数坑，当你面对下一个流行框架时，你可能又要重新来过。那怎样才能够使自己价值提高呢，一个合格的架构师需要具有的是看清技术本质和趋势的能力。而了解这些技术本质是了解隐藏在这些跨端技术背后的实现，这些实现主要用到了 DSL 转义、热更新、JavaScriptCore 桥接原生、解释器、WebCore 渲染的改造（Flutter），这些在本书中都会详细的跟你说，特别是最后大前端技术那章，会深入介绍WebKit 中的 JavaScriptCore 和 WebCore 的原理和源码实现，以求让你能够知其然知其所以然。</p>
<p>你会发现当你学习了上面提到的知识并加以实际运用后，工作中处理问题，甚至是疑难杂症时，你的脑海中就不再是一张白纸无从下手，而是满满的一书柜整理好的资料信手拈来。同时自己的竞争力也能够得到提升。</p>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>书出版后，巧哥在公众号上做了推荐《<a href="https://mp.weixin.qq.com/s/82ZZTmGRNcYINuVqEGz38A">iOS 界的黑客与画家 - 戴铭</a>》，硬核号主冬瓜的文章也介绍了这本书《<a href="https://mp.weixin.qq.com/s/1eG5alckPs8ODh72tzA77w">说一说戴铭老师新书中的技术侧重</a>》</p>
<p>欲购《跟戴铭学iOS编程》这本书，通过这个<a href="https://item.m.jd.com/product/12839082.html?dist=jd">京东链接</a>可以以全网最低价49元买到，也可加我微信 allstarming，备注“购书”来购买。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我改了几次封面后，书已上架。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/why_write_study_ios_programming_with_daiming_book_and_draw_recently/01.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="book" scheme="http://ming1016.github.io/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>Apple 操作系统可执行文件 Mach-O</title>
    <link href="http://ming1016.github.io/2020/03/29/apple-system-executable-file-macho/"/>
    <id>http://ming1016.github.io/2020/03/29/apple-system-executable-file-macho/</id>
    <published>2020-03-29T08:13:45.000Z</published>
    <updated>2021-04-11T14:42:09.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Mach-O 的全称是 Mach Object File Format。可以是可执行文件，目标代码或共享库，动态库。Mach 内核的操作系统比如 macOS，iPadOS 和 iOS 都是用的 Mach-O。Mach-O 包含程序的核心逻辑，以及入口点主要功能。</p>
<p>通过学习 Mach-O，可以了解应用程序是如何加载到系统的，如何执行的。还能了解符号查找，函数调用堆栈符号化等。更重要的是能够了解如何设计数据结构，这对于日后开发生涯的收益是长期的。了解这些对于了解编译和逆向工程都会有帮助，你还会了解到动态链接器的内部工作原理以及字节码格式的信息，Leb128字节流，Mach 导出时 Trie 二进制 image 压缩。</p>
<p>对于 Mach-O，你一定不陌生，但是对于它内部逻辑你一定会好奇，比如它是怎么构建出来的，组织方式如何，怎么加载的，如何工作，谁让它工作的，怎样导入和导出符号的。</p>
<p>接下来我们先看看怎么构建一个 Mach-O 文件的吧。</p>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>构建 Mach-O 文件，主要需要用到编译器和静态链接器，编译器可以将编写的高级语言代码转成中间目标文件，然后用静态链接器把中间目标文件组合成 Mach-O。</p>
<p>编译器驱动程序使用的是 clang，有编译、组装和链接的能力，调用 Xcode Tools 里的其他工具来实现源码到 Mach-O 文件生成。其他工具包括将汇编代码创建为中间目标文件的 as 汇编程序，组合中间目标文件成 Mach-O 文件的静态链接器 ld，还有创建静态库或共享库的 libtool。</p>
<p>构建成 Mach-O 包括中间对象文件（MH_OBJECT）、可执行二进制（MH_EXECUTE）、VM 共享库文件（MH_FVMLIB）、Crash 产生的 Core 文件（MH_CORE）、preload（MH_PRELOAD）、动态共享库（MH_DYLIB）、动态链接器（MH_DYLINKER）、静态链接文件（MH_DYLIB_STUB）、符号文件和调试信息（MH_DSYM）这几种类型。其中框架会包含Mach-O和图片、文档、接口等相关资源。</p>
<p>写个 main.c 文件代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123; </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 clang 构建成 Mach-O 文件 a.out。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun clang main.c</span><br></pre></td></tr></table></figure>
<p>如果有多个文件，先将多个文件生成中间目标文件，后缀是.o，使用 clang 的选项 -c。每个目标文件都是模块。使用静态链接器可以把多个模块组合成一个动态共享库。通过 ld 可以完成这个操作。使用 libtool 的选项 -static 可以构建静态库。</p>
<p>组合成动态库可以使用 clang 的 -dynamiclib 选项，命令如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun clang -dynamiclib command.c header.c -fvisibility=hidden -o mac.dylib</span><br></pre></td></tr></table></figure>
<p>静态链接就是把各个模块组合成一个整体，生成新的 Mach-O，链接的内容就是把各个模块间相互的引用能够正确的链接好，原理就是把一些指令对其他符号的地址引用进行修正。过程包含地址和空间分配，符号解析和围绕符号进行的重定位。核心是重定位，X86-64寻址方式是 RIP-relative 寻址，就是基于 RIP 来计算目标地址，通过 jumpq 跳转目标地址，就是当前指令下一条指令地址来加偏移量。</p>
<p>构建完 Mach-O。那你一定好奇 Mach-O 里面都有什么呢？分析 Mach-O 的工具有分析体系结构的 lipo，显式文件类型的 file，列 Data 内容的 otool，分析 image 每个逻辑信息符号的 pagestuff，符号表显示的 nm。</p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>Mach-O 会将数据流分组，每组都会有自己的意义，主要分三大部分，分别是 Mach Header、Load Command、Data。</p>
<h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Mach Header 里会有 Mach-O 的 CPU 信息，以及 Load Command 的信息。可以使用 otool 查看内容：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otool -v -h a.out</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mach header</span><br><span class="line">      magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags</span><br><span class="line">MH_MAGIC_64  X86_64        ALL  <span class="number">0x00</span>     EXECUTE    <span class="number">16</span>       <span class="number">1368</span>   NOUNDEFS DYLDLINK TWOLEVEL PIE</span><br></pre></td></tr></table></figure>
<p>通过 _dyld_get_image_header 函数可以获取 mach_header 结构体。<a href="https://github.com/ming1016/GCDFetchFeed/blob/master/GCDFetchFeed/GCDFetchFeed/Lib/SMLagMonitor/SMCallStack.m">GCDFetchFeed/SMCallStack.m at master · ming1016/GCDFetchFeed · GitHub</a> 里这段代码里有判断 Mach Header 结构体魔数的函数 smCmdFirstPointerFromMachHeader，代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uintptr_t</span> <span class="title">smCmdFirstPointerFromMachHeader</span><span class="params">(<span class="keyword">const</span> struct mach_header* <span class="keyword">const</span> machHeader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (machHeader-&gt;magic) &#123;</span><br><span class="line">        <span class="keyword">case</span> MH_MAGIC:</span><br><span class="line">        <span class="keyword">case</span> MH_CIGAM:</span><br><span class="line">        <span class="keyword">case</span> MH_MAGIC_64:</span><br><span class="line">        <span class="keyword">case</span> MH_CIGAM_64:</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">uintptr_t</span>)(((machHeaderByCPU*)machHeader) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// Header 不合法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有 Fat Header，里面会包含多个架构的 Header。</p>
<p>LLVM 中生成 Mach Header 的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MachOFileLayout::writeMachHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> cpusubtype = MachOLinkingContext::cpuSubtypeFromArch(_file.arch);</span><br><span class="line">  <span class="comment">// dynamic x86 executables on newer OS version should also set the</span></span><br><span class="line">  <span class="comment">// CPU_SUBTYPE_LIB64 mask in the CPU subtype.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">FIXME:</span> Check that this is a dynamic executable, not a static one.</span></span><br><span class="line">  <span class="keyword">if</span> (_file.fileType == llvm::MachO::MH_EXECUTE &amp;&amp;</span><br><span class="line">      cpusubtype == CPU_SUBTYPE_X86_64_ALL &amp;&amp;</span><br><span class="line">      _file.os == MachOLinkingContext::OS::macOSX) &#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> version;</span><br><span class="line">    <span class="keyword">bool</span> failed = MachOLinkingContext::parsePackedVersion(<span class="string">&quot;10.5&quot;</span>, version);</span><br><span class="line">    <span class="keyword">if</span> (!failed &amp;&amp; _file.minOSverson &gt;= version)</span><br><span class="line">      cpusubtype |= CPU_SUBTYPE_LIB64;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mach_header *mh = <span class="keyword">reinterpret_cast</span>&lt;mach_header*&gt;(_buffer);</span><br><span class="line">  mh-&gt;magic = _is64 ? llvm::MachO::MH_MAGIC_64 : llvm::MachO::MH_MAGIC;</span><br><span class="line">  mh-&gt;cputype =  MachOLinkingContext::cpuTypeFromArch(_file.arch);</span><br><span class="line">  mh-&gt;cpusubtype = cpusubtype;</span><br><span class="line">  mh-&gt;filetype = _file.fileType;</span><br><span class="line">  mh-&gt;ncmds = _countOfLoadCommands;</span><br><span class="line">  mh-&gt;sizeofcmds = _endOfLoadCommands - _startOfLoadCommands;</span><br><span class="line">  mh-&gt;flags = _file.flags;</span><br><span class="line">  <span class="keyword">if</span> (_swap)</span><br><span class="line">    swapStruct(*mh);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Load-Command"><a href="#Load-Command" class="headerlink" title="Load Command"></a>Load Command</h3><p>Load Command 包含 Mach-O 里命令类型信息，名称和二进制文件的位置。</p>
<p>使用 otool 命令可以查看详细：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otool -v -l a.out</span><br></pre></td></tr></table></figure>
<p>遍历 Mach Header 里的 ncmds 可以取到所有 Load Command。代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">uint32_t</span> iCmd = <span class="number">0</span>; iCmd &lt; machHeader-&gt;ncmds; iCmd++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">load_command</span>* <span class="title">loadCmd</span> =</span> (struct load_command*)cmdPointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>load<em>command 里的 cmd 是以 LC</em> 开头定义的宏，可以参看 loader.h 里的定义，有50多个，主要的是：</p>
<ul>
<li>LC_SEGMENT_64(_PAGEZERO)</li>
<li>LC_SEGMENT_64(_TEXT)</li>
<li>LC_SEGMENT_64(_DATA)</li>
<li>LC_SEGMENT_64(_LINKEDIT)</li>
<li>LC_DYLD_INFO_ONLY</li>
<li>LC_SYMTAB</li>
<li>LC_DYSYMTAB</li>
<li>LC_LOAD_DYLINKER</li>
<li>LC_UUID</li>
<li>LC_BUILD_VERSION</li>
<li>LC_SOURCE_VERSION</li>
<li>LC_MAIN</li>
<li>LC_LOAD_DYLIB(libSystem.B.dylib)</li>
<li>LC_FUNCTION_STARTS</li>
<li>LC_DATA_IN_CODE</li>
</ul>
<p>每个 command 的结构都是独立的，前两个字段 cmd 和 cmdsize 是一样的。</p>
<p>根据 Load Command 可以得到 Segment 的偏移量。</p>
<p>生成 Load Command 的代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">llvm::Error <span class="title">MachOFileLayout::writeLoadCommands</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> *lc = &amp;_buffer[_startOfLoadCommands];</span><br><span class="line">  <span class="keyword">if</span> (_file.fileType == llvm::MachO::MH_OBJECT) &#123;</span><br><span class="line">    <span class="comment">// Object files have one unnamed segment which holds all sections.</span></span><br><span class="line">    <span class="keyword">if</span> (_is64) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">auto</span> ec = writeSingleSegmentLoadCommand&lt;MachO64Trait&gt;(lc))</span><br><span class="line">       <span class="keyword">return</span> ec;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> ec = writeSingleSegmentLoadCommand&lt;MachO32Trait&gt;(lc))</span><br><span class="line">        <span class="keyword">return</span> ec;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Add LC_SYMTAB with symbol table info</span></span><br><span class="line">    symtab_command* st = <span class="keyword">reinterpret_cast</span>&lt;symtab_command*&gt;(lc);</span><br><span class="line">    st-&gt;cmd     = LC_SYMTAB;</span><br><span class="line">    st-&gt;cmdsize = <span class="keyword">sizeof</span>(symtab_command);</span><br><span class="line">    st-&gt;symoff  = _startOfSymbols;</span><br><span class="line">    st-&gt;nsyms   = _file.stabsSymbols.size() + _file.localSymbols.size() +</span><br><span class="line">                  _file.globalSymbols.size() + _file.undefinedSymbols.size();</span><br><span class="line">    st-&gt;stroff  = _startOfSymbolStrings;</span><br><span class="line">    st-&gt;strsize = _endOfSymbolStrings - _startOfSymbolStrings;</span><br><span class="line">    <span class="keyword">if</span> (_swap)</span><br><span class="line">      swapStruct(*st);</span><br><span class="line">    lc += <span class="keyword">sizeof</span>(symtab_command);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_VERSION_MIN_MACOSX, LC_VERSION_MIN_IPHONEOS,</span></span><br><span class="line">    <span class="comment">// LC_VERSION_MIN_WATCHOS, LC_VERSION_MIN_TVOS</span></span><br><span class="line">    writeVersionMinLoadCommand(_file, _swap, lc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_FUNCTION_STARTS if needed.</span></span><br><span class="line">    <span class="keyword">if</span> (_functionStartsSize != <span class="number">0</span>) &#123;</span><br><span class="line">      linkedit_data_command* dl = <span class="keyword">reinterpret_cast</span>&lt;linkedit_data_command*&gt;(lc);</span><br><span class="line">      dl-&gt;cmd      = LC_FUNCTION_STARTS;</span><br><span class="line">      dl-&gt;cmdsize  = <span class="keyword">sizeof</span>(linkedit_data_command);</span><br><span class="line">      dl-&gt;dataoff  = _startOfFunctionStarts;</span><br><span class="line">      dl-&gt;datasize = _functionStartsSize;</span><br><span class="line">      <span class="keyword">if</span> (_swap)</span><br><span class="line">        swapStruct(*dl);</span><br><span class="line">      lc += <span class="keyword">sizeof</span>(linkedit_data_command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_DATA_IN_CODE if requested.</span></span><br><span class="line">    <span class="keyword">if</span> (_file.generateDataInCodeLoadCommand) &#123;</span><br><span class="line">      linkedit_data_command* dl = <span class="keyword">reinterpret_cast</span>&lt;linkedit_data_command*&gt;(lc);</span><br><span class="line">      dl-&gt;cmd      = LC_DATA_IN_CODE;</span><br><span class="line">      dl-&gt;cmdsize  = <span class="keyword">sizeof</span>(linkedit_data_command);</span><br><span class="line">      dl-&gt;dataoff  = _startOfDataInCode;</span><br><span class="line">      dl-&gt;datasize = _dataInCodeSize;</span><br><span class="line">      <span class="keyword">if</span> (_swap)</span><br><span class="line">        swapStruct(*dl);</span><br><span class="line">      lc += <span class="keyword">sizeof</span>(linkedit_data_command);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Final linked images have sections under segments.</span></span><br><span class="line">    <span class="keyword">if</span> (_is64) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> ec = writeSegmentLoadCommands&lt;MachO64Trait&gt;(lc))</span><br><span class="line">        <span class="keyword">return</span> ec;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">auto</span> ec = writeSegmentLoadCommands&lt;MachO32Trait&gt;(lc))</span><br><span class="line">        <span class="keyword">return</span> ec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_ID_DYLIB command for dynamic libraries.</span></span><br><span class="line">    <span class="keyword">if</span> (_file.fileType == llvm::MachO::MH_DYLIB) &#123;</span><br><span class="line">      dylib_command *dc = <span class="keyword">reinterpret_cast</span>&lt;dylib_command*&gt;(lc);</span><br><span class="line">      StringRef path = _file.installName;</span><br><span class="line">      <span class="keyword">uint32_t</span> size = <span class="keyword">sizeof</span>(dylib_command) + pointerAlign(path.size() + <span class="number">1</span>);</span><br><span class="line">      dc-&gt;cmd                         = LC_ID_DYLIB;</span><br><span class="line">      dc-&gt;cmdsize                     = size;</span><br><span class="line">      dc-&gt;dylib.name                  = <span class="keyword">sizeof</span>(dylib_command); <span class="comment">// offset</span></span><br><span class="line">      <span class="comment">// needs to be some constant value different than the one in LC_LOAD_DYLIB</span></span><br><span class="line">      dc-&gt;dylib.timestamp             = <span class="number">1</span>;</span><br><span class="line">      dc-&gt;dylib.current_version       = _file.currentVersion;</span><br><span class="line">      dc-&gt;dylib.compatibility_version = _file.compatVersion;</span><br><span class="line">      <span class="keyword">if</span> (_swap)</span><br><span class="line">        swapStruct(*dc);</span><br><span class="line">      <span class="built_in">memcpy</span>(lc + <span class="keyword">sizeof</span>(dylib_command), path.begin(), path.size());</span><br><span class="line">      lc[<span class="keyword">sizeof</span>(dylib_command) + path.size()] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">      lc += size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_DYLD_INFO_ONLY.</span></span><br><span class="line">    dyld_info_command* di = <span class="keyword">reinterpret_cast</span>&lt;dyld_info_command*&gt;(lc);</span><br><span class="line">    di-&gt;cmd            = LC_DYLD_INFO_ONLY;</span><br><span class="line">    di-&gt;cmdsize        = <span class="keyword">sizeof</span>(dyld_info_command);</span><br><span class="line">    di-&gt;rebase_off     = _rebaseInfo.size() ? _startOfRebaseInfo : <span class="number">0</span>;</span><br><span class="line">    di-&gt;rebase_size    = _rebaseInfo.size();</span><br><span class="line">    di-&gt;bind_off       = _bindingInfo.size() ? _startOfBindingInfo : <span class="number">0</span>;</span><br><span class="line">    di-&gt;bind_size      = _bindingInfo.size();</span><br><span class="line">    di-&gt;weak_bind_off  = <span class="number">0</span>;</span><br><span class="line">    di-&gt;weak_bind_size = <span class="number">0</span>;</span><br><span class="line">    di-&gt;lazy_bind_off  = _lazyBindingInfo.size() ? _startOfLazyBindingInfo : <span class="number">0</span>;</span><br><span class="line">    di-&gt;lazy_bind_size = _lazyBindingInfo.size();</span><br><span class="line">    di-&gt;export_off     = _exportTrie.size() ? _startOfExportTrie : <span class="number">0</span>;</span><br><span class="line">    di-&gt;export_size    = _exportTrie.size();</span><br><span class="line">    <span class="keyword">if</span> (_swap)</span><br><span class="line">      swapStruct(*di);</span><br><span class="line">    lc += <span class="keyword">sizeof</span>(dyld_info_command);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_SYMTAB with symbol table info.</span></span><br><span class="line">    symtab_command* st = <span class="keyword">reinterpret_cast</span>&lt;symtab_command*&gt;(lc);</span><br><span class="line">    st-&gt;cmd     = LC_SYMTAB;</span><br><span class="line">    st-&gt;cmdsize = <span class="keyword">sizeof</span>(symtab_command);</span><br><span class="line">    st-&gt;symoff  = _startOfSymbols;</span><br><span class="line">    st-&gt;nsyms   = _file.stabsSymbols.size() + _file.localSymbols.size() +</span><br><span class="line">                  _file.globalSymbols.size() + _file.undefinedSymbols.size();</span><br><span class="line">    st-&gt;stroff  = _startOfSymbolStrings;</span><br><span class="line">    st-&gt;strsize = _endOfSymbolStrings - _startOfSymbolStrings;</span><br><span class="line">    <span class="keyword">if</span> (_swap)</span><br><span class="line">      swapStruct(*st);</span><br><span class="line">    lc += <span class="keyword">sizeof</span>(symtab_command);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_DYSYMTAB</span></span><br><span class="line">    <span class="keyword">if</span> (_file.fileType != llvm::MachO::MH_PRELOAD) &#123;</span><br><span class="line">      dysymtab_command* dst = <span class="keyword">reinterpret_cast</span>&lt;dysymtab_command*&gt;(lc);</span><br><span class="line">      dst-&gt;cmd            = LC_DYSYMTAB;</span><br><span class="line">      dst-&gt;cmdsize        = <span class="keyword">sizeof</span>(dysymtab_command);</span><br><span class="line">      dst-&gt;ilocalsym      = _symbolTableLocalsStartIndex;</span><br><span class="line">      dst-&gt;nlocalsym      = _file.stabsSymbols.size() +</span><br><span class="line">                            _file.localSymbols.size();</span><br><span class="line">      dst-&gt;iextdefsym     = _symbolTableGlobalsStartIndex;</span><br><span class="line">      dst-&gt;nextdefsym     = _file.globalSymbols.size();</span><br><span class="line">      dst-&gt;iundefsym      = _symbolTableUndefinesStartIndex;</span><br><span class="line">      dst-&gt;nundefsym      = _file.undefinedSymbols.size();</span><br><span class="line">      dst-&gt;tocoff         = <span class="number">0</span>;</span><br><span class="line">      dst-&gt;ntoc           = <span class="number">0</span>;</span><br><span class="line">      dst-&gt;modtaboff      = <span class="number">0</span>;</span><br><span class="line">      dst-&gt;nmodtab        = <span class="number">0</span>;</span><br><span class="line">      dst-&gt;extrefsymoff   = <span class="number">0</span>;</span><br><span class="line">      dst-&gt;nextrefsyms    = <span class="number">0</span>;</span><br><span class="line">      dst-&gt;indirectsymoff = _startOfIndirectSymbols;</span><br><span class="line">      dst-&gt;nindirectsyms  = _indirectSymbolTableCount;</span><br><span class="line">      dst-&gt;extreloff      = <span class="number">0</span>;</span><br><span class="line">      dst-&gt;nextrel        = <span class="number">0</span>;</span><br><span class="line">      dst-&gt;locreloff      = <span class="number">0</span>;</span><br><span class="line">      dst-&gt;nlocrel        = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (_swap)</span><br><span class="line">        swapStruct(*dst);</span><br><span class="line">      lc += <span class="keyword">sizeof</span>(dysymtab_command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If main executable, add LC_LOAD_DYLINKER</span></span><br><span class="line">    <span class="keyword">if</span> (_file.fileType == llvm::MachO::MH_EXECUTE) &#123;</span><br><span class="line">      <span class="comment">// Build LC_LOAD_DYLINKER load command.</span></span><br><span class="line">      <span class="keyword">uint32_t</span> size=pointerAlign(<span class="keyword">sizeof</span>(dylinker_command)+dyldPath().size()+<span class="number">1</span>);</span><br><span class="line">      dylinker_command* dl = <span class="keyword">reinterpret_cast</span>&lt;dylinker_command*&gt;(lc);</span><br><span class="line">      dl-&gt;cmd              = LC_LOAD_DYLINKER;</span><br><span class="line">      dl-&gt;cmdsize          = size;</span><br><span class="line">      dl-&gt;name             = <span class="keyword">sizeof</span>(dylinker_command); <span class="comment">// offset</span></span><br><span class="line">      <span class="keyword">if</span> (_swap)</span><br><span class="line">        swapStruct(*dl);</span><br><span class="line">      <span class="built_in">memcpy</span>(lc+<span class="keyword">sizeof</span>(dylinker_command), dyldPath().data(), dyldPath().size());</span><br><span class="line">      lc[<span class="keyword">sizeof</span>(dylinker_command)+dyldPath().size()] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">      lc += size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_VERSION_MIN_MACOSX, LC_VERSION_MIN_IPHONEOS, LC_VERSION_MIN_WATCHOS,</span></span><br><span class="line">    <span class="comment">// LC_VERSION_MIN_TVOS</span></span><br><span class="line">    writeVersionMinLoadCommand(_file, _swap, lc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_SOURCE_VERSION</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Note, using a temporary here to appease UB as we may not be aligned</span></span><br><span class="line">      <span class="comment">// enough for a struct containing a uint64_t when emitting a 32-bit binary</span></span><br><span class="line">      source_version_command sv;</span><br><span class="line">      sv.cmd       = LC_SOURCE_VERSION;</span><br><span class="line">      sv.cmdsize   = <span class="keyword">sizeof</span>(source_version_command);</span><br><span class="line">      sv.version   = _file.sourceVersion;</span><br><span class="line">      <span class="keyword">if</span> (_swap)</span><br><span class="line">        swapStruct(sv);</span><br><span class="line">      <span class="built_in">memcpy</span>(lc, &amp;sv, <span class="keyword">sizeof</span>(source_version_command));</span><br><span class="line">      lc += <span class="keyword">sizeof</span>(source_version_command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If main executable, add LC_MAIN.</span></span><br><span class="line">    <span class="keyword">if</span> (_file.fileType == llvm::MachO::MH_EXECUTE) &#123;</span><br><span class="line">      <span class="comment">// Build LC_MAIN load command.</span></span><br><span class="line">      <span class="comment">// Note, using a temporary here to appease UB as we may not be aligned</span></span><br><span class="line">      <span class="comment">// enough for a struct containing a uint64_t when emitting a 32-bit binary</span></span><br><span class="line">      entry_point_command ep;</span><br><span class="line">      ep.cmd       = LC_MAIN;</span><br><span class="line">      ep.cmdsize   = <span class="keyword">sizeof</span>(entry_point_command);</span><br><span class="line">      ep.entryoff  = _file.entryAddress - _seg1addr;</span><br><span class="line">      ep.stacksize = _file.stackSize;</span><br><span class="line">      <span class="keyword">if</span> (_swap)</span><br><span class="line">        swapStruct(ep);</span><br><span class="line">      <span class="built_in">memcpy</span>(lc, &amp;ep, <span class="keyword">sizeof</span>(entry_point_command));</span><br><span class="line">      lc += <span class="keyword">sizeof</span>(entry_point_command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_LOAD_DYLIB commands</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> DependentDylib &amp;dep : _file.dependentDylibs) &#123;</span><br><span class="line">      dylib_command* dc = <span class="keyword">reinterpret_cast</span>&lt;dylib_command*&gt;(lc);</span><br><span class="line">      <span class="keyword">uint32_t</span> size = <span class="keyword">sizeof</span>(dylib_command) + pointerAlign(dep.path.size()+<span class="number">1</span>);</span><br><span class="line">      dc-&gt;cmd                         = dep.kind;</span><br><span class="line">      dc-&gt;cmdsize                     = size;</span><br><span class="line">      dc-&gt;dylib.name                  = <span class="keyword">sizeof</span>(dylib_command); <span class="comment">// offset</span></span><br><span class="line">      <span class="comment">// needs to be some constant value different than the one in LC_ID_DYLIB</span></span><br><span class="line">      dc-&gt;dylib.timestamp             = <span class="number">2</span>;</span><br><span class="line">      dc-&gt;dylib.current_version       = dep.currentVersion;</span><br><span class="line">      dc-&gt;dylib.compatibility_version = dep.compatVersion;</span><br><span class="line">      <span class="keyword">if</span> (_swap)</span><br><span class="line">        swapStruct(*dc);</span><br><span class="line">      <span class="built_in">memcpy</span>(lc+<span class="keyword">sizeof</span>(dylib_command), dep.path.begin(), dep.path.size());</span><br><span class="line">      lc[<span class="keyword">sizeof</span>(dylib_command)+dep.path.size()] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">      lc += size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_RPATH</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> StringRef &amp;path : _file.rpaths) &#123;</span><br><span class="line">      rpath_command *rpc = <span class="keyword">reinterpret_cast</span>&lt;rpath_command *&gt;(lc);</span><br><span class="line">      <span class="keyword">uint32_t</span> size = pointerAlign(<span class="keyword">sizeof</span>(rpath_command) + path.size() + <span class="number">1</span>);</span><br><span class="line">      rpc-&gt;cmd                         = LC_RPATH;</span><br><span class="line">      rpc-&gt;cmdsize                     = size;</span><br><span class="line">      rpc-&gt;path                        = <span class="keyword">sizeof</span>(rpath_command); <span class="comment">// offset</span></span><br><span class="line">      <span class="keyword">if</span> (_swap)</span><br><span class="line">        swapStruct(*rpc);</span><br><span class="line">      <span class="built_in">memcpy</span>(lc+<span class="keyword">sizeof</span>(rpath_command), path.begin(), path.size());</span><br><span class="line">      lc[<span class="keyword">sizeof</span>(rpath_command)+path.size()] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">      lc += size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_FUNCTION_STARTS if needed.</span></span><br><span class="line">    <span class="keyword">if</span> (_functionStartsSize != <span class="number">0</span>) &#123;</span><br><span class="line">      linkedit_data_command* dl = <span class="keyword">reinterpret_cast</span>&lt;linkedit_data_command*&gt;(lc);</span><br><span class="line">      dl-&gt;cmd      = LC_FUNCTION_STARTS;</span><br><span class="line">      dl-&gt;cmdsize  = <span class="keyword">sizeof</span>(linkedit_data_command);</span><br><span class="line">      dl-&gt;dataoff  = _startOfFunctionStarts;</span><br><span class="line">      dl-&gt;datasize = _functionStartsSize;</span><br><span class="line">      <span class="keyword">if</span> (_swap)</span><br><span class="line">        swapStruct(*dl);</span><br><span class="line">      lc += <span class="keyword">sizeof</span>(linkedit_data_command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add LC_DATA_IN_CODE if requested.</span></span><br><span class="line">    <span class="keyword">if</span> (_file.generateDataInCodeLoadCommand) &#123;</span><br><span class="line">      linkedit_data_command* dl = <span class="keyword">reinterpret_cast</span>&lt;linkedit_data_command*&gt;(lc);</span><br><span class="line">      dl-&gt;cmd      = LC_DATA_IN_CODE;</span><br><span class="line">      dl-&gt;cmdsize  = <span class="keyword">sizeof</span>(linkedit_data_command);</span><br><span class="line">      dl-&gt;dataoff  = _startOfDataInCode;</span><br><span class="line">      dl-&gt;datasize = _dataInCodeSize;</span><br><span class="line">      <span class="keyword">if</span> (_swap)</span><br><span class="line">        swapStruct(*dl);</span><br><span class="line">      lc += <span class="keyword">sizeof</span>(linkedit_data_command);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> llvm::Error::success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>Data 由 Segment 的数据组成，是 Mach-O 占比最多的部分，有代码有数据，比如符号表。Data 共三个 Segment，<strong>TEXT、</strong>DATA、<strong>LINKEDIT。其中 </strong>TEXT 和 <strong>DATA 对应一个或多个 Section，</strong>LINKEDIT 没有 Section，需要配合 LC_SYMTAB 来解析 symbol table 和 string table。这些里面是 Mach-O 的主要数据。</p>
<p>生成 __LINKEDIT 的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MachOFileLayout::buildLinkEditInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  buildRebaseInfo();</span><br><span class="line">  buildBindInfo();</span><br><span class="line">  buildLazyBindInfo();</span><br><span class="line">  buildExportTrie();</span><br><span class="line">  computeSymbolTableSizes();</span><br><span class="line">  computeFunctionStartsSize();</span><br><span class="line">  computeDataInCodeSize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MachOFileLayout::writeLinkEditContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (_file.fileType == llvm::MachO::MH_OBJECT) &#123;</span><br><span class="line">    writeRelocations();</span><br><span class="line">    writeFunctionStartsInfo();</span><br><span class="line">    writeDataInCodeInfo();</span><br><span class="line">    writeSymbolTable();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    writeRebaseInfo();</span><br><span class="line">    writeBindingInfo();</span><br><span class="line">    writeLazyBindingInfo();</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> add weak binding info</span></span><br><span class="line">    writeExportInfo();</span><br><span class="line">    writeFunctionStartsInfo();</span><br><span class="line">    writeDataInCodeInfo();</span><br><span class="line">    writeSymbolTable();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过生成 <strong>LINKEDIT 的代码可以看出 </strong>LINKEDIT 里包含 dyld 所需各种数据，比如符号表、间接符号表、rebase 操作码、绑定操作码、导出符号、函数启动信息、数据表、代码签名等。</p>
<p>__DATA 包含 lazy 和 non lazy 符号指针，还会包含静态数据和全局变量等。可重定位的 Mach-O 文件还会有一个重定位的区域用来存储重定位信息，如果哪个 section 有重定位字节，就会有一个 relocation table 对应。</p>
<p>生成 relocation 的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MachOFileLayout::writeRelocations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> relOffset = _startOfRelocations;</span><br><span class="line">  <span class="keyword">for</span> (Section sect : _file.sections) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Relocation r : sect.relocations) &#123;</span><br><span class="line">      any_relocation_info* rb = <span class="keyword">reinterpret_cast</span>&lt;any_relocation_info*&gt;(</span><br><span class="line">                                                           &amp;_buffer[relOffset]);</span><br><span class="line">      *rb = packRelocation(r, _swap, _bigEndianArch);</span><br><span class="line">      relOffset += <span class="keyword">sizeof</span>(any_relocation_info);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 size 命令可以看到内容的分布，使用前面生成的 a.out 来看：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun size -x -l -m a.out</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Segment __PAGEZERO: <span class="number">0x100000000</span> (vmaddr <span class="number">0x0</span> fileoff <span class="number">0</span>)</span><br><span class="line">Segment __TEXT: <span class="number">0x1000</span> (vmaddr <span class="number">0x100000000</span> fileoff <span class="number">0</span>)</span><br><span class="line">    Section __text: <span class="number">0x41</span> (addr <span class="number">0x100000f50</span> offset <span class="number">3920</span>)</span><br><span class="line">    Section __stubs: <span class="number">0x6</span> (addr <span class="number">0x100000f92</span> offset <span class="number">3986</span>)</span><br><span class="line">    Section __stub_helper: <span class="number">0x1a</span> (addr <span class="number">0x100000f98</span> offset <span class="number">3992</span>)</span><br><span class="line">    Section __cstring: <span class="number">0x4</span> (addr <span class="number">0x100000fb2</span> offset <span class="number">4018</span>)</span><br><span class="line">    Section __unwind_info: <span class="number">0x48</span> (addr <span class="number">0x100000fb8</span> offset <span class="number">4024</span>)</span><br><span class="line">    total <span class="number">0xad</span></span><br><span class="line">Segment __DATA_CONST: <span class="number">0x1000</span> (vmaddr <span class="number">0x100001000</span> fileoff <span class="number">4096</span>)</span><br><span class="line">    Section __got: <span class="number">0x8</span> (addr <span class="number">0x100001000</span> offset <span class="number">4096</span>)</span><br><span class="line">    total <span class="number">0x8</span></span><br><span class="line">Segment __DATA: <span class="number">0x1000</span> (vmaddr <span class="number">0x100002000</span> fileoff <span class="number">8192</span>)</span><br><span class="line">    Section __la_symbol_ptr: <span class="number">0x8</span> (addr <span class="number">0x100002000</span> offset <span class="number">8192</span>)</span><br><span class="line">    Section __data: <span class="number">0x8</span> (addr <span class="number">0x100002008</span> offset <span class="number">8200</span>)</span><br><span class="line">    total <span class="number">0x10</span></span><br><span class="line">Segment __LINKEDIT: <span class="number">0x1000</span> (vmaddr <span class="number">0x100003000</span> fileoff <span class="number">12288</span>)</span><br><span class="line">total <span class="number">0x100004000</span></span><br></pre></td></tr></table></figure>
<p>其中__TEXT Segment 的内容有：</p>
<ul>
<li>Section64(<strong>TEXT,</strong>text)</li>
<li>Section64(<strong>TEXT,</strong>stubs)</li>
<li>Section64(<strong>TEXT,</strong>stub_helper)</li>
<li>Section64(<strong>TEXT,</strong>cstring)</li>
<li>Section64(<strong>TEXT,</strong>unwind_info)</li>
</ul>
<p>__DATA Segment 的内容有：</p>
<ul>
<li>Section64(<strong>DATA,</strong>nl_symbol_ptr)</li>
<li>Section64(<strong>DATA,</strong>la_symbol_ptr)</li>
</ul>
<p>__LINKEDIT 的内容是：</p>
<ul>
<li>Dynamic Loader Info</li>
<li>Function Starts</li>
<li>Symbol Table</li>
<li>Data in Code Entries</li>
<li>Dynamic Symbol Table</li>
<li>String Table</li>
</ul>
<p>如果是 Objective-C 代码生成的 Mach-O 会多出很多和 Objective-C 相关的 Section ，我拿<a href="https://github.com/ming1016/GCDFetchFeed">已阅</a>项目生成的 Mach-O 来看。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun size -x -l -m GCDFetchFeed</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Segment __PAGEZERO: <span class="number">0x100000000</span> (vmaddr <span class="number">0x0</span> fileoff <span class="number">0</span>)</span><br><span class="line">Segment __TEXT: <span class="number">0xa8000</span> (vmaddr <span class="number">0x100000000</span> fileoff <span class="number">0</span>)</span><br><span class="line">    Section __text: <span class="number">0x89084</span> (addr <span class="number">0x1000020e0</span> offset <span class="number">8416</span>)</span><br><span class="line">    Section __stubs: <span class="number">0x588</span> (addr <span class="number">0x10008b164</span> offset <span class="number">569700</span>)</span><br><span class="line">    Section __stub_helper: <span class="number">0x948</span> (addr <span class="number">0x10008b6ec</span> offset <span class="number">571116</span>)</span><br><span class="line">    Section __gcc_except_tab: <span class="number">0x1318</span> (addr <span class="number">0x10008c034</span> offset <span class="number">573492</span>)</span><br><span class="line">    Section __cstring: <span class="number">0xbebd</span> (addr <span class="number">0x10008d34c</span> offset <span class="number">578380</span>)</span><br><span class="line">    Section __objc_methname: <span class="number">0xa20f</span> (addr <span class="number">0x100099209</span> offset <span class="number">627209</span>)</span><br><span class="line">    Section __objc_classname: <span class="number">0x11d9</span> (addr <span class="number">0x1000a3418</span> offset <span class="number">668696</span>)</span><br><span class="line">    Section __objc_methtype: <span class="number">0x2185</span> (addr <span class="number">0x1000a45f1</span> offset <span class="number">673265</span>)</span><br><span class="line">    Section __const: <span class="number">0x23c</span> (addr <span class="number">0x1000a6780</span> offset <span class="number">681856</span>)</span><br><span class="line">    Section __ustring: <span class="number">0x23e</span> (addr <span class="number">0x1000a69bc</span> offset <span class="number">682428</span>)</span><br><span class="line">    Section __entitlements: <span class="number">0x184</span> (addr <span class="number">0x1000a6bfa</span> offset <span class="number">683002</span>)</span><br><span class="line">    Section __unwind_info: <span class="number">0x1274</span> (addr <span class="number">0x1000a6d80</span> offset <span class="number">683392</span>)</span><br><span class="line">    total <span class="number">0xa5f08</span></span><br><span class="line">Segment __DATA: <span class="number">0x2f000</span> (vmaddr <span class="number">0x1000a8000</span> fileoff <span class="number">688128</span>)</span><br><span class="line">    Section __nl_symbol_ptr: <span class="number">0x8</span> (addr <span class="number">0x1000a8000</span> offset <span class="number">688128</span>)</span><br><span class="line">    Section __got: <span class="number">0x258</span> (addr <span class="number">0x1000a8008</span> offset <span class="number">688136</span>)</span><br><span class="line">    Section __la_symbol_ptr: <span class="number">0x760</span> (addr <span class="number">0x1000a8260</span> offset <span class="number">688736</span>)</span><br><span class="line">    Section __const: <span class="number">0x4238</span> (addr <span class="number">0x1000a89c0</span> offset <span class="number">690624</span>)</span><br><span class="line">    Section __cfstring: <span class="number">0x9d80</span> (addr <span class="number">0x1000acbf8</span> offset <span class="number">707576</span>)</span><br><span class="line">    Section __objc_classlist: <span class="number">0x510</span> (addr <span class="number">0x1000b6978</span> offset <span class="number">747896</span>)</span><br><span class="line">    Section __objc_nlclslist: <span class="number">0x40</span> (addr <span class="number">0x1000b6e88</span> offset <span class="number">749192</span>)</span><br><span class="line">    Section __objc_catlist: <span class="number">0x90</span> (addr <span class="number">0x1000b6ec8</span> offset <span class="number">749256</span>)</span><br><span class="line">    Section __objc_nlcatlist: <span class="number">0x10</span> (addr <span class="number">0x1000b6f58</span> offset <span class="number">749400</span>)</span><br><span class="line">    Section __objc_protolist: <span class="number">0x80</span> (addr <span class="number">0x1000b6f68</span> offset <span class="number">749416</span>)</span><br><span class="line">    Section __objc_imageinfo: <span class="number">0x8</span> (addr <span class="number">0x1000b6fe8</span> offset <span class="number">749544</span>)</span><br><span class="line">    Section __objc_const: <span class="number">0x182e8</span> (addr <span class="number">0x1000b6ff0</span> offset <span class="number">749552</span>)</span><br><span class="line">    Section __objc_selrefs: <span class="number">0x2bf8</span> (addr <span class="number">0x1000cf2d8</span> offset <span class="number">848600</span>)</span><br><span class="line">    Section __objc_protorefs: <span class="number">0x8</span> (addr <span class="number">0x1000d1ed0</span> offset <span class="number">859856</span>)</span><br><span class="line">    Section __objc_classrefs: <span class="number">0x858</span> (addr <span class="number">0x1000d1ed8</span> offset <span class="number">859864</span>)</span><br><span class="line">    Section __objc_superrefs: <span class="number">0x370</span> (addr <span class="number">0x1000d2730</span> offset <span class="number">862000</span>)</span><br><span class="line">    Section __objc_ivar: <span class="number">0xb48</span> (addr <span class="number">0x1000d2aa0</span> offset <span class="number">862880</span>)</span><br><span class="line">    Section __objc_data: <span class="number">0x32a0</span> (addr <span class="number">0x1000d35e8</span> offset <span class="number">865768</span>)</span><br><span class="line">    Section __data: <span class="number">0x604</span> (addr <span class="number">0x1000d6888</span> offset <span class="number">878728</span>)</span><br><span class="line">    Section __bss: <span class="number">0x158</span> (addr <span class="number">0x1000d6e90</span> offset <span class="number">0</span>)</span><br><span class="line">    total <span class="number">0x2efe4</span></span><br><span class="line">Segment __LINKEDIT: <span class="number">0xae000</span> (vmaddr <span class="number">0x1000d7000</span> fileoff <span class="number">880640</span>)</span><br><span class="line">total <span class="number">0x100185000</span></span><br></pre></td></tr></table></figure>
<p>可以看到 __objc 前缀的都是为了支持 Objective-C 语言新增加的。</p>
<p>那么 Swift 语言代码构建的 Mach-O 是怎样的呢？</p>
<p>使用我做启动优化时用 Swift 写的工具 <a href="https://github.com/ming1016/MethodTraceAnalyze">MethodTraceAnalyze</a> 看下内容有什么。结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Segment __PAGEZERO: <span class="number">0x100000000</span> (vmaddr <span class="number">0x0</span> fileoff <span class="number">0</span>)</span><br><span class="line">Segment __TEXT: <span class="number">0x115000</span> (vmaddr <span class="number">0x100000000</span> fileoff <span class="number">0</span>)</span><br><span class="line">    Section __text: <span class="number">0xfd540</span> (addr <span class="number">0x1000019b0</span> offset <span class="number">6576</span>)</span><br><span class="line">    Section __stubs: <span class="number">0x6f6</span> (addr <span class="number">0x1000feef0</span> offset <span class="number">1044208</span>)</span><br><span class="line">    Section __stub_helper: <span class="number">0xbaa</span> (addr <span class="number">0x1000ff5e8</span> offset <span class="number">1045992</span>)</span><br><span class="line">    Section __swift5_typeref: <span class="number">0xf56</span> (addr <span class="number">0x100100192</span> offset <span class="number">1048978</span>)</span><br><span class="line">    Section __swift5_capture: <span class="number">0x3b4</span> (addr <span class="number">0x1001010e8</span> offset <span class="number">1052904</span>)</span><br><span class="line">    Section __cstring: <span class="number">0x7011</span> (addr <span class="number">0x1001014a0</span> offset <span class="number">1053856</span>)</span><br><span class="line">    Section __const: <span class="number">0x4754</span> (addr <span class="number">0x1001084c0</span> offset <span class="number">1082560</span>)</span><br><span class="line">    Section __swift5_fieldmd: <span class="number">0x2bf4</span> (addr <span class="number">0x10010cc14</span> offset <span class="number">1100820</span>)</span><br><span class="line">    Section __swift5_types: <span class="number">0x1f0</span> (addr <span class="number">0x10010f808</span> offset <span class="number">1112072</span>)</span><br><span class="line">    Section __swift5_builtin: <span class="number">0x78</span> (addr <span class="number">0x10010f9f8</span> offset <span class="number">1112568</span>)</span><br><span class="line">    Section __swift5_reflstr: <span class="number">0x2740</span> (addr <span class="number">0x10010fa70</span> offset <span class="number">1112688</span>)</span><br><span class="line">    Section __swift5_proto: <span class="number">0x154</span> (addr <span class="number">0x1001121b0</span> offset <span class="number">1122736</span>)</span><br><span class="line">    Section __swift5_assocty: <span class="number">0x120</span> (addr <span class="number">0x100112304</span> offset <span class="number">1123076</span>)</span><br><span class="line">    Section __objc_methname: <span class="number">0x7a5</span> (addr <span class="number">0x100112424</span> offset <span class="number">1123364</span>)</span><br><span class="line">    Section __swift5_protos: <span class="number">0x8</span> (addr <span class="number">0x100112bcc</span> offset <span class="number">1125324</span>)</span><br><span class="line">    Section __unwind_info: <span class="number">0x1c70</span> (addr <span class="number">0x100112bd4</span> offset <span class="number">1125332</span>)</span><br><span class="line">    Section __eh_frame: <span class="number">0x7b0</span> (addr <span class="number">0x100114848</span> offset <span class="number">1132616</span>)</span><br><span class="line">    total <span class="number">0x11362c</span></span><br><span class="line">Segment __DATA_CONST: <span class="number">0x4000</span> (vmaddr <span class="number">0x100115000</span> fileoff <span class="number">1134592</span>)</span><br><span class="line">    Section __got: <span class="number">0x4a8</span> (addr <span class="number">0x100115000</span> offset <span class="number">1134592</span>)</span><br><span class="line">    Section __const: <span class="number">0x32f8</span> (addr <span class="number">0x1001154a8</span> offset <span class="number">1135784</span>)</span><br><span class="line">    Section __objc_classlist: <span class="number">0xd0</span> (addr <span class="number">0x1001187a0</span> offset <span class="number">1148832</span>)</span><br><span class="line">    Section __objc_protolist: <span class="number">0x10</span> (addr <span class="number">0x100118870</span> offset <span class="number">1149040</span>)</span><br><span class="line">    Section __objc_imageinfo: <span class="number">0x8</span> (addr <span class="number">0x100118880</span> offset <span class="number">1149056</span>)</span><br><span class="line">    total <span class="number">0x3888</span></span><br><span class="line">Segment __DATA: <span class="number">0x8000</span> (vmaddr <span class="number">0x100119000</span> fileoff <span class="number">1150976</span>)</span><br><span class="line">    Section __la_symbol_ptr: <span class="number">0x948</span> (addr <span class="number">0x100119000</span> offset <span class="number">1150976</span>)</span><br><span class="line">    Section __objc_const: <span class="number">0x2018</span> (addr <span class="number">0x100119948</span> offset <span class="number">1153352</span>)</span><br><span class="line">    Section __objc_selrefs: <span class="number">0xb0</span> (addr <span class="number">0x10011b960</span> offset <span class="number">1161568</span>)</span><br><span class="line">    Section __objc_protorefs: <span class="number">0x10</span> (addr <span class="number">0x10011ba10</span> offset <span class="number">1161744</span>)</span><br><span class="line">    Section __objc_classrefs: <span class="number">0x38</span> (addr <span class="number">0x10011ba20</span> offset <span class="number">1161760</span>)</span><br><span class="line">    Section __objc_data: <span class="number">0x98</span> (addr <span class="number">0x10011ba58</span> offset <span class="number">1161816</span>)</span><br><span class="line">    Section __data: <span class="number">0x1f88</span> (addr <span class="number">0x10011baf0</span> offset <span class="number">1161968</span>)</span><br><span class="line">    Section __bss: <span class="number">0x2a68</span> (addr <span class="number">0x10011da80</span> offset <span class="number">0</span>)</span><br><span class="line">    Section __common: <span class="number">0x50</span> (addr <span class="number">0x1001204e8</span> offset <span class="number">0</span>)</span><br><span class="line">    total <span class="number">0x7530</span></span><br><span class="line">Segment __LINKEDIT: <span class="number">0x152000</span> (vmaddr <span class="number">0x100121000</span> fileoff <span class="number">1171456</span>)</span><br><span class="line">total <span class="number">0x100273000</span></span><br></pre></td></tr></table></figure>
<p>可以看到 <strong>DATA Segment 部分还是有 </strong>objc 前缀的 Section，<strong>TEXT Segment 里已经都是 </strong>swift5 为前缀的 Section 了。</p>
<p>使用 otool 可以查看某个 Section 内容。比如查看 <strong>TEXT Segment 的 </strong>text Section 的内容，使用如下命令：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun otool -s __TEXT __text a.out</span><br></pre></td></tr></table></figure>
<p>使用 otool 可以直接看 Mach-O 汇编内容 ：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun otool -v -t a.out</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a.out:</span><br><span class="line">(__TEXT,__text) section</span><br><span class="line">_main:</span><br><span class="line"><span class="number">0000000100000f</span>50    pushq   %rbp</span><br><span class="line"><span class="number">0000000100000f</span>51    movq    %rsp, %rbp</span><br><span class="line"><span class="number">0000000100000f</span>54    subq    $<span class="number">0x20</span>, %rsp</span><br><span class="line"><span class="number">0000000100000f</span>58    movl    $<span class="number">0x0</span>, <span class="number">-0x4</span>(%rbp)</span><br><span class="line"><span class="number">0000000100000f</span>5f    movl    %edi, <span class="number">-0x8</span>(%rbp)</span><br><span class="line"><span class="number">0000000100000f</span>62    movq    %rsi, <span class="number">-0x10</span>(%rbp)</span><br><span class="line"><span class="number">0000000100000f</span>66    movq    <span class="number">-0x10</span>(%rbp), %rax</span><br><span class="line"><span class="number">0000000100000f</span>6a    movq    <span class="number">0x8</span>(%rax), %rax</span><br><span class="line"><span class="number">0000000100000f</span>6e    movq    %rax, <span class="number">-0x18</span>(%rbp)</span><br><span class="line"><span class="number">0000000100000f</span>72    movq    <span class="number">-0x18</span>(%rbp), %rsi</span><br><span class="line"><span class="number">0000000100000f</span>76    leaq    <span class="number">0x35</span>(%rip), %rdi</span><br><span class="line"><span class="number">0000000100000f</span>7d    movb    $<span class="number">0x0</span>, %al</span><br><span class="line"><span class="number">0000000100000f</span>7f    callq   <span class="number">0x100000f92</span></span><br><span class="line"><span class="number">0000000100000f</span>84    xorl    %ecx, %ecx</span><br><span class="line"><span class="number">0000000100000f</span>86    movl    %eax, <span class="number">-0x1c</span>(%rbp)</span><br><span class="line"><span class="number">0000000100000f</span>89    movl    %ecx, %eax</span><br><span class="line"><span class="number">0000000100000f</span>8b    addq    $<span class="number">0x20</span>, %rsp</span><br><span class="line"><span class="number">0000000100000f</span>8f    popq    %rbp</span><br><span class="line"><span class="number">0000000100000f</span>90    retq</span><br></pre></td></tr></table></figure>
<p>构建中查看代码生成汇编可以使用 clang 以下选项：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun clang -S -o - main.c</span><br></pre></td></tr></table></figure>
<p> 生成汇编如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    .section    __TEXT,__text,regular,pure_instructions</span><br><span class="line">    .build_version macos, <span class="number">10</span>, <span class="number">15</span>    sdk_version <span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span></span><br><span class="line">    .globl  _main                   ## -- Begin function main</span><br><span class="line">    .p2align    <span class="number">4</span>, <span class="number">0x90</span></span><br><span class="line">_main:                                  ## @main</span><br><span class="line">    .cfi_startproc</span><br><span class="line">## %bb<span class="number">.0</span>:</span><br><span class="line">    pushq   %rbp</span><br><span class="line">    .cfi_def_cfa_offset <span class="number">16</span></span><br><span class="line">    .cfi_offset %rbp, <span class="number">-16</span></span><br><span class="line">    movq    %rsp, %rbp</span><br><span class="line">    .cfi_def_cfa_register %rbp</span><br><span class="line">    subq    $<span class="number">32</span>, %rsp</span><br><span class="line">    movl    $<span class="number">0</span>, <span class="number">-4</span>(%rbp)</span><br><span class="line">    movl    %edi, <span class="number">-8</span>(%rbp)</span><br><span class="line">    movq    %rsi, <span class="number">-16</span>(%rbp)</span><br><span class="line">    movq    <span class="number">-16</span>(%rbp), %rax</span><br><span class="line">    movq    <span class="number">8</span>(%rax), %rax</span><br><span class="line">    movq    %rax, <span class="number">-24</span>(%rbp)</span><br><span class="line">    movq    <span class="number">-24</span>(%rbp), %rsi</span><br><span class="line">    leaq    L_.str(%rip), %rdi</span><br><span class="line">    movb    $<span class="number">0</span>, %al</span><br><span class="line">    callq   _printf</span><br><span class="line">    xorl    %ecx, %ecx</span><br><span class="line">    movl    %eax, <span class="number">-28</span>(%rbp)         ## <span class="number">4</span>-byte Spill</span><br><span class="line">    movl    %ecx, %eax</span><br><span class="line">    addq    $<span class="number">32</span>, %rsp</span><br><span class="line">    popq    %rbp</span><br><span class="line">    retq</span><br><span class="line">    .cfi_endproc</span><br><span class="line">                                        ## -- End function</span><br><span class="line">    .section    __TEXT,__cstring,cstring_literals</span><br><span class="line">L_.str:                                 ## @.str</span><br><span class="line">    .asciz  <span class="string">&quot;%s\n&quot;</span></span><br></pre></td></tr></table></figure>
<p>可以发现两者汇编逻辑是一样的。点符号开头的都是汇编指令，比如.section 就是告知会执行哪个 segment，.p2align 指令明确后面代码对齐方式，这里是16(2^4) 字节对齐，0x90 补齐。在 <strong>TEXT Segment 的 </strong>text Section 里会创建一个调用帧堆栈，进行函数调用，callq printf 函数前会用到 L<em>.str(%rip)，L</em>.str 标签会指向字符串，leaq 会把字符串的指针加载到 rdi 寄存器。最后会销毁调用帧堆栈，进行 retq 返回。</p>
<p>主要 Section：</p>
<ul>
<li>__nl_symbol_ptr：包含 non-lazy 符号指针，mach-o/loader.h 里有详细说明。服务 dyld_stub_binder 处理的符号。</li>
<li><strong>la_symbol_ptr：</strong>stubs 第一个 jump 目标地址。动态库的符号指针地址。</li>
<li><strong>got：二进制文件的全局偏移表 GOT，也包含 S_NON_LAZY_SYMBOL_POINTERS 标记的 non-lazy 符号指针。服务于 </strong>TEXT Segment 里的符号。可以将<strong>got 看作一个表，里面每项都是一个地址值。</strong>got 的每项在加载期间都会被 dyld 重写，所以会在 <strong>DATA Segment 中。</strong>got 用来存放 non-lazy 符号最终地址，为 dyld 所用。dylib 外部符号对于全局变量和常量引用地址会指到 __got。</li>
<li>__lazy_symbol：包含 lazy 符号，首次使用时绑定。</li>
<li><strong>stubs：跳转表，重定向到 lazy 和 non-lazy 符号的 section。被标记为 S_SYMBOL_STUBS。</strong>TEXT Segment 里代码和 dylib 外部符号的引用地址对函数符号的引用都指向了 <strong>stubs。其中每项都是 jmp 代码间接寻址，可跳到 </strong>la_symbol_ptr Section 中。</li>
<li><strong>stub_helper：lazy 动态绑定符号的辅助函数。可跳到 </strong>nl_symbol_ptr Section 中。</li>
<li>__text：机器码，也是实际代码，包含所有功能。</li>
<li>__cstring：常量。只读 C 字符串。</li>
<li>__const：初始化过的常量。</li>
<li>_<em>objc</em>：Objective-C 语言 runtime 的支持。</li>
<li>__data：初始化过的变量。</li>
<li>__bss：未初始化的静态变量。</li>
<li>__unwind_info：生成异常处理信息。</li>
<li>__eh_frame：DWARF2 unwind 可执行文件代码信息，用于调试。</li>
<li>string table：以空值终止的字符串序列。</li>
<li>symbol table：通过 LC_SYMTAB 命令找到 symbol table，其包含所有用到的符号信息。结构体 nlist_64描述了符号的基本信息。nlist_64 结构体中 n_type 字段是一个8位复合字段，其中bit[0:1]表示是外部符号，bit[5:8]表调试符号，bit[4:5]表示私有 external 符号，bit[1:4]是符号类型，有 N_UNDF 未定义、N_ABS 绝对地址、N_SECT 本地符号、N_PBUD 预绑定符号、N_INDR 同名符号几种类型。</li>
<li>indirect symbol table：每项都是一个 index 值，指向 symbol table 中的项。由 LC_DYSYMTAB 定义，和<strong>nl_symbol_ptr 和 </strong>lazy_symbol 一起为 <strong>stubs 和 </strong>got 等 Section 服务。</li>
</ul>
<p>生成 Section 的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MachOFileLayout::writeSectionContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> Section &amp;s : _file.sections) &#123;</span><br><span class="line">    <span class="comment">// Copy all section content to output buffer.</span></span><br><span class="line">    <span class="keyword">if</span> (isZeroFillSection(s.type))</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (s.content.empty())</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> offset = _sectInfo[&amp;s].fileOffset;</span><br><span class="line">    <span class="keyword">uint8_t</span> *p = &amp;_buffer[offset];</span><br><span class="line">    <span class="built_in">memcpy</span>(p, &amp;s.content[<span class="number">0</span>], s.content.size());</span><br><span class="line">    p += s.content.size();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 symble table 生成的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MachOFileLayout::writeSymbolTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Write symbol table and symbol strings in parallel.</span></span><br><span class="line">  <span class="keyword">uint32_t</span> symOffset = _startOfSymbols;</span><br><span class="line">  <span class="keyword">uint32_t</span> strOffset = _startOfSymbolStrings;</span><br><span class="line">  <span class="comment">// Reserve n_strx offset of zero to mean no name.</span></span><br><span class="line">  _buffer[strOffset++] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  _buffer[strOffset++] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  appendSymbols(_file.stabsSymbols, symOffset, strOffset);</span><br><span class="line">  appendSymbols(_file.localSymbols, symOffset, strOffset);</span><br><span class="line">  appendSymbols(_file.globalSymbols, symOffset, strOffset);</span><br><span class="line">  appendSymbols(_file.undefinedSymbols, symOffset, strOffset);</span><br><span class="line">  <span class="comment">// Write indirect symbol table array.</span></span><br><span class="line">  <span class="keyword">uint32_t</span> *indirects = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">uint32_t</span>*&gt;</span><br><span class="line">                                            (&amp;_buffer[_startOfIndirectSymbols]);</span><br><span class="line">  <span class="keyword">if</span> (_file.fileType == llvm::MachO::MH_OBJECT) &#123;</span><br><span class="line">    <span class="comment">// Object files have sections in same order as input normalized file.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> Section &amp;section : _file.sections) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">uint32_t</span> index : section.indirectSymbols) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_swap)</span><br><span class="line">          *indirects++ = llvm::sys::getSwappedBytes(index);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          *indirects++ = index;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Final linked images must sort sections from normalized file.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> Segment &amp;seg : _file.segments) &#123;</span><br><span class="line">      SegExtraInfo &amp;segInfo = _segInfo[&amp;seg];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> Section *section : segInfo.sections) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">uint32_t</span> index : section-&gt;indirectSymbols) &#123;</span><br><span class="line">          <span class="keyword">if</span> (_swap)</span><br><span class="line">            *indirects++ = llvm::sys::getSwappedBytes(index);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            *indirects++ = index;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取 Segment 信息的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">segmentWalk</span><span class="params">(<span class="keyword">void</span> *segment_command)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> nsects;</span><br><span class="line">  <span class="keyword">void</span> *section;</span><br><span class="line"></span><br><span class="line">  section = segment_command + <span class="keyword">sizeof</span>(struct segment_command);</span><br><span class="line">  nsects = ((struct segment_command *) segment_command)-&gt;nsects;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (nsects--) &#123;</span><br><span class="line">    section += <span class="keyword">sizeof</span>(struct s_section);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取对应符号的方法代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义参看 &lt;mach-o/nlist.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_UNDF  0x0  <span class="comment">// 未定义</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_ABS 0x2    <span class="comment">// 绝对地址</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_SECT 0xe   <span class="comment">// 本地符号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_PBUD 0xc   <span class="comment">// 预定义符号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_INDR 0xa   <span class="comment">// 同名符号</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_STAB 0xe0  <span class="comment">// 调试符号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_PEXT 0x10  <span class="comment">// 私有 external 符号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_TYPE 0x0e  <span class="comment">// 类型位的掩码</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_EXT 0x01   <span class="comment">// external 符号</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">symbolical</span><span class="params">(sym)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (N_STAB &amp; sym-&gt;type)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;-&#x27;</span>; </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ((N_TYPE &amp; sym-&gt;type) == N_UNDF) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sym-&gt;name_not_found)</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sym-&gt;type &amp; N_EXT)</span><br><span class="line">     <span class="keyword">return</span> = <span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">return</span> = <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((N_TYPE &amp; sym-&gt;type) == N_SECT) &#123;</span><br><span class="line">    <span class="keyword">return</span> matched(saved_sections, sym);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((N_TYPE &amp; sym-&gt;type) == N_ABS) &#123;</span><br><span class="line">    <span class="keyword">return</span> = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((N_TYPE &amp; sym-&gt;type) == N_INDR) &#123;</span><br><span class="line">    <span class="keyword">return</span> = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">matched</span><span class="params">(saved_sections, symbol)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (sect = find_mysection(saved_sections, symbol-&gt;n_sect)) # </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ft_strcmp(sect-&gt;name, SECT_TEXT))</span><br><span class="line">      ret = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!ft_strcmp(sect-&gt;name, SECT_DATA))</span><br><span class="line">      ret = <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!ft_strcmp(sect-&gt;name, SECT_BSS))</span><br><span class="line">      ret = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      ret = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(mysym-&gt;type &amp; N_EXT))</span><br><span class="line">       ret -= <span class="string">&#x27;A&#x27;</span> - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="加载运行"><a href="#加载运行" class="headerlink" title="加载运行"></a>加载运行</h2><p>程序要和其他库还有模块一起运行，需要在运行时对这些库和模块的符号引用进行解析，运行时，你应用程序使用的模块符号都在共享名称空间。macOS 使用的是两级名称空间来确保不同模块符号名不会冲突，同时增强向前兼容。</p>
<p>选择要加载的 Mach-O 后，系统内核会先确定该文件是否是 Mach-O 文件。</p>
<p>文件的第一个字节是魔数，通过魔数可以推断是不是 Mach-O，mach-o/loader.h 里定义了四个魔数标识。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_MAGIC    0xfeedface</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_CIGAM    NXSwapInt(MH_MAGIC)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_MAGIC_64 0xfeedfacf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_CIGAM_64 NXSwapInt(MH_MAGIC_64)</span></span><br></pre></td></tr></table></figure>
<p>以上四个魔数标识是 Mach-O 文件。</p>
<p>然后内核系统会用 fork 函数创建一个进程，然后通过 execve 函数开始程序加载过程，execve 有多个种类，比如 execl、execv 等，只是在参数和环境变量上有不同，最终都会到内核的 execve 函数。</p>
<p>接着会检查 Mach-O header，加载 dyld 和程序到 Load Command 指定的地址空间。执行动态链接器。动态链接器通过 dyld_stub_binder 调用，这个函数的参数不直接指定要绑定的符号，而是通过给 dyld_stub_binder 偏移量到 dyld 解释的特殊字节码 Segment 中。dyld_stub_binder 函数的代码在这里：<a href="https://opensource.apple.com/source/dyld/dyld-635.2/src/dyld_stub_binder.s.auto.html">dyld_stub_binder.s</a>。dyld 分为 rebase、binding、lazy binding、导出几个部分。dyld 可以 hook，使用 DYLD_INSERT_LIBRARIES，类似 ld 的 LD_PRELOAD 还有 DYLD_LIBRARY_PATH。</p>
<p><strong>text 里需要被 lazy binding 的符号引用，访问时回到 stub 中，目标地址在 </strong>la_symbol_ptr，对应 <strong>la_symbol_ptr 的内容会指向 </strong>stub_helper，其中逻辑会调到 dyld_stub_binder 函数，这个函数会通过 dyld 找到符号的真实地址，最后 dyld_stub_binder 会把得到的地址写入 <strong>la_symbol_ptr 里后，会跳转到符号的真实地址。由于地址已经在 </strong>la_symbol_ptr 里了，所以再访问符号时会通过 stub 的 jum 指令直接跳转到真实地址。</p>
<p>通过 dyld 加载主程序链接到的所有依赖库，执行符号绑定也就是non lazy binding。绑定解析其他模块的功能和数据的引用过程，也叫导入符号。</p>
<h3 id="导入导出符号"><a href="#导入导出符号" class="headerlink" title="导入导出符号"></a>导入导出符号</h3><p>执行绑定时，链接程序会用实际定义的地址替换程序的每个导入引用。通过构建时的选项设置，dyld 可以即时绑定，也叫延迟绑定，首次使用引用时的绑定，在使用符号前不会将程序的引用绑定到共享库的符号。使用 -bind_at_load 可以加载时绑定，动态链接程序在加载程序时立即绑定所有导入的引用，如果没有设置这个选项，默认按即时绑定来。设置 -prebind，程序引用的共享库都会在指定的地址预先绑定。</p>
<p>根据 Code Fragment Manager 设计的弱引用允许程序有选择的绑定到指定的共享库，如果 dyld 找不到弱引用的定义，会设置为 NULL，然后可以继续加载程序。代码上可以写判断，如果引用为空进行相应的处理。</p>
<p>过程链接表 PLT，会在运行时确定函数地址。callq 指令在 dyld_stub 调用 PLT 条目，符号 stub 位于 <strong>TEXT Segment 的 </strong>stubs Section 中。每个 Mach-O 符号 stub 都是一个 jumpq 指令，它会调用 dyld 找到符号，然后执行。</p>
<p>Mach-O 的导入和导出都会存在 __LINKEDIT 里。使用 FSA 接受 Leb128 参数，也就是绑定操作码。LEB 会把整数值编码成可变长度的字节序列，最后一个字节才设置最高有效位。</p>
<p>当 FSA 循环或递归时，会用0xF0对其进行掩码获得操作码，所有导入绑定操作码都会对应有宏名称和对应的功能。比如 0xb0 对应宏是 BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED，功能是将记录放到导入堆栈中，然后把当前记录的地址偏移量设为 seg_offset = seg_offset + (scale * sizeofptr) + sizeofptr ，其中 scale 是立即数中包含的值，sizeofptr 是指针对应平台的大小。</p>
<p>Mach-O 导出符号是 <a href="https://en.wikipedia.org/wiki/Trie">trie</a> 的数据结构，trie 节点最多有一个终端字符串信息，如果没有终端信息，就以0x00字节标记。有的化，就用 Leb128 代替该节点的终端字符串信息大小。节点导出信息后，类型信息类型使用0x3对标志进行位掩码获得。0x00表示常规符号，0x01表示线程本地符号，0x02标识绝对符号，0x4表示弱引用符号，0x8表示重新导出，0x10是 stub，具有 Leb128的 stub 偏移量。大部分符号都是常规符号，会将 Mach-O 的偏移量给符号。</p>
<p>生成 trie 数据结构的代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MachOFileLayout::buildExportTrie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (_file.exportInfo.empty())</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// For all temporary strings and objects used building trie.</span></span><br><span class="line">  BumpPtrAllocator allocator;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Build trie of all exported symbols.</span></span><br><span class="line">  <span class="keyword">auto</span> *rootNode = <span class="keyword">new</span> (allocator) TrieNode(StringRef());</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;TrieNode*&gt; allNodes;</span><br><span class="line">  allNodes.reserve(_file.exportInfo.size()*<span class="number">2</span>);</span><br><span class="line">  allNodes.push_back(rootNode);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> Export&amp; entry : _file.exportInfo) &#123;</span><br><span class="line">    rootNode-&gt;addSymbol(entry, allocator, allNodes);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;TrieNode*&gt; orderedNodes;</span><br><span class="line">  orderedNodes.reserve(allNodes.size());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> Export&amp; entry : _file.exportInfo)</span><br><span class="line">    rootNode-&gt;addOrderedNodes(entry, orderedNodes);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Assign each node in the vector an offset in the trie stream, iterating</span></span><br><span class="line">  <span class="comment">// until all uleb128 sizes have stabilized.</span></span><br><span class="line">  <span class="keyword">bool</span> more;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> offset = <span class="number">0</span>;</span><br><span class="line">    more = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (TrieNode* node : orderedNodes) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node-&gt;updateOffset(offset))</span><br><span class="line">        more = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (more);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Serialize trie to ByteBuffer.</span></span><br><span class="line">  <span class="keyword">for</span> (TrieNode* node : orderedNodes) &#123;</span><br><span class="line">    node-&gt;appendToByteBuffer(_exportTrie);</span><br><span class="line">  &#125;</span><br><span class="line">  _exportTrie.align(_is64 ? <span class="number">8</span> : <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Trie 也叫数字树或前缀树，是一种搜索树。查找复杂度 O(m)，m 是字符串的长度。和散列表相比，散列最差复杂度是 O(N)，一般都是 O(1)，用 O(m)时间评估 hash。散列缺点是会分配一大块内存，内容越多所占内存越大。Trie 不仅查找快，插入和删除都很快，适合存储预测性文本或自动完成词典。为了进一步优化所占空间，可以将 Trie 这种树形的确定性有限自动机压缩成确定性非循环有限状态自动体（DAFSA），其空间小，做法是会压缩相同分支。对于更大内容，还可以做更进一步的优化，比如使用字母缩减的实现技术，把原来的字符串重新解释为较长的字符串；使用单链式列表，节点设计为由符号、子节点、下一个节点来表示；将字母表数组存储为代表 ASCII 字母表的256位的位图。</p>
<p>对于动态库，有几个易于理解的公共符号比导出所有符号更易于使用，让公共符号集少，私有符号集丰富，维护起来更加方便。更新时也不会影响较早版本。导出最少数量的符号，还能够优化动态加载程序到进程的时间，动态库导出符号越少，dyld 加载就越快。</p>
<p>静态存储类是表明不想导出符号的最简单的方法。将可见性属性放置在实现文件中的符号定义里，设置符号可见性也能够更精确的控制哪些符号是公共符号还是私有符号。在编译选项 -fvisbility 可以指定未指定可见性符号的可见性。使用 -weak_library 选项会告诉编译器将库里所有导出符号都设为弱链接符号。使用 nm 的 -gm 选项可以查看 Mach-O 导出的符号：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -gm header.dylib</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(undefined) external ___cxa_atexit (from libSystem)</span><br><span class="line">(undefined) external _printf (from libSystem)</span><br><span class="line">(undefined) <span class="function">external <span class="title">dyld_stub_binder</span> <span class="params">(from libSystem)</span></span></span><br></pre></td></tr></table></figure>
<p>另外可以通过导出的符号文件，列出要导出的符号来控制导出符号数量，其他符号都会被隐藏。导出符号文件 list 如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_foo</span><br><span class="line">_header</span><br></pre></td></tr></table></figure>
<p>使用 -exported_symbols_list 选项编译就可以仅导出文件中指定的符号：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -dynamiclib header.c -exported_symbols_list <span class="built_in">list</span> -o header.dylib</span><br></pre></td></tr></table></figure>
<h3 id="符号绑定范围"><a href="#符号绑定范围" class="headerlink" title="符号绑定范围"></a>符号绑定范围</h3><p>符号可能存在与多个作用域级别。未定义的外部符号是在当前文件之外的文件中，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>私有定义符号，其他模块不可见</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count;</span><br></pre></td></tr></table></figure>
<p>私有外部符号可以使用 <strong>private_extern</strong>关键字：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__private_extern__ <span class="keyword">int</span> count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>指定一个函数为弱引用，可以使用 weak_import 属性：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute__</span><span class="params">((weak_import))</span></span>;</span><br></pre></td></tr></table></figure>
<p>在符号声明中添加 weak 属性来指定将符号设置为合并的弱引用：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute__</span><span class="params">((weak))</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="入口点"><a href="#入口点" class="headerlink" title="入口点"></a>入口点</h3><p>符号绑定结果放到 LC_DYSYMTAB 指定的 section，解析后的地址会放到 <strong>DATA segment 的 </strong>nl_symbol_ptr 和 <strong>got 里。dyld 使用 Load Command 指定 Mach-O 中的数据以各种方式链接依赖项。Mach-O 的 Segment 按照 Load Command 中指定映射到内存中。 初始化后，会调用 LC_MAIN 指定的入口点，这个点是 </strong>TEXT Segment 的 <strong>text Section 的开始。使用 </strong>stubs 将 <strong>la_symbol_ptr 指向 </strong>stub_helpers，dyld_stub_binder 执行解析，然后更新 __la_symbol_ptr 的地址。</p>
<p>Mach-O 和链接器之间是通过 assembly trampoline 进行的桥接，Mach-O 接口的 ABI 和 ELF 相同，但策略不同。macOS 在调用 dyld 前后都会保存和恢复 SSE 寄存器。</p>
<h3 id="动态库构造函数和析构函数"><a href="#动态库构造函数和析构函数" class="headerlink" title="动态库构造函数和析构函数"></a>动态库构造函数和析构函数</h3><p>动态库加载可能需要执行特殊的初始化或者需要做些准备工作，这里可以使用初始化函数也就是构造函数。结束的时候可以加析构函数。</p>
<p>举个例子，先定义一个 header.c，在里面加上构造函数和析构函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;prepare&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((destructor))</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showHeader</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;header&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将 header.c 构建成一个动态库 header.dylib。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun clang -dynamiclib header.c -fvisibility=hidden -o header.dylib</span><br></pre></td></tr></table></figure>
<p>将 header.dylib 和 main.c 构建成一个中间目标文件 main.o。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun clang main.c header.dylib -o main</span><br></pre></td></tr></table></figure>
<p>运行看结果</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ming@mingdeMacBook-Pro macho_demo % ./main <span class="string">&quot;hi&quot;</span></span><br><span class="line">prepare</span><br><span class="line">hi</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>可以看到，动态库的构造函数 prepare 和析构函数 end 都执行了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Mach-O 的全称是 Mach Object File Format。可以是可执行文件，目标代码或共享库，动态库。Mach 内核的操作系统
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Apple" scheme="http://ming1016.github.io/tags/Apple/"/>
    
      <category term="Mach-O" scheme="http://ming1016.github.io/tags/Mach-O/"/>
    
  </entry>
  
  <entry>
    <title>在快手做分享、无用类检查、在广州做 SwiftUI 学习笔记分享、InfoQ二叉树视频</title>
    <link href="http://ming1016.github.io/2020/01/05/kuaishou-unused-class-swiftui-note-binary-tree-interview/"/>
    <id>http://ming1016.github.io/2020/01/05/kuaishou-unused-class-swiftui-note-binary-tree-interview/</id>
    <published>2020-01-05T07:57:05.000Z</published>
    <updated>2021-04-11T14:42:09.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在快手做分享"><a href="#在快手做分享" class="headerlink" title="在快手做分享"></a>在快手做分享</h2><p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/00.jpeg" alt=""></p>
<p>前滴滴同事邀请我去快手做分享。下面是分享时的 Slides：</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/01.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/02.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/03.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/04.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/05.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/06.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/07.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/08.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/09.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/10.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/11.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/12.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/13.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/14.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/15.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/16.png" alt=""></p>
<p>详细文章介绍：<a href="https://ming1016.github.io/2019/12/07/how-to-analyze-startup-time-cost-in-ios/">如何对 iOS 启动阶段耗时进行分析 | 星光社 - 戴铭的博客</a></p>
<p>代码：<a href="https://github.com/ming1016/MethodTraceAnalyze">GitHub - ming1016/MethodTraceAnalyze: 方法耗时分析</a></p>
<h2 id="无用类检查"><a href="#无用类检查" class="headerlink" title="无用类检查"></a>无用类检查</h2><p>如果包里有一堆没用的类，不光会影响用户下载速度，也会影响启动加载速度。检查无用类，一次是无法获得全部无用类的，因为无用的类里用了其他无用的类就算是有用了，所以需要进行递归查找，这样才能够连根拔起。这个过程如果是手动做比较费劲、收益无法一次评估，很难推动。同时还需要在线上灰度运行时检查实际类的使用情况，很多静态层面关联的类使用，实际运行过程中也可能用不到。</p>
<p>思路和关键代码如下。</p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>使用 <a href="https://github.com/ming1016/MethodTraceAnalyze">MethodTraceAnalyze</a> 里 ParseOC 类的 ocNodes 函数，通过传入 workspace 路径获取所有节点的结构体 OCNode。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> allNodes <span class="operator">=</span> <span class="type">ParseOC</span>.ocNodes(workspacePath: workSpacePath)</span><br></pre></td></tr></table></figure>
<p>找出类型是方法的结构体，因为类的初始化和使用都是在这些方法中进行的。OCNode 针对不同类型所存储的数据也是不同的，所以我定义一个 OCNodeValueProtocol 协议属性，这样就可以针对不同类型的节点存储不同的数据。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">OCNodeDefaultValue</span>: <span class="title">OCNodeValueProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> defaultValue: <span class="type">String</span></span><br><span class="line">    <span class="function"><span class="keyword">init</span>()</span> &#123;</span><br><span class="line">        defaultValue <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">OCNodeMethod</span>: <span class="title">OCNodeValueProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> belongClass: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> methodName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> tokenNodes: [<span class="type">OCTokenNode</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">OCNodeClass</span>: <span class="title">OCNodeValueProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> className: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> baseClass: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> hMethod: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> mMethod: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> baseClasses: [<span class="type">String</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到对方法类型会存所属类、方法名和方法内所有 token以便进行进一步分析。对类这种类型会记录他的基类、类名、头文件方法列表和实现文件方法列表，还用一个栈记录继承链。</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>获取所有类的节点，通过对方法内所有 token 的分析来看使用了哪些类，并记录使用的类。</p>
<p>获取所有类节点的代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有类节点</span></span><br><span class="line"><span class="keyword">var</span> allClassSet:<span class="type">Set</span>&lt;<span class="type">String</span>&gt; <span class="operator">=</span> <span class="type">Set</span>()</span><br><span class="line"><span class="keyword">for</span> aNode <span class="keyword">in</span> allNodes &#123;</span><br><span class="line">    <span class="keyword">if</span> aNode.type <span class="operator">==</span> .class &#123;</span><br><span class="line">        <span class="keyword">let</span> classValue <span class="operator">=</span> aNode.value <span class="keyword">as!</span> <span class="type">OCNodeClass</span></span><br><span class="line">        allClassSet.insert(classValue.className)</span><br><span class="line">        <span class="keyword">if</span> classValue.baseClass.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            baseClasses.insert(classValue.baseClass)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// end for aNode in allNodes</span></span><br></pre></td></tr></table></figure>
<p>记录使用的类关键代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">parseAMethodUsedClass</span>(<span class="params">node</span>: <span class="type">OCNode</span>, <span class="params">allClass</span>: <span class="type">Set</span>&lt;<span class="type">String</span>&gt;)</span> -&gt; <span class="type">Set</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> usedClassSet:<span class="type">Set</span>&lt;<span class="type">String</span>&gt; <span class="operator">=</span> <span class="type">Set</span>()</span><br><span class="line">    <span class="keyword">guard</span> node.type <span class="operator">==</span> .method <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> usedClassSet</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> methodValue:<span class="type">OCNodeMethod</span> <span class="operator">=</span> node.value <span class="keyword">as!</span> <span class="type">OCNodeMethod</span></span><br><span class="line">    <span class="keyword">for</span> aNode <span class="keyword">in</span> methodValue.tokenNodes &#123;</span><br><span class="line">        <span class="keyword">if</span> allClass.contains(aNode.value) &#123;</span><br><span class="line">            usedClassSet.insert(aNode.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> usedClassSet</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>有了所有使用的类和所有的类，就能够获取没用到的类。为了跑一次就能够将所有没用的类找出，所以需要在找到无用类后，将这些类自动去掉再进行下一次查找。我这里写了个递归来干这件事。具体代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> recursiveCount <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recursiveCheckUnUsedClass</span>(<span class="params">unUsed</span>:<span class="type">Set</span>&lt;<span class="type">String</span>&gt;)</span> -&gt; <span class="type">Set</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">    recursiveCount <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;into recursive!!!!第<span class="subst">\(recursiveCount)</span>次&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------------------<span class="subst">\n</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> unUsed &#123;</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> unUsedClassSet <span class="operator">=</span> unUsed</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 缩小范围</span></span><br><span class="line">    <span class="keyword">for</span> aUnUsed <span class="keyword">in</span> unUsedClassSet &#123;</span><br><span class="line">        <span class="keyword">if</span> allClassSet.contains(aUnUsed) &#123;</span><br><span class="line">            allClassSet.remove(aUnUsed)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> allUsedClassSet:<span class="type">Set</span>&lt;<span class="type">String</span>&gt; <span class="operator">=</span> <span class="type">Set</span>()</span><br><span class="line">    <span class="keyword">for</span> aNode <span class="keyword">in</span> allNodes &#123;</span><br><span class="line">        <span class="keyword">if</span> aNode.type <span class="operator">==</span> .method &#123;</span><br><span class="line">            <span class="keyword">let</span> nodeValue:<span class="type">OCNodeMethod</span> <span class="operator">=</span> aNode.value <span class="keyword">as!</span> <span class="type">OCNodeMethod</span></span><br><span class="line">            <span class="comment">// 过滤已判定无用类里的方法</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="operator">!</span>unUsedClassSet.contains(nodeValue.belongClass) <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> usedSet <span class="operator">=</span> <span class="type">ParseOCMethodContent</span>.parseAMethodUsedClass(node: aNode, allClass: allClassSet)</span><br><span class="line">            <span class="keyword">if</span> usedSet.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> aSet <span class="keyword">in</span> usedSet &#123;</span><br><span class="line">                    allUsedClassSet.insert(aSet)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="comment">// end if usedSet.count &gt; 0</span></span><br><span class="line">        &#125; <span class="comment">// end if aNode.type == .method</span></span><br><span class="line">    &#125; <span class="comment">// end for aNode in allNodes</span></span><br><span class="line">    <span class="keyword">var</span> hasUnUsed <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 找出无用类</span></span><br><span class="line">    <span class="keyword">for</span> aSet <span class="keyword">in</span> allClassSet &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="operator">!</span>allUsedClassSet.contains(aSet) &#123;</span><br><span class="line">            unUsedClassSet.insert(aSet)</span><br><span class="line">            hasUnUsed <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> hasUnUsed &#123;</span><br><span class="line">        <span class="comment">// 如果发现还有无用的类，需要继续递归调用进行分析</span></span><br><span class="line">        <span class="keyword">return</span> recursiveCheckUnUsedClass(unUsed: unUsedClassSet)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> unUsedClassSet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归调用</span></span><br><span class="line"><span class="keyword">var</span> unUsedClassFromRecursive <span class="operator">=</span> recursiveCheckUnUsedClass(unUsed: <span class="type">Set</span>&lt;<span class="type">String</span>&gt;())</span><br></pre></td></tr></table></figure>
<p>通过递归进行多次能够取到最终的结果。</p>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>对于继承和系统的类还需要进行过滤，进一步提高准确性。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unUsedClassSetCopy <span class="operator">=</span> unUsedClassFromRecursive</span><br><span class="line"><span class="keyword">for</span> aSet <span class="keyword">in</span> unUsedClassSetCopy &#123;</span><br><span class="line">    <span class="comment">// 过滤系统控件</span></span><br><span class="line">    <span class="keyword">let</span> filters <span class="operator">=</span> [<span class="string">&quot;NS&quot;</span>,<span class="string">&quot;UI&quot;</span>]</span><br><span class="line">    <span class="keyword">var</span> shouldFilter <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> filter <span class="keyword">in</span> filters &#123;</span><br><span class="line">        <span class="keyword">if</span> aSet.hasPrefix(filter) &#123;</span><br><span class="line">            shouldFilter <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 过滤基类</span></span><br><span class="line">    <span class="keyword">if</span> baseClasses.contains(aSet) &#123;</span><br><span class="line">        shouldFilter <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开始过滤</span></span><br><span class="line">    <span class="keyword">if</span> shouldFilter &#123;</span><br><span class="line">        unUsedClassFromRecursive.remove(aSet)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>清理了通过这种静态扫描出的无用类，还可以通过运行时来判断类是否被初始化了，从而找出无用类。类运行时是否初始化的这个信息是个布尔值，叫 isInitialized，存储在元类 class_rw_t 结构体的 flags 字段里，在 1&lt;&lt;29 位记录。</p>
<p>完整代码见 ParseOCMethodContent 文件：<a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/OC/ParseOCMethodContent.swift">MethodTraceAnalyze/ParseOCMethodContent.swift at master · ming1016/MethodTraceAnalyze · GitHub</a></p>
<h2 id="在广州做的-SwiftUI-学习笔记分享"><a href="#在广州做的-SwiftUI-学习笔记分享" class="headerlink" title="在广州做的 SwiftUI 学习笔记分享"></a>在广州做的 SwiftUI 学习笔记分享</h2><p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/45.jpg" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/46.jpg" alt=""></p>
<p>下面是笔记内容：</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/24.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/25.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/26.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/27.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/28.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/29.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/30.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/31.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/32.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/33.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/34.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/35.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/36.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/37.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/38.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/39.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/40.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/41.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/42.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/43.png" alt=""><br><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/44.png" alt=""></p>
<p>推荐喵神的 SwiftUI 新书，<a href="https://objccn.io/products/swift-ui">ObjC 中国 - SwiftUI 与 Combine 编程</a>。</p>
<p>这本介绍 Combine 的书也介绍的非常详细：<a href="https://heckj.github.io/swiftui-notes/">Using Combine</a></p>
<p>这个网站有大量 SwiftUI 的控件使用范例可以参考：<a href="https://www.hackingwithswift.com/quick-start/swiftui">SwiftUI by Example - free quick start tutorials for Swift developers</a></p>
<p>这个博客每篇都是 SwiftUI 相关的，而且更新非常频繁：<a href="https://swiftwithmajid.com/">Home | Majid’s blog about Swift development</a></p>
<h2 id="InfoQ二叉树视频"><a href="#InfoQ二叉树视频" class="headerlink" title="InfoQ二叉树视频"></a>InfoQ二叉树视频</h2><p>五分钟的视频，在导演构思下需要一天在四个地方进行拍摄，由于前一天晚上庆功宴喝高了，拍摄当天 iPad 笔也忘带了，头还有些懵。导演中午饭都没吃专门回家拿了他的笔给我用。下午地点安排在央美，先访谈再画一张。北京电影学院毕业14年专业绘画经验的导演贾成斌，在我画时边帮我改画边传授了经验，我觉得这些经验会让我更进一步。</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/17.jpg" alt=""></p>
<p>下面是记者剡沛在 InfoQ 上发布的采访内容和视频，原文在：<a href="https://mp.weixin.qq.com/s/Xz2TcGjG14AXr_zmXMwUxg">“创造，就值得被肯定”，一名程序员的艺术人生丨二叉树视频</a></p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/18.jpg" alt=""></p>
<p>他是一名程序员，同时也用自己的业余时间画画。无论是技术分享还是珍藏回忆，他都用画笔记录自己，连接他人。他觉得程序员很酷，无论编程还是画画，都是在创造，这就是最值得肯定的事情。</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/19.jpg" alt=""></p>
<p>他在高德负责架构研发工作，也是大家眼中的艺术家，在他身上总能看到那些执念与决心，它们发着光，无时无刻不影响着周围的人。</p>
<p>他就是戴铭，一名酷酷的程序员。</p>
<p>当聊到”连接“这个词的时候，他的眼神异常坚定。</p>
<p>他觉得自己坚持创作，坚持做很多没有门槛的技术分享，很大一部分动力就来自这种渴望，渴望连接自己的过去，也渴望连接他人。</p>
<p>他就是戴铭，一个有点酷，还有点文艺的程序员，在高德地图负责架构研发工作。除了把自己活的很年轻，在他身上总能看到一些发着光的东西。</p>
<p>“是信念吗？”</p>
<p>“是执念。”</p>
<h3 id="“当漫画家，可能连饭都吃不饱。”"><a href="#“当漫画家，可能连饭都吃不饱。”" class="headerlink" title="“当漫画家，可能连饭都吃不饱。”"></a>“当漫画家，可能连饭都吃不饱。”</h3><p>故事的开头，多少有些遗憾。</p>
<p>戴铭最早接触画画，是小学之前报过的一个高阶国画班，因为老师在上海，所以他每画完一张都要寄过去并等待回信，当其中一幅画改到第三遍的时候老师回信说：这孩子可能没什么天赋。因为这件事，当时戴铭心里对画画的渴望，几乎降到了冰点，对于画画的兴趣也就此搁置。</p>
<p>直到六年级的一次美术作业，平时酷爱看漫画的戴铭，才再一次下定决心把自己喜欢的角色搬到纸上。</p>
<p>“同学都说画的太像了，那种被再次肯定的开心，很难忘记。”</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/21.jpg" alt=""></p>
<p>后来整个初中，戴铭都在课余时间画漫画，也没再报班，一直到初中毕业戴铭跟父亲说不想上学了，“想去画漫画，做一名漫画家”。不难预料，这个想法并没有得到父亲的支持，“当漫画家，可能连饭都吃不饱”。</p>
<p>但从戴铭的话语中，并没有因为父亲这次选择而听到丝毫气馁，似乎心里的种子已经生根。</p>
<p>“兴趣不是说喜欢漫画，就要去从事漫画。当我们从被动的行为中获得成就感时，也会在无形中培养出兴趣，画画如此，编程也是一样。“</p>
<h3 id="“我不想让自己投入了生命的热爱，停滞不前。”"><a href="#“我不想让自己投入了生命的热爱，停滞不前。”" class="headerlink" title="“我不想让自己投入了生命的热爱，停滞不前。”"></a>“我不想让自己投入了生命的热爱，停滞不前。”</h3><p>“从那后来，就一直在坚持画画了。”</p>
<p>从临摹简单的漫画，到更复杂的画风、更多元的角色，再到临摹写实人物、影视剧照，期间还专门自学过素描，直到现在的再创作，戴铭除了把自己的爱好和回忆画出来，还把自己的专业内容做成漫画，用更容易传达的方式去做每一次技术分享。</p>
<p>“大概是从四、五年前开始，空闲的时候会花很长的时间画画，平时每天也会挤出一个多小时坚持练手，因为我不希望自己热爱的东西，停滞不前，兴趣不该只是兴趣而已。”</p>
<p>后来戴铭接触了数绘，就开始把很多创作留在屏幕上。</p>
<p>“用 ipad 画，更适合我现在的角色，因为可以随时开始和结束，不受环境和工具的影响，另一方面数字绘图也让他的作品在色彩方面，有了更多的提升空间。”</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/22.jpg" alt=""></p>
<p>从容地掏出平板，只要自己想，就能随时还原周遭的一切。这种感觉，就跟戴铭看待程序员时的表达一样，“都是很酷的事情，因为无论程序员的人还是艺术家，他们都在创造新的事物，仅这一点，就值得被肯定。”</p>
<h3 id="“工作不用心的人，生活也不会太精彩”"><a href="#“工作不用心的人，生活也不会太精彩”" class="headerlink" title="“工作不用心的人，生活也不会太精彩”"></a>“工作不用心的人，生活也不会太精彩”</h3><p>类似画画这种需要大量时间去“熬”的爱好，坚持总是最难的部分。</p>
<p>“时间永远都是紧缺的，这是肯定。如果工作很忙，就先把时间全部投入到工作上，用最快的速度做好、做完，才能有更多的精力和心情去做其他事情”。</p>
<p>戴铭上一份工作在滴滴，刚入职就希望拓宽自己的能力范围，几乎承担整个部门的研发任务，后来临近发版 Bug 实在解不完，第二天来公司发现都被领导默默解掉了，才意识到一个人的力量始终有限，“一个手指，肯定比不过一个拳头的力量。”</p>
<p>即便如此，戴铭也始终保持着对工作的热血，当时间不够用的时候，他会换个角度去看待问题。</p>
<p>“我觉得工作上面不上心、不拼命的人，生活也不会太精彩。工作是跟每个人的一生切实相关的事情，如果连这个都做不好，又如何能在其他事情上更用心的经营？”</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/23.jpg" alt=""></p>
<p>时间看透了，剩下的就是坚持。</p>
<p>当聊到坚持的原动力时，除了用回忆和分享去推动自己，在戴铭身上总散发着一股劲儿。一个兴趣爱好而已，谈信念可能过于悲壮，所以他认为，这股劲儿更像是决心和执念。</p>
<p>有刚入进入滴滴时，想肩扛所有工作的执念；</p>
<p>有为了兴趣上一个台阶，努力获得央美朋友肯定的执念；</p>
<p>也有怕自己的作品破坏了心中的完美角色，重复打磨的执念。</p>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>戴铭是很强大的人，他讲过的一段话令人印象深刻：</p>
<p>“幸福是面对过去，恐惧是面对未知的未来。我也忘记是从哪里看到的这句话，但我自己会这样理解：回忆是让人幸福的，未知是令人恐惧的。但如果我们沉湎在回忆中不敢面对未来，幸福始终是有限的，当我们用决心去面对未来，幸福就会越来越多，恐惧也会越来越少。”</p>
<p>裹着决心这把利剑，酷酷的戴铭就这样用代码和画笔勾勒着自己的一生，而画卷展开的部分就已经足够精彩，余下的，定会更值得期待。</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/20.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在快手做分享&quot;&gt;&lt;a href=&quot;#在快手做分享&quot; class=&quot;headerlink&quot; title=&quot;在快手做分享&quot;&gt;&lt;/a&gt;在快手做分享&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/uploads/kuaishou-unused-class-swiftui-note-
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
      <category term="SwiftUI" scheme="http://ming1016.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>日本游玩</title>
    <link href="http://ming1016.github.io/2019/12/28/japan-travel/"/>
    <id>http://ming1016.github.io/2019/12/28/japan-travel/</id>
    <published>2019-12-28T01:21:26.000Z</published>
    <updated>2021-04-11T14:42:09.923Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>从羽田机场到酒店</li>
<li>秋叶原</li>
<li>从银座回酒店</li>
<li>浅草寺</li>
<li>新宿</li>
<li>涉谷</li>
<li>藤子不二雄博物馆</li>
<li>镰仓</li>
<li>台场</li>
<li>东京迪斯尼海洋</li>
<li>大阪</li>
<li>大阪环球影城</li>
<li>大阪海洋馆</li>
<li>京都晴鸭楼</li>
<li>清水寺</li>
<li>晴空塔</li>
<li>山鹰市</li>
<li>东京迪斯尼</li>
<li>下北泽</li>
<li>东京皇宫</li>
<li>上野 Mandarake</li>
<li>表参道</li>
<li>吉祥寺</li>
<li>京都站</li>
<li>岚山</li>
<li>京都国际漫画博物馆</li>
<li>大阪城</li>
<li>道顿掘</li>
</ol>
<p><img src="/uploads/japan-travel/01.JPG" alt=""><br><img src="/uploads/japan-travel/02.JPG" alt=""><br><img src="/uploads/japan-travel/03.JPG" alt=""><br><img src="/uploads/japan-travel/04.JPG" alt=""><br><img src="/uploads/japan-travel/05.JPG" alt=""><br><img src="/uploads/japan-travel/06.JPG" alt=""><br><img src="/uploads/japan-travel/07.JPG" alt=""><br><img src="/uploads/japan-travel/08.JPG" alt=""><br><img src="/uploads/japan-travel/09.JPG" alt=""><br><img src="/uploads/japan-travel/10.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/11.JPG" alt=""><br><img src="/uploads/japan-travel/12.JPG" alt=""><br><img src="/uploads/japan-travel/13.JPG" alt=""><br><img src="/uploads/japan-travel/14.JPG" alt=""><br><img src="/uploads/japan-travel/15.JPG" alt=""><br><img src="/uploads/japan-travel/16.JPG" alt=""><br><img src="/uploads/japan-travel/17.JPG" alt=""><br><img src="/uploads/japan-travel/18.JPG" alt=""><br><img src="/uploads/japan-travel/19.JPG" alt=""><br><img src="/uploads/japan-travel/20.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/21.JPG" alt=""><br><img src="/uploads/japan-travel/22.JPG" alt=""><br><img src="/uploads/japan-travel/23.JPG" alt=""><br><img src="/uploads/japan-travel/24.JPG" alt=""><br><img src="/uploads/japan-travel/25.JPG" alt=""><br><img src="/uploads/japan-travel/26.JPG" alt=""><br><img src="/uploads/japan-travel/27.JPG" alt=""><br><img src="/uploads/japan-travel/28.JPG" alt=""><br><img src="/uploads/japan-travel/29.JPG" alt=""><br><img src="/uploads/japan-travel/30.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/31.JPG" alt=""><br><img src="/uploads/japan-travel/32.JPG" alt=""><br><img src="/uploads/japan-travel/33.JPG" alt=""><br><img src="/uploads/japan-travel/34.JPG" alt=""><br><img src="/uploads/japan-travel/35.JPG" alt=""><br><img src="/uploads/japan-travel/36.JPG" alt=""><br><img src="/uploads/japan-travel/37.JPG" alt=""><br><img src="/uploads/japan-travel/38.JPG" alt=""><br><img src="/uploads/japan-travel/39.JPG" alt=""><br><img src="/uploads/japan-travel/40.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/41.JPG" alt=""><br><img src="/uploads/japan-travel/42.JPG" alt=""><br><img src="/uploads/japan-travel/43.JPG" alt=""><br><img src="/uploads/japan-travel/44.JPG" alt=""><br><img src="/uploads/japan-travel/45.JPG" alt=""><br><img src="/uploads/japan-travel/46.JPG" alt=""><br><img src="/uploads/japan-travel/47.JPG" alt=""><br><img src="/uploads/japan-travel/48.JPG" alt=""><br><img src="/uploads/japan-travel/49.JPG" alt=""><br><img src="/uploads/japan-travel/50.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/51.JPG" alt=""><br><img src="/uploads/japan-travel/52.JPG" alt=""><br><img src="/uploads/japan-travel/53.JPG" alt=""><br><img src="/uploads/japan-travel/54.JPG" alt=""><br><img src="/uploads/japan-travel/55.JPG" alt=""><br><img src="/uploads/japan-travel/56.JPG" alt=""><br><img src="/uploads/japan-travel/57.JPG" alt=""><br><img src="/uploads/japan-travel/58.JPG" alt=""><br><img src="/uploads/japan-travel/59.JPG" alt=""><br><img src="/uploads/japan-travel/60.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/61.JPG" alt=""><br><img src="/uploads/japan-travel/62.JPG" alt=""><br><img src="/uploads/japan-travel/63.JPG" alt=""><br><img src="/uploads/japan-travel/64.JPG" alt=""><br><img src="/uploads/japan-travel/65.JPG" alt=""><br><img src="/uploads/japan-travel/66.JPG" alt=""><br><img src="/uploads/japan-travel/67.JPG" alt=""><br><img src="/uploads/japan-travel/68.JPG" alt=""><br><img src="/uploads/japan-travel/69.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/70.JPG" alt=""><br><img src="/uploads/japan-travel/71.JPG" alt=""><br><img src="/uploads/japan-travel/72.JPG" alt=""><br><img src="/uploads/japan-travel/73.JPG" alt=""><br><img src="/uploads/japan-travel/74.JPG" alt=""><br><img src="/uploads/japan-travel/75.JPG" alt=""><br><img src="/uploads/japan-travel/76.JPG" alt=""><br><img src="/uploads/japan-travel/77.JPG" alt=""><br><img src="/uploads/japan-travel/78.JPG" alt=""><br><img src="/uploads/japan-travel/79.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/80.JPG" alt=""><br><img src="/uploads/japan-travel/81.JPG" alt=""><br><img src="/uploads/japan-travel/82.JPG" alt=""><br><img src="/uploads/japan-travel/83.JPG" alt=""><br><img src="/uploads/japan-travel/84.JPG" alt=""><br><img src="/uploads/japan-travel/85.JPG" alt=""><br><img src="/uploads/japan-travel/86.JPG" alt=""><br><img src="/uploads/japan-travel/87.JPG" alt=""><br><img src="/uploads/japan-travel/88.JPG" alt=""><br><img src="/uploads/japan-travel/89.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/90.JPG" alt=""><br><img src="/uploads/japan-travel/91.JPG" alt=""><br><img src="/uploads/japan-travel/92.JPG" alt=""><br><img src="/uploads/japan-travel/93.JPG" alt=""><br><img src="/uploads/japan-travel/94.JPG" alt=""><br><img src="/uploads/japan-travel/95.JPG" alt=""><br><img src="/uploads/japan-travel/96.JPG" alt=""><br><img src="/uploads/japan-travel/97.JPG" alt=""><br><img src="/uploads/japan-travel/98.JPG" alt=""><br><img src="/uploads/japan-travel/99.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/100.JPG" alt=""><br><img src="/uploads/japan-travel/101.JPG" alt=""><br><img src="/uploads/japan-travel/102.JPG" alt=""><br><img src="/uploads/japan-travel/103.JPG" alt=""><br><img src="/uploads/japan-travel/104.JPG" alt=""><br><img src="/uploads/japan-travel/105.JPG" alt=""><br><img src="/uploads/japan-travel/106.JPG" alt=""><br><img src="/uploads/japan-travel/107.JPG" alt=""><br><img src="/uploads/japan-travel/108.JPG" alt=""><br><img src="/uploads/japan-travel/109.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/110.JPG" alt=""><br><img src="/uploads/japan-travel/111.JPG" alt=""><br><img src="/uploads/japan-travel/112.JPG" alt=""><br><img src="/uploads/japan-travel/113.JPG" alt=""><br><img src="/uploads/japan-travel/114.JPG" alt=""><br><img src="/uploads/japan-travel/115.JPG" alt=""><br><img src="/uploads/japan-travel/116.JPG" alt=""><br><img src="/uploads/japan-travel/117.JPG" alt=""><br><img src="/uploads/japan-travel/118.JPG" alt=""><br><img src="/uploads/japan-travel/119.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/120.JPG" alt=""><br><img src="/uploads/japan-travel/121.JPG" alt=""><br><img src="/uploads/japan-travel/122.JPG" alt=""><br><img src="/uploads/japan-travel/123.JPG" alt=""><br><img src="/uploads/japan-travel/124.JPG" alt=""><br><img src="/uploads/japan-travel/125.JPG" alt=""><br><img src="/uploads/japan-travel/126.JPG" alt=""><br><img src="/uploads/japan-travel/127.JPG" alt=""><br><img src="/uploads/japan-travel/128.JPG" alt=""><br><img src="/uploads/japan-travel/129.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/130.JPG" alt=""><br><img src="/uploads/japan-travel/131.JPG" alt=""><br><img src="/uploads/japan-travel/132.JPG" alt=""><br><img src="/uploads/japan-travel/133.JPG" alt=""><br><img src="/uploads/japan-travel/134.JPG" alt=""><br><img src="/uploads/japan-travel/135.JPG" alt=""><br><img src="/uploads/japan-travel/136.JPG" alt=""><br><img src="/uploads/japan-travel/137.JPG" alt=""><br><img src="/uploads/japan-travel/138.JPG" alt=""><br><img src="/uploads/japan-travel/139.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/140.JPG" alt=""><br><img src="/uploads/japan-travel/141.JPG" alt=""><br><img src="/uploads/japan-travel/142.JPG" alt=""><br><img src="/uploads/japan-travel/143.JPG" alt=""><br><img src="/uploads/japan-travel/144.JPG" alt=""><br><img src="/uploads/japan-travel/145.JPG" alt=""><br><img src="/uploads/japan-travel/146.JPG" alt=""><br><img src="/uploads/japan-travel/147.JPG" alt=""><br><img src="/uploads/japan-travel/148.JPG" alt=""><br><img src="/uploads/japan-travel/149.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/150.JPG" alt=""><br><img src="/uploads/japan-travel/151.JPG" alt=""><br><img src="/uploads/japan-travel/152.JPG" alt=""><br><img src="/uploads/japan-travel/153.JPG" alt=""><br><img src="/uploads/japan-travel/154.JPG" alt=""><br><img src="/uploads/japan-travel/155.JPG" alt=""><br><img src="/uploads/japan-travel/156.JPG" alt=""><br><img src="/uploads/japan-travel/157.JPG" alt=""><br><img src="/uploads/japan-travel/158.JPG" alt=""><br><img src="/uploads/japan-travel/159.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/160.JPG" alt=""><br><img src="/uploads/japan-travel/161.JPG" alt=""><br><img src="/uploads/japan-travel/162.JPG" alt=""><br><img src="/uploads/japan-travel/163.JPG" alt=""><br><img src="/uploads/japan-travel/164.JPG" alt=""><br><img src="/uploads/japan-travel/165.JPG" alt=""><br><img src="/uploads/japan-travel/166.JPG" alt=""><br><img src="/uploads/japan-travel/167.JPG" alt=""><br><img src="/uploads/japan-travel/168.JPG" alt=""><br><img src="/uploads/japan-travel/169.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/170.JPG" alt=""><br><img src="/uploads/japan-travel/171.JPG" alt=""><br><img src="/uploads/japan-travel/172.JPG" alt=""><br><img src="/uploads/japan-travel/173.JPG" alt=""><br><img src="/uploads/japan-travel/174.JPG" alt=""><br><img src="/uploads/japan-travel/175.JPG" alt=""><br><img src="/uploads/japan-travel/176.JPG" alt=""><br><img src="/uploads/japan-travel/177.JPG" alt=""><br><img src="/uploads/japan-travel/178.JPG" alt=""><br><img src="/uploads/japan-travel/179.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/180.JPG" alt=""><br><img src="/uploads/japan-travel/181.JPG" alt=""><br><img src="/uploads/japan-travel/182.JPG" alt=""><br><img src="/uploads/japan-travel/183.JPG" alt=""><br><img src="/uploads/japan-travel/184.JPG" alt=""><br><img src="/uploads/japan-travel/185.JPG" alt=""><br><img src="/uploads/japan-travel/186.JPG" alt=""><br><img src="/uploads/japan-travel/187.JPG" alt=""><br><img src="/uploads/japan-travel/188.JPG" alt=""><br><img src="/uploads/japan-travel/189.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/190.JPG" alt=""><br><img src="/uploads/japan-travel/191.JPG" alt=""><br><img src="/uploads/japan-travel/192.JPG" alt=""><br><img src="/uploads/japan-travel/193.JPG" alt=""><br><img src="/uploads/japan-travel/194.JPG" alt=""><br><img src="/uploads/japan-travel/195.JPG" alt=""><br><img src="/uploads/japan-travel/196.JPG" alt=""><br><img src="/uploads/japan-travel/197.JPG" alt=""><br><img src="/uploads/japan-travel/198.JPG" alt=""><br><img src="/uploads/japan-travel/199.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/200.JPG" alt=""><br><img src="/uploads/japan-travel/201.JPG" alt=""><br><img src="/uploads/japan-travel/202.JPG" alt=""><br><img src="/uploads/japan-travel/203.JPG" alt=""><br><img src="/uploads/japan-travel/204.JPG" alt=""><br><img src="/uploads/japan-travel/205.JPG" alt=""><br><img src="/uploads/japan-travel/206.JPG" alt=""><br><img src="/uploads/japan-travel/207.JPG" alt=""><br><img src="/uploads/japan-travel/208.JPG" alt=""><br><img src="/uploads/japan-travel/209.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/210.JPG" alt=""><br><img src="/uploads/japan-travel/211.JPG" alt=""><br><img src="/uploads/japan-travel/212.JPG" alt=""><br><img src="/uploads/japan-travel/213.JPG" alt=""><br><img src="/uploads/japan-travel/214.JPG" alt=""><br><img src="/uploads/japan-travel/215.JPG" alt=""><br><img src="/uploads/japan-travel/216.JPG" alt=""><br><img src="/uploads/japan-travel/217.JPG" alt=""><br><img src="/uploads/japan-travel/218.JPG" alt=""><br><img src="/uploads/japan-travel/219.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/220.JPG" alt=""><br><img src="/uploads/japan-travel/221.JPG" alt=""><br><img src="/uploads/japan-travel/222.JPG" alt=""><br><img src="/uploads/japan-travel/223.JPG" alt=""><br><img src="/uploads/japan-travel/224.JPG" alt=""><br><img src="/uploads/japan-travel/225.JPG" alt=""><br><img src="/uploads/japan-travel/226.JPG" alt=""><br><img src="/uploads/japan-travel/227.JPG" alt=""><br><img src="/uploads/japan-travel/228.JPG" alt=""><br><img src="/uploads/japan-travel/229.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/230.JPG" alt=""><br><img src="/uploads/japan-travel/231.JPG" alt=""><br><img src="/uploads/japan-travel/232.JPG" alt=""><br><img src="/uploads/japan-travel/233.JPG" alt=""><br><img src="/uploads/japan-travel/234.JPG" alt=""><br><img src="/uploads/japan-travel/235.JPG" alt=""><br><img src="/uploads/japan-travel/236.JPG" alt=""><br><img src="/uploads/japan-travel/237.JPG" alt=""><br><img src="/uploads/japan-travel/238.JPG" alt=""><br><img src="/uploads/japan-travel/239.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/240.JPG" alt=""><br><img src="/uploads/japan-travel/241.JPG" alt=""><br><img src="/uploads/japan-travel/242.JPG" alt=""><br><img src="/uploads/japan-travel/243.JPG" alt=""><br><img src="/uploads/japan-travel/244.JPG" alt=""><br><img src="/uploads/japan-travel/245.JPG" alt=""><br><img src="/uploads/japan-travel/246.JPG" alt=""><br><img src="/uploads/japan-travel/247.JPG" alt=""><br><img src="/uploads/japan-travel/248.JPG" alt=""><br><img src="/uploads/japan-travel/249.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/250.JPG" alt=""><br><img src="/uploads/japan-travel/251.JPG" alt=""><br><img src="/uploads/japan-travel/252.JPG" alt=""><br><img src="/uploads/japan-travel/253.JPG" alt=""><br><img src="/uploads/japan-travel/254.JPG" alt=""><br><img src="/uploads/japan-travel/255.JPG" alt=""><br><img src="/uploads/japan-travel/256.JPG" alt=""><br><img src="/uploads/japan-travel/257.JPG" alt=""><br><img src="/uploads/japan-travel/258.JPG" alt=""><br><img src="/uploads/japan-travel/259.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/260.JPG" alt=""><br><img src="/uploads/japan-travel/261.JPG" alt=""><br><img src="/uploads/japan-travel/262.JPG" alt=""><br><img src="/uploads/japan-travel/263.JPG" alt=""><br><img src="/uploads/japan-travel/264.JPG" alt=""><br><img src="/uploads/japan-travel/265.JPG" alt=""><br><img src="/uploads/japan-travel/266.JPG" alt=""><br><img src="/uploads/japan-travel/267.JPG" alt=""><br><img src="/uploads/japan-travel/268.JPG" alt=""><br><img src="/uploads/japan-travel/269.JPG" alt=""></p>
<p><img src="/uploads/japan-travel/270.JPG" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;从羽田机场到酒店&lt;/li&gt;
&lt;li&gt;秋叶原&lt;/li&gt;
&lt;li&gt;从银座回酒店&lt;/li&gt;
&lt;li&gt;浅草寺&lt;/li&gt;
&lt;li&gt;新宿&lt;/li&gt;
&lt;li&gt;涉谷&lt;/li&gt;
&lt;li&gt;藤子不二雄博物馆&lt;/li&gt;
&lt;li&gt;镰仓&lt;/li&gt;
&lt;li&gt;台场&lt;/li&gt;
&lt;li&gt;东京迪斯尼
    
    </summary>
    
      <category term="travel" scheme="http://ming1016.github.io/categories/travel/"/>
    
    
      <category term="Japan" scheme="http://ming1016.github.io/tags/Japan/"/>
    
  </entry>
  
  <entry>
    <title>如何对 iOS 启动阶段耗时进行分析</title>
    <link href="http://ming1016.github.io/2019/12/07/how-to-analyze-startup-time-cost-in-ios/"/>
    <id>http://ming1016.github.io/2019/12/07/how-to-analyze-startup-time-cost-in-ios/</id>
    <published>2019-12-07T01:25:33.000Z</published>
    <updated>2021-04-11T14:42:09.919Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/01.png" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>启动优化一役后，超预期将所负责的 App 双端启动的耗时都降低了65%以上，iOS 在iPhone7上速度达到了400毫秒以内。就像产品们用后说的，快到不习惯。由于 App 日活用户过亿，算一下每天为用户省下的时间，还是蛮有成就感的。</p>
<p><img src="/uploads/how-to-analyze-startup-time-cost-in-ios/01.jpeg" alt=""></p>
<h2 id="启动阶段性能多维度分析"><a href="#启动阶段性能多维度分析" class="headerlink" title="启动阶段性能多维度分析"></a>启动阶段性能多维度分析</h2><p>要优化，先要做到的是对启动阶段各个性能纬度做分析，包括主线程耗时、CPU、内存、I/O、网络。这样才能够更加全面的掌握启动阶段的开销，找出不合理的方法调用。启动越快，更多的方法调用就应该做成按需执行，将启动压力分摊，只留下那些启动后方法都会依赖的方法和库的初始化，比如网络库、Crash 库等。而剩下那些需要预加载的功能可以放到启动阶段后再执行。</p>
<p>启动有哪几种类型，启动有哪些阶段呢？</p>
<p>启动类型分为：</p>
<ul>
<li>Cold：App 重启后启动，不在内存里也没有进程存在。</li>
<li>Warm：App 最近结束后再启动，有部分在内存但没有进程存在。</li>
<li>Resume：App 没结束，只是暂停，全在内存中，进程也存在。</li>
</ul>
<p>分析阶段一般都是针对 Cold 类型进行分析，目的就是要让测试环境稳定。为了稳定测试环境有时还需要找些稳定的机型，对于 iOS 来说iPhone7性能中等，稳定性也不错就很适合，Android 的 Vivo 系列也相对稳定，华为和小米系列数据波动就比较大。除了机型外控制测试机温度也很重要，一旦温度过高系统还会降频执行影响测试数据。有时候还会置飞行模式采用 Mock 网络请求的方式来减少不稳定的网络影响测试数据。最好时重启后退 iCloud 账号，放置一段时间再测，更加准确些。</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/05.png" alt=""></p>
<p>了解启动的阶段目的就是聚焦范围，从用户体验上来确定哪个阶段要快，以便能够让用户可视和响应用户操作的时间更快。</p>
<p>简单来说 iOS 启动分为加载 Mach-O 和运行时初始化过程，加载 Mach-O 会先判断加载的文件是不是 Mach-O，通过文件第一个字节，也叫魔数来判断，当是下面四种时可以判定是 Mach-O 文件：</p>
<ul>
<li>0xfeedface 对应的 loader.h 里的宏是 MH_MAGIC</li>
<li>0xfeedfact 宏是 MH_MAGIC_64</li>
<li>NXSwapInt(MH_MAGIC) 宏 MH_GIGAM</li>
<li>NXSwapInt(MH_MAGIC_64) 宏 MH_GIGAM_64</li>
</ul>
<p>Mach-O 分为主要分为 中间对象文件（MH_OBJECT）、可执行二进制（MH_EXECUTE）、VM 共享库文件（MH_FVMLIB）、Crash 产生的 Core 文件（MH_CORE）、preload（MH_PRELOAD）、动态共享库（MH_DYLIB）、动态链接器（MH_DYLINKER）、静态链接文件（MH_DYLIB_STUB）、符号文件和调试信息（MH_DSYM）这几种。确定是 Mach-O 后，内核会 fork 一个进程，execve 开始加载。检查 Mach-O Header。随后加载 dyld 和程序到 Load Command 地址空间。通过 dyld_stub_binder 开始执行 dyld，dyld 会进行 rebase、binding、lazy binding、导出符号，也可以通过 DYLD_INSERT_LIBRARIES 进行 hook。dyld_stub_binder 给偏移量到 dyld 解释特殊字节码 Segment 中，也就是真实地址，把真实地址写入到 la_symbol_ptr 里，跳转时通过 stub 的 jump 指令跳转到真实地址。 dyld 加载所有依赖库，将动态库导出的 trie 结构符号执行符号绑定，也就是 non lazybinding，绑定解析其他模块功能和数据引用过程，就是导入符号。</p>
<p>Trie 也叫数字树或前缀树，是一种搜索树。查找复杂度 O(m)，m 是字符串的长度。和散列表相比，散列最差复杂度是 O(N)，一般都是 O(1)，用 O(m)时间评估 hash。散列缺点是会分配一大块内存，内容越多所占内存越大。Trie 不仅查找快，插入和删除都很快，适合存储预测性文本或自动完成词典。为了进一步优化所占空间，可以将 Trie 这种树形的确定性有限自动机压缩成确定性非循环有限状态自动体（DAFSA），其空间小，做法是会压缩相同分支。对于更大内容，还可以做更进一步的优化，比如使用字母缩减的实现技术，把原来的字符串重新解释为较长的字符串；使用单链式列表，节点设计为由符号、子节点、下一个节点来表示；将字母表数组存储为代表 ASCII 字母表的256位的位图。</p>
<p>尽管 Trie 对于性能会做很多优化，但是符号过多依然会增加性能消耗，对于动态库导出的符号不宜太多，尽量保持公共符号少，私有符号集丰富。这样维护起来也方便，版本兼容性也好，还能优化动态加载程序到进程的时间。</p>
<p>然后执行 attribute 的 constructor 函数。举个例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;prepare&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((destructor))</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showHeader</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;header&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ming@mingdeMacBook-Pro macho_demo % ./main <span class="string">&quot;hi&quot;</span></span><br><span class="line">prepare</span><br><span class="line">hi</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>运行时初始化过程 分为：</p>
<ul>
<li>加载类扩展</li>
<li>加载 C++静态对象</li>
<li>调用+load 函数</li>
<li>执行 main 函数</li>
<li>Application 初始化，到 applicationDidFinishLaunchingWithOptions 执行完</li>
<li>初始化帧渲染，到 viewDidAppear 执行完，用户可见可操作。</li>
</ul>
<p>过程概括起来如下图：</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/02.png" alt=""></p>
<p>也就是说对启动阶段的分析以 viewDidAppear 为截止。这次优化之前已经对 Application 初始化之前做过优化，效果并不明显，没有本质的提高，所以这次主要针对 Application 初始化到 viewDidAppear 这个阶段各个性能多纬度进行分析。多维度具体包含内容如下图：</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/03.png" alt=""></p>
<p>工具的选择其实目前看来是很多的，Apple 提供的 System Trace 会提供全面系统的行为，可以显示底层系统线程和内存调度情况，分析锁、线程、内存、系统调用等问题。总的来说，通过 System Trace 你能清楚知道每时每刻 App 对系统资源使用情况。</p>
<p>System Trace 能查看线程的状态，可以了解高优线程使用相对于 CPU 数量是否合理，可以看到线程在执行、挂起、上下文切换、被打断还是被抢占的情况。虚拟内存使用产生的耗时也能看到，比如分配物理内存，内存解压缩，无缓存时进行缓存的耗时等。甚至是发热情况也能看到。</p>
<p>System Trace 还提供手动打点进行信息显式，在你的代码中 导入 sys/kdebug_signpost.h 后，配对 kdebug_signpost_start 和 kdebug_signpost_end 就可以了。这两个方法有五个参数，第一个是 id，最后一个是颜色，中间都是预留字段。</p>
<p>Xcode11开始 XCTest 还提供了测量性能的 Api。苹果在2019年 WWDC 启动优化专题 <a href="https://developer.apple.com/videos/play/wwdc2019/423/">Optimizing App Launch - WWDC 2019 - Videos - Apple Developer</a> 上也介绍了 Instruments 里的最新模板 App launch 如何分析启动性能。但是要想达到对启动数据进行留存取均值、Diff、过滤、关联分析等自动化操作，App launch 目前还没法做到。</p>
<h3 id="主线程耗时"><a href="#主线程耗时" class="headerlink" title="主线程耗时"></a>主线程耗时</h3><p>多个维度性能纬度分析中最重要，最终用户体感到的是主线程耗时分析。对主线程方法耗时可以直接使用<a href="https://everettjf.github.io/2019/05/06/messier/">Messier - 简单易用的Objective-C方法跟踪工具 - everettjf - 首先很有趣</a><br>生成 trace json 进行分析，或者参看这个代码<a href="https://github.com/ming1016/GCDFetchFeed/blob/master/GCDFetchFeed/GCDFetchFeed/Lib/SMLagMonitor/SMCallTraceCore.c">GCDFetchFeed/SMCallTraceCore.c at master · ming1016/GCDFetchFeed · GitHub</a>，自己手动 hook objc_msgSend 生成一份Objective-C 方法耗时数据进行分析。还有种插桩方式，可以解析 IR（加快编译速度），然后在每个方法前后插入耗时统计函数。文章后面我会着重介绍如何开发工具进一步分析这份数据，以达到监控启动阶段方法耗时的目的。</p>
<p>hook 所有的方法调用，对详细分析时很有用，不过对于整个启动时间影响很大，要想获取启动每个阶段更准确的时间消耗还需要依赖手动埋点。为了更好的分析启动耗时问题，手动埋点也会埋的越来越多，也会影响启动时间精确度，特别是当团队很多，模块很多时，问题会突出。但，每个团队在排查启动耗时往往只会关注自己或相关某几个模块的分析，基于此，可以把不同模块埋点分组，灵活组合，这样就可以照顾到多种需求了。</p>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>为什么分析启动慢除了分析主线程方法耗时外，还要分析其它纬度的性能呢？</p>
<p>我们先看看启动慢的表现，启动慢意味着界面响应慢、网络慢（数据量大、请求数多）、CPU 超负荷降频（并行任务多、运算多），可以看出影响启动的因素很多，还需要全面考虑。</p>
<p>对于 CPU 来说，WWDC 的 <a href="https://developer.apple.com/videos/play/wwdc2018/228/">What’s New in Energy Debugging - WWDC 2018 - Videos - Apple Developer</a> 里介绍了用 Energy Log 来查 CPU 耗电，当前台三分钟或后台一分钟 CPU 线程连续占用80%以上就判定为耗电，同时记录耗电线程堆栈供分析。还有一个 <a href="https://developer.apple.com/documentation/xcode/improving_your_app_s_performance">MetrickKit</a> 专门用来收集电源和性能统计数据，每24小时就会对收集的数据进行汇总上报，Mattt 在 NShipster 网站上也发了篇文章<a href="https://nshipster.com/metrickit/">MetricKit - NSHipster</a>专门进行了介绍。那么 CPU 的详细使用情况如何获取呢？也就是说哪个方法用了多少 CPU。</p>
<p>有好几种获取详细 CPU 使用情况的方法。线程是计算机资源调度和分配的基本单位。CPU 使用情况会提现到线程这样的基本单位上。task_theads 的 act_list 数组包含所有线程，使用 thread_info 的接口可以返回线程的基本信息，这些信息定义在 thread_basic_info_t 结构体中。这个结构体内的信息包含了线程运行时间、运行状态以及调度优先级，其中也包含了 CPU 使用信息 cpu_usage。获取方式参看 <a href="https://stackoverflow.com/questions/43866416/get-detailed-ios-cpu-usage-with-different-states">objective c - Get detailed iOS CPU usage with different states - Stack Overflow</a>。GT <a href="https://github.com/Tencent/GT">GitHub - Tencent/GT: GT (Great Tit) is a portable debugging tool for bug hunting and performance tuning on smartphones anytime and anywhere just as listening music with Walkman. GT can act as the Integrated Debug Environment by directly running on smartphones.</a> 里也有获取 CPU 的代码。</p>
<p>整体 CPU 占用率可以通过 host_statistics 函数可以取到 host_cpu_load_info，其中 cpu_ticks 数组是 CPU 运行的时钟脉冲数量。通过 cpu_ticks 数组里的状态，可以分别获取 CPU_STATE_USER、CPU_STATE_NICE、CPU_STATE_SYSTEM 这三个表示使用中的状态，除以整体 CPU 就可以取到 CPU 的占比。通过 NSProcessInfo 的 activeProcessorCount 还可以得到 CPU 的核数。线上数据分析时会发现相同机型和系统的手机，性能表现却截然不同，这是由于手机过热或者电池损耗过大后系统降低了 CPU 频率所致。所以如果取得 CPU 频率后也可以针对那些降频的手机来进行针对性的优化，以保证流畅体验。获取方式可以参考 <a href="https://github.com/zenny-chen/CPU-Dasher-for-iOS">GitHub - zenny-chen/CPU-Dasher-for-iOS: CPU Dasher for iOS source code. It only supports ARMv7 and ARMv7s architectures.</a></p>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>要想获取 App 真实的内存使用情况可以参看 WebKit 的源码，<a href="https://github.com/WebKit/webkit/blob/52bc6f0a96a062cb0eb76e9a81497183dc87c268/Source/WTF/wtf/cocoa/MemoryFootprintCocoa.cpp">webkit/MemoryFootprintCocoa.cpp at 52bc6f0a96a062cb0eb76e9a81497183dc87c268 · WebKit/webkit · GitHub</a> 。JetSam会判断 App 使用内存情况，超出阈值就会杀死 App，JetSam 获取阈值的代码在 <a href="https://github.com/apple/darwin-xnu/blob/0a798f6738bc1db01281fc08ae024145e84df927/bsd/kern/kern_memorystatus.c">darwin-xnu/kern_memorystatus.c at 0a798f6738bc1db01281fc08ae024145e84df927 · apple/darwin-xnu · GitHub</a>。整个设备物理内存大小可以通过 NSProcessInfo 的 physicalMemory 来获取。</p>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>对于网络监控可以使用 Fishhook 这样的工具 Hook 网络底层库 CFNetwork。网络的情况比较复杂，所以需要定些和时间相关的关键的指标，指标如下：</p>
<ul>
<li>DNS 时间</li>
<li>SSL 时间</li>
<li>首包时间</li>
<li>响应时间</li>
</ul>
<p>有了这些指标才能够有助于更好的分析网络问题。启动阶段的网络请求是非常多的，所以 HTTP 的性能是非常要注意的。以下是 WWDC 网络相关的 Session：</p>
<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2015/719/">Your App and Next Generation Networks - WWDC 2015 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2015/711/">Networking with NSURLSession - WWDC 2015 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2016/714/">Networking for the Modern Internet - WWDC 2016 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2017/707/">Advances in Networking, Part 1 - WWDC 2017 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2017/709/">Advances in Networking, Part 2 - WWDC 2017 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2018/714/">Optimizing Your App for Today’s Internet - WWDC 2018 - Videos - Apple Developer</a></li>
</ul>
<h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><p>对于 I/O 可以使用 <a href="https://www.frida.re/">Frida • A world-class dynamic instrumentation framework | Inject JavaScript to explore native apps on Windows, macOS, GNU/Linux, iOS, Android, and QNX</a> 这种动态二进制插桩技术，在程序运行时去插入自定义代码获取 I/O 的耗时和处理的数据大小等数据。Frida 还能够在其它平台使用。</p>
<p>关于多维度分析更多的资料可以看看历届 WWDC 的介绍。下面我列下16年来 WWDC 关于启动优化的 Session，每场都很精彩。</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/04.png" alt=""></p>
<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2016/418/">Using Time Profiler in Instruments - WWDC 2016 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2016/719/">Optimizing I/O for Performance and Battery Life - WWDC 2016 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2016/406/">Optimizing App Startup Time - WWDC 2016 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2017/413/">App Startup Time: Past, Present, and Future - WWDC 2017 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2018/407/">Practical Approaches to Great App Performance - WWDC 2018 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/423/">Optimizing App Launch - WWDC 2019 - Videos - Apple Developer</a> </li>
</ul>
<h2 id="延后任务管理"><a href="#延后任务管理" class="headerlink" title="延后任务管理"></a>延后任务管理</h2><p>经过前面所说的对主线程耗时方法和各个纬度性能分析后，对于那些分析出来没必要在启动阶段执行的方法，可以做成按需或延后执行。<br>任务延后的处理不能粗犷的一口气在启动完成后在主线程一起执行，那样用户仅仅只是看到了页面，依然没法响应操作。那该怎么做呢？套路一般是这样，创建四个队列，分别是：</p>
<ul>
<li>异步串行队列</li>
<li>异步并行队列</li>
<li>闲时主线程串行队列</li>
<li>闲时异步串行队列</li>
</ul>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/06.png" alt=""></p>
<p>有依赖关系的任务可以放到异步串行队列中执行。异步并行队列可以分组执行，比如使用 dispatch_group，然后对每组任务数量进行限制，避免 CPU、线程和内存瞬时激增影响主线程用户操作，定义有限数量的串行队列，每个串行队列做特定的事情，这样也能够避免性能消耗短时间突然暴涨引起无法响应用户操作。使用 dispatch_semaphore_t 在信号量阻塞主队列时容易出现优先级反转，需要减少使用，确保QoS传播。可以用dispatch group 替代，性能一样，功能不差。异步编程可以直接 GCD 接口来写，也可以使用阿里的协程框架 coobjc <a href="https://github.com/alibaba/coobjc">coobjc</a>。</p>
<p>闲时队列实现方式是监听主线程 runloop 状态，在 kCFRunLoopBeforeWaiting 时开始执行闲时队列里的任务，在 kCFRunLoopAfterWaiting 时停止。</p>
<h2 id="优化后如何保持？"><a href="#优化后如何保持？" class="headerlink" title="优化后如何保持？"></a>优化后如何保持？</h2><p>攻易守难，就像刚到新团队时将包大小减少了48兆，但是一年多一直能够守住除了决心还需要有手段。对于启动优化来说，将各个性能纬度通过监控的方式盯住是必要的，但是发现问题后快速、便捷的定位到问题还是需要找些突破口。我的思路是将启动阶段方法耗时多的按照时间线一条一条排出来，每条包括方法名、方法层级、所属类、所属模块、维护人。考虑到便捷性，最好还能方便的查看方法代码内容。</p>
<p>接下来我通过开发一个工具，跟你详细说说怎么实现这样的效果。设计最终希望展示内容如下：</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/07.png" alt=""></p>
<h3 id="解析-json"><a href="#解析-json" class="headerlink" title="解析 json"></a>解析 json</h3><p>如前面所说在输出一份 Chrome trace 规范的方法耗时 json 后，先要解析这份数据。这份 json 数据类似下面的样子：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;[SMVeilweaa]upVeilState:&quot;</span>,<span class="attr">&quot;cat&quot;</span>:<span class="string">&quot;catname&quot;</span>,<span class="attr">&quot;ph&quot;</span>:<span class="string">&quot;B&quot;</span>,<span class="attr">&quot;pid&quot;</span>:<span class="number">2381</span>,<span class="attr">&quot;tid&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;ts&quot;</span>:<span class="number">21</span>&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;[SMVeilweaa]tatLaunchState:&quot;</span>,<span class="attr">&quot;cat&quot;</span>:<span class="string">&quot;catname&quot;</span>,<span class="attr">&quot;ph&quot;</span>:<span class="string">&quot;B&quot;</span>,<span class="attr">&quot;pid&quot;</span>:<span class="number">2381</span>,<span class="attr">&quot;tid&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;ts&quot;</span>:<span class="number">4557</span>&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;[SMVeilweaa]tatTimeStamp:state:&quot;</span>,<span class="attr">&quot;cat&quot;</span>:<span class="string">&quot;catname&quot;</span>,<span class="attr">&quot;ph&quot;</span>:<span class="string">&quot;B&quot;</span>,<span class="attr">&quot;pid&quot;</span>:<span class="number">2381</span>,<span class="attr">&quot;tid&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;ts&quot;</span>:<span class="number">4686</span>&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;[SMVeilweaa]tatTimeStamp:state:&quot;</span>,<span class="attr">&quot;cat&quot;</span>:<span class="string">&quot;catname&quot;</span>,<span class="attr">&quot;ph&quot;</span>:<span class="string">&quot;E&quot;</span>,<span class="attr">&quot;pid&quot;</span>:<span class="number">2381</span>,<span class="attr">&quot;tid&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;ts&quot;</span>:<span class="number">4727</span>&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;[SMVeilweaa]tatLaunchState:&quot;</span>,<span class="attr">&quot;cat&quot;</span>:<span class="string">&quot;catname&quot;</span>,<span class="attr">&quot;ph&quot;</span>:<span class="string">&quot;E&quot;</span>,<span class="attr">&quot;pid&quot;</span>:<span class="number">2381</span>,<span class="attr">&quot;tid&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;ts&quot;</span>:<span class="number">5732</span>&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;[SMVeilweaa]upVeilState:&quot;</span>,<span class="attr">&quot;cat&quot;</span>:<span class="string">&quot;catname&quot;</span>,<span class="attr">&quot;ph&quot;</span>:<span class="string">&quot;E&quot;</span>,<span class="attr">&quot;pid&quot;</span>:<span class="number">2381</span>,<span class="attr">&quot;tid&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;ts&quot;</span>:<span class="number">5815</span>&#125;,</span><br><span class="line">…</span><br></pre></td></tr></table></figure><br>通过 Chrome 的 <a href="https://chromium.googlesource.com/catapult/+/HEAD/tracing/README.md">Trace-Viewer</a> 可以生成一个火焰图。其中 name 字段包含了类、方法和参数的信息，cat 字段可以加入其它性能数据，ph 为 B 表示方法开始，为 E 表示方法结束，ts 字段表示。</p>
<h4 id="json-分词"><a href="#json-分词" class="headerlink" title="json 分词"></a>json 分词</h4><p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/08.png" alt=""></p>
<p>读取 json 文件<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据文件路径返回文件内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">fileContent</span>(<span class="params">path</span>: <span class="type">String</span>)</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">try</span> <span class="type">String</span>(contentsOfFile: path, encoding: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> “”</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bundlePath <span class="operator">=</span> <span class="type">Bundle</span>.main.path(forResource: “startTrace”, ofType: “json”)</span><br><span class="line"><span class="keyword">let</span> jsonPath <span class="operator">=</span> bundlePath <span class="operator">??</span> “”</span><br><span class="line"><span class="keyword">let</span> jsonContent <span class="operator">=</span> <span class="type">FileHandle</span>.fileContent(path: jsonPath)</span><br></pre></td></tr></table></figure></p>
<p>jsonContent 就是 json 内容字符串。写一个字符切割函数将字符串按照自定义符号集来切割。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">allTkFast</span>(<span class="params">operaters</span>:<span class="type">String</span>)</span> -&gt; [<span class="type">Token</span>] &#123;</span><br><span class="line">    <span class="keyword">var</span> nText <span class="operator">=</span> text.replacingOccurrences(of: “ “, with: “ starmingspace “)</span><br><span class="line">    nText <span class="operator">=</span> nText.replacingOccurrences(of: “\n”, with: “ starmingnewline “)</span><br><span class="line">    <span class="keyword">let</span> scanner <span class="operator">=</span> <span class="type">Scanner</span>(string: nText)</span><br><span class="line">    <span class="keyword">var</span> tks <span class="operator">=</span> [<span class="type">Token</span>]()</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">set</span> <span class="operator">=</span> <span class="type">CharacterSet</span>()</span><br><span class="line">    <span class="keyword">set</span>.insert(charactersIn: operaters)</span><br><span class="line">    <span class="keyword">set</span>.formUnion(<span class="type">CharacterSet</span>.whitespacesAndNewlines)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="operator">!</span>scanner.isAtEnd &#123;</span><br><span class="line">        <span class="keyword">for</span> operater <span class="keyword">in</span> operaters &#123;</span><br><span class="line">            <span class="keyword">let</span> opStr <span class="operator">=</span> operater.description</span><br><span class="line">            <span class="keyword">if</span> (scanner.scanString(opStr) <span class="operator">!=</span> <span class="literal">nil</span>) &#123;</span><br><span class="line">                tks.append(.id(opStr))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> result:<span class="type">NSString</span>?</span><br><span class="line">        result <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.scanUpToCharacters(from: <span class="keyword">set</span>) <span class="operator">!=</span> <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> resultString <span class="operator">=</span> result<span class="operator">!</span> <span class="keyword">as</span> <span class="type">String</span></span><br><span class="line">            <span class="keyword">if</span> resultString <span class="operator">==</span> “starmingnewline” &#123;</span><br><span class="line">                tks.append(.newLine)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> resultString <span class="operator">==</span> “starmingspace” &#123;</span><br><span class="line">                tks.append(.space)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tks.append(.id(result<span class="operator">!</span> <span class="keyword">as</span> <span class="type">String</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tks.append(.eof)</span><br><span class="line">    <span class="keyword">return</span> tks</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>将切割的字符保存为 Token 结构体的一个个 token。Token 结构体定义如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Token</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> eof</span><br><span class="line">    <span class="keyword">case</span> newLine</span><br><span class="line">    <span class="keyword">case</span> space</span><br><span class="line">    <span class="keyword">case</span> comments(<span class="type">String</span>)      <span class="comment">// 注释</span></span><br><span class="line">    <span class="keyword">case</span> constant(<span class="type">Constant</span>)    <span class="comment">// float、int</span></span><br><span class="line">    <span class="keyword">case</span> id(<span class="type">String</span>)            <span class="comment">// string</span></span><br><span class="line">    <span class="keyword">case</span> string(<span class="type">String</span>)        <span class="comment">// 代码中引号内字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Constant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> string(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> integer(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> float(<span class="type">Float</span>)</span><br><span class="line">    <span class="keyword">case</span> boolean(<span class="type">Bool</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>代码中的 eof 表示 token 是文件结束，newLine 是换行 token。Constant 是枚举关联值，通过枚举关联值可以使枚举能够具有更多层级。后面还需要将枚举值进行判等比较，所以还需要扩展枚举的 Equatable 协议实现：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Token</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">==</span> (<span class="params">lhs</span>: <span class="type">Token</span>, <span class="params">rhs</span>: <span class="type">Token</span>)</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (lhs, rhs) &#123;</span><br><span class="line">        <span class="keyword">case</span> (.eof, .eof):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">case</span> (.newLine, .newLine):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">case</span> (.space, .space):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> (.constant(left), .constant(right)):</span><br><span class="line">            <span class="keyword">return</span> left <span class="operator">==</span> right</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> (.comments(left), .comments(right)):</span><br><span class="line">            <span class="keyword">return</span> left <span class="operator">==</span> right</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> (.id(left), .id(right)):</span><br><span class="line">            <span class="keyword">return</span> left <span class="operator">==</span> right</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> (.string(left), .string(right)):</span><br><span class="line">            <span class="keyword">return</span> left <span class="operator">==</span> right</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通用的 token 结构解析完成。接下来就是设计一个 json 特有的 token 结构。对于 json 来说换行和空格可以过滤掉，写个函数过滤换行和空格的 token：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">allTkFastWithoutNewLineAndWhitespace</span>(<span class="params">operaters</span>:<span class="type">String</span>)</span> -&gt; [<span class="type">Token</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> allToken <span class="operator">=</span> allTkFast(operaters: operaters)</span><br><span class="line">    <span class="keyword">let</span> flAllToken <span class="operator">=</span> allToken.filter &#123;</span><br><span class="line">        <span class="variable">$0</span> <span class="operator">!=</span> .newLine</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> fwAllToken <span class="operator">=</span> flAllToken.filter &#123;</span><br><span class="line">        <span class="variable">$0</span> <span class="operator">!=</span> .space</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fwAllToken</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>json 的操作符有：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;[]”:,</span><br></pre></td></tr></table></figure>
<p>所以 operaters 参数可以是这些操作符。完整的 Lexer 类代码在 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/Core/Lexer.swift">MethodTraceAnalyze/Lexer.swift</a>。使用 Lexer 类的 allTkFastWithoutNewLineAndWhitespace 方法可以取得 token 集合。</p>
<h4 id="JSONToken"><a href="#JSONToken" class="headerlink" title="JSONToken"></a>JSONToken</h4><p>为了转成 json 的 token，我先设计一个 json token 的结构 JSONToken。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">JSONToken</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> type: <span class="type">JSONTokenType</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> value: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">JSONTokenType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> startDic   <span class="comment">// &#123;</span></span><br><span class="line">    <span class="keyword">case</span> endDic     <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">case</span> startArray <span class="comment">// [</span></span><br><span class="line">    <span class="keyword">case</span> endArray   <span class="comment">// ]</span></span><br><span class="line">    <span class="keyword">case</span> key        <span class="comment">// key</span></span><br><span class="line">    <span class="keyword">case</span> value      <span class="comment">// value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据 json 的本身设计，主要分为 key 和 value，另外还需要些符号类型，用来进行进一步的解析。解析过程的状态设计为三种，用 State 枚举表示：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> normal</span><br><span class="line">    <span class="keyword">case</span> keyStart</span><br><span class="line">    <span class="keyword">case</span> valueStart</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 normal 状态下，会记录操作符类型的 json token，当遇到{符号后，下一个是“符号就会更改状态为 keyStart。另一种情况就是在遇到,符号后，下一个是”符号也会更改状态为 keyStart。</p>
<p>状态更改成 valueStart 的条件是遇到:符号，当下一个是“时进入 valueStart 状态，如果不是“符号，就需要做区分，是{或者[时直接跳过:符号，然后记录这两个操作符。其它情况表示 value 不是字符而是数字，直接记录为 json token 就可以了。完整 json token 的解析代码见 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/JSON/ParseJSONTokens.swift">MethodTraceAnalyze/ParseJSONTokens.swift</a>。</p>
<p>JSONToken 集合目前还只是扁平态，而 json 数据是有 key 和 value 的多级关系在的，比如 value 可能是字符串或数字，也可能是另一组 key value 结构或者 value 的数组集合。所以下面还需要定义一个 JSONItem 结构来容纳多级关系。</p>
<h4 id="JSONItem"><a href="#JSONItem" class="headerlink" title="JSONItem"></a>JSONItem</h4><p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/09.png" alt=""></p>
<p>JSONItem 的结构体定义如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">JSONItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> type: <span class="type">JSONItemType</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> kvs: [<span class="type">JSONItemKv</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> array: [<span class="type">JSONItem</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">JSONItemType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> keyValue</span><br><span class="line">    <span class="keyword">case</span> value</span><br><span class="line">    <span class="keyword">case</span> array</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key value 结构体</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">JSONItemKv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> key: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">JSONItem</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JSONItem 的类型分三种，key value、value 和 array 的，定义在 JSONItemType 枚举中。分别对应的三个存储字段是 kvs，里面是 JSONItemKv 类型的集合；value 为字符串；array 是 JSONItem 的集合。</p>
<p>定义好了多层级的结构，就可以将 JSONToken 的集合进行分析，转到 JSONItem 结构上。思路是在解析过程中碰到闭合符号时，将扁平的闭合区间内的 JSONToken  放到集合里，通过递归函数 recursiveTk 递归出多层级结构出来。所以需要设置四个状态：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">rState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> normal</span><br><span class="line">    <span class="keyword">case</span> startDic</span><br><span class="line">    <span class="keyword">case</span> startArr</span><br><span class="line">    <span class="keyword">case</span> startKey</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当碰到{符号进入 startDic 状态，遇到[符号进入 startKey 状态，遇到}和]符号时会结束这两个状态。在 startDic 或 startKey 状态中时会收集过程中的 JSONToken 到 recursiveTkArr 集合里。这个分析完整代码在这 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/JSON/ParseJSONItem.swift">MethodTraceAnalyze/ParseJSONItem.swift</a>。</p>
<p>来一段简单的 json 测试下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    “key1”: “value1”,</span><br><span class="line">    “key2”: <span class="number">22</span>,</span><br><span class="line">    “key3”: &#123;</span><br><span class="line">        “subKey1”: “subValue1”,</span><br><span class="line">        “subKey2”: <span class="number">40</span>,</span><br><span class="line">        “subKey3”:[</span><br><span class="line">            &#123;</span><br><span class="line">                “sub1Key1”: <span class="number">10</span>,</span><br><span class="line">                “sub1Key2”:&#123;</span><br><span class="line">                    “sub3Key1”: “sub3Value1”,</span><br><span class="line">                    “sub3Key2”: “sub3Value2”</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                “sub1Key1”: <span class="number">11</span>,</span><br><span class="line">                “sub1Key2”: <span class="number">15</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        “subKey4”: [</span><br><span class="line">            “value1”,</span><br><span class="line">            <span class="number">23</span>,</span><br><span class="line">            “value2”</span><br><span class="line">        ],</span><br><span class="line">        “subKey5”: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用 ParseJSONItem 来解析<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonOPath <span class="operator">=</span> <span class="type">Bundle</span>.main.path(forResource: “test”, ofType: “json”)</span><br><span class="line"><span class="keyword">let</span> jOrgPath <span class="operator">=</span> jsonOPath <span class="operator">??</span> “”</span><br><span class="line"><span class="keyword">let</span> jsonOContent <span class="operator">=</span> <span class="type">FileHandle</span>.fileContent(path: jOrgPath)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item <span class="operator">=</span> <span class="type">ParseJSONItem</span>(input: jsonOContent).parse()</span><br></pre></td></tr></table></figure></p>
<p>得到的 item 数据如下图所示</p>
<p><img src="/uploads/how-to-analyze-startup-time-cost-in-ios/02.png" alt=""></p>
<p>可以看到，item 的结构和前面的 json 结构是一致的。</p>
<h4 id="json-单测"><a href="#json-单测" class="headerlink" title="json 单测"></a>json 单测</h4><p>为了保证后面对 json 的解析修改和完善对上面列的测试 case 解析结果不会有影响，可以写个简单测试类来做。这个类只需要做到将实际结果和预期值做比较，相等即可通过，不等即可提示并中断，方便定位问题。因此传入参数只需要有运行结果、预期结果、描述就够用了。我写个 Test 协议，通过扩展默认实现一个比较的方法，以后需要单测的类遵循这个协议就可以使用和扩展单测功能了。Test 协议具体代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">cs</span>(<span class="params">current</span>:<span class="type">String</span>, <span class="params">expect</span>:<span class="type">String</span>, <span class="params">des</span>:<span class="type">String</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compare string 对比两个字符串值</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">cs</span>(<span class="params">current</span>:<span class="type">String</span>, <span class="params">expect</span>: <span class="type">String</span>, <span class="params">des</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> current <span class="operator">==</span> expect &#123;</span><br><span class="line">            <span class="built_in">print</span>(“<span class="operator">✅</span> \(des) ok，符合预期值：\(expect)”)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> msg <span class="operator">=</span> “<span class="operator">❌</span> \(des) fail，不符合预期值：\(expect)”</span><br><span class="line">            <span class="built_in">print</span>(msg)</span><br><span class="line">            <span class="built_in">assertionFailure</span>(msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>写个 TestJSON 遵循 Test 协议进行单测。测试各个解析后的值，比如测试 item第一级 key value 配对数量可以这样写：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr <span class="operator">=</span> item.array[<span class="number">0</span>].kvs</span><br><span class="line">cs(current: “\(arr.count)”, expect: “<span class="number">3</span>”, des: “all dic count”)</span><br></pre></td></tr></table></figure></p>
<p>打印的结果就是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">✅ all dic count ok，符合预期值：3</span><br></pre></td></tr></table></figure></p>
<p>完整单测代码在这里：<a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/JSON/TestJSON.swift">MethodTraceAnalyze/TestJSON.swift</a></p>
<h3 id="解析-Launch-Trace-的-json"><a href="#解析-Launch-Trace-的-json" class="headerlink" title="解析 Launch Trace 的 json"></a>解析 Launch Trace 的 json</h3><p>前面说的 JSONItem 是通用的多层级 json 结构体。对于启动的 json，实际要表现的方法调用链和 json 的层级并不是对应的。方法调用链是通过 ph 字段表示，B 表示方法开始，E 表示方法结束，中间会有其它方法调用的闭合，这些方法在调用链里可以被称为调用方法的子方法。</p>
<p>为了能够表现出这样的调用链关系，我设计了下面的 LaunchItem 结构：</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/10.png" alt=""></p>
<p>结构体代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">LaunchItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> name: <span class="type">String</span>  <span class="comment">// 调用方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> ph: <span class="type">String</span>    <span class="comment">// B 代表开始、E 代表结束、BE 代表合并后的 Item、其它代表描述</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> ts: <span class="type">String</span>    <span class="comment">// 时间戳，开始时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> cost: <span class="type">Int</span>     <span class="comment">// 耗时 ms</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> times: <span class="type">Int</span>    <span class="comment">// 执行次数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> subItem: [<span class="type">LaunchItem</span>]   <span class="comment">// 子 item</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> parentItem:[<span class="type">LaunchItem</span>] <span class="comment">// 父 item</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 ParseJSONTokens 类来获取 JSONToken 的集合。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tks <span class="operator">=</span> <span class="type">ParseJSONTokens</span>(input: input).parse()</span><br></pre></td></tr></table></figure></p>
<p>找出 name、ph、ts 字段数据转到 LaunchItem 结构体中。这部分代码实现在这里 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/Launch/ParseLaunchJSON.swift">MethodTraceAnalyze/ParseLaunchJSON.swift</a>。</p>
<p>遍历 LaunchItem 集合，完善 LaunchItem 的信息，先完善 LaunchItem 的 cost 和 subItem 的信息。在方法调用链同一级时依据 ph 字段将相同方法 B 和 E 之间的 LaunchItem 都放到一个数组里，通过栈顶和栈底的 ts 字段值相减就能够得到 cost 的值，也就是方法的耗时，代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> itemArr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> e <span class="operator">=</span> itemArr[itemArr.count <span class="operator">-</span> <span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> cost <span class="operator">=</span> <span class="type">Int</span>(e.ts)<span class="operator">!</span> <span class="operator">-</span> <span class="type">Int</span>(b.ts)<span class="operator">!</span></span><br></pre></td></tr></table></figure></p>
<p>当这个数组数量大于2，代表方法里还会调用其它的方法，通过递归将调用链中的子方法都取出来，并放到 subItem 里。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pItem.subItem.append(recusiveMethodTree(parentItem: rPItem, items: newItemArr))</span><br></pre></td></tr></table></figure></p>
<p>代码见<a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/Launch/LaunchJSON.swift">MethodTraceAnalyze/LaunchJSON.swift</a>里的 launchJSON 函数。</p>
<h3 id="展示启动方法链"><a href="#展示启动方法链" class="headerlink" title="展示启动方法链"></a>展示启动方法链</h3><p>前面通过 launchJSON 函数取到了方法调用链的根部 LaunchItem。使用 recusiveItemTree 函数递归这个根 LaunchItem ，可以输出方法调用关系图。很多工程在启动阶段会执行大量方法，很多方法耗时很少，可以过滤那些小于10毫秒的方法，让分析更加聚焦。</p>
<p><img src="/uploads/how-to-analyze-startup-time-cost-in-ios/03.png" alt=""></p>
<p>展示效果如上图所示，完整代码在 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/Launch/LaunchJSON.swift">MethodTraceAnalyze/LaunchJSON.swift</a> 里的 tree 函数里。图中的阶段切换，比如 T1到 T2的切换可以在 recusiveItemTree 函数中设置，对应的处理代码是：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 T1 到 T5 阶段信息，其中 updateLauncherState 函数名需要替换成自己阶段切换的函数名，最多5个阶段</span></span><br><span class="line"><span class="keyword">if</span> methodName <span class="operator">==</span> “updateLauncherState:” &#123;</span><br><span class="line">    currentT <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> currentT <span class="operator">&gt;</span> <span class="number">5</span> &#123;</span><br><span class="line">        currentT <span class="operator">=</span> <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>耗时的高低也做了颜色的区分。外部耗时指的是子方法以外系统或没源码的三方方法的耗时，规则是父方法调用的耗时减去其子方法总耗时。代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取外部耗时</span></span><br><span class="line"><span class="keyword">var</span> sysCost <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> aItem.subItem.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> aSubItem <span class="keyword">in</span> aItem.subItem &#123;</span><br><span class="line">        sysCost <span class="operator">+=</span> aSubItem.cost</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sysCost <span class="operator">=</span> (aItem.cost <span class="operator">-</span> sysCost) <span class="operator">/</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure></p>
<p>bundle、owner、业务线这三项需要根据自己工程情况来，如果工程使用的是 excel 做的记录可以导出为 csv 格式文件，参考 LaunchJSON 类里的 loadSimpleKeyValueDicWithCsv 函数进行 csv 数据读取。如果数据是在服务端，输出为 json 的话就更好办了，使用前面写的 ParseJSONItem 类就能够进行数据解析了，可以参考 LaunchJSON 类里的 parseBundleOwner 函数。展示示例里我先置为默认的暂无了。</p>
<p>目前为止通过过滤耗时少的方法调用，可以更容易发现问题方法。但是，有些方法单次执行耗时不多，但是会执行很多次，累加耗时会大，这样的情况也需要体现在展示页面里。另外外部耗时高时或者碰到自己不了解的方法时，是需要到工程源码里去搜索对应的方法源码进行分析的，有的方法名很通用时还需要花大量时间去过滤无用信息。</p>
<p>因此接下来还需要做两件事情，首先累加方法调用次数和耗时，体现在展示页面中，另一个是从工程中获取方法源码能够在展示页面中进行点击显示。</p>
<p>对于方法调用次数和总耗时的统计我写在了 LaunchJSON 类的 allMethodAndSubMethods 函数里，思路就是遍历所有的 LaunchItem，碰到相同的 item name 就对次数和耗时进行累加。代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> allItems <span class="operator">=</span> <span class="type">LaunchJSON</span>.leaf(fileName: fileName, isGetAllItem: <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mergeDic <span class="operator">=</span> [<span class="type">String</span>:<span class="type">LaunchItem</span>]()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> allItems &#123;</span><br><span class="line">    <span class="keyword">let</span> mergeKey <span class="operator">=</span> item.name <span class="comment">// 方法名为标识</span></span><br><span class="line">    <span class="keyword">if</span> mergeDic[mergeKey] <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> newItem <span class="operator">=</span> mergeDic[mergeKey]</span><br><span class="line">        newItem<span class="operator">?</span>.cost <span class="operator">+=</span> item.cost <span class="comment">// 累加耗时</span></span><br><span class="line">        newItem<span class="operator">?</span>.times <span class="operator">+=</span> <span class="number">1</span> <span class="comment">// 累加次数</span></span><br><span class="line">        mergeDic[mergeKey] <span class="operator">=</span> newItem</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mergeDic[mergeKey] <span class="operator">=</span> item</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>展示时判断次数大于1时，耗时大于0时展示出来。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mergeStr <span class="operator">=</span> “”</span><br><span class="line"><span class="keyword">if</span> preMergeItemDic.keys.contains(“\(bundleName<span class="operator">+</span>className<span class="operator">+</span>methodName)”) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">let</span> mItem <span class="operator">=</span> preMergeItemDic[“\(bundleName<span class="operator">+</span>className<span class="operator">+</span>methodName)”]</span><br><span class="line">    <span class="keyword">if</span> mItem<span class="operator">?</span>.times <span class="operator">??</span> <span class="number">0</span> <span class="operator">&gt;</span> <span class="number">1</span> <span class="operator">&amp;&amp;</span> (mItem<span class="operator">?</span>.cost <span class="operator">??</span> <span class="number">0</span>) <span class="operator">/</span> <span class="number">1000</span> <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">        mergeStr <span class="operator">=</span> “(总次数\(mItem<span class="operator">?</span>.times <span class="operator">??</span> <span class="number">0</span>)<span class="operator">、</span>总耗时\((mItem<span class="operator">?</span>.cost <span class="operator">??</span> <span class="number">0</span>) <span class="operator">/</span> <span class="number">1000</span>))”</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>展示的效果如下：</p>
<p><img src="/uploads/how-to-analyze-startup-time-cost-in-ios/04.png" alt=""></p>
<h3 id="展示方法源码"><a href="#展示方法源码" class="headerlink" title="展示方法源码"></a>展示方法源码</h3><p>在页面上展示源码需要先解析 .xcworkspace 文件，通过 .xcworkspace文件取到工程里所有的 .xcodeproj 文件。分析 .xcodeproj 文件取到所有 .m 和.mm 源码文件路径，解析源码，取到方法的源码内容进行展示。</p>
<h4 id="解析-xcworkspace"><a href="#解析-xcworkspace" class="headerlink" title="解析 .xcworkspace"></a>解析 .xcworkspace</h4><p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/11.png" alt=""></p>
<p>打开.xcworkspace，可以看到这个包内主要文件是 contents.xcworkspacedata。内容是一个 xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Workspace</span></span></span><br><span class="line"><span class="tag">   <span class="attr">version</span> = <span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">FileRef</span></span></span><br><span class="line"><span class="tag">      <span class="attr">location</span> = <span class="string">&quot;group:GCDFetchFeed.xcodeproj&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">FileRef</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">FileRef</span></span></span><br><span class="line"><span class="tag">      <span class="attr">location</span> = <span class="string">&quot;group:Pods/Pods.xcodeproj&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">FileRef</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Workspace</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>所以下面需要对 xml 进行分析。xml 的操作符有 &lt;&gt;=\”/?![]，通过这些操作符能够取到通用的 token 集合 tokens。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tokens <span class="operator">=</span> <span class="type">Lexer</span>(input: input, type: .plain).allTkFast(operaters: “<span class="operator">&lt;&gt;=</span>\”<span class="operator">/?!</span>[]”)</span><br></pre></td></tr></table></figure></p>
<p>根据 xml 的规则，将解析状态分为 normal、startTag、cdata 三种。定义的枚举为：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> normal</span><br><span class="line">    <span class="keyword">case</span> startTag</span><br><span class="line">    <span class="keyword">case</span> cdata</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当遇到&lt;符号时，更改解析状态为 startTag。如果&lt;符号后面跟的是![CDATA[表示是 cdata 标签，状态需要改成 cdata。实现代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;tagname …&gt; 和 &lt;![CDATA[</span></span><br><span class="line"><span class="keyword">if</span> currentState <span class="operator">==</span> .normal <span class="operator">&amp;&amp;</span> currentToken <span class="operator">==</span> .id(“<span class="operator">&lt;</span>“) &#123;</span><br><span class="line">    <span class="comment">// &lt;![CDATA[</span></span><br><span class="line">    <span class="keyword">if</span> peekTk() <span class="operator">==</span> .id(“<span class="operator">!</span>”) <span class="operator">&amp;&amp;</span> peekTkStep(step: <span class="number">2</span>) <span class="operator">==</span> .id(“[“) <span class="operator">&amp;&amp;</span> peekTkStep(step: <span class="number">3</span>) <span class="operator">==</span> .id(“<span class="type">CDATA</span>”) <span class="operator">&amp;&amp;</span> peekTkStep(step: <span class="number">4</span>) <span class="operator">==</span> .id(“[“) &#123;</span><br><span class="line">        currentState <span class="operator">=</span> .cdata</span><br><span class="line">        advanceTk() <span class="comment">// jump &lt;</span></span><br><span class="line">        advanceTk() <span class="comment">// jump !</span></span><br><span class="line">        advanceTk() <span class="comment">// jump [</span></span><br><span class="line">        advanceTk() <span class="comment">// jump CDATA</span></span><br><span class="line">        advanceTk() <span class="comment">// jump [</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// &lt;tagname …&gt;</span></span><br><span class="line">    <span class="keyword">if</span> currentTokens.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">        addTagTokens(type: .value) <span class="comment">// 结束一组</span></span><br><span class="line">    &#125;</span><br><span class="line">    currentState <span class="operator">=</span> .startTag</span><br><span class="line">    advanceTk()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 startTag 和 cdata 状态时会将遇到的 token 装到 currentTokens 里，在结束状态时加入到 XMLTagTokens 这个结构里记录下来。XMLTagTokens 的定义如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">XMLTagTokens</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> type: <span class="type">XMLTagTokensType</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> tokens: [<span class="type">Token</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>currentTokens 会在状态结束时记录到 XMLTagTokens 的 tokens 里。startTag 会在&gt;符号时结束。cdata 会在]]&gt;时结束。这部分实现代码见 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/XML/ParseStandXMLTagTokens.swift">MethodTraceAnalyze/ParseStandXMLTagTokens.swift</a> 。</p>
<p>接下来对 XMLTagTokens 集合进行进一步分析，XML 的 tag 节点分为单标签比如<br/>、开标签比如<p>、闭合标签比如</p>、标签值、xml 标识说明，这五类。因此我定义了标签节点的类型枚举 XMLTagNodeType：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">XMLTagNodeType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> xml</span><br><span class="line">    <span class="keyword">case</span> single <span class="comment">// 单个标签</span></span><br><span class="line">    <span class="keyword">case</span> start  <span class="comment">// 开标签 &lt;p&gt;</span></span><br><span class="line">    <span class="keyword">case</span> value  <span class="comment">// 标签的值 &lt;p&gt;value&lt;/p&gt;</span></span><br><span class="line">    <span class="keyword">case</span> end    <span class="comment">// 闭合的标签 &lt;/p&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>标签节点除了类型信息，还需要有属性集合、标签名和标签值，结构体定义为：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">XMLTagNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> type: <span class="type">XMLTagNodeType</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> value: <span class="type">String</span> <span class="comment">// 标签值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> name: <span class="type">String</span>  <span class="comment">// 标签名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> attributes: [<span class="type">XMLTagAttribute</span>] <span class="comment">// 标签属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>解析 XML 标签节点相比较于 HTML 来说会简化些，HTML的规则更加的复杂，以前使用状态机根据 W3C 标准<a href="https://html.spec.whatwg.org/multipage/parsing.html#html-parser">HTML Standard</a>专门解析过，状态机比较适合于复杂的场景，具体代码在这里 <a href="https://github.com/ming1016/HTN/blob/master/Sources/Core/HTML/HTMLTokenizer.swift">HTN/HTMLTokenizer.swift</a> 。可以看到按照 W3C 的标准，设计了一个 HTNStateType 状态枚举，状态特别多。对于 XML 来说状态会少些：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">pTagState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> start</span><br><span class="line">    <span class="keyword">case</span> questionMark</span><br><span class="line">    <span class="keyword">case</span> xml</span><br><span class="line">    <span class="keyword">case</span> tagName</span><br><span class="line">    <span class="keyword">case</span> attributeName</span><br><span class="line">    <span class="keyword">case</span> equal</span><br><span class="line">    <span class="keyword">case</span> attributeValue</span><br><span class="line">    <span class="keyword">case</span> startForwardSlash</span><br><span class="line">    <span class="keyword">case</span> endForwardSlash</span><br><span class="line">    <span class="keyword">case</span> startDoubleQuotationMarks</span><br><span class="line">    <span class="keyword">case</span> backSlash</span><br><span class="line">    <span class="keyword">case</span> endDoubleQuotationMarks</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>XML  标签节点的解析我没有用状态机，将解析结果记录到了 XMLTagNode 结构体中。标签节点解析过程代码在这里 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/XML/ParseStandXMLTags.swift">MethodTraceAnalyze/ParseStandXMLTags.swift</a> 。标签节点解析完后还需要解决 XML 的层级问题，也就是标签包含标签的问题。</p>
<p>先定义一个结构体 XMLNode，用来记录 XML 的节点树：</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/12.png" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">XMLNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> attributes: [<span class="type">XMLTagAttribute</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> subNodes: [<span class="type">XMLNode</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 subNodes 是 XMLNode 的子节点集合，解析出 XMLNode 的思路是根据前面输出的 XMLTagNode 的类型来分析，当遇到类型是 start 到遇到相同 name 的 end 之间不断收集 XMLTagNode 到 currentTagNodeArr 数组里，end 时将这个数组添加到 tagNodeArrs 里，然后开始收集下一组 start 和 end。关键代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当遇到.end 类型时将一组 XMLTagNode 加到 tagNodeArrs 里。然后重置。</span></span><br><span class="line"><span class="keyword">if</span> node.type <span class="operator">==</span> .end <span class="operator">&amp;&amp;</span> node.name <span class="operator">==</span> currentTagName &#123;</span><br><span class="line">    currentState <span class="operator">=</span> .end</span><br><span class="line">    currentTagNodeArr.append(node)</span><br><span class="line">    <span class="comment">// 添加到一级</span></span><br><span class="line">    tagNodeArrs.append(currentTagNodeArr)</span><br><span class="line">    <span class="comment">// 重置</span></span><br><span class="line">    currentTagNodeArr <span class="operator">=</span> [<span class="type">XMLTagNode</span>]()</span><br><span class="line">    currentTagName <span class="operator">=</span> “”</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对于 xml 类型标签和 single 类型的会直接保存到 tagNodeArrs 里。接下来对 tagNodeArrs 这些由 XMLTagNode 组成的数组集进行分析。如果 tagNodeArr 的数组数量是1时，表示这一层级的 tag 是 xml 或者单标签的情况比如&lt;?xml version=”1.0” encoding=”UTF-8”?&gt; 或 <link href=“/atom.xml” rel=“self”/> 这种。数量是2时表示开闭标签里没有其他的标签，类似<p></p>这种。当 tagNodeArr 的数量大于2时，可能有两种情况，一种是 tagNode 为 value 类型比如<p>section value</p>，其他情况就是标签里会嵌套标签，需要递归调用 recusiveParseTagNodes 函数进行下一级的解析。这部分逻辑在 recusiveParseTagNodes 函数里，相关代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> tagNodeArr <span class="keyword">in</span> tagNodeArrs &#123;</span><br><span class="line">    <span class="keyword">if</span> tagNodeArr.count <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">        <span class="comment">// 只有一个的情况，即 xml 和 single</span></span><br><span class="line">        <span class="keyword">let</span> aTagNode <span class="operator">=</span> tagNodeArr[<span class="number">0</span>]</span><br><span class="line">        pNode.subNodes.append(tagNodeToNode(tagNode: aTagNode))</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> tagNodeArr.count <span class="operator">==</span> <span class="number">2</span> &#123;</span><br><span class="line">        <span class="comment">// 2个的情况，就是比如 &lt;p&gt;&lt;/p&gt;</span></span><br><span class="line">        <span class="keyword">let</span> aTagNode <span class="operator">=</span> tagNodeArr[<span class="number">0</span>] <span class="comment">// 取 start 的信息</span></span><br><span class="line">        pNode.subNodes.append(tagNodeToNode(tagNode: aTagNode))</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> tagNodeArr.count <span class="operator">&gt;</span> <span class="number">2</span> &#123;</span><br><span class="line">        <span class="comment">// 大于2个的情况</span></span><br><span class="line">        <span class="keyword">let</span> startTagNode <span class="operator">=</span> tagNodeArr[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">var</span> startNode <span class="operator">=</span> tagNodeToNode(tagNode: startTagNode)</span><br><span class="line">        <span class="keyword">let</span> secondTagNode <span class="operator">=</span> tagNodeArr[<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断是否是 value 这种情况比如 &lt;p&gt;paragraph&lt;/p&gt;</span></span><br><span class="line">        <span class="keyword">if</span> secondTagNode.type <span class="operator">==</span> .value &#123;</span><br><span class="line">            <span class="comment">// 有 value 的处理</span></span><br><span class="line">            startNode.value <span class="operator">=</span> secondTagNode.value.trimmingCharacters(in: <span class="type">CharacterSet</span>.whitespacesAndNewlines)</span><br><span class="line">            pNode.subNodes.append(startNode)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 有子标签的情况</span></span><br><span class="line">            <span class="comment">// 递归得到结果</span></span><br><span class="line">            <span class="keyword">var</span> newTagNodeArr <span class="operator">=</span> tagNodeArr</span><br><span class="line">            newTagNodeArr.remove(at: tagNodeArr.count <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">            newTagNodeArr.remove(at: <span class="number">0</span>)</span><br><span class="line">            pNode.subNodes.append(recusiveParseTagNodes(parentNode: startNode, tagNodes: newTagNodeArr))</span><br><span class="line">        &#125; <span class="comment">// end else</span></span><br><span class="line">    &#125; <span class="comment">// end else if</span></span><br><span class="line">&#125; <span class="comment">// end for</span></span><br></pre></td></tr></table></figure></p>
<p>完成 xcworkspace 的 XML 解析，获取 XML 的节点树如下所示：</p>
<p><img src="/uploads/how-to-analyze-startup-time-cost-in-ios/05.png" alt=""></p>
<p>写个单测，保证后面增加功能和更新优化解析后不会影响结果。单测代码在这里 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/XML/TestXML.swift">MethodTraceAnalyze/TestXML.swift</a>。</p>
<h4 id="解析-xcodeproj"><a href="#解析-xcodeproj" class="headerlink" title="解析 .xcodeproj"></a>解析 .xcodeproj</h4><p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/13.png" alt=""></p>
<p>通过 XML 的解析可以获取 FileRef 节点内容， xcodeproj 的文件路径就在 FileRef 节点的 location 属性里。每个 xcodeproj 文件里会有 project 工程的源码文件。为了能够获取方法的源码进行展示，那么就先要取出所有 project 工程里包含的源文件的路径。</p>
<p>取 xcodeproj 文件路径的方式如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> aFile.fileName <span class="operator">==</span> “contents.xcworkspacedata” &#123;</span><br><span class="line">    <span class="keyword">let</span> root <span class="operator">=</span> <span class="type">ParseStandXML</span>(input: aFile.content).parse()</span><br><span class="line">    <span class="keyword">let</span> workspace <span class="operator">=</span> root.subNodes[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> fileRef <span class="keyword">in</span> workspace.subNodes &#123;</span><br><span class="line">        <span class="keyword">var</span> fileRefPath <span class="operator">=</span> fileRef.attributes[<span class="number">0</span>].value</span><br><span class="line">        fileRefPath.removeFirst(<span class="number">6</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断是相对路径还是绝对路径</span></span><br><span class="line">        <span class="keyword">let</span> arr <span class="operator">=</span> fileRefPath.split(separator: “<span class="operator">/</span>“)</span><br><span class="line">        <span class="keyword">var</span> projectPath <span class="operator">=</span> “”</span><br><span class="line">        <span class="keyword">if</span> arr.count <span class="operator">&gt;</span> <span class="number">2</span> &#123;</span><br><span class="line">            projectPath <span class="operator">=</span> “\(fileRefPath)<span class="operator">/</span>project.pbxproj”</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            projectPath <span class="operator">=</span> “<span class="operator">/</span>\(pathStr)<span class="operator">/</span>\(fileRefPath)<span class="operator">/</span>project.pbxproj”</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 读取 project 文件内容分析</span></span><br><span class="line">        allSourceFile <span class="operator">+=</span> <span class="type">ParseXcodeprojSource</span>(input: projectPath).parseAllFiles()</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="comment">// end for fileRef in workspace.subNodes</span></span><br><span class="line">&#125; <span class="comment">// end for</span></span><br></pre></td></tr></table></figure></p>
<p>如上面代码所示，ParseXcodeprojSource 是专门用来解析 xcodeproj 的，parseAllFiles 方法根据解析的结果，取出所有 xcodeproj 包含的源码文件。</p>
<p>xcodeproj 的文件内容看起来大概是下面的样子。</p>
<p><img src="/uploads/how-to-analyze-startup-time-cost-in-ios/06.png" alt=""></p>
<p>其实内容还有很多，需要一个个解析出来。</p>
<p>分析后分词的分割符号有 /*={};\”,() 这些，根据这些分割符号设计分词的 token 类型 XcodeprojTokensType，XcodeprojTokensType 为枚举包含下面十个类型：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">XcodeprojTokensType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> codeComment <span class="comment">// 注释</span></span><br><span class="line">    <span class="keyword">case</span> string</span><br><span class="line">    <span class="keyword">case</span> id</span><br><span class="line">    <span class="keyword">case</span> leftBrace <span class="comment">// &#123;</span></span><br><span class="line">    <span class="keyword">case</span> rightBrace <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">case</span> leftParenthesis <span class="comment">// (</span></span><br><span class="line">    <span class="keyword">case</span> rightParenthesis <span class="comment">// )</span></span><br><span class="line">    <span class="keyword">case</span> equal <span class="comment">// =</span></span><br><span class="line">    <span class="keyword">case</span> semicolon <span class="comment">// ;</span></span><br><span class="line">    <span class="keyword">case</span> comma <span class="comment">// ,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>codeComment、string、id 这些类型会由多个 token 组成，所以最好将 xcodeproj 的基础 token 设计为下面的样子：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">XcodeprojTokens</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> type: <span class="type">XcodeprojTokensType</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> tokens: [<span class="type">Token</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由 tokens 字段记录多个 token。实现分词代码在这 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/Xcodeproj/ParseXcodeprojTokens.swift">MethodTraceAnalyze/ParseXcodeprojTokens.swift</a></p>
<p>xcodeproj 文件虽然不是 json，但是大小括号的规则和 json 还比较类似，大括号里的数据类似字典可以用 key、value 配对记录，小括号数据类似数组，记录 value 就可以。这样可以设计 xcodeproj 的节点类型为：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">XcodeprojNodeType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> normal</span><br><span class="line">    <span class="keyword">case</span> root <span class="comment">// 根节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> dicStart <span class="comment">// &#123;</span></span><br><span class="line">    <span class="keyword">case</span> dicKey</span><br><span class="line">    <span class="keyword">case</span> dicValue</span><br><span class="line">    <span class="keyword">case</span> dicEnd   <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> arrStart <span class="comment">// (</span></span><br><span class="line">    <span class="keyword">case</span> arrValue</span><br><span class="line">    <span class="keyword">case</span> arrEnd   <span class="comment">// )</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如上面定义 XcodeprojNodeType 枚举，其大括号内数据的 key 类型为 dicKey，value 类型为 dicValue。小括号的 value 类型为 arrValue。节点设计为：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">XcodeprojNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> type: <span class="type">XcodeprojNodeType</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> value: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">let</span> codeComment: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> subNodes: [<span class="type">XcodeprojNode</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解析代码都在这里 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/Xcodeproj/ParseXcodeprojNode.swift">MethodTraceAnalyze/ParseXcodeprojNode.swift</a> 。</p>
<p>xcodeproj 也有层级，所以也需要构建一个树结构。结构代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">XcodeprojTreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> type: <span class="type">XcodeprojTreeNodeType</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> comment: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> kvs: [<span class="type">XcodeprojTreeNodeKv</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> arr: [<span class="type">XcodeprojTreeNodeArrayValue</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">XcodeprojTreeNodeType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> value</span><br><span class="line">    <span class="keyword">case</span> keyValue</span><br><span class="line">    <span class="keyword">case</span> array</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">XcodeprojTreeNodeKey</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> comment: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">XcodeprojTreeNodeArrayValue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> comment: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">XcodeprojTreeNodeKv</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> key: <span class="type">XcodeprojTreeNodeKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">XcodeprojTreeNode</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>考虑到 xcodeproj 里的注释很多，也都很有用，因此会多设计些结构来保存值和注释。思路是根据 XcodeprojNode 的类型来判断下一级是 key value 结构还是 array 结构。如果 XcodeprojNode 的类型是 XcodeprojNode 的类型是 dicStart 表示下级是 key value 结构。如果类型是 arrStart 就是 array 结构。当碰到类型是 dicEnd 同时和最初 dicStart 是同级时，递归下一级树结构。而 arrEnd 不用递归，xcodeproj 里的 array 只有值类型的数据。生成节点树结构这部分代码实现在这里 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/Xcodeproj/ParseXcodeprojTreeNode.swift">MethodTraceAnalyze/ParseXcodeprojTreeNode.swift</a></p>
<p>断点看生成的结构如下图：</p>
<p><img src="/uploads/how-to-analyze-startup-time-cost-in-ios/07.png" alt=""></p>
<p>其中 section 内容都在 objects 里</p>
<p><img src="/uploads/how-to-analyze-startup-time-cost-in-ios/08.png" alt=""></p>
<p>有了基本节点树结构以后就可以设计 xcodeproj 里各个 section 的结构。主要有一下的 section：</p>
<ul>
<li>PBXBuildFile：文件，最终会关联到 PBXFileReference</li>
<li>PBXContainerItemProxy：部署的元素</li>
<li>PBXFileReference：各类文件，有源码、资源、库等文件</li>
<li>PBXFrameworksBuildPhase：用于 framework 的构建</li>
<li>PBXGroup：文件夹，可嵌套，里面包含了文件与文件夹的关系</li>
<li>PBXNativeTarget：Target 的设置</li>
<li>PBXProject：Project 的设置，有编译工程所需信息</li>
<li>PBXResourcesBuildPhase：编译资源文件，有 xib、storyboard、plist以及图片等资源文件</li>
<li>PBXSourcesBuildPhase：编译源文件（.m）</li>
<li>PBXTargetDependency： Taget 的依赖</li>
<li>PBXVariantGroup：.storyboard 文件</li>
<li>XCBuildConfiguration：Xcode 编译配置，对应 Xcode 的 Build Setting 面板内容</li>
<li>XCConfigurationList：构建配置相关，包含项目文件和 target 文件</li>
</ul>
<p>根据 xcodeproj 的结构规则设计结构体：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// project.pbxproj 结构</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Xcodeproj</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> archiveVersion <span class="operator">=</span> “”</span><br><span class="line">    <span class="keyword">var</span> classes <span class="operator">=</span> [<span class="type">XcodeprojTreeNodeArrayValue</span>]()</span><br><span class="line">    <span class="keyword">var</span> objectVersion <span class="operator">=</span> “” <span class="comment">// 区分 xcodeproj 不同协议版本</span></span><br><span class="line">    <span class="keyword">var</span> rootObject <span class="operator">=</span> <span class="type">PBXValueWithComment</span>(name: “”, value: “”)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> pbxBuildFile <span class="operator">=</span> [<span class="type">String</span>:<span class="type">PBXBuildFile</span>]()</span><br><span class="line">    <span class="keyword">var</span> pbxContainerItemProxy <span class="operator">=</span> [<span class="type">String</span>:<span class="type">PBXContainerItemProxy</span>]()</span><br><span class="line">    <span class="keyword">var</span> pbxFileReference <span class="operator">=</span> [<span class="type">String</span>:<span class="type">PBXFileReference</span>]()</span><br><span class="line">    <span class="keyword">var</span> pbxFrameworksBuildPhase <span class="operator">=</span> [<span class="type">String</span>:<span class="type">PBXFrameworksBuildPhase</span>]()</span><br><span class="line">    <span class="keyword">var</span> pbxGroup <span class="operator">=</span> [<span class="type">String</span>:<span class="type">PBXGroup</span>]()</span><br><span class="line">    <span class="keyword">var</span> pbxNativeTarget <span class="operator">=</span> [<span class="type">String</span>:<span class="type">PBXNativeTarget</span>]()</span><br><span class="line">    <span class="keyword">var</span> pbxProject <span class="operator">=</span> [<span class="type">String</span>:<span class="type">PBXProject</span>]()</span><br><span class="line">    <span class="keyword">var</span> pbxResourcesBuildPhase <span class="operator">=</span> [<span class="type">String</span>:<span class="type">PBXResourcesBuildPhase</span>]()</span><br><span class="line">    <span class="keyword">var</span> pbxSourcesBuildPhase <span class="operator">=</span> [<span class="type">String</span>:<span class="type">PBXSourcesBuildPhase</span>]()</span><br><span class="line">    <span class="keyword">var</span> pbxTargetDependency <span class="operator">=</span> [<span class="type">String</span>:<span class="type">PBXTargetDependency</span>]()</span><br><span class="line">    <span class="keyword">var</span> pbxVariantGroup <span class="operator">=</span> [<span class="type">String</span>:<span class="type">PBXVariantGroup</span>]()</span><br><span class="line">    <span class="keyword">var</span> xcBuildConfiguration <span class="operator">=</span> [<span class="type">String</span>:<span class="type">XCBuildConfiguration</span>]()</span><br><span class="line">    <span class="keyword">var</span> xcConfigurationList <span class="operator">=</span> [<span class="type">String</span>:<span class="type">XCConfigurationList</span>]()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">init</span>()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>具体每个字段集合元素的结构体比如 PBXBuildFile 和 PBXFileReference 对应的结构体和 xcodeproj 的 section 结构对应上。然后使用 ParseXcodeprojTreeNode 解析的节点树结构生成最终的 Xcodeproj section 的结构体。解析过程在这里 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/Xcodeproj/ParseXcodeprojSection.swift">MethodTraceAnalyze/ParseXcodeprojSection.swift</a>。</p>
<p>调试看到 Xcodeproj 的结构如下：</p>
<p><img src="/uploads/how-to-analyze-startup-time-cost-in-ios/09.png" alt=""></p>
<p>对 xcodeproj 的解析也写了单测来保证后期 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/Xcodeproj/TestXcodeproj.swift">MethodTraceAnalyze/TestXcodeproj.swift</a>。</p>
<p><img src="/uploads/how-to-analyze-startup-time-cost-in-ios/10.png" alt=""></p>
<p>得到 section 结构 Xcodeproj 后，就可以开始分析所有源文件的路径了。根据前面列出的 section 的说明，PBXGroup 包含了所有文件夹和文件的关系，Xcodeproj 的 pbxGroup 字段的 key 是文件夹，值是文件集合，因此可以设计一个结构体 XcodeprojSourceNode 用来存储文件夹和文件关系。XcodeprojSourceNode 结构如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">XcodeprojSourceNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fatherValue: <span class="type">String</span> <span class="comment">// 文件夹</span></span><br><span class="line">    <span class="keyword">let</span> value: <span class="type">String</span> <span class="comment">// 文件的值</span></span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span> <span class="comment">// 文件名</span></span><br><span class="line">    <span class="keyword">let</span> type: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过遍历 pbxGroup 可以将文件夹和文件对应上，文件名可以通过 pbxGroup 的 value 到 PBXFileReference 里去取。代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes <span class="operator">=</span> [<span class="type">XcodeprojSourceNode</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次找出所有文件和文件夹</span></span><br><span class="line"><span class="keyword">for</span> (k,v) <span class="keyword">in</span> proj.pbxGroup &#123;</span><br><span class="line">    <span class="keyword">guard</span> v.children.count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> v.children &#123;</span><br><span class="line">        <span class="comment">// 如果满足条件表示是目录</span></span><br><span class="line">        <span class="keyword">if</span> proj.pbxGroup.keys.contains(child.value) &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 满足条件是文件</span></span><br><span class="line">        <span class="keyword">if</span> proj.pbxFileReference.keys.contains(child.value) &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> fileRefer <span class="operator">=</span> proj.pbxFileReference[child.value] <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            nodes.append(<span class="type">XcodeprojSourceNode</span>(fatherValue: k, value: child.value, name: fileRefer.path, type: fileRefer.lastKnownFileType))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// end for children</span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="comment">// end for group</span></span><br></pre></td></tr></table></figure></p>
<p>接下来需要取得完整的文件路径。通过 recusiveFatherPaths 函数获取文件夹路径。这里需要注意的是需要处理 ../ 这种文件夹路径符，获取完整路径的实现代码可以看这里 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/Xcodeproj/ParseXcodeprojSource.swift">MethodTraceAnalyze/ParseXcodeprojSource.swift</a>。</p>
<p>有了每个源文件的路径，接下来就可以对这些源文件进行解析了。</p>
<h4 id="解析-m-mm-文件"><a href="#解析-m-mm-文件" class="headerlink" title="解析 .m .mm 文件"></a>解析 .m .mm 文件</h4><p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/14.png" alt=""></p>
<p>对 Objective-C 解析可以参考 LLVM，这里只需要找到每个方法对应的源码，所以自己也可以实现。分词前先看看 LLVM 是怎么定义 token 的。定义文件在这里 <a href="https://opensource.apple.com/source/lldb/lldb-69/llvm/tools/clang/include/clang/Basic/TokenKinds.def">https://opensource.apple.com/source/lldb/lldb-69/llvm/tools/clang/include/clang/Basic/TokenKinds.def</a> 。根据这个定义我设计了 token 的结构体，主体部分如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切割符号 []()&#123;&#125;.&amp;=*+-&lt;&gt;~!/%^|?:;,#@</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OCTK</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> unknown <span class="comment">// 不是 token</span></span><br><span class="line">    <span class="keyword">case</span> eof <span class="comment">// 文件结束</span></span><br><span class="line">    <span class="keyword">case</span> eod <span class="comment">// 行结束</span></span><br><span class="line">    <span class="keyword">case</span> codeCompletion <span class="comment">// Code completion marker</span></span><br><span class="line">    <span class="keyword">case</span> cxxDefaultargEnd <span class="comment">// C++ default argument end marker</span></span><br><span class="line">    <span class="keyword">case</span> comment <span class="comment">// 注释</span></span><br><span class="line">    <span class="keyword">case</span> identifier <span class="comment">// 比如 abcde123</span></span><br><span class="line">    <span class="keyword">case</span> numericConstant(<span class="type">OCTkNumericConstant</span>) <span class="comment">// 整型、浮点 0x123，解释计算时用，分析代码时可不用</span></span><br><span class="line">    <span class="keyword">case</span> charConstant <span class="comment">// ‘a’</span></span><br><span class="line">    <span class="keyword">case</span> stringLiteral <span class="comment">// “foo”</span></span><br><span class="line">    <span class="keyword">case</span> wideStringLiteral <span class="comment">// L”foo”</span></span><br><span class="line">    <span class="keyword">case</span> angleStringLiteral <span class="comment">// &lt;foo&gt; 待处理需要考虑作为小于符号的问题</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 标准定义部分</span></span><br><span class="line">    <span class="comment">// 标点符号</span></span><br><span class="line">    <span class="keyword">case</span> punctuators(<span class="type">OCTkPunctuators</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  关键字</span></span><br><span class="line">    <span class="keyword">case</span> keyword(<span class="type">OCTKKeyword</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// @关键字</span></span><br><span class="line">    <span class="keyword">case</span> atKeyword(<span class="type">OCTKAtKeyword</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>完整的定义在这里 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/OC/ParseOCTokensDefine.swift">MethodTraceAnalyze/ParseOCTokensDefine.swift</a>。分词过程可以参看 LLVM 的实现 <a href="http://clang.llvm.org/doxygen/Lexer_8cpp_source.html">clang: lib/Lex/Lexer.cpp Source File</a>。我在处理分词时主要是按照分隔符一一对应处理，针对代码注释和字符串进行了特殊处理，一个注释一个 token，一个完整字符串一个 token。我分词实现代码 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/OC/ParseOCTokens.swift">MethodTraceAnalyze/ParseOCTokens.swift</a>。</p>
<p>由于只要取到类名和方法里的源码，所以语法分析时，只需要对类定义和方法定义做解析就可以，语法树中节点设计：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OC 语法树节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">OCNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> type: <span class="type">OCNodeType</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> subNodes: [<span class="type">OCNode</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> identifier: <span class="type">String</span>   <span class="comment">// 标识</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> lineRange: (<span class="type">Int</span>,<span class="type">Int</span>) <span class="comment">// 行范围</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> source: <span class="type">String</span>       <span class="comment">// 对应代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OCNodeType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> `default`</span><br><span class="line">    <span class="keyword">case</span> root</span><br><span class="line">    <span class="keyword">case</span> `import`</span><br><span class="line">    <span class="keyword">case</span> `class`</span><br><span class="line">    <span class="keyword">case</span> method</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中 lineRange 记录了方法所在文件的行范围，这样就能够从文件中取出代码，并记录在 source 字段中。</p>
<p>解析语法树需要先定义好解析过程的不同状态：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">RState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> normal</span><br><span class="line">    <span class="keyword">case</span> eod                   <span class="comment">// 换行</span></span><br><span class="line">    <span class="keyword">case</span> methodStart           <span class="comment">// 方法开始</span></span><br><span class="line">    <span class="keyword">case</span> methodReturnEnd       <span class="comment">// 方法返回类型结束</span></span><br><span class="line">    <span class="keyword">case</span> methodNameEnd         <span class="comment">// 方法名结束</span></span><br><span class="line">    <span class="keyword">case</span> methodParamStart      <span class="comment">// 方法参数开始</span></span><br><span class="line">    <span class="keyword">case</span> methodContentStart    <span class="comment">// 方法内容开始</span></span><br><span class="line">    <span class="keyword">case</span> methodParamTypeStart  <span class="comment">// 方法参数类型开始</span></span><br><span class="line">    <span class="keyword">case</span> methodParamTypeEnd    <span class="comment">// 方法参数类型结束</span></span><br><span class="line">    <span class="keyword">case</span> methodParamEnd        <span class="comment">// 方法参数结束</span></span><br><span class="line">    <span class="keyword">case</span> methodParamNameEnd    <span class="comment">// 方法参数名结束</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> at                    <span class="comment">// @</span></span><br><span class="line">    <span class="keyword">case</span> atImplementation      <span class="comment">// @implementation</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> normalBlock           <span class="comment">// oc方法外部的 block &#123;&#125;，用于 c 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>完整解析出方法所属类、方法行范围的代码在这里 <a href="https://github.com/ming1016/MethodTraceAnalyze/blob/master/MethodTraceAnalyze/OC/ParseOCNodes.swift">MethodTraceAnalyze/ParseOCNodes.swift</a></p>
<p>解析 .m 和 .mm 文件，一个一个串行解的话，对于大工程，每次解的速度很难接受，所以采用并行方式去读取解析多个文件，经过测试，发现每组在60个以上时能够最大利用我机器（2.5 GHz 双核Intel Core i7）的 CPU，内存占用只有60M，一万多.m文件的工程大概2分半能解完。分组并行的代码实现如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> allPath <span class="operator">=</span> <span class="type">XcodeProjectParse</span>.allSourceFileInWorkspace(path: workspacePath)</span><br><span class="line"><span class="keyword">var</span> allNodes <span class="operator">=</span> [<span class="type">OCNode</span>]()</span><br><span class="line"><span class="keyword">let</span> groupCount <span class="operator">=</span> <span class="number">60</span> <span class="comment">// 一组容纳个数</span></span><br><span class="line"><span class="keyword">let</span> groupTotal <span class="operator">=</span> allPath.count<span class="operator">/</span>groupCount <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> groups <span class="operator">=</span> [[<span class="type">String</span>]]()</span><br><span class="line"><span class="keyword">for</span> <span class="type">I</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>groupTotal &#123;</span><br><span class="line">    <span class="keyword">var</span> group <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="type">I</span><span class="operator">*</span>groupCount<span class="operator">..&lt;</span>(<span class="type">I</span><span class="operator">+</span><span class="number">1</span>)<span class="operator">*</span>groupCount &#123;</span><br><span class="line">        <span class="keyword">if</span> j <span class="operator">&lt;</span> allPath.count &#123;</span><br><span class="line">            group.append(allPath[j])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> group.count <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">        groups.append(group)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> group <span class="keyword">in</span> groups &#123;</span><br><span class="line">    <span class="keyword">let</span> dispatchGroup <span class="operator">=</span> <span class="type">DispatchGroup</span>()</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> group &#123;</span><br><span class="line">        dispatchGroup.enter()</span><br><span class="line">        <span class="keyword">let</span> queue <span class="operator">=</span> <span class="type">DispatchQueue</span>.global()</span><br><span class="line">        queue.async &#123;</span><br><span class="line">            <span class="keyword">let</span> ocContent <span class="operator">=</span> <span class="type">FileHandle</span>.fileContent(path: node)</span><br><span class="line">            <span class="keyword">let</span> node <span class="operator">=</span> <span class="type">ParseOCNodes</span>(input: ocContent).parse()</span><br><span class="line">            <span class="keyword">for</span> aNode <span class="keyword">in</span> node.subNodes &#123;</span><br><span class="line">                allNodes.append(aNode)</span><br><span class="line">            &#125;</span><br><span class="line">            dispatchGroup.leave()</span><br><span class="line">        &#125; <span class="comment">// end queue async</span></span><br><span class="line">    &#125; <span class="comment">// end for</span></span><br><span class="line">    dispatchGroup.wait()</span><br><span class="line">&#125; <span class="comment">// end for</span></span><br></pre></td></tr></table></figure></p>
<p>使用的是 dispatch group 的 wait，保证并行的一组完成再进入下一组。</p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/15.png" alt=""></p>
<p>现在有了每个方法对应的源码，接下来就可以和前面 trace 的方法对应上。页面展示只需要写段 js 就能够控制点击时展示对应方法的源码。</p>
<h4 id="页面展示"><a href="#页面展示" class="headerlink" title="页面展示"></a>页面展示</h4><p>在进行 HTML 页面展示前，需要将代码里的换行和空格替换成 HTML 里的对应的</br>和 &nbsp; 。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> allNodes <span class="operator">=</span> <span class="type">ParseOC</span>.ocNodes(workspacePath: “<span class="operator">/</span><span class="type">Users</span><span class="operator">/</span>ming<span class="operator">/</span><span class="type">Downloads</span><span class="operator">/</span><span class="type">GCDFetchFeed</span><span class="operator">/</span><span class="type">GCDFetchFeed</span><span class="operator">/</span><span class="type">GCDFetchFeed</span>.xcworkspace”)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sourceDic <span class="operator">=</span> [<span class="type">String</span>:<span class="type">String</span>]()</span><br><span class="line"><span class="keyword">for</span> aNode <span class="keyword">in</span> allNodes &#123;</span><br><span class="line">    sourceDic[aNode.identifier] <span class="operator">=</span> aNode.source.replacingOccurrences(of: “\n”, with: “<span class="operator">&lt;/</span>br<span class="operator">&gt;</span>”).replacingOccurrences(of: “ “, with: “<span class="operator">&amp;</span>nbsp;”)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>用 p 标签作为源码展示的标签，方法执行顺序的编号加方法名作为 p 标签的 id，然后用 display: none; 将 p 标签隐藏。方法名用 a 标签，click 属性执行一段 js 代码，当 a 标签点击时能够显示方法对应的代码。这段 js 代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sourceShowHidden</span>(<span class="params">sourceIdName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sourceCode = <span class="built_in">document</span>.getElementById(sourceIdName);</span><br><span class="line">    sourceCode.style.display = “block”;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终效果如下图：</p>
<p><img src="/uploads/how-to-analyze-startup-time-cost-in-ios/11.png" alt=""></p>
<p>将动态分析和静态分析进行了结合，后面可以通过不同版本进行对比，发现哪些方法的代码实现改变了，能展示在页面上。还可以进一步静态分析出哪些方法会调用到 I/O 函数、起新线程、新队列等，然后展示到页面上，方便分析。</p>
<p>读到最后，可以看到这个方法分析工具并没有用任何一个轮子，其实有些是可以使用现有轮子的，比如 json、xml、xcodeproj、Objective-C 语法分析等，之所有没有用是因为不同轮子使用的语言和技术区别较大，当格式更新时如果使用的单个轮子没有更新会影响整个工具。开发这个工具主要工作是在解析上，所以使用自有解析技术也能够让所做的功能更聚焦，不做没用的功能，减少代码维护量，所要解析格式更新后，也能够自主去更新解析方式。更重要的一点是可以亲手接触下这些格式的语法设计。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>今天说了下启动优化的技术手段，总的说，对启动进行优化的决心重要程度是远大于技术手段的，决定着是否能够优化的更多。技术手段有很多，我觉得手段的好坏区别只是在效率上，最差的情况全用手动一个个去查耗时也是能够解题的。</p>
<p>最近看了鲁迅的一段话，很有感触，分享一下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">我们好像都是爱生病的人</span><br><span class="line">苦的很</span><br><span class="line">我的一生</span><br><span class="line">好像是在不断生病和骂人中就过去多半了</span><br><span class="line">我三十岁不到，牙齿就掉光了</span><br><span class="line">满口义齿</span><br><span class="line">我戒酒</span><br><span class="line">吃鱼肝油</span><br><span class="line">以望延长我的生命</span><br><span class="line">倒不尽是为了我的爱人</span><br><span class="line">大半是为了我的敌人</span><br><span class="line">我自己知道的，我并不大度</span><br><span class="line">说到幸福</span><br><span class="line">只得面向过去</span><br><span class="line">或者面向除了坟墓以外毫无任何希望的将来</span><br><span class="line">每个战士都是如此</span><br><span class="line">我们活在这样的地方</span><br><span class="line">我们活在这样的时代</span><br></pre></td></tr></table></figure></p>
<p><img src="/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/16.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/kuaishou-unused-class-swiftui-note-binary-tree-interview/01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>2019年涂图</title>
    <link href="http://ming1016.github.io/2019/12/06/draw-in-2019/"/>
    <id>http://ming1016.github.io/2019/12/06/draw-in-2019/</id>
    <published>2019-12-06T05:48:40.000Z</published>
    <updated>2021-04-11T14:42:09.916Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/draw-in-2019/01.jpg" alt=""><br><img src="/uploads/draw-in-2019/02.jpg" alt=""><br><img src="/uploads/draw-in-2019/03.jpg" alt=""><br><img src="/uploads/draw-in-2019/04.jpg" alt=""><br><img src="/uploads/draw-in-2019/05.jpg" alt=""><br><img src="/uploads/draw-in-2019/06.jpg" alt=""><br><img src="/uploads/draw-in-2019/07.jpg" alt=""><br><img src="/uploads/draw-in-2019/08.jpg" alt=""><br><img src="/uploads/draw-in-2019/09.jpg" alt=""><br><img src="/uploads/draw-in-2019/10.jpg" alt=""><br><img src="/uploads/draw-in-2019/11.jpg" alt=""><br><img src="/uploads/draw-in-2019/12.jpg" alt=""><br><img src="/uploads/draw-in-2019/13.jpg" alt=""><br><img src="/uploads/draw-in-2019/14.jpg" alt=""><br><img src="/uploads/draw-in-2019/15.jpg" alt=""><br><img src="/uploads/draw-in-2019/16.jpg" alt=""><br><img src="/uploads/draw-in-2019/18.jpg" alt=""><br><img src="/uploads/draw-in-2019/19.jpg" alt=""><br><img src="/uploads/draw-in-2019/20.jpg" alt=""><br><img src="/uploads/draw-in-2019/21.jpg" alt=""><br><img src="/uploads/draw-in-2019/22.jpg" alt=""><br><img src="/uploads/draw-in-2019/23.jpg" alt=""><br><img src="/uploads/draw-in-2019/24.jpg" alt=""><br><img src="/uploads/draw-in-2019/25.jpg" alt=""><br><img src="/uploads/draw-in-2019/26.jpg" alt=""><br><img src="/uploads/draw-in-2019/27.jpg" alt=""><br><img src="/uploads/draw-in-2019/28.jpg" alt=""><br><img src="/uploads/draw-in-2019/29.jpg" alt=""><br><img src="/uploads/draw-in-2019/30.jpg" alt=""><br><img src="/uploads/draw-in-2019/31.jpg" alt=""><br><img src="/uploads/draw-in-2019/32.jpg" alt=""><br><img src="/uploads/draw-in-2019/33.jpg" alt=""><br><img src="/uploads/draw-in-2019/34.jpg" alt=""><br><img src="/uploads/draw-in-2019/35.jpg" alt=""><br><img src="/uploads/draw-in-2019/36.jpg" alt=""><br><img src="/uploads/draw-in-2019/37.jpg" alt=""><br><img src="/uploads/draw-in-2019/38.jpg" alt=""><br><img src="/uploads/draw-in-2019/39.jpg" alt=""><br><img src="/uploads/draw-in-2019/40.jpg" alt=""><br><img src="/uploads/draw-in-2019/41.jpg" alt=""><br><img src="/uploads/draw-in-2019/42.jpg" alt=""><br><img src="/uploads/draw-in-2019/43.jpg" alt=""><br><img src="/uploads/draw-in-2019/44.jpg" alt=""><br><img src="/uploads/draw-in-2019/45.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/draw-in-2019/01.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/draw-in-2019/02.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/draw-in-2019/03.
    
    </summary>
    
      <category term="My painting" scheme="http://ming1016.github.io/categories/My-painting/"/>
    
    
      <category term="Painting" scheme="http://ming1016.github.io/tags/Painting/"/>
    
      <category term="iPad" scheme="http://ming1016.github.io/tags/iPad/"/>
    
      <category term="Procreate" scheme="http://ming1016.github.io/tags/Procreate/"/>
    
  </entry>
  
  <entry>
    <title>iOS 开发舆图</title>
    <link href="http://ming1016.github.io/2019/07/29/ios-map/"/>
    <id>http://ming1016.github.io/2019/07/29/ios-map/</id>
    <published>2019-07-29T04:49:06.000Z</published>
    <updated>2021-04-11T14:42:09.923Z</updated>
    
    <content type="html"><![CDATA[<p>43篇 <a href="https://time.geekbang.org/column/intro/161">《iOS开发高手课》</a>已完成，后面会对内容进行迭代，丰富下内容和配图。最近画了张 iOS 开发全景舆图，还有相关一些资料整理，方便我平时开发 App 时参看。舆图如下：</p>
<p><img src="/uploads/ios-map/1.png" alt=""><br><img src="/uploads/ios-map/2.png" alt=""><br><img src="/uploads/ios-map/3.png" alt=""><br><img src="/uploads/ios-map/4.png" alt=""><br><img src="/uploads/ios-map/5.png" alt=""><br><img src="/uploads/ios-map/6.png" alt=""></p>
<p>接下来，我按照 iOS 开发地图的顺序，和你推荐一些相关的学习资料。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>学习 iOS 开发最好是从学习一个完整的 App 入手，GitHub上的<a href="https://github.com/dkhamsing/open-source-ios-apps">Open-Source iOS Apps</a><br>项目，收录了大量开源的完整 App 例子，比如 <a href="https://github.com/Dimillian/SwiftHN">Hacker News Reader</a> 等已经上架了 App Store 的应用程序，所有例子都会标注是否上架 App Store的、所使用开发语言、推荐等级等信息，有利于进行选择学习。</p>
<p>开发一个完整的 App 也有最佳实践，这里有份<a href="https://github.com/futurice/ios-good-practices">最佳实践</a>可以参考。</p>
<p>下面两个教程网站都会手把手通过实例教你怎么动手学习 iOS 各个知识点。</p>
<ol>
<li><a href="https://www.appcoda.com/">AppCoda</a></li>
<li><a href="https://www.raywenderlich.com/library">Raywenderlich</a></li>
</ol>
<h2 id="iOS-基础"><a href="#iOS-基础" class="headerlink" title="iOS 基础"></a>iOS 基础</h2><p>完整开发了多个 App 后，为了更好、更快的掌握开发，你就会有需要了解更多 iOS 基础知识的诉求，包括列表的优化、高效界面布局开发、图表图形、图片处理、动画多媒体等等。</p>
<p>图形渲染 Metal 框架的学习可以参看下面四篇文章</p>
<ol>
<li><a href="https://objccn.io/issue-18-2/">Metal</a></li>
<li><a href="https://juejin.im/post/5a225ffcf265da432153daa4">基于 Metal 的 ARKit 使用指南（上）</a></li>
<li><a href="https://juejin.im/post/59bb2a99f265da0650750e56">基于 Metal 的 ARKit 使用指南（下）</a></li>
<li><a href="https://xiaozhuanlan.com/topic/6927418053">基于 Metal 的现代渲染技术</a></li>
</ol>
<h2 id="iOS-系统"><a href="#iOS-系统" class="headerlink" title="iOS 系统"></a>iOS 系统</h2><p>iOS 基础学习到一定程度就需要了解 App 是如何在系统中工作的，系统提供了什么基础功能，提供了哪些界面控件等等。</p>
<p>扩展知识可以阅读下面四本书：</p>
<ol>
<li>《深入解析Mac OS X &amp; iOS操作系统》</li>
<li>《现代操作系统》</li>
<li>《深入理解计算机系统》</li>
<li>《程序员的自我修养》</li>
</ol>
<h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><p>编程语言的学习可以参考官方手册，对于 Runtime 的扩展文章阅读：</p>
<ol>
<li><a href="http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/">Objective-C 消息发送与转发机制原理</a></li>
<li><a href="https://halfrost.com/objc_runtime_isa_class/">神经病院Objective-C Runtime入院第一天——isa和Class</a>（ <a href="https://halfrost.com/objc_runtime_isa_class/">https://halfrost.com/objc_runtime_isa_class/</a> ）</li>
<li><a href="https://halfrost.com/objc_runtime_objc_msgsend/">神经病院 Objective-C Runtime 住院第二天——消息发送与转发</a></li>
<li><a href="https://halfrost.com/how_to_use_runtime/">神经病院 Objective-C Runtime 出院第三天——如何正确使用</a></li>
</ol>
<p>编程语言 Swift 推荐阅读书籍是《Swift 进阶》、《函数式Swift》。大量Swift Playground 可以了解 Swift 编程语言的特性，这里有份整理 <a href="https://github.com/uraimo/Awesome-Swift-Playgrounds">GitHub - uraimo/Awesome-Swift-Playgrounds: A List of Awesome Swift Playgrounds</a> 。这份资料汇总了 SwiftUI 的资料  <a href="https://github.com/Juanpe/About-SwiftUI">GitHub - Juanpe/About-SwiftUI: Gathering all info published, both by Apple and by others, about new framework SwiftUI.</a> 。这里有本在线书详细讲解了 Combine<br> <a href="https://heckj.github.io/swiftui-notes/">《Using Combine》</a> 。</p>
<p>架构相关扩展阅读可以参看  <a href="https://kangzubin.com/ios-component-articles/">iOS 组件化相关讨论文章汇总 | KANGZUBIN</a> 。</p>
<p>设计模式推荐书籍如下：</p>
<ul>
<li>《设计模式 可复用面向对象软件的基础》</li>
<li>《Objective-C 编程之道：iOS设计模式解析》</li>
<li>《Head First 设计模式》</li>
<li>《大话设计模式》</li>
</ul>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>开发的代码多了，开发效率和开发质量的提升就越来越离不开开发工具了。</p>
<p>iOS 开发工具 Xcode、Instrument 的使用学习，推荐看苹果开发者大会 WWDC 的 Session 视频。</p>
<p>扩展阅读文章推荐：</p>
<ol>
<li><a href="http://www.aosabook.org/en/llvm.html">The Architecture of Open Source Application</a></li>
<li><a href="https://manu343726.github.io/2017-02-11-writing-ast-matchers-for-libclang/">Writing AST matchers for libclang</a></li>
<li><a href="http://yulingtianxia.com/blog/2019/01/27/MVVM-Rules-for-OCLint/">使用 OCLint 自定义 MVVM 规则</a></li>
<li><a href="https://mp.weixin.qq.com/s/vCzUNHyLfjQKF23Biq9z-g">iOS 增量代码覆盖率检测实践</a></li>
</ol>
<p>阅读书籍推荐：</p>
<ol>
<li>《Getting Started with LLVM Core Libraries》</li>
<li>《Modern Compiler Implementation in C》</li>
<li>《Compiler》</li>
</ol>
<h2 id="开发完成"><a href="#开发完成" class="headerlink" title="开发完成"></a>开发完成</h2><p>当开发完成后就需要进行调试、持续化交付、测试。</p>
<p>LLDB 调试推荐先看<a href="https://developer.apple.com/library/archive/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/Introduction.html">官方指南</a>，再看这篇<a href="https://objccn.io/issue-19-2/">“与调试器共舞 - LLDB 的华尔兹”</a>。为了更好的调试体验扩展 LLDB 可以参看这篇文章<a href="https://pspdfkit.com/blog/2018/how-to-extend-lldb-to-provide-a-better-debugging-experience/">“How to Extend LLDB to Provide a Better Debugging Experience”</a>。</p>
<p>另外，这个<a href="https://github.com/MattPD/cpplinks/blob/master/debugging.md">网址</a>收录了各种调试资料。</p>
<p>持续化交付可以参看各大公司的实践，比如：</p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/69526642">知乎 iOS 客户端工程化工具 - Venom</a></li>
<li><a href="https://mp.weixin.qq.com/s/Oa52PvsHw8wS-OvYb3ArZg">百度App iOS工程化实践: EasyBox破冰之旅</a></li>
<li><a href="https://mp.weixin.qq.com/s/6WAq_fM0znjO5eY12vjxFw">如何实现“持续集成”？淘系闲鱼把研发效率翻了个翻</a></li>
</ol>
<p>测试扩展阅读推荐文章如下：</p>
<ol>
<li><a href="https://onevcat.com/2014/02/ios-test-with-kiwi/">TDD的iOS开发初步以及Kiwi使用入门</a></li>
<li><a href="https://onevcat.com/2014/05/kiwi-mock-stub-test/">Kiwi 使用进阶 Mock, Stub, 参数捕获和异步测试</a></li>
<li><a href="https://nshipster.com/unit-testing/">Unit Testing</a></li>
<li><a href="https://tech.meituan.com/2017/06/23/mobile-app-automation.html">客户端自动化测试研究</a></li>
<li><a href="https://mp.weixin.qq.com/s/5rt-uxApK-MeKYn0eKLVcQ?from_safari=1&amp;scene=40#wechat_redirect">PICK一下，iOS自动化测试新方案出道</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzMzk2NDQyMw==&amp;mid=2247488757&amp;idx=1&amp;sn=22465225abd30e56181ad68cdcb60e88&amp;chksm=e8fcc21ddf8b4b0bc97126bb41d95ab8df24c9db20eb9b6efd36ba969ce2e1df000b702ef639&amp;mpshare=1&amp;scene=1&amp;srcid=0221Rpn12CYSXPIE0D1ndrNi&amp;pass_ticket=QDFhyHIsSuU8LkeDk3P%2Bsli%2FL%2BwfD5Y55dNIk2PcCwbawmrDVExKHNGlflrh0dhL#rd">爱奇艺基于AI的移动端自动化测试框架的设计</a></li>
</ol>
<h2 id="上线后"><a href="#上线后" class="headerlink" title="上线后"></a>上线后</h2><p>开发完成后，做完测试，就可以上线了。上线后还需要做大量监控保证用户使用 App 的高可用性和好体验。动态化保证发版灵活和问题的快速修复。</p>
<p>推荐的扩展阅读如下：</p>
<ol>
<li><a href="https://everettjf.github.io/2018/08/06/ios-launch-performance-collection/">iOS应用启动性能优化资料</a></li>
<li><a href="http://www.zoomfeng.com/blog/launch-time.html">iOS启动时间优化</a></li>
<li><a href="https://developer.apple.com/library/archive/technotes/tn2151/_index.html">Understanding and Analyzing Application Crash Reports</a></li>
<li><a href="http://www.zoomfeng.com/blog/plcrashreporter-1.html">PLCrashreporter源码分析其一</a></li>
<li><a href="http://www.zoomfeng.com/blog/plcrashreporter-2.html">PLCrashreporter源码分析其二</a></li>
<li><a href="https://inessential.com/hownottocrash">How Not to Crash</a></li>
<li><a href="https://mp.weixin.qq.com/s/XM4bhncHzRFB7zMJa-g2-Q">Logan：美团点评的开源移动端基础日志库</a></li>
<li><a href="http://yulingtianxia.com/blog/2018/02/28/Hook-Objective-C-Block-with-Libffi/">Hook Objective-C Block with Libffi</a></li>
<li><a href="https://www.fireeye.com/blog/threat-research/2016/01/hot_or_not_the_bene.html">Hot or Not? The Benefits and Risks of iOS Remote Hot Patching</a></li>
</ol>
<h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><p>经历多次 App 开发到上线后的过程，碰到问题，解决问题，越发觉得计算机基础的重要性。牢固的基础能有利于碰到问题时快速定位和解决。</p>
<p>推荐扩展阅读文章和资源如下：</p>
<ol>
<li><a href="https://github.com/raywenderlich/swift-algorithm-club">Algorithms and data structures in Swift, with explanations!</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2018/416/">iOS Memory Deep Dive</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2012/242/">iOS App Performance: Memory</a></li>
<li><a href="http://newosxbook.com/articles/MemoryPressure.html">No pressure, Mon! Handling low memory conditions in iOS and Mavericks</a></li>
<li><a href="https://swift.gg/2017/09/07/friday-qa-2015-09-04-lets-build-dispatch_queue/">从零构建 Dispatch Queue</a></li>
<li><a href="http://yulingtianxia.com/blog/2017/08/28/Threading-Programming-Guide-1/">Threading Programming Guide(1)</a></li>
<li><a href="http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/">Threading Programming Guide(2)</a></li>
<li><a href="http://yulingtianxia.com/blog/2017/10/08/Threading-Programming-Guide-3/">Threading Programming Guide(3)</a></li>
<li><a href="https://swift.gg/2018/06/07/friday-qa-2015-02-06-locks-thread-safety-and-swift/">Swift 中的锁和线程安全</a></li>
<li><a href="http://satanwoo.github.io/2016/10/23/multithread-dangling-pointer/">浅谈一种解决多线程野指针的新思路</a></li>
<li><a href="https://bestswifter.com/deep-gcd/">深入理解 GCD</a></li>
<li><a href="https://xiaozhuanlan.com/Grand-Central-Dispatch">深入浅出GCD</a></li>
<li><a href="http://mrpeak.cn/blog/ios-runloop/">解密 Runloop</a></li>
<li><a href="https://mp.weixin.qq.com/s/gPZnR7sF_22KSsqepohgNg">Matrix-iOS 卡顿监控</a></li>
</ol>
<h2 id="通用知识"><a href="#通用知识" class="headerlink" title="通用知识"></a>通用知识</h2><p>iOS 开发中还有很多和其他计算机领域相通的知识，比如渲染、数据库、网络等。</p>
<p>推荐扩展阅读文章有：</p>
<ol>
<li><a href="https://lision.me/ios_rendering_process/">深入理解 iOS Rendering Process</a></li>
<li><a href="https://objccn.io/issue-3-1/">绘制像素到屏幕上</a></li>
<li><a href="https://swift.gg/2017/04/25/how-do-I-build-a-network-layer/">手把手教你封装网络层</a></li>
<li><a href="https://github.com/Ikiga/IkigaJSON">A high performance JSON library in Swift</a></li>
</ol>
<p>网络相关文章推荐如下：</p>
<ol>
<li><a href="https://mp.weixin.qq.com/s/BIfya6eVaWZW9ZEVz8RRcg">百度App网络深度优化系列《三》弱网优化</a> </li>
<li><a href="http://zhoulingyu.com/2018/05/30/ios-network-traffic/">iOS 流量监控分析 | 周小鱼のCODE_HOME</a> </li>
<li><a href="https://github.com/bestswifter/blog/blob/master/articles/tcp-ip-1.md">TCP/IP（一）：数据链路层</a> </li>
<li><a href="https://github.com/bestswifter/blog/blob/master/articles/tcp-ip-2.md">TCP/IP（二）：IP 协议</a> </li>
<li><a href="https://github.com/bestswifter/blog/blob/master/articles/tcp-ip-3.md">TCP/IP（三）：IP 协议相关技术</a> </li>
<li><a href="https://github.com/bestswifter/blog/blob/master/articles/tcp-ip-4.md">TCP/IP（四）：TCP 与 UDP 协议简介</a> </li>
<li><a href="https://github.com/bestswifter/blog/blob/master/articles/tcp-ip-5.md">TCP/IP（五）：TCP 协议详解</a> </li>
<li><a href="https://github.com/bestswifter/blog/blob/master/articles/tcp-ip-6.md">TCP/IP（六）：HTTP 与 HTTPS 简介</a> </li>
<li><a href="http://chuansong.me/n/2577464">携程App的网络性能优化实践</a> </li>
<li><a href="http://tech.meituan.com/SharkSDK.html">美团点评移动网络优化实践</a> </li>
<li><a href="http://course.tuicool.com/course/details/58058f15a826b5f9e86678fb">万人低头时代，支付宝APP无线网络性能该如何保障</a> </li>
<li><a href="https://mp.weixin.qq.com/s/qD9-Xj0CEil0Wtwq5eiPTg">QQ空间在生产环境使用QUIC协议的经验</a> </li>
<li><a href="https://mp.weixin.qq.com/s/mRcz8o0usoqm_cEoGg9btg">美图HTTPS优化探索与实践</a> </li>
<li><a href="https://github.com/bestswifter/blog/blob/master/articles/https-9-questions.md">九个问题从入门到熟悉 HTTPS</a> </li>
<li><a href="https://github.com/bestswifter/blog/blob/master/articles/quic.md">试图取代 TCP 的 QUIC 协议到底是什么</a> </li>
<li><a href="https://github.com/bestswifter/blog/blob/master/articles/http-encoding.md">小谈 HTTP 中的编码</a> </li>
<li><a href="https://github.com/bestswifter/blog/blob/master/articles/wireshark.md">利用 WireShark 深入调试网络请求</a> </li>
<li><a href="https://juejin.im/post/59caf86ef265da06484467e5">关于 iOS HTTP2.0 的一次学习实践 - 掘金</a> </li>
<li><a href="http://blog.cnbang.net/tech/3531/">移动 APP 网络优化概述 « bang’s blog</a> </li>
<li><a href="http://wereadteam.github.io/2016/02/25/GYHttpMock/">GYHttpMock：iOS HTTP请求模拟工具 | WeRead团队博客</a> </li>
<li><a href="https://knightsj.github.io/2017/07/18/YTKNetwork%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/">YTKNetwork源码解析 | J<em>Knight</em></a> </li>
<li><a href="https://github.com/lefex/LefexWork/blob/master/blog/iOS/iOS%20%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%20HTTP%20%E7%9F%A5%E8%AF%86.md">LefexWork/iOS 需要掌握的 HTTP 知识.md at master · lefex/LefexWork · GitHub</a> </li>
<li><a href="https://github.com/lefex/LefexWork/blob/master/blog/iOS/%E4%BB%A5%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E6%96%B9%E5%BC%8F%E7%90%86%E8%A7%A3SDWebImage.md">LefexWork/以不一样的方式理解SDWebImage.md at master · lefex/LefexWork · GitHub</a> </li>
<li><a href="https://blog.csdn.net/Hello_Hwc/article/details/72853786">Alamofire的设计之道 - Leo的专栏 - CSDN博客</a> </li>
</ol>
<h2 id="专有知识"><a href="#专有知识" class="headerlink" title="专有知识"></a>专有知识</h2><p>专有知识我就不展开说了，参考上面舆图中标注的知识点去检索你需要的就可以了。</p>
<h2 id="视野"><a href="#视野" class="headerlink" title="视野"></a>视野</h2><p>推荐手册：</p>
<ol>
<li><a href="https://developer.apple.com/documentation/">Apple Developer Documentation</a></li>
<li><a href="https://swiftgg.gitbook.io/swift/huan-ying-shi-yong-swift">Swift 开发手册</a></li>
</ol>
<p>开源控件：</p>
<ol>
<li><a href="https://iosexample.com">iOS Example</a></li>
<li><a href="https://www.cocoacontrols.com">Cocoa Controls</a></li>
<li><a href="https://github.com/matteocrippa/awesome-swift">awesome-swift</a></li>
<li><a href="https://xiaozhuanlan.com/topic/5796328014">Swift 开源项目精选 - 应用架构角度</a></li>
<li><a href="https://xiaozhuanlan.com/topic/5271086934">Swift 开源项目精选导图</a></li>
<li><a href="https://github.com/ipader/SwiftGuide">SwiftGuide</a></li>
<li><a href="https://xiaozhuanlan.com/topic/7314260859">Swift 开源项目团队介绍</a></li>
<li><a href="https://xiaozhuanlan.com/topic/9687124530">Swift 知名开发者介绍</a></li>
</ol>
<p>视频推荐  <a href="https://talk.objc.io/">Swift Talk - objc.io</a> 。</p>
<p>这里的 iOS 博客都很值得订阅，<a href="https://github.com/awesome-tips/blogs">GitHub - awesome-tips/blogs: 行业优质博客汇总</a>。</p>
<p>其他资源参看上面的地图。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;43篇 &lt;a href=&quot;https://time.geekbang.org/column/intro/161&quot;&gt;《iOS开发高手课》&lt;/a&gt;已完成，后面会对内容进行迭代，丰富下内容和配图。最近画了张 iOS 开发全景舆图，还有相关一些资料整理，方便我平时开发 App 时参
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://ming1016.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>白龙班</title>
    <link href="http://ming1016.github.io/2019/06/19/white-dragon-class/"/>
    <id>http://ming1016.github.io/2019/06/19/white-dragon-class/</id>
    <published>2019-06-19T11:24:38.000Z</published>
    <updated>2021-04-11T14:42:09.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是我十二年前写的一篇小说。当年每天早上8点半上班，为了写这篇，我四点起床，写到早饭前，坚持了好几周才完成。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>秋天的白龙山上，茂密的树叶渐渐枯萎，风中开始透着丝丝寒意。白龙班里多了五十来个一级成员。这些优秀的学生分布在不同的老师手上，如今飞逸老师手下已经有了九个一级成员，两个二级成员。</p>
<p>在这九名一级成员中，有一个学生名叫暴，沙西德星人，白发，常穿一套深紫底色黑花纹紧身衣，带着荧光坠子。她只用一年时间就升级成为一级成员。她为人十分冷淡，行事冷静，极少与人交谈。在升级竞赛中她选择的科目是作曲，她的参赛乐谱《清心宁静》， “宫，商，角，徵，羽”五音协调，吹坃器奏出，这是非常传统的一种谱曲，现在使用的并不很多。评委起初就觉得曲子十分好听，只是觉得由这小姑娘吹坃器而出，太过传统与演奏者形象不太协调。但这曲子实乃暴所谱。到了后面部分，节拍渐渐加快，五音又加上两音，使得曲子淳化入耳，正当评委听得心情震荡，如痴如醉之时，曲子极速进入高潮，两三个回旋之后戛然而止，余韵绕梁，意犹未尽。暴将坃器放下，一个评委上前拿起这坃器仔细观摩，显然这位年轻的评委还没有见过这古老的乐器。</p>
<p>年轻评委问道：“你这玩意吹出来的声音很奇特也很好听，能告诉我这是什么吗？”</p>
<p>暴表情平淡地说道：“这是沙西德星特有的吹奏乐器，我们叫它坃器，坃器形体为平底卵形，拿在手中便可运指演奏，为了减少复杂的叉口指法，我将其音孔按相似于冥星笛子的音孔顺序排列。坃器的吹奏者可吹出二十六音，包括两个八度内的全部半音和一个泛音。”</p>
<p>年轻评委说：“原来是坃器啊，坃器的曲子我以前也曾听过，但是怎么听你演奏的味道与以前我们听过的完全不同。”</p>
<p>暴说：“那是当然，我很早就开始制作仿古的坃器，把古制梨形六孔骨坃器改造为新型的九孔坃器，材料使用的是沙西德的紫陶。这九孔坃器在保留了原六孔骨坃器的外形和音色上又增大了音量，扩展了音域，能吹出全音阶和半音阶，使它成为可以转调的乐器。”</p>
<p>年轻评委说：“难怪这音色这么古朴醇厚，低沉悲壮，极富特色。你改变以前坃器的音孔排列方式，使演奏更为方便容易了。我还想问一下，是不是用它既可以独奏，又可以合奏或伴奏？”</p>
<p>暴回答说：“合奏伴奏就不必了，我一直都是用它独奏。”</p>
<p>年轻评委继续问道：“我以前听说坃器难奏高音，不知你的《清心宁静》后半部分能演奏出高音是何缘故。也是因为你改造了坃器的缘故吗？”</p>
<p>暴说：“正是。但是我后面那部分曲子并不是我参赛曲子《清心宁静》，而是我另外一部《心无点尘》，我一时兴起将它奏了出来。如要让坃器奏出高音，并不难，只是演奏高音的方法还需多多研究。你仔细看看我的那个坃器。”</p>
<p>年轻评委接过暴递过来的坃器，仔细察看。见那坃器平底卵形，紫陶铸就，高大约八厘米，腹径七厘米，外表镶嵌一块红木，红木饰片上刻绘着一条白龙和几块云纹。音孔前七后二，加上侧面一个较大的孔，共为十孔。年轻评委看到这里，大悟般说道：“我明白了，全凭多出的这一个大孔。”</p>
<p>暴冷冷的说：“不是。是因为所用紫陶的缘故。那个较大的孔是吹孔，刚才我吹奏时你没注意到吗？”</p>
<p>年轻评委的脸一下子红了起来，原来刚才他听得如醉如痴，似入仙境一般，眼眼一直看着美丽冷艳的暴，如同听着悦耳曲子时欣赏着一副赏心悦目的画一般。至于那音乐如何发出的他哪里顾得管啊。</p>
<p>暴伸手将年轻评委手中拿着的坃器拿了过来，转身将其放入挎包里，顺手取出一只嗤，众评委猜想这一定又是一件被改造过的古乐器，于是没有再多问些什么，示意暴继续演奏。</p>
<p>一段悠长的颤动波过后，曲子很快进入欢快阶段，节奏虽快，却不杂乱，欢快愉悦之情随即而来，老者听此便会忆起儿时欢快时光，中年人听时便觉余力未减，青年听时顿感热血沸腾。嗤原本只有六孔，还包括了上出孔，是底端封闭的一种横吹竹管乐器，嗤和笛用料相同，读音相近，但是所奏之音却大不相同。暴手中这个嗤如坃器般被改造为十孔。使用半孔指法﹐可吹全十二律。</p>
<p>众评委看着暴熟练的运指动作，手中无不揑了一把冷汗，但凡使用过乐器又特别精通笛和弦奏乐器类的人，无不惊叹暴的这双手能够在同一节拍中同时奏出许多种音，听起来如同四五个人合奏一般。监管人员也当场确定暴没用魔法舞弊。</p>
<p>正当大家全神关注暴的演奏之时。有一位女评委实在忍不住了，她突然站起来说道：“等等。”</p>
<p>暴立即停止吹嗤动作，奇怪的看着她。发现这个女评委方形脸蛋，带着一副眼镜，其余没有什么特别之处。</p>
<p>女评委说道：“你停停，你再将先前那《清心宁静》重奏一遍，当然能够顺便将《心无点尘》也吹奏出来那是最好，我很想再听一遍。”</p>
<p>暴漠视的说道：“我那《清心宁静》有九十八段，《心无点尘》二百零一段。我怎能在这一下子奏完。这些曲段都是我根据所遇不同事情时的不同心情谱写出来的。竞赛开始时我有几分紧张，所以我吹奏了其中一段“闭月羞花”。时间一长，我就不再紧张，我便随性吹奏了《心无点尘》中的一段短曲“催情”，后觉不妥，便将其缩短，草草结束。你竞然叫我把它们全部重奏一遍，我怎能办到呢？”</p>
<p>女评委看暴并无善意，她用眼神余光向周围瞧去，看到的都是众评委对自己的责怪，就识趣的坐了下来。</p>
<p>在场的还有冥星大型集团的许多高层人物，他们一眼就看出了暴的商用价值，她那两部曲谱和接近三百个极具特色的曲段如果用于商业演出，一定能创造很大的利润。而且暴还很年轻，仅十六岁，且相貌出众，身材匀称。当即在场的那些高层人物争相询问起暴的相关情况来。</p>
<p>暴正准备离开竞赛舞台，主评委叫住了她。</p>
<p>暴扭过半边脸低声说：“我已奏完，如何评断你们商量去吧，如你们不是因为我的曲子而是我本人的缘故评判不公，损坏的只是你们白龙班的名誉，与我无关。”</p>
<p>主评委一脸委屈地说道：“我不是这个意思，我想我们在座各位评委对你的曲子都十分喜欢的，你也不用担心升级一事。多少年来，白龙班很少有人能像你这样，不仅能谱出美妙的曲子，还能将古乐器改造为适合演奏所谱曲谱的乐器。我并不是要勉强你再奏一遍，我只是觉得你使用的是大家所不熟悉的乐器，你吹奏一遍就让众评委对你做出正确评价是有一定难度的。你为何不用一件通用乐器来演奏一遍呢？”</p>
<p>暴心想：“这般绕弯子，就是不相信我了。难道他们还以为我这乐器中有猫腻吗？”</p>
<p>暴走下舞台，将下个准备登场学员手中的笛子一把夺过来，坐在舞台边背对着评委，独自吹了起来。这曲子像是用坃器和嗤吹出，由于这两种乐器的音律评委们以前很少听到，俗话说音乐效果三分在曲，七分在音。由于大家对笛子声非常熟悉，所以曲子的精妙之处用笛声完全展露出来，众评委这才意识到方才所听坃器和嗤之音优美并不是那坃器和嗤有什么奇妙，而是演奏者技艺高超。于是对暴更加佩服起来。</p>
<p>原来暴从小就会吹奏笛子类主流乐器，只是最近几年，为采集多样音色，开始研究起改造古乐器来。虽然好久没有使用笛子了，这下吹起笛子来仍然娴熟不减当年。</p>
<p>天色渐黑，排在她后面等待竞赛的学员觉得暴所奏曲子强于自己太多，渐渐地差不多都自己离开了。大多数学员由于循规蹈矩，在曲风把握上没有突破，一年能谱四五段新曲已算较多，但如果追究这些新曲的来源，总是能够找到相对应的曲谱来。暴所谱曲段却风格众多，虽显繁杂却不失节奏，尽显新意，随心所欲，果真是信手沾来，皆成新曲。</p>
<p>最后在场的只剩下几名对作曲痴迷的学员。评委一个都没有离开，谁都不愿意丢掉这样一个能够将《清心宁静》欣赏完的机会。次日早上，也不知道暴演奏到第多少段了，总之没有一段是重复的，段与段之间衔接处理得天衣无缝，每当从一段不知不觉切换到另一段时，众评委无不“啊”的一声恍然大悟，随即鼓掌表示自己的钦佩之情。暴吹得有些倦了，望一眼远方刚升起的红彤彤的太阳，伸了一个懒腰，丢下还沉醉在音乐中的评委们，招呼没打一声就离开了。</p>
<p>这一晚飞逸也一直呆着那里，虽然她不是评委，也不是很精通乐理，但是从那些专家的议论中，她已经感到暴的了不起，对她产生了好感。后得知暴将分配到自己手下，心中更是欣悦无比。</p>
<h2 id="雪叶归来"><a href="#雪叶归来" class="headerlink" title="雪叶归来"></a>雪叶归来</h2><p>这天，雪叶曾经呆住了一年、受尽苦难的房屋门突然打开了，踏步走进一个人来。此时房间里已堆积了厚厚的一层灰，房角上布满了蜘蛛网，破烂的被褥还横七竖八地摊在床上，被褥上面也已经蒙上厚厚一层灰。显然两年来这里没有人来过。来人衣衫洁净，脚穿一双粉红色长筒靴。这人走到床边那面镜子旁，用手抓住袖口，慢慢拭去镜上的灰尘，一张妖娆娇媚，似玉生香的脸庞渐显出来。这时，她双眼流出泪水，镜台渐渐的被泪水给洗干净了。这时，她好象看到镜中浮现出一个头发散乱，枯皮瘦脸，衣衫褴褛，却同自己一般泪流满面的苦女子。</p>
<p>这人坐在床头看着敞开的门呻吟道：“米生，我还在这里等你啊！我一直想念着你，你知道吗？我一定要等你回来！”</p>
<p>这人一直坐在那，久久没有起身。</p>
<p>她就是雪叶，如今她已在明朝学府的另外一个叫做斑国班的班上取得了一级成员身份，现在办理了转班手续，今天回到了白龙班，依旧在飞逸老师手下做学生。当飞逸看到转班生的名字叫雪叶的时候，曾经大吃一惊，一度推辞不愿接纳。但由于其他老师没人愿意接纳这个传奇式的学生，因为雪叶曾是自己的学生而终于不得已将她接纳下来。</p>
<p>这时的雪叶，无论是衣着还是言谈举止已与往日大不相同，两年的变化着实让以前所有认识雪叶的人吃了一惊。雪叶一回到白龙班，就到米生住处去找米生，长川贞等人告诉雪叶，米生外出去给白龙班办事情去了，什么时候回来他也说不准。雪叶白天在白龙班里学习，夜晚就回到山下那间小屋中去等米生。</p>
<p>飞逸看雪叶每天晚上总是独自离开白龙班，去住山下。一天，她跟踪雪叶来到白龙山下。雪叶曾经住过的这间房屋与镇上其它房子相距很远，处在香川井镇的边缘地带。在这秋尽冬来的季节里，这间破旧的房屋周围的树木叶子已尽脱落，门前那条春夏潺潺流淌着的小溪早已枯竭。飞逸看着雪叶开门走进那间小屋，她便悄悄的躲在外边听里面的动静。</p>
<p>夜里四处一片漆黑，寒风飕飕刮着，枯枝发出唰唰唰的响声……忽然，屋中传来凄凉的哭声，这哭声撕心裂肺，听着叫人不寒而栗。</p>
<p>就这样飞逸一连跟踪了雪叶半个多月，发觉雪叶除了每晚去白龙山下的小屋外，没有任何异状，也没有和其他外来班级人员联络，方才放下心来。</p>
<h2 id="白羽号"><a href="#白羽号" class="headerlink" title="白羽号"></a>白羽号</h2><p>飞逸门下除了雪叶外，其他十个一、二级成员都学习和生活在她用尽毕生心血研制的一艘叫做“白羽号”的巨型太空飞船上，这架太空飞船放置在白龙班五层，此层是白龙班专门用来建造和存放大型飞船的兵工厂基地。</p>
<p>明朝学府一级成员要成为二级成员也需要通过竞赛，但是这个竞赛的范围扩展到了整个明朝学府，每一个学科的竞赛者都来自所有明朝学府各班。哪年哪个班要是能够有一个人成为二级成员，那就是十分了不得的事情了。白龙班仅飞逸老师一人手下就能够有两个二级成员实属不易，当然这也得亏飞逸在整个明朝学府中是一位十分有名的飞船设计师，那两个二级成员都是在飞逸老师的指导下，依靠电子学知识设计了新的机器人，才在竞赛中取胜而成为二级成员的，这自然也成了吸引其他优秀学生投入她门下的重要原因。</p>
<p>雪叶每天穿梭于飞逸“白羽号”太空飞船和小屋之间，慢慢体会着当年米生来回奔波的辛苦。这两年里冥星议员的女儿月湖和教米生招式的德斯都陆续成为了一级成员，其他的一级成员分别是个子较小的乐天派爱笑女易慧，方脸长鬓角的宋藏金,年龄偏大专攻单挑竞赛的华房星,月湖的妹妹半月,爱热闹的小侃和喜好乐器舞蹈的暴。另外两个二级成员是带红宝石耳环，身材高挑，抚媚的紮惑浮和头戴黑色魔女发冠，胸前带红宝石胸针，表情严肃的凌穆。雪叶当年一起学习的那些人由于难以取得一级成员身份而陆续离去，加之这两年雪叶一直都没有露面，白龙班极少有人认识她。</p>
<p>在白龙班里学习，不管级别高低，上午的课程都是在一起学习，下午一般各自研习各自学科项目。飞逸门下学生在“白羽号”建设初期就开始在它上面学习。冥星八六九八年十二月二十一日，这天，是“白羽号”峻工的日子，飞逸上午在传授完推进器原理后，将所有一级以上成员叫到自己的房间。飞逸的房间在“白羽号”前身部位，第五段，四十三区，301号间。飞逸的房间一共七百多平方米，分为两层：第一层有餐厅，客厅和卫生间；二层是实验室，娱乐室和卧室。飞逸招呼他们五人坐在客厅沙发上，自己去餐厅在点餐机器上选择了几份快餐，几分钟时间快餐便通过专用管道输送过来。</p>
<p>飞逸将吃的分发给每个人，自己拿了一份，吃了一口说道：“我们边吃边说，以后我们每天下午都要这样在这里聚餐，一起讨论白羽号的改进和白龙班的前途。”</p>
<p>易慧说：“我们这些人里还没有会制造飞船的人，紮惑浮和凌穆也只是对机器人制作精通而已。我们想帮你也帮不了啊。”</p>
<p>小侃接着说道：“是啊，我们现在还需要学习，现在飞船技术对我们来说还是很陌生的。”</p>
<p>德斯补充道：“如果说那些批量生产的飞船，不用多久我们就能够学会操作，原理的学习也用不了多久。但是老师这飞船设计巧妙，功能众多，体积巨大却仍然能够灵活运动等等，真是难以学会操作，更不用说对它进行改进了。”</p>
<p>半月说：“都这么长时间了，我还没有走遍过这“白羽号”，它真的是太大了。”</p>
<p>小侃说：“别的那些我们还不了解的先别说，光是看看老师房间的这个客厅就知道这飞船的设计有多精妙了。墙那边的那盆含羞草是一个音乐播放器，轻轻触碰它的叶片它就会立刻紧闭下垂，像害羞少女一般，含羞草的细胞是由细小如网状的蛋白质即股动蛋白所支撑。产生闭合运动时，股动蛋白的磷酸会脱落，当股动蛋白束散开时，细胞被破坏，结果水分跑出来，以致产生闭合运动。这种股动蛋白一般存在于动物的肌肉纤维里，飞逸老师将这种股动蛋白智能化，如同医生把脉一般，使之能够得到触碰者的心情数据，根据这心情数据播放出触碰者想听的音乐。还有这飞船的墙壁，地板和天花板全是光声感应屏，别看上面显示的是山水、瀑布、小溪、树林的风景画，飞逸老师工作时，这些感应屏幕就变成了系统显示器。它通过接受控制器发出的光感信号进行操作，地面可选区域进行全息图像显示。控制器使用的是表面声波式触摸屏，之所以没有用其它如电阻式，电容感应式，红外线式触摸屏，是因为表面声波触摸屏具有清晰度较高，透光率好的特点，耐用性，抗刮伤性良好。电阻式和电容感应式等表面有层度膜，使得清晰度和灵敏度稍差。表面声波式较其它类型触摸屏缺陷在于要经常去尘，灰尘会阻塞触摸屏表面的导波槽，使声波不能正常发射，或使波形改变导致控制器无法正常识别，但是这个缺陷在白羽号里完全可以不管，因为白羽号内对空气的净化工序相对于其它量产和非量产飞船来说是最好的，里面几乎一尘不染。”</p>
<p>易慧说：“我也喜欢表面声波屏，特别是它少了那层度膜，有那层度膜会使屏幕模糊，影响使用效果。小侃你知道它的原理吗？改天我们也将我的那个电阻式触摸屏控制器改造成声波屏的吧！”</p>
<p>小侃愣了一下，看看周围，见没人答话。她这时看见飞逸老师在一旁微笑着在听她们对话。</p>
<p>小侃尴尬地说：“我，我也不知道这原理，其实我连那些老式的原理都不清楚。我们一级成员怎么可能知道这些，你要问就问紮惑浮或凌穆好了。她们俩都是专攻电子学科的。”</p>
<p>暴突然说道：“这个简单，我知道，不用去问她们。声波屏的三个角分别粘贴着东、西、南、北四个方向的发射和接收声波的换能器，四边刻着反射表面超声波的反射条纹。当手指或软性物体触摸屏幕的时候，部分声波能量被吸收，变为接收信号，这些信号经过控制器处理后成为触摸者所要的东、西、南、北坐标。”</p>
<p>易慧问道：“什么是换能器。”</p>
<p>暴说：“我真奇怪你是怎么升上一级成员的。换能器是用特殊陶瓷材料制成的，分为发射换能器和接收换能器。它的功能是把控制器通过触摸屏电缆送来的电信号转化为声波能和由反射条纹汇聚成的表面声波能变为电信号。”</p>
<p>飞逸在一旁听着暴那有条不紊的原理讲解，心中暗喜。</p>
<p>德斯冷嘲热讽道：“想不到你们对这些偏门的小玩意这么有兴趣，知道的东西不少啊！”</p>
<p>小侃这时拿起茶几前的控制器，输入一串密码。墙壁，地板和天花板的风景画立刻变为白羽号各个部位的结构图，茶几和一些装饰用的植物都被移到地板下一层隐藏起来，沙发根据所坐人数将多余的部分也埋进下层，大家围坐成一个圆圈，中间呈现一个巨大的白羽号全息图。</p>
<p>小侃奇怪的说道：“原来老师早已经给我们准备好了。”</p>
<p>飞逸接过小侃手中的控制器，这控制器有十二寸大小，整个控制器仅是一块可触摸屏幕，她随手在上面点了几下，每个沙发被分为上下两块拉开，里面出来一个支架，随后沙发又合并上，每个支架上都架着一个和飞逸手中一样的触摸屏控制器，可以随意取下安上。触摸屏控制器旁还配有一台含羞草音乐播放器。</p>
<p>飞逸说：“点击控制器屏幕右下角图标，可以选择将沙发移动到不同区域，我已经定制好七十八个区域，这些区域分别模拟了白羽号的各个部位，在这个房间里可以对白羽号进行模拟改进，七十八个区域前都有相对应部位的全息图，中间是整个白羽号运作效果全息图。你们可以先试试看。”</p>
<p>小侃他们都选择了，接着沙发开始移动到各个区域去，如果几个人选择的区域相同，沙发会自动排列好，当沙发移到对应区域时，控制器系统会自动切换到对应部位的可编写系统中，编写代码也是使用触摸方式，人们可以随时调用操作系统屏幕下五分之二区域作为代码输入区。</p>
<p>飞逸看他们已经各就各位，说道：“我知道你们对太空飞船不够了解，更别说我研制的这个白羽号了。我虽然是你们的老师，但是从级别上来说我还是和紮惑浮，凌穆一样是个二级成员。按照明朝学府的规定，要成为三级成员，首先要申请为老师，门下必须有三名学生升级成为二级成员。还有一个条件就是在某一专业里的成就获得学府内阁承认，最后方能升级成为三级成员。如今我已有紮惑浮和凌穆两个二级成员，加上白羽号这个已经研究成功的成果，就差一个二级成员学生和白羽号的进一步完善了，我升级为三级成员指日可待。我叫你们下午到这里来帮助我也是这个缘故，我要在这一年里从你们这些一级成员中培养升级一个二级成员。其他人我将教给你们飞船的相关知识，以便和我一起完善白羽号，使白羽号能够尽快获得明朝学府内阁的承认。”</p>
<p>易慧，小侃，月湖，半月等都为飞逸感到高兴，想到自己老师马上就能够成为三级成员，无不感到脸上有光。紮惑浮和凌穆也因目前自己无法通过学府审核而独立师门，只好决定继续跟飞逸学习更多的太空飞船知识。</p>
<p>雪叶心想：“白龙班学生自私和势利，原来都是自老师学来。飞逸老师为了自己尽早升级，不顾他人如何想法，就一起喊来帮忙。不过看来同学们也挺开心似的，毕竟飞逸还要从他们中间培养一个二级成员，她一定会将自己的知识全部传授出来。现在我们一共有九名一级成员，飞逸会重点培养谁呢。不管她心中人选是谁，我都要全力争取，我要让米生回来时看见我的级别高高的，而不是以前那个可怜的雪叶，让他离开月湖，跟我过上好日子。”</p>
<p>飞逸看见雪叶一个人低着头在想什么，就没有去理会她。她又看了一眼暴，然后对大家说道：“你们自己先在这里看看白羽号内部结构的资料，有不懂的问题到二层来问我，我在二层实验室里一直工作到晚上十一点，只要是问的有关白羽号的问题我都会回答。如果你们学习感到累了，可以到二层娱乐室里休息休息。以后每天都这样安排。”</p>
<p>飞逸说完就走向暴，跟暴说了几句话后就上楼去了。雪叶将这一切看在眼里。心想：“飞逸一定有意要培养暴，暴资质奇好，可是飞逸她肯定也知道我在斑国班升级也只用了一年时间，而且去年我同时得到了单挑，电子，魔法三个学科的第一，我的成绩决不比暴差。自我回来后，飞逸总是避开我，不知是何缘故，这我得好好问问。”</p>
<h2 id="白艳公主"><a href="#白艳公主" class="headerlink" title="白艳公主"></a>白艳公主</h2><p>晚饭时分，雪叶正打算离开飞船回到山下小屋去，发现暴起身向飞逸二层工作间走去，雪叶跟上暴，将她叫住。问道：“是飞逸老师叫你这个时候上去找她的吗？”</p>
<p>暴感到奇怪，她说：“你怎么知道的。”</p>
<p>雪叶笑了笑，说道：“没什么，我们一起上去。”</p>
<p>暴点了点头和雪叶一起走上飞船二层。飞船的二层和一层面积一般大小，一上来就是一个娱乐大厅，大厅东侧“金珠坊”设有吧台，西侧“赢珠坊”设有十多张赌台和二十多台角子机。北侧“御匾所”地面为绿草地，碎石子铺路，“御匾所”中央有白月池，池边假山环绕，池上有一座拱桥叫白月桥，过桥池中间有一飞檐亭，亭旁有松，有梅，有竹。这里的竹林挺拔翠绿，且成主体。因竹表会友意，故此处亭子名会友亭。飞逸来到会友亭显然已有多时，当她看见雪叶和暴一同上来时，脸色一沉，叹了口气。</p>
<p>暴快步走近飞逸，说道：“老师，你找我有事吗？”</p>
<p>飞逸看了一眼暴身边的雪叶，说：“暴，雪叶，你们俩和其他的一级成员相比具有很大优势，从你们升级竞赛情况看来，你们能力并未完全发挥出来。雪叶，你擅长的学科较多，虽然二级成员竞赛是在整个学府进行，但你机会却比其他学生要多，那次你在斑国班一连取得三个第一名，着实在他们班风光了一回，我也耳有所闻。你以前是我们班的，我打心底为你感到高兴。暴，我总看见你驾驶着一个白色机器人，是叫‘白艳公主’对吧。那个是你做的吗？”</p>
<p>暴点了点头。</p>
<p>飞逸接着对暴说：“我还以为你会参加电子竞赛，结果你仅仅报名参加了作曲一门竞赛。你那场作曲竞赛我看了，相当精彩，人们都听得入了神，当时人们感觉时间过得很快，转眼间一晚上就过去了。”</p>
<p>暴说：“我这人对作曲感兴趣，就觉得没必要参加那么多门类竞赛了。”</p>
<p>飞逸说：“难得你这么自信，你来白龙班之前就制造了‘白艳公主’机器人，是谁教你做的？”</p>
<p>暴说：“是我母亲教我做的。”</p>
<p>飞逸微微一惊，她说：“能问问你母亲是谁吗？”</p>
<p>暴说道：“你问我母亲干嘛？”</p>
<p>飞逸一脸尴尬。</p>
<p>暴马上感觉到这样回答对老师有些不敬，就改口说道：“我母亲是沙西德星德比学府的老师。”</p>
<p>飞逸说：“哦，原来不是明朝学府的，难怪。我叫你来就是想多了解了解你。还有，去年你为什么会选择来白龙班呢？”</p>
<p>暴说：“我到白龙班来原因很简单，全都是因为这场学府大战。由于爆发战争，母亲被迫参战，结果前年在你们白龙班领域死去。我自小是母亲带大，母亲性格倔强，树敌无数，我都不知道她是战死沙场的还是被自己人害死的。我如果回沙西德星，定是凶多吉少。我听说冥星政府不能控制各学府间爆发战争，各学府里各个班级立场也有不同，白龙班处于中立，我自然就选择了进白龙班，与其说是加入白龙班来学习，不如说是逃难来了。”</p>
<p>飞逸说：“说起这场战争，我虽是冥星人，但也不怪你们沙西德人。你们星球的人民也无法掌握自己的命运，全球居民和学府里的人都要服从沙西德国王政权，国王说要打谁你们就得去打谁，政府对你们进行的是洗脑式教育，从小给你们灌输的是效忠国王的思想。冥星政府无法控制学府，明朝学府里各个班级都是各自为政，各辖一方。我不认为我们冥星比你们沙西德星好。你看这次问题就暴露出来了，冥星遇到了外敌侵略，反侵略得不到更多人的支持，爱国者被人称为不爱和平的人，冥星在受到外敌侵略的同时发生了内战危机。”</p>
<p>暴说：“此话不假，家家都有本难念的经。我来白龙班这一年里，就看到了由于白龙班和沙西德星签订了不战条约，白龙班屡遭明朝学府其他班级袭击的许多事情。”</p>
<p>飞逸说：“现在冥星就像一盘散沙，正被沙西德星和狱星一起欺负。好了，我说这些和白龙班宗旨无关的话干什么？”</p>
<p>暴说：“好吧，你的问话我都回答了，那我先走了。”</p>
<p>暴说完便转身欲走，飞逸忙说：“等等。”</p>
<p>暴停下正要移动的脚步，转过半边身子说：“老师还有什么要问的吗？”</p>
<p>飞逸看了看暴冷漠的眼神，又看了看雪叶，心想：“暴年龄虽小，但由于她母亲从小就教给了她著名的德比学府里的上乘知识，她自然是不在乎其他的知识。如果她不用明朝学府里的技术升级，只怕学府评估时不会将她算做我的学生。除了雪叶外，其他那些一级成员离二级成员的升级条件相差太远。我升到三级成员的希望就只能够寄托在雪叶一个人身上了，但雪叶……”</p>
<p>飞逸对暴说：“你现在没有了亲人，已经是白龙班的学生，就把这里当作你的家吧！以后有什么困难你直接跟我讲，我会将我所有的知识教给你。你先回去吧，我还要话要跟雪叶说。”</p>
<h2 id="米生"><a href="#米生" class="headerlink" title="米生"></a>米生</h2><p>暴答应一声就下楼去了。飞逸看暴走后，对雪叶说：“自你回白龙班后，我一直都有问题想问你。”</p>
<p>雪叶说：“如果今天我不是自己上来，只怕你是不会问我的了。”</p>
<p>飞逸说：“不是。我只是平时太忙，一直没有抽出时间来。”</p>
<p>雪叶心想：“哼！我回白龙班后你就一直对我不闻不问，还处处躲着我，你知道我总是晚饭时分离开，就叫暴这个时候上来，分明是故意不让我知道。真是虚伪，难怪米生不喜欢你。你不想教我，我就偏不服这个气，就是偷学我也要将你的本事学到手。”</p>
<p>雪叶想到这里，便笑着说道：“飞逸老师难得有空，现在你想问我什么就问吧！”</p>
<p>飞逸说：“你在斑国班的日子过得还好吧？”</p>
<p>雪叶说：“谢谢老师关心，我在斑国班的日子过得很好，那里的老师对我很亲切，说句实话，我还真不想离开那里呢！”</p>
<p>飞逸说：“那你为什么又回来了呢？”</p>
<p>雪叶说：“当然是为了和米生在一起了！我听长川贞说他去给白龙班办事去了，你知道他什么时候回来吗？”</p>
<p>飞逸听到雪叶为米生而回，不自觉地后退了一步，关上冒出汗来，紧张得脸色苍白。她结结巴巴地说：“我……我不知道，你还想见米生干什么，他对你那样……难道你是来找他报仇的吗？”</p>
<p>雪叶依然笑着回答说：“你们误解我了。我来只是想和米生重归于好，和他一起过上好日子。米生自来白龙班后就一直没有过过好日子，他以前那样对我是环境所逼，并非真心喜欢他人。现在我已经是个一级成员了，我们就不用再过苦日子了。而且我还要继续升级，帮米生实现他的梦想。”</p>
<p>飞逸看雪叶一字一句说得认真，神情也十分真诚，知道她的话均出自真心，就说道：“那天你离开白龙班，月湖抢过米生手中的电子记事本，知道了一切。因为你已经中了米生下的毒，我们还以为你已经死了。米生他这样对你，你就不恨他吗？”</p>
<p>雪叶说：“我从来没有恨过他，虽然当时我很难过，但后来想想也是，我当时那副模样谁瞧见会喜欢我呢？我现在最大的愿望就是马上见到米生，让他知道我们在一起以后会很幸福。”</p>
<p>飞逸心想：“米生只是个见利忘义的小人，而且心狠手辣，真是可怜雪叶了。如雪叶说的是真心话，那么……”</p>
<p>飞逸说：“你现在这身份，只怕米生高攀不上了。”</p>
<p>雪叶说：“米生就是再没本事，我都不会嫌弃他。飞逸老师，你能告诉我米生到底去哪里了，什么时候回来吗？我问了其他老师，他们都说不知道，他是你的学生，如果你说不知道，我还能够去问谁呢？”</p>
<p>飞逸说：“我要是知道一定会告诉你的。你那次中了米生下的毒是怎么好的呢？”</p>
<p>雪叶说：“那天米生回来不认我，我一个人恍恍惚惚跑下山后，被香川井镇的人抓住，他们将我遣送回华尔辞，途中用药给我解了毒。我违规住在明朝学府，如回到华尔辞必定要受惩罚，可能要在监狱里呆上十几年甚至更长时间。那时我唯一担心的是这次和米生一别，日后再无法相见。于是路经斑国班领域时，我就拼死从飞船上跳了下去，侥幸落到湖水中，后被斑国班里的人救起，我才有了今天。”</p>
<p>雪叶说到后面的遭遇时表情异样，完全没有了谈及米生时的那股兴奋，飞逸心想：“这两年里，雪叶她一定受过很多委屈，方才她那番话虽说未必属实。但我估计，这两年时间里支撑她活下来并拼命努力的唯一动力就是米生了。”</p>
<p>飞逸鼓励她说：“你的潜力很大，当年完全没有必要把机会让给米生，如果当年是你留在白龙班，说不定你们的生活早就过得很好了。如今你再加把劲，让米生回来看到你的大有作为，为以前自己的绝情感到内疚吧。”</p>
<p>雪叶又开心起来，说：“对，要他内疚一下也好，我要让他知道要珍惜我。日后我还需要老师你多多的帮助呢，只有老师你帮助我，我才能进一步升级啊。”</p>
<p>飞逸说：“和我不用这样客气，你是我的学生，有什么不懂的，问我便是。”</p>
<p>雪叶说：“这是当然了，我又怎么会和老师您客气，我只是希望老师多关照我一下。”说完，雪叶抬头看了看大钟，说：“老师，对不起！时间不早了，我要下山了。</p>
<p>飞逸说：“你为何每天都要下山。“白羽号”里住不习惯吗？”</p>
<p>雪叶笑着说：“不是，我喜欢住在我以前住过的那个小屋里，在那里有米生和我生活的许多记忆。回忆虽然苦多甜少，但却令我难以忘怀。”</p>
<p>飞逸说：“我能够理解你的心情，我也有过你这样的年龄，也曾有过类似你的感觉。等你再长大些，这些感情的事可能对你就不再那么重要了。”</p>
<p>雪叶笑着摇了摇头，离开了。飞逸站在原地很久没动，心中很是感慨。</p>
<h2 id="求知"><a href="#求知" class="headerlink" title="求知"></a>求知</h2><p>后来的日子里，一级成员们每日上午和学员一起学习，下午就到飞逸的房间里进行“白羽号”的研究。除了暴以外，飞逸给一级成员每人都制定了学习计划，计划的范围，几乎都是些操作飞船的技能。雪叶想深究却得不到足够的帮助，她上二层房间找飞逸时，飞逸总是和暴单独在一起。对雪叶提出的问题，飞逸每次都只是简单回答了事。雪叶心中十分气愤，对飞逸耿耿于怀。</p>
<p>一次，雪叶在白月桥上碰到飞逸，她提问说：“我看资料中提到‘白羽号’左侧装甲板在作战时会注入一种叫做‘猛禽’的物质，导致形状变化，结构强度增大，并且会拥有自我修复功能，特别能够有效的防御配备斩舰刀的机器人。斑国班却有一种非量产机器人叫‘孔雀红’，由尤科斯老师制作，这个机器人配有一把斩舰刀，比之其它刀显得更长更锋利，刀身由高密度的重金属粒子制成，平时压缩放置在‘孔雀红’左肩的护甲上。对大型战舰有一刀两断的威力，它主要针对的就是那种拥有自我修复功能的战舰。飞逸老师，你说，你的‘白羽号’和尤科斯的‘孔雀红’都说自己是对方的克星，不知道较量起来谁比谁厉害。现在你给我们看的资料全是封装好的，我想深究却无从下手。我看这资料只适用于学习驾驶。”</p>
<p>飞逸倒十分镇定的说：“这本来就是一个循序渐进的过程，不可操之过急。我这样做不过是希望你们先能够系统的了解‘白羽号’。”</p>
<p>雪叶气愤的说：“那你每天给暴讲的也都是这些皮毛知识吗？”</p>
<p>飞逸看了看一旁的暴，暴正坐在亭边椅子上把玩掌上触摸屏控制器，对她们的谈话并没在意。</p>
<p>于是飞逸说：“暴因以前所学的电子学并非我们明朝学府里的电子学知识，我担心她竞赛时会因为这个原因而无法升级，所以我把我们白龙班的电子学知识从基础开始对她个别辅导。”</p>
<p>雪叶说：“你骗我，电子学科知识明明可以相互通用的。”</p>
<p>暴这时站起身来说道：“明朝学府和德比学府在电子学方面教的知识区别很大，但是飞逸老师也并不是从头教我。融会贯通我还是会的。你刚才问的问题需要清楚的知道，两个机体所用材质性能和它们的能量产生原理，这才能够通过计算得出哪个机体对拼起来比较占优的结论。一层那些白羽号的资料确实太过浅显，作为驾驶的参考还行，作为一名优秀驾驶员掌握这些知识还是远远不够的。驾驶员除了经验外，了解其驾驶机体的原理和材质是必要的。比如说，敌人攻过来，机师根据自身机体情况要判定守还是回击。这时谁对自己驾驶的机体了解的多谁的判断就会更准确。”</p>
<p>飞逸先以为暴是因为自己给她传授了上乘知识，才采用不理睬的态度来回避。没想到暴为人耿直，从来都不玩虚的。</p>
<p>雪叶生气地对飞逸说：“你看，暴这样一个外星学生都觉得你给我们的资料太浅。”</p>
<p>飞逸无语。</p>
<p>暴对飞逸说：“雪叶既然这么想研究你的‘白羽号’，你就教她吧。不用在我身上花时间，升不升级对我来说意义不大。”</p>
<p>飞逸说：“我当然希望你们俩都能够升级。但是同一门学科一年只有一个人夺得冠军升级。”</p>
<p>雪叶说：“那你的意思就是暴比我更有能力夺第一了。”</p>
<p>暴说：“老师如果是这个意思，我愿意退出。老师不用担心我不能升级，我可以在作曲学科上拼一拼。”</p>
<p>雪叶对暴说：“你要是退出，飞逸老师只怕是不愿意，你要是在其它学科上升级了，她就没法升级了，学府机构评估会得出你竞赛所用知识非飞逸所教。那样飞逸门下还是只有两个二级成员。”</p>
<p>雪叶转过脸来对飞逸说：“你就好奇怪了。明明暴用不着你教，你却要如此死缠着她，我如此渴望获得你的教导，你却对我置之不理。这到底是什么原因。”</p>
<p>顿时一片沉寂。连白月池中金鱼游动时荡起的水波声都能清晰听见。雪叶一脸委屈，飞逸满面尴尬。</p>
<p>暴打破这沉寂说道：“或许飞逸老师是怕你将‘白羽号’的秘密告诉斑国班吧。我听说斑国班是反侵略派的，你从那里转来，老师她对你有些防范也是情有可原的吗！”</p>
<p>雪叶对暴说：“这话不能成立。要是这样的话，你来自沙西德星，虽然我们班和你们沙西德星签订了不战条约，但是毕竟曾是敌人。要我说，应该防范的是你才对。”</p>
<p>飞逸大声吼道：“你们都别争了。雪叶，你先下去！等暴升级后我再来教你。你也不要想得太多，我相信你绝不是斑国班的密探，况且斑国班现在还没有宣布与我们为敌呢！”</p>
<p>雪叶心想：“飞逸还当我是什么都不懂的小毛孩呢！等暴靠飞逸的那些知识升级后，飞逸就成了三级成员，三级成员做什么，三级成员就不需要再教学生了，去做自己的研究去了，进一步去学习变龙术那种不死能力去了。飞逸不就是为了这个吗？以后她还怎会来教我这些电子学知识呢？”</p>
<h2 id="取笑"><a href="#取笑" class="headerlink" title="取笑"></a>取笑</h2><p>雪叶越想越灰心，迈着沉重的步子慢慢走下去。一层的那些成员瞧雪叶心情沉重的走下来，互相交头接耳起来。</p>
<p>德斯走到雪叶跟前问道：“怎么了，又碰钉子了。老师是不是正忙着和心爱的暴在共度美好时光，没空理你。哈哈！”</p>
<p>宋藏金等人听了德斯这话一起哄笑起来。雪叶本来就生气，听到其他人的嘲笑，心情越发烦躁。德斯见雪叶生气不答，知道说中了她的要害，于是继续说起风凉话来。</p>
<p>德斯说：“飞逸还不是看中了暴是沙西德学府老师的女儿，你呢，孤苦伶仃的一个人，什么背景都没有，你还指望她会对你个别辅导，把她平生最上乘知识教给你吗。”</p>
<p>雪叶气愤地哼了一声道:“那你呢，你一副公子模样，家境又那么好，她怎地不教你。还有月湖，她是冥星议员的女儿，说到家族背景她总该强于暴吧，那为何飞逸也不教她呢？”</p>
<p>德斯冷笑说：“你是不是孤零零一个人独居时间太长了，连现在是什么形势都不知道了，现在冥星被沙西德星和狱星已经占据了大半。飞逸倒也很有远见，如果我们冥星被沙西德星这帮白发佬统治了，她这样做不也是给自己留了个后路吗？改明，我成二级成员后也多教几个沙西德学生来哦。”</p>
<p>宋藏金跟着起哄，他对坐在西南边的紮惑浮和凌穆说：“你们俩听见了，赶快去申请老师吧，日后多找几个白发学生教，也给你们留条后路啊。”</p>
<p>紮惑浮和凌穆都是飞逸老师手把手教过来的，但当时沙西德星和狱星进攻冥星，优势不大。此刻听到德斯等人的说话，虽觉有些道理，也不愿说这些对飞逸老师不敬的话。两人不睬众人，他们戴上耳机，伸手触摸一下含羞草播放器，一面看‘白羽号’资料，一面听起歌来。易慧和小侃都不是富家子弟，他们气冲冲的站在一旁，此时气得说不出话来。</p>
<p>雪叶说：“你们这叫吃不到葡萄说葡萄酸，飞逸老师就是看你们太世俗，又没什么真本事，才不愿传授你们上乘的知识的。估计德斯和月湖一级成员的身份，都是靠买通白龙班评委成员得来的吧！暴的那个‘白艳公主’机器人你们能够做得出吗？”</p>
<p>德斯笑道：“哈哈，真是好笑，做不出又有何相干。你说我们世俗，我看你才是小人，以小人之心度君子之腹！你以为白龙班评委那么好买通，这些评委都是从各班三级以上成员中精挑细检出来的，个个地位高于老师。学府的每次竞赛都有全方位记录，如评委作假被明朝学府内阁发现，那是要被喂龙的。有几个不怕死的评委敢买卖成员级别？再说，就算我和月湖的一级成员是买通的又怎么了，这也是本事，这本事你有吗？”</p>
<p>雪叶说：“我自然没你们这本事！”</p>
<p>德斯呵呵大笑道：“我看你很有本事！你那年从我们白龙班逃跑后，无名无分，像个乞丐，还中毒在身。谁知道你是爬上了哪一位上流男人的床，做了不要脸的事。不然怎么仅仅两年时间就轻而易举地取得了个一级成员身份。”</p>
<p>突然重重一拳，雪叶挥拳打到德斯脸上。</p>
<p>德斯捂住脸还在奸笑：“你们看啊！我说中了吧，你真不要脸。你再打呀，你越这样越说明你心虚。这里的所有人都和我想的一样，只是不愿意当着你面说罢了。我真为你感到丢脸，连米生那个大傻瓜都想毒死你，你死了就没人给他丢脸了。毒死你活该！”</p>
<p>雪叶这时听到德斯提及米生当年害自己的事，不禁泪流满面，咬牙切齿，握紧拳头欲和德斯拼命。这时月湖一把抓住了雪叶的手。</p>
<p>月湖指着德斯吼道：“德斯，你不要胡说！还提那米生干嘛？你是存心要气我不成？”</p>
<p>月湖转过来劝雪叶说：“雪叶，你不要去理德斯，他是狗嘴里吐不出象牙来。你要是和他对着来，他什么难听的话都能够说出来，他说的这些都是赌气话，你可千万不要当真！”</p>
<p>雪叶知道这是月湖在安慰自己，其实德斯所说的话的确是大家闲聊时都曾说过的，月湖偶尔也听到过这些闲言秽语，只是当着雪叶的面提及当年米生下毒的事，却是雪叶无法接受的，她就没去劝雪叶放弃米生的话。雪叶扭头看着月湖温柔的看着自己，月湖模样雍容华贵，气质不凡，雪叶越看越觉得自己相形见绌。其实现在的雪叶早已不是以前那个落魄的雪叶了，雪叶无论相貌还是穿着现在丝毫也不差于月湖，只不过雪叶心中始终不能忘记米生日记中所写的自己那时憔悴不堪的形象，心存阴影罢了。</p>
<p>雪叶抬起头看着月湖说：“月湖姐，你知道米生到哪里去了吗？”</p>
<p>月湖答道：“好妹妹，你回来后三天两日就要问我一次这个问题。我们俩这么好，我如果知道米生的情况怎会不告诉你？”</p>
<p>德斯听不下去了，急忙插话说：“真不可理喻，雪叶，你到底有完没完？每次碰到你都是前一句问米生在哪，后一句米生什么时候回来。你真可笑，米生不要你了，他想你死，你人不死，就死了这条心，回你那个什么斑国班去吧！那里的老师会好好疼你的，哈哈！”</p>
<h2 id="黑熊鬼将"><a href="#黑熊鬼将" class="headerlink" title="黑熊鬼将"></a>黑熊鬼将</h2><p>雪叶怒气刚消，但经德斯又这么一说，顿时满脸直冒杀气，她在心中默念一段咒语，身后立即浮现一头巨大的黑色熊幻影。黑熊张开大口，吼声震动整个房间，德斯先是吃了一惊，随后拔出单手剑来与熊格斗。黑熊手持巨锤，雪叶浮在空中，她身体四周环绕着黑色光圈，雪叶做什么动作，那黑熊就做什么动作，如同雪叶的傀儡。黑熊挥大锤向德斯砸去，德斯横剑一挡没有挡住，大锤砸到德斯身上。但这魔法终因雪叶魔力不够没能对德斯造成致命的伤害，不过这锤碰到德斯头部时还是使他头上感觉中了很重一锤似的，德斯“轰”的一声身体摔倒地上。刹时只见两道白光向德斯这边极速划过来。“铛”的一声，又一道白光划了过去，三道白光相碰到一起，火星四溅。雪叶见德斯倒地，双手拿着她的那对白龙爪双刀，俯身突前砍来，正好砍在一把长刀上。这刀是紮惑浮的红凤长刀。紮惑浮接住雪叶的白龙爪双刀，将长刀向上一挑，雪叶顺势后退一步，收起刀来。</p>
<p>紮惑浮手持长刀大声吼道：“你们要打就到外面去打，不要把飞船里的贵重设备打坏了！”</p>
<p>雪叶收起魔法，黑色光圈渐渐消失，她说：“紮惑浮前辈说的是。我们不该在这里动手。但刚才德斯的反应表现足以说明他成为白龙班学员靠的不是本领，天知道他是靠什么升级为一级成员的。”</p>
<p>德斯被雪叶这一吓，一时没敢再为自己辩解。</p>
<p>紮惑浮将长刀插入剑套，说：“斑国班的‘黑熊鬼将’今天我算是亲眼见到了。”</p>
<p>雪叶也将双刀收起，摇摇头说：“我这不能算是斑国班真正的‘黑熊鬼将’。‘黑熊鬼将’虽然只是斑国班入门功夫，但是招式却是十分丰富，威力也很大，级别低和高的人使起来看似相同，实际却有天壤之别。你刚才见我耍的只是其中一种招式罢了。”</p>
<p>紮惑浮微笑着说：“那改日我们再切磋切磋！”</p>
<p>雪叶点头应道：“没问题。只是我觉得很奇怪，刚才我出刀时看你并不在这里，还在很远的地方，瞬间你就过来了。你怎么来得这么快？。”</p>
<p>紮惑浮说：“你可不要小瞧了白龙班的功夫！适才，我用的是‘停陷术’，这个魔法的作用是降低对手的物理攻击速度。此法虽难击败对手，但对方想要败我也非易事。”</p>
<p>雪叶说：“一生能够精通一门武功足已！”</p>
<h2 id="绝色七彩"><a href="#绝色七彩" class="headerlink" title="绝色七彩"></a>绝色七彩</h2><p>紮惑浮继续说道：“因为当时和你相距太远，要想马上赶过来很困难，于是我用了‘绝色七彩’中的 ‘轻灵如舞’招数， 我将魔力赋予红凤长刀，迅速估算出你挥刀砍到德斯身上的时间，准确利用算出的时间差，我将红凤刀适力投掷出去，长刀一脱身，我的身体便轻盈无比起来，这时用‘轻灵如舞’的魔法咒语，打散我身体的分子，这些分子就像银光微尘一般当即被红凤刀吸住，这时红凤刀一被撞击，我身体的分子马上就组合恢复成人形。你刚才那一砍果真力大，我顿时就恢复过来了。”</p>
<p>雪叶心想：“白龙班的‘绝色七彩’原来这般精妙，完全不是当年米生所耍的那样。我可怜的米生，你被白龙班老师欺骗了啊！他们完全没有教你那些好的东西。飞逸偏心，不愿教你，只将真本领教给紮惑浮和暴他们，我一定要将这些真本事学到手！你快回来啊，我学会了好好教你。”</p>
<p>想到这里，雪叶马上跪在地上低着头恳请道：“紮惑浮前辈，请你收下我这个弟子，将这些教我，你要我做什么我都愿意。”</p>
<p>在场众人看雪叶当众跪下，个个惊得目瞪口呆。紮惑浮一时也觉尴尬，顿时手足无措，一时不知说什么好。</p>
<p>飞逸和暴听到白羽号里魔法警报器发出讯号，提示楼下有人施魔法，迅速从上层走下来，听了雪叶和紮惑浮的对话，又看到雪叶跪在地上要拜紮惑浮为师学艺，飞逸上前说道：“雪叶，快起来！这象什么话。你当我们白龙班是什么地方，求学需要这么低声下气的吗？你既然已是我们白龙班的学生，这些功夫自然会教你的，用得着这样吗？”</p>
<p>雪叶依然跪着不起，眼中含着泪花继续说道：“除非老师现在许诺马上就教我，不然我就不起来了。”</p>
<p>易慧和小侃看雪叶如此，为雪叶求学的精神所感动，齐声帮雪叶求道：“飞逸老师，教授知识本来就是老师天职，你就答应她吧。”</p>
<p>飞逸气愤地说：“我又没说不教！‘绝色七彩’本来就是一级成员应该掌握的一门武艺，只是我现在忙于给暴补习一些‘白羽号’的知识，一时抽不出时间来。”</p>
<p>飞逸说到这里停顿下来，她想了一会，转头对紮惑浮说：“这样吧，紮惑浮。你将你刚才使的那招‘轻灵如舞’就先教雪叶吧，但以后一定要记住，不到万不得已，不要和她较手。”</p>
<p>紮惑浮听老师这么一说，当即答应下来，她对跪在地上的雪叶说：“雪叶，快起来！我明日就教你我刚才使的那招。我即使已经申请成了老师，你也不用叫我老师啊。我们是同学，你又聪明，又勤奋，在斑国班仅两年就能够升级成为一级成员。我可是自愧不如呵！我想，不超出两年，你一定能够顺利成为一个老师。”</p>
<p>雪叶慢慢站起来，心想：“飞逸叫紮惑浮不要和我较手，就是怕我和她切磋功夫，怕我看到白龙班里的更多好功夫，飞逸为何这样排斥我？连紮惑浮自己都知道我比她强，飞逸当年却那么用心教她。现在她冷漠我，难道她是真的怀疑我是斑国班派到这来的奸细吗？我怎可能是斑国班奸细呢？我对斑国班又没有多少好感。算了，以前的事就不要再想了，现下学一招是一招，当着飞逸的面，紮惑浮肯定没法答应教我白龙班的其它功夫，待我和紮惑浮单独在一起的时候再求她教我也不迟。”</p>
<p>于是雪叶对紮惑浮说：“谢谢紮惑浮前辈！你过奖了。”</p>
<p>飞逸和暴去上层房间后，月湖，易慧和小侃三人马上围了过来，</p>
<p>月湖走近雪叶，拉着她的手，关切的说：“要是紮惑浮不好好教你，你就找我好了。”</p>
<p>易慧挺着胖大的肚子，她说：“绝色七彩’我也会点，飞逸老师没时间的话，我可以把我学会的都教给你。我还收集了好多资料呢。紮惑浮平时从不说奉承人的话，她今天都说你聪明，那我收集的这些资料对你一定很有作用，我脑袋瓜子笨，自己读了这些资料也悟不出什么，这么多年没多大进步，只学到了飞逸老师教我的一些知识。如果你不嫌弃我，可以和我一起研习这些资料。”</p>
<p>小侃笑嘻嘻的将易慧往后一拉，对雪叶说道：“如果你不嫌弃，我也有很多资料，也可以和我一起研习啊！”</p>
<p>雪叶听到这三人对自己这么好，心中十分感动，她激动地说：“我先前以为白龙班里个个都是自私的小人。今天不管你们三人是可怜我还是真心帮我，我都很开心。有你们帮我我就安心了。”</p>
<p>月湖说：“雪叶妹妹，光是我们三人帮你还是不够的，你还是要多多请教紮惑浮和凌穆，她们俩可以教你很多升到二级的经验。还好你是在飞逸老师门下，她现今门下就有两个二级成员，于你的进步来说真是太便利了。”</p>
<p>月湖说完往凌穆她们那边看了一眼，凌穆说：“我是没有问题，紮惑浮都当着飞逸的面答应教她，那我这招‘轻灵如舞’是一定要让雪叶学会的了。”</p>
<p>雪叶默默不语，一片沉寂。紮惑浮看雪叶低头不说话，知道她是因为自己只答应教她一招而不痛快。</p>
<p>紮惑浮说：“雪叶，你不用担心。适才我当着飞逸的面，说只教你一招，是因为怕说出‘绝色七彩’都教给你这话，飞逸会阻止我，其实大家都看出来了，飞逸不是很愿意教你，但我怎么可能只教你那一招呢？实际上，‘轻灵如舞’这招牵涉面很广，几乎涉及到 ‘绝色七彩’全部招数。基于这点，我将这一套招数都教给你也不为过，既没有违背我所答应老师的，也能够使你掌握‘绝色七彩’全部内容。只是有点我弄不明白，就是为什么飞逸老师不愿教你呢？”</p>
<p>雪叶开始听到紮惑浮说愿意教她时，心中顿时升起几分欢喜之情，后听到紮惑浮问她飞逸为什么不愿教她时，心中也觉得疑惑，一时不知如何回答。</p>
<p>雪叶随口说：“可能她真的是觉得我家没有背景，不像暴家那样有权有势，以为我没有什么利用价值吧。”</p>
<p>紮惑浮听后连连摇手，哈哈笑道：“这就好笑了，暴只是一个被沙西德星抛弃的士兵而已，人们也许会认为她是沙西德派来的奸细，但是你想，把一个奸细放在自己的班里，又重点培养她，飞逸老师不是太傻了吗？这样吧，就算暴真的如你所说家里有权势，有利用价值，那我呢？我父母十分普通，就是冥星里的一般居民，那飞逸怎么会教我教的那么痛快，还有凌穆，易慧，小侃等。除了对你外，飞逸老师对其他人都十分热心，从来对谁都不偏心，在白龙班这点是公认的。”</p>
<p>雪叶说：“我看她现在就是偏心。她让大家在这里看这些浅显的资料，却单独教暴那些真正有用的知识。”</p>
<p>凌穆站起来说道：“你想得太多了！雪叶，你所说的那些有用的知识，其实我们迟早都会学到的。飞逸之所以现在先教暴，这个是她素来的习惯。对于那些她自己研究出的知识，她总是先教会她认为最有资质的学生，然后让这个学生去教稍差的学生，稍差的学生再教比自己还差的学生。如此单对单相传，一来这些精妙的知识先学到的学生能够很清晰的传达下去；二来，想学这些知识的学生学习前会对这些知识充满神秘感而十分努力，他们学习的时候就能够比较集中精力，能够发愤用功。其实我也和紮惑浮有同样的疑问，那就是为什么飞逸第一个不教你，在资质方面你并不差于暴，最重要的是，你比暴要更加渴望获得这份知识。”</p>
<p>雪叶说：“那你说这是为什么。”</p>
<p>紮惑浮说：“我们也不知道。但我个人觉得，这个可能跟米生的突然消失有关。”</p>
<p>雪叶瞬时一惊，说：“米生不是出去给白龙班办事了吗？”</p>
<p>凌穆偷偷在紮惑浮背后掐了一把，紮惑浮马上改口说：“是，是去办事了，只是走得突然了点。”</p>
<p>雪叶问道：“你们倒是告诉我，米生他到底是去办什么事了？”</p>
<p>凌穆说：“我们也不知道。知道早就告诉你了。”</p>
<p>雪叶低头叹了口气，低声嘀咕说：“怎么谁都不愿告诉我……谁都不愿告诉我……”她这样反复嘀咕着走出了房间。月湖叫了雪叶几声，雪叶都没有答应，月湖知道雪叶此时肯定对谁都不相信了。</p>
<h2 id="月湖往事"><a href="#月湖往事" class="headerlink" title="月湖往事"></a>月湖往事</h2><p>后来几天时间，都不见雪叶到‘白羽号’里来，月湖四处寻找，在白龙班里搜了个遍，白龙像，名人堂，圣水井，悬空舞台，还有各个班级和所有学生住所。她之所以这样拼命的找雪叶，不是为了去履行教雪叶的约定。月湖知道雪叶之所以这么迫切的想学习知识都是为了米生，为了让米生开心。再说她自己的能力也不可能对雪叶有什么实质的帮助。她找雪叶的主要原因只是想和雪叶谈谈心，但是几天不见雪叶，她便越发的担心起来。</p>
<p>月湖往白龙山下走去，突然看见路边一个林子的小溪旁，一个女子正坐在水仙花丛中。水仙花开满了整个林子，那女子看这水仙花十分美丽，随手摘下一束，拿到鼻尖细闻。月湖快步走到她身边，一把将她手中的水仙花夺过来，那女子一抬头。月湖高兴地说道：“雪叶，总算找到你了！这花有毒，你知道吗？”</p>
<p>雪叶扭过头来反问道：“这么美的花怎么会有毒呢？”</p>
<p>月湖说：“这花有如金盏银台，高雅绝俗，婀娜多姿，清秀美丽，清香馥郁，洁白可爱。但是却是毒花。”</p>
<p>雪叶说：“怎么会是这样呢？”</p>
<p>月湖说：“这可不是我乱说的。你看，这花和叶的汁液里含的是石蒜碱，石蒜碱是一种有毒物质，对人体有害，触到它能使人皮肤红肿；花茎内含有拉丁可毒素，人嗅到或吃进它会引起呕吐，腹泻，甚至手脚发冷，致人休克，时间一长，人会因中枢麻醉死亡。”</p>
<p>雪叶打了一个寒颤，说道：“这症状我好象有过。月湖姐，你找我干嘛。”</p>
<p>月湖说：“那时米生给你下的毒就是这水仙花毒。我来是想找你说说话。”</p>
<p>月湖看雪叶不语，知她不愿别人提起米生下毒之事。继续说道：“雪叶妹妹，我想跟你说说我以前的事，你想听听吗？”</p>
<p>雪叶转忧为喜地说道：“你的事我当然想听了。我们就在这里聊吧，要聊多久就多久，反正飞逸现在也没打算将什么好东西教给我，我去和不去‘白羽号’都无所谓了。”</p>
<p>月湖开心地说道：“那太好了。”</p>
<p>接着月湖开始说自己的往事。月湖说道：“你也知道，我父亲是冥星议会的议员。有一天晚上，我父亲将我和我的丈夫皓月叫到身边，问我们小俩口，你们如果现在过的是普通居民的生活，感情会不会有变化。那时的我才十八岁，生活无忧无虑，感情上浪漫谛克，而且皓月对我无微不至，关爱至微，我当下果断回答父亲说，无论生活多么艰难，我和皓月都会长相厮守。父亲看我十分坚定，就让我和皓月搬出家门，让我们到华尔辞的元朔社区去生活。我本来就一直看不惯父亲的世俗作风，又觉得这一次父亲是考验我和皓月的感情，因为皓月家境不好，和我家不是门当户对，我一气之下连道别都没道别一声就走了。”</p>
<p>雪叶说：“这两年我也去华尔辞呆过 ，斑国班离华尔辞就很近，以前你在华尔辞哪个社区生活？”</p>
<p>月湖说：“我从小生活在华尔辞，华尔辞分为东西南北四个区，它们分别是华日，尔辰，辞正，元朔。‘华尔辞’这三字来自这四个区前三个的开头，这说明前三个区是华尔辞的主要社区，其排名先后顺序是，华日第一，经济最发达，地处华尔辞北部，政府机关就设在那个区。尔辰排第二，地处华尔辞西部，商业较发达，有少量部队驻扎。辞正排第三，是华尔辞东部的一个区，这里主要以文化娱乐为主。这三个区里聚集了冥星里那些有权有势的人。在南边是元朔，它是华尔辞中最贫困的一个区，那里的人常年生活在社会最底层。”</p>
<p>雪叶悲伤的回忆道：“我当年就是住在元朔区。那里的人特别多，里面住的人大部分都不是华尔辞和明朝学府的居民，他们几乎都是外来移民。华尔辞的企业家和明朝学府的师生统治着元朔地区的人民，元朔地区对外来人歧视现象严重，能坚持留在那里的受歧视的人都是怕从这里回去丢脸，或者期待在这里早晚能够遇上一个出人头地的机会。月湖姐，后来你们在元朔那里怎么了。”</p>
<p>月湖接着说：“我先找了份行政管理的工作，皓月找了份赌场发牌的工作。半年后，我从家里带出来的化妆品，牙膏，还有各种日用品都用完了，带的一些钱也快用完了，租住的房子换一个比一个差。我的脾气越来越坏，在公司里经常得罪人，脾气来了，我对上司也不尊敬了，工作职位不升反降。在公司里我感到有很多不公平。只要是明朝学府里出来的人谁都能够做到高层，其他的人想爬上去万分艰难。在公司，我以前那养尊处优、随便使唤别人的性子无处发挥，心里总是憋得慌，回到家后把气都发到皓月身上。皓月工作的赌场在东部辞正，来回车费很贵，他工资的三分之一都花在车上了。而且路上花的时间长，每晚都是十点多才回到家，如果忙起来，午夜转钟后回到家是常有的事。皓月小时候没有吃过什么苦，但是当时他为了我，说做什么都愿意。在赌场做服务工作是十分危险的事，那些有钱的主儿，赢了钱就赏点服务生，如果输了，不耐烦起来，对服务生又是骂又是打，赌场的经理一般都不管。辞正地区来赌钱的人都是各个星球有头有脸的人，皓月有好几个同事都是因为受不了虐待，有所反抗，结果在回家路上被人害死了。</p>
<p>“我那时只顾自己的感受耍性子，对皓月的困苦处境从来都没放在心上，只觉得自己生活档次节节下跌，无法适应，怪他没能力让我过上好生活。几周后我被公司解雇了，回家的路上我首先想到了我父亲，当晚，我将家里所有的钱拿去买了张飞机票赶回父母家中。一进家门，看见屋子里一片狼藉，东西全被翻乱了，玻璃饰品，瓷器花瓶，都打碎了。后来我才知道是因为父亲所支持的党派被另一党派夺了权。父亲为了避难，现在躲了起来。反对派找不到人，就把我家翻了个底朝天。我这才明白那日父亲为何叫我和皓月离开华日，顿时心中十分感激父亲，脑海里浮现出我和父亲一起生活时的点点滴滴。想到我以前太淘气，总是不听父亲的话，连婚姻大事也不顾父亲反对自已做主，父亲说的很对，皓月人虽好，但是却没有做大事业的风度，根据目前情景来看，只怕我要过一辈子苦日子了。想到这里，我开始后悔和皓月结婚了。以前父亲能够使我生活的无忧无虑，有求必应，能让我呼风唤雨，无所不能。我真是生在福中不知福，现在脱离了父亲，我一无所有了。</p>
<p>“我重新回到元朔我和皓月住的地方，回到家的时候，我看到皓月趴在桌子上睡着了，我狠狠地打了他脑袋两梨弓，说：“你不去上班待在家里睡大觉，你拿什么来养活我啊？”接着言语中我不知不觉又将他和我父亲对比起来，说他这样子一辈子也不可能做到我父亲那样的成就。皓月迷迷糊糊的睁开眼睛看着我，开始见我回来很是高兴，后来听我越说越气，对他十分严厉，就没有作声，后来干脆拿起皮包，穿上外套匆匆走出门去。在他转身的一瞬间，我看见他脸色不好，突然感觉到他有些生气了。那时我很想叫住他，对他解释说我的心情不好，请他原谅我。可是虚荣心却让我没有这样做。我站在阳台上，看着楼下刚走出大门的皓月，心中有种说不出的滋味，这时皓月突然抬头看见了我，脸上露出笑容，一点没有怪罪我的意思，看起来像是在告诉我：‘你回来真好！’我们刚到元朔时，他每日出去上班，走出大门都要抬头往阳台上看一眼。那时我每日都在阳台上看着他走出大门，然后慢慢走远，直到消失看不见，两人总是依依不舍。后来工作和生活的压力，使得我的这些感情慢慢淡薄了，三周后我便再没每天去阳台那目送他出门了。现下我看着他，他看着我，一人在阳台上，一人在楼下马路上。我感动了，眼泪不自觉地流下来，原来这半年来皓月一直都在等我出现在阳台上。皓月看我眼泪流下，他的眼圈也渐渐红了起来，突然猛一转身大踏步的向远处走去。这一转身好象是在告诉我，我的回来是他的最大满足和快活，他已经不再生气了。</p>
<p>“我又回到严酷的现实生活中来了。接下来的日子里，我又找了好几次工作，没有一份工作能够让我满意。从小到大养成的小姐脾气害了我，小时贪玩的我失去了很多好的学习机会。严酷的现实生活教育了我，我暗暗下定决心：如有机会一定要进明朝学府，努力学习自食其力的本领，也希望自己将来能帮父亲一把。后来，皓月工作渐渐有了起色，他升职成为大堂经理，他虽然资质不高，但他为人谦恭，性格温和却是很得上、下层喜欢，这可是那时我所不具有的。”</p>
<p>雪叶说道：“可是你现在为人热情、性格温和却是和那时的皓月哥一样了啊。”</p>
<p>月湖说：“是的，我现在的变化就是皓月影响的结果。”</p>
<p>雪叶说：“那你们后来生活好起来了，对吗？然后你就实现了自己的愿望，到白龙班来了。”</p>
<p>月湖说：“起初是好了一些，可是后来皓月为帮助一个下属，背了黑锅，不光工作没了，还被罚了钱。我刚感到生活好了些，手头宽松点，能够买上几件新衣裳了的时候，却因为他的善良又叫我们的生活下了地狱，我不住地埋怨他，经常地骂他傻，天天催促他出去赚钱，对他的不满一日甚于一日。皓月的父母年老失去了工作能力，也全靠他赚钱生活。在华尔辞，对每个人的信誉都有记录和评估，并且联网公开。他背的这个黑锅影响了他的社会信誉，华尔辞里好点的企业在聘人的时候一查，看到皓月的信誉度很低就不愿招他，他只得到元朔区里找些比较粗重的活干，比如做搬运什么的。由于我的工作态度差，我的信誉度也渐渐降低，极少有人愿意聘我做事，后来我干脆呆在家里什么也不做了。其实我们当时的那个家完全不能够算是一个家。最后由于拮据，我们只得搬到一个破烂的由铁皮车箱改成的房间里居住。下雨时屋里东边地上放上一个盆，西边地上放上一个碗，到处接漏雨。夜间雨漏滴答滴答的惹人烦，扰人睡。如果遇到刮风天，风又透过铁皮缝隙呼啸进来，冷不说，尖啸的风声就吵得人睡不着。遇到晴朗天气，这房子经太阳一晒，又变成了一个大蒸笼，人在里面热得喘不过气来。住在这样的房子里简直是在受煎熬，哪里还能浪漫起来。那时我日夜都在回想过去的日子，想着父亲对我说的话，心里后悔极了。后来渐渐树立一个信念，那就是听爸爸的话，慎重选择丈夫，不要光看那人的为人好或性格好，更重要的是要看他是否有能力。”</p>
<p>雪叶说：“真没有想到你竟然也有这样的经历，和我的经历倒也有几分相像之处。”</p>
<p>月湖苦笑道：“虽然身处的环境类似，但那时我的思想却与你那时大不相同。在我们住铁皮屋的日子里，皓月白天做的是粗重的体力活，每天累得晚上一倒头就睡，但到刮风下雨的晚上常被风声和漏雨声吵醒，屋子里到处湿漉漉。下过雨后，屋里的地上仍是泥浆一片。被子常散发出一种发霉气味。皓月终于大病一场。以前我从小说戏剧里的爱情片段中看到，一对恋人有一人病了，对方总是对他细微照顾，两人以前发生的矛盾就化解了，十分浪漫。但是现实中的我的体会却是那么的不同，不知道是因为那些书和戏剧的作者太过浪漫还是现实太残酷。每次看着躺在那由碎砖砌成的床上的皓月时，我心里丝毫没有那种怜爱的感觉，心里总在埋怨他为什么要病，怎么不快快好起来，你再病下去不起来我就要饿肚子了。皓月一旦好起来了，他总是说有我在一旁照料，是他的福气。这话我哪里当得起呵！</p>
<p>“我又埋怨起我们住的铁皮屋来，刚开始我说这些埋怨话时，他总是劝我不要心急，安慰我说日子总会好起来。我不相信他的话，常常拿他那次替别人背黑锅的事情讥讽他。时间长了，我再发起脾气，说起埋怨话来，他就低着头在一旁只是叹息，不再说那些有希望的话来安慰我了。</p>
<p>“我们的交流停止了，连吃饭时两人都是无言相对，屋子里只有漏雨声、风声、碗筷相碰声，开门声、关门声、渐渐远去的脚步声……”</p>
<p>雪叶说：“我那个时候和你一样，米生不在我身边的时候我也总觉得生活中忽然没有了一点生机，整个人就像死了一样。但是只要他一来到我的住处，我好象立马又活了过来。他在我身边给我讲外面看到听到的许许多多新鲜事，我马上就不觉得孤寂了。”</p>
<p>月湖见雪叶还是对米生无法忘却。她心里想：“米生那时给雪叶讲一些外面的新鲜事并不是要安慰她，热情是装出来的，实际上是为了掩饰他自己心中的罪恶。这些在他的电子记事本里不是都清清楚楚地写着吗，雪叶看了他的电子记事本为何还要相信他爱她，对他恋恋不忘呢？”<br />雪叶不知月湖为什么说着说着停了下来，就问道：“后来怎样了，你是不是觉得皓月不好，不想与他在一起了吗？”</p>
<p>月湖说：“我那时的确有过这个想法。我当时离开浩月，找到我以前结交的朋友，在几个朋友家我分别住过一段时间，开始时他们还以礼相待，但日子一长，我就成了朋友的累赘了。我在一个最要好的朋友家曾经住了一个多月，虽然朋友对我一直很好，但后来终于因为他的家人怠慢了我而自觉没趣离开。我的那些亲戚也因我父亲现在的处境而避开我。现在想到当时的景况我还感到心酸！想想以前亲戚朋友对我的毕恭毕敬，我在他们面前无论怎样耍性子，他们对我都是百般忍让，我还以为这是理所应当的事。现下才明白那都是因为父亲的地位和他对我宠爱的态度，没有父亲做靠山，我便一无所有。</p>
<p>“在没有人愿意帮我的情况下，我只得又回到了那铁皮屋。我回到铁皮屋的时候，皓月已经病倒了，而这次他害的却是一场大病。因为这段时间我不在家，皓月生活上没人照顾，病了还是强撑着干活，长期咳嗽没治，现在咳出肺炎来了。我这时也没有了办法，找亲朋好友借的钱马上就要用完，我真怕皓月会这样死掉。如果皓月死了，我以后的生活怎么过啊！那晚，我绝望的哭了，皓月也流下了眼泪。我那时哭是因为担心自己失去依靠，皓月他哭却是痛恨自己没能让我过上好日子。</p>
<p>“第二天，正好是一年一度政党竞选的日子，这时离我父亲弃家出走已有三年了，这三年，我和皓月在一起没有过上一天的好日子。以往对政治毫不关心的我，这天也走出家门，来到广场，等待看大屏幕播放竞选情况。我看到了，看到了我的父亲，他带着他的几名同党正意气风发的在那里演讲。我身旁一起观看大屏幕的人都在兴致勃勃地议论。听着他们的议论，我才知道我的父亲他们为了夺回政权，游说了明朝学府里很多反侵略班级，答应给他们兵权，调配了很多雇佣兵给他们使用。明朝学府在冥星里支持率相当高，有好几个反战争的班级都被父亲说服，冥星居民有了一些安全感。父亲这三年里和好几个学府老师结交成为朋友，那些老师派出自己最好的学生保护我父亲他们，当权党派的那些人四处追杀没有结果。”</p>
<p>雪叶问道：“当权党派一定要这样做吗？”</p>
<p>月湖说：“正是，这样做是巩固自己政权的需要。”</p>
<p>雪叶说：“这样是不是太无法无天了。”</p>
<p>月湖说：“当然不是所有当权党派都是这样。只因为我父亲他们党派太卑鄙，总是采取不正当手段获得竞选成功，所以他们的对头才以其人之道来治其人之身。”</p>
<p>雪叶问道：“那这次你父亲如果竞选成功，当权后不是也要去追杀以前追杀他的那些人吗？”</p>
<p>月湖说：“依我父亲的性格，他会这么做的。”</p>
<p>雪叶忽然想到了什么，她突然问月湖：“你父亲叫什么名字？”</p>
<p>月湖答道：“他叫月杀丸。”</p>
<p>雪叶一惊，低头自言自语道：“原来是他，他是议员！”</p>
<p>月湖听雪叶这么说，问道：“你认识我父亲么？”</p>
<p>雪叶慌忙掩饰，抬头答道：“哦！不，我……我怎么会认识你父亲那样的大人物？”</p>
<p>月湖睁大眼睛，奇怪的看着雪叶，只觉得雪叶仿佛有什么事在瞒着她。</p>
<p>雪叶瞧月湖这般看着自己，感到不自在。她说：“没事，你继续说，后来你去见你父亲了吗？”</p>
<p>月湖叹了口气，说：“唉！后来我自然是去找父亲了。当我找到父亲的时候，他看见我面黄肌瘦，好是心疼。从此我什么都听父亲安排，后来嫁给了金发本克星一名年轻有为的议员。”</p>
<p>雪叶对皓月担心起来，慌忙问道：“那皓月呢？他后来怎样了？”</p>
<p>月湖说：“我找到父亲以后，很久都没去那铁皮屋。”</p>
<p>说到这里月湖眼圈开始湿润起来。继续说道：“我嫁给的那个金发议员叫夜影飞，相貌英俊，倜傥潇洒，高翘的鼻梁，蓝色大眼睛，是许多少女心中的白马王子。跟皓月相比，无论是相貌还是才能都强他不知道多少倍。我嫁他之后，只身一人来到本克星，除他以外，无亲无故。夜影飞看我整日无聊，总是找机会和我聊天。聊天主题总是他们本克星里的一些女强人如何为国效力的故事，我明白他的意思，是叫我效仿她们，为本克星出份力。本克星以前和沙西德和狱星一样，都是皇族统治的国家，但学术科技和经济实力上却远远落后于他们。这个时候，本克星有很多思想家忧国忧民，为国家摆脱贫困积极探索。他们当时认为冥星是他们最好的学习对象，就设法和冥星攀亲。后来我才发觉，我的这个看似圆满的婚姻原来是个目的性非常强的政治婚姻。夜影飞娶我，一是为了和冥星结上姻亲，二，也是更重要的，是为了从我身上获得更多的冥星的先进思想。但从小到大，我对政治从来就没有发生过兴趣，要我给夜影飞出谋划策简直难于上青天。</p>
<p>“夜影飞从我身上不能得到他所需要的东西，于是觉得我庸俗之极，由开始的热言细语逐渐转为冷言冷语，最后干脆就不和我说话了。我心里很不是滋味，也没觉得自己有什么不对，倒看出他娶我的真正目的，只是想利用我，对我并没感情。夜间，我一个人睡在那黑黑的、皇宫般宽大的房子里，望着那四根支撑房子的大柱子，听着屋外海水的涛涛声，觉得孤独极了。</p>
<p>“我出嫁以后，父亲给我发来许多信，内容都是询问本克星的情况，我一封也没回复。这些日子，我也悟出了父亲嫁我到木克星来，并不只是为我好，也有他自己的目的。我晚上凝望着天空，不知不觉地想起皓月来了。我仔细琢磨，反复对比，突然感觉到，我活到现在遇到的人中只有皓月对我最好，他很想给我幸福，但他却没有那种能力。是不是天下没有能力的男儿都会和皓月一样对我好呢？我曾经这样想。”</p>
<p>雪叶突然像明白了什么似的，忽然瞪大眼睛望着月湖，然后问道：“你是说当年米生对你好，是因为他‘没有能力’，对吗？”</p>
<p>月湖显得很尴尬，他不好意思地说：“哦！你还真的时时刻刻都想着他啊。”</p>
<p>雪叶害羞地低下头，咧嘴不好意思地笑了一下。</p>
<p>月湖看着如此痴情的雪叶，心中满是感慨。说道：“我真羡慕你。如果当时我能和你一样，就不会错过皓月了。”</p>
<p>雪叶说：“你还没告诉我皓月哥后来怎样了呢。皓月哥是个好人，真希望他后来能够振作精神，赚到大钱把你这个拜金女娶回去。”</p>
<p>月湖听到雪叶这么一说，“嗤”的一声笑了出来。说道：“在本克星那段时间，我日夜都在回忆着和皓月一起的时光，我渐渐发现，皓月对我的好让我永远记得他。后来借回去看父亲的理由，我去了一趟华尔辞，走在通往以前我们居住的铁皮屋的那条小路上，我放眼搜索，铁皮屋已经不在了。我想，四年了，皓月可能已经改变了穷困的生活，现在有能力给我幸福了，而我却无福消受了。我沿着这那条小路往回走，风吹动路边的白杨树，发出‘沙沙’的声音，仿佛是在嘲笑我。我低头走着，看着路上的碎石子，想着皓月每天踏着这些石子，曾经为了能够养活我，拼命来回奔波。当我再次抬起头，朝小路旁那条小河对岸望去时，看见有一个孩子正在和他的父亲嬉戏，母亲一动不动地闭目坐在河边。这时小孩一不小心跌倒地上，‘哇’的一声哭起来，母亲马上站起身，伸手向前探索着朝小孩哭声传来的方向奔去，看来她是双目已经失明。父亲这时没有去管那小孩，赶紧过来扶住盲人母亲一起朝小孩走去。我望着这场面，心里感觉十分的甜蜜，会心地笑了笑，继续往前走。走了不到一百米远的地方，我突然看见一个非常熟悉的铁屋，还是那样的破旧，不同的是破铁皮屋顶上多了些木头压着的塑料袋。”</p>
<p>雪叶听到这里，抑制不住内心的激动，立即插嘴问道：“是你和皓月住的那个铁皮屋吗？”</p>
<p>月湖说：“是的。但我当时马上想到了那一家人，顿时明白过来。怪不得那个父亲的举止那么熟悉，那么令我感动，原来他就是皓月，只有皓月那样的男人才会那样细心，一般男人在有了子女后对妻子就大不如前了，他们的爱都会转移到孩子身上。但是我相信皓月不会这样，孩子蹒跚学步，摔倒一下不会怎样，而失聪母亲的无所适从才是真正值得关心的。我相信那个父亲一定就是皓月。当时我有两个选择，一个就是和皓月相认，把皓月夺回来；一个就是静静的离开，不去打扰他们平静的生活。”</p>
<p>雪叶忍不住问道：“你和他相认了？”</p>
<p>月湖笑着说：“没有，我离开了。我觉得我已经很对不起皓月了，以前他对我那么好，我全然没当回事。我知道，我当时说的一些话对他的伤害很大，在他患病最需要我照顾的时候，我不告而辞一定对他打击沉重。而且现在他已经有了自己的幸福生活，我不能破坏，不然太对不起他了，再说我夺回皓月，无依无靠的盲女怎么办？”</p>
<p>雪叶笑着说道：“从那时候开始，你心中定是一直怀念着皓月，你现在性格都渐渐变得和他一样了。”</p>
<p>月湖说：“我当时很想再看皓月一眼，想看看幸福时的皓月是什么样的，那一定是很可爱的形象。但我终究没有勇气过去看他一眼。”</p>
<p>雪叶急于知道结果，又赶紧问道：“后来呢？”</p>
<p>月湖说：“后来我就再没去铁皮屋，也没有回金发星、本克星了。我也不愿帮父亲做事，父亲拿我也没办法。后来，我看父亲已经对我不耐烦了，就请求父亲送我去明朝学府学习，他就爽快的答应了。来到白龙班后，我才知道他送我来仍有他自己的意图。”</p>
<p>雪叶问：“是什么意图呢？”</p>
<p>月湖说：“白龙班临近华尔辞，如今环绕华尔辞的明朝学府已经被沙西德和狱星部队抢占了三分之二的地盘。许多反侵略的班级都和沙、狱军签订了投降条约，支持冥星政府的学府班级越来越少了。白龙班一直保持中立，而且实力很强，父亲是想通过我来影响白龙班里的老师，使白龙班能够从中立立场转向帮助冥星政府对抗外星敌人。”</p>
<p>雪叶听到这里，感慨地说：“说来说去，你父亲心中想的都是冥星政府啊。他这个人还真是……”</p>
<h2 id="雪叶之谜"><a href="#雪叶之谜" class="headerlink" title="雪叶之谜"></a>雪叶之谜</h2><p>月湖听雪叶说话声音越来越小，觉得很奇怪。突然听见远处传来说话声。月湖转身顺手将雪叶拉住往下一按，两人伏在花丛中，看见远处一行人正向雪叶住的房子走来。这一行人越走越近，一边走还一边在谈论着什么。渐渐地看清楚了，原来他们大部分都是白龙班的老师。</p>
<p>待老师们走远，月湖问雪叶：“他们去你那里干什么？”</p>
<p>雪叶说：“我也不知道。不会是找我有事吧？”</p>
<p>月湖说：“你不过只有几天没到班上来，班规还没那么严；再说就算是找你，飞逸一个人也够了，没必要这么兴师动众的吧。”</p>
<p>雪叶说：“没想到白龙班会这么看重我！”</p>
<p>月湖说：“我看事情没那么简单。为什么一件事要一群人去做？那是因为那件事一个人完成不了。如果仅仅是找你有事办或有话说，哪有必要一群人一起到你家来，更何况这群人不是一般人，基本都是白龙班的领导者啊！”</p>
<p>雪叶镇静自若，笑着回答月湖说：“哈哈，难道他们怕我不成？”</p>
<p>月湖慌忙解释说：“我不就是不清楚是怎么回事，才担心你么？走！我们跟过去看个究竟。”</p>
<p>说完起身就要走。雪叶伸手将她拉住，说：“你刚才跟我讲的你的故事还没讲完呢。”</p>
<p>月湖回头要拿开雪叶拉她的手，雪叶笑着没松手。月湖有些不耐烦地说道：“雪叶妹妹，我知道你是想知道我和米生的事情，但是现在我告诉你，我觉得这群老师有些不对劲，今天这一行人来找你，很可能是对你不利。”</p>
<p>雪叶松了手笑道：“我又没做什么亏心事，我才不怕他们对我会有什么不利呢！”</p>
<p>月湖说：“你不知道，最近大家都在议论飞逸老师和你的事。你来白龙班后，飞逸就很反常，有时讲课的时候，突然停下来发呆，我们看她的神态，发现她是在观察你。”</p>
<p>听了月湖这番话，雪叶捂着嘴笑起来，她说：“是不是因为我那时睡着了。”</p>
<p>月湖说：“不是，以前有人睡觉她从不管。大家感觉到她好像处处躲着你似的，我们大家很奇怪：像你这样聪明有才的学生，她为什么不愿教呢？还有，自从你来白龙班以后，每次讲完课后，一直到晚上我们大家都再也找不到她了。”</p>
<p>雪叶感到了事情的严重，脸一沉，低声说道：“难道她一直在跟踪我！”</p>
<p>月湖心里一惊：“啊！什么？”</p>
<p>雪叶说：“他们前去的方向就是我住的房子啊。”</p>
<p>月湖忙说：“那今天他们更是可疑了。我们赶快跟上去！”</p>
<p>雪叶点点头。她们俩赶快尾追上去。途中雪叶没有再问月湖什么，月湖越发有些担心起来。</p>
<p>一边朝前赶路，月湖一边小声对雪叶说：“米生开始对我很痴情，我还以为是老天叫皓月再世呢！开始时我给他钱用，他就用我的钱买人教他学习一些功夫的招式，但是却常常被骗。好景不长，我父亲后来看我在白龙班依然没有帮他的意思，一气之下断了我的供给。我再没钱给他用了，这时我才看到米生的真面目。他一拿不到钱，就说我们有钱人小气，后来又怪我是把钱给我前夫了。我没有对他解释什么，我失望极了。我看透了米生，他无德无能，自私自利，对我好完全是为了方便自己用钱。我越发思念起皓月来，只觉得平生能得到一个对自己真好的人实在不容易！”</p>
<p>雪叶此时并没仔细月湖讲话，好像在担心会发生什么事情，只顾走路不说话。</p>
<p>月湖继续说道：“我觉得你和当时的皓月差不多，米生和我却有根本性的不同。米生非常虚伪，人面兽心，为了自己的前途，竞然要毒死你！”</p>
<p>雪叶斜眼看着月湖，反唇相讥道：“那你当时为了脱离困苦生活，丢下病得臥床不起的皓月自己走了，你这和米生当初对我的处理，性质有什么不一样？只是人都会变的，你现在不是变得很好了吗？大家都喜欢你，你的小姐脾气没有了。米生也应该能够变好的，而且他本来就很好，只是因为那时他生活太苦了，大家都瞧不起他，连老师也不愿教他，他才会变坏的。”</p>
<p>月湖说：“那米生为了满足他的虚荣心，现在还要和我在一起，而不愿重新和你在一起生活，你会怎么办？”</p>
<p>雪叶微笑着说：“他愿意和谁在一起就和谁在一起，我决不会生气和不安。只要他心里真的喜欢我我就满足了。我知道，他和你在一起是喜欢你的家境和背景，不是喜欢你的人，他真心喜欢的人是我。我只要他这样就够了。爱一个人不一定要和这个人厮守在一起，和一个人生活在一起可能更多的只是责任，并不是爱情。”</p>
<p>月湖听了雪叶这一番对爱情的理论，很是惊讶。她用一种佩服的眼光看着雪叶，一时不知道该说什么好。</p>
<p>她们说着走着，不知不觉跟踪那一行人来到雪叶住的小屋旁的一片树林里，伏在灌木丛中，这时天色越来越黑，而且刮起了大风，接着电闪雷鸣起来，伴随着轰隆隆的雷声，倾盆大雨‘哗哗哗’下了下来。这时，白龙班老师一行人来到小屋前，但并没有推门进去。月湖和雪叶伏在的他们附近的草丛中，虽然离那行人很近，但由于她们魔力很弱，加之她们闭住了自己的魔力，那行人一点也没有察觉到。</p>
<p>雪叶隐隐看见暴和另外两个飞逸手下的二级成员紮惑浮和凌穆也在那一行人里面。</p>
<p>她们忽然听见飞逸对身边一位身材高大的老师说：“就是这里，你确定雪叶就是那人吗？”</p>
<p>那高个老师道：“这个时候你还不相信我的话，还要我再说一遍吗？”</p>
<h2 id="阴阳二气诀"><a href="#阴阳二气诀" class="headerlink" title="阴阳二气诀"></a>阴阳二气诀</h2><p>飞逸说：“你说的那个魔法太邪，说起来倒是有可能实现，但是要做到是太难了。”</p>
<p>那老师笑道：“对我们来说是很困难。但是对斑国班这个由擅长魔法的金发本克星人组成的班级来说，就不是没有可能的事了。冥星政府的重要议员月杀丸，现在已经将他的女儿月湖嫁给了本克星的夜影飞，本克星和他们结盟了，正全力帮助他们抵抗沙、狱军。月杀丸这人为达目的总是不择手段，他掌权后，多少中立班级都被他控制了，都去参加了那种无意义的战斗。现在月杀丸又将目标锁定了我们白龙班。你看，月湖不是被他送到我们这儿来了吗？你说月湖她凭自己本事能成为我们班成员吗？这还不是因为月杀丸操纵了明朝学府内阁的结果。”</p>
<p>飞逸说：“雪叶也是月杀丸为了控制我们，通过这手段送过来的吗？”</p>
<p>高个老师回答说：“对呀，这个雪叶并不是以前你教的那个雪叶，当初米生对她下了毒，她怎能不死呢？现在的雪叶只是她的躯体，施法人利用斑国班尤科斯老师刚刚创造的‘阴阳二气诀’魔法，将他的思想和雪叶的躯体合二为一。这是我安置在斑国班里的一个密探说的，他说这个合体的人的思想是施法人的，记忆和能力是躯体原来人的。”</p>
<p>飞逸听到这里，心理十分害怕，她说：“如果是这样，雪叶她们要控制我们岂不是很容易，她只要利用‘阴阳二气诀’魔法，一个一个将我们合体了，她们的目的不就达到了吗？”</p>
<p>高个老师说：“你不要急吗！我听说使用这种魔法有个很大的局限。晚上十点左右合成人就会变回施法人模样，而且身体会变冷，施法人每多合体一个人他身上的寒冷就会增加一成，如果寒冷超过施法人承受底线就会被冻死。我相信没哪个施法人会不顾自己死活，贪婪的去合并许多人。”</p>
<p>飞逸忽然明白了什么似的说：“噢！我说晚上在这小屋旁，怎么总听见里面发出那么凄凉的哭声，原来是冻得受不了。怪不得她总是在我讲课时睡觉，原来她每晚冷得睡不着。”</p>
<p>高个老师严肃起来，厉声说道：“我们要乘她还没有来得及合并我们之前立即把她除掉，这个时候她没法藏匿斑国班的魔法。如果等她合并了我们中某一个人，她身上马上就会有白龙班的魔法，我们再想查出她的真实身份就没那么容易了。如果我们之间互相猜疑起来，白龙班岂不要毁在雪叶手上。我还听说，使用‘阴阳二气诀’魔法的人每月都要喝一个活人的血才能够继续生存。我算了算雪叶来我们这里的天数，和香川井镇这几个月来失踪的人数几乎一样。”</p>
<p>飞逸听到这里，几乎吓昏过去，她急忙命令暴和紮惑浮进小屋里去抓雪叶。这时高个老师慌忙叫住她们。他从身上掏出一个掌上仪器，又看看手表，说：“大家不要慌，还有十几分钟就十点了，等她变回原形，我们再进去：一来可以确定这件事情是否属实，以免犯下处理米生时犯的错误；二来，那个时候她再没法施展‘阴阳二气诀’ 魔法，虽然她的魔力可能增强，但是这魔力需要她恢复本体才能够施展，而到时候她是来不及恢复本体的。”</p>
<p>月湖伏在草丛中听到飞逸和高个老师的对话，心中甚是担忧，不时用害怕的眼光瞟向雪叶，心中充满恐惧，想着高个老师说的话如是真的，自己可要遭殃了。但她又盼望这一切都不是真的。</p>
<p>这时雪叶正紧挨着月湖并肩趴在草丛中，月湖扭头看了一眼雪叶，她正满脸愤怒地看着飞逸他们。月湖凝视了雪叶许久，突然发现雪叶这时扭头朝自己看来，只见雪叶这时另一侧那半边脸全是骨皮，毫无血肉，眼中射出凶狠的光，头发披散开去，正在冲自己恐怖的笑着。月湖突然觉得鼻子发酸，眼睛发胀，手脚发软，一时吓得想喊声音却发不出来了。</p>
<p>飞逸他们正在用魔法搜索周围的魔力，突然发现身后有股强大魔力传来，那位身材高大的老师大声喊道：“雪叶在我们后面！你们感觉到没有，这魔力和斑国班的魔力一样？”</p>
<p>听到喊声，众人一齐转过身去，只见一个穿着白龙班一级成员班服的女子从草丛中一跃而起，拔腿就向远处跑去。在那女子起身的一瞬间，暴看清了她的脸，那正是雪叶。暴和紮惑浮赶紧追去，众人也一起跟上追去。</p>
<p>拐过第三个路口，雪叶的身影突然消失了。这里四处都是高大的乔木和灌木草丛。雷声伴着雨水越下越大，众人身上淋得透湿，一阵冷风刮过，大家不禁打个寒颤，有的人冻得发起抖来。</p>
<p>高个老师说：“现在大家都将气息和魔力闭住。雪叶现在一定比我们谁都冷，她一定会浑身发抖的。”</p>
<p>说完，高个老师使用自己的魔力，开始仔细搜寻这四周。果然雪叶的发抖声被高个老师探到，暴和紮惑浮赶紧朝老师指示的方向冲去。突然，一头大黑熊从灌木丛中猛地窜出。紮惑浮立即意识到这就是雪叶曾使用过的那招“黑熊鬼将”。于是大声喊道：“斑国班的畜生，我们已经知道你不是雪叶，还不赶快给我们现出原形！”</p>
<p>灌木丛中立刻传来凄惨的吼声：“我就是雪……雪叶。你……你们想把我怎样？”</p>
<p>紮惑浮一听这声音虽然有些颤抖，但的确是雪叶本人的声音，一时不知如何回答是好。</p>
<p>其他人都将头转向那高个老师，高个老师想了一想，大声说道：“哼，你别想骗我们，你学雪叶的声音就能骗得了我们吗？就算你真是雪叶，你杀了那么多香川井镇的居民，这罪你也承受不起了。”</p>
<p>雪叶哈哈大笑，笑声凄凉中带着颤抖。那头黑熊向大家冲了过来。紮惑浮拔出红凤长刀“铛”的一声挡住了黑熊挥过来的巨锤。紮惑浮感叹雪叶的魔力竟然比上次增长了许多倍。其他老师也纷纷发出魔力，对黑熊进行魔法攻击。不一会，黑熊消失了，雪叶的大笑声也消失了，大家周围没有了斑国班的魔力。</p>
<h2 id="神秘的消失"><a href="#神秘的消失" class="headerlink" title="神秘的消失"></a>神秘的消失</h2><p>那以后，雪叶再没有回到白龙班来。三年时间过去了，飞逸的飞船依然没有完成。这是她天才的飞船创造才能害了她。飞逸在制造飞船过程中不断涌现一些新的想法，由于整个飞船体系过于庞大，到最后，整合起来困难重重，直到这第三个年头才有了些转机。飞逸制造飞船工期的推迟，导致她手下的学生除了月湖以外，都没有能够得到升级。</p>
<p>第一年，月湖在竞赛单挑项目上取得第一，晋升到二级成员。因为月湖是凭单挑项目升的级，而不是凭的飞逸教授的电子机械项目升级，所以飞逸没能因此晋升为三级成员。</p>
<p>第二年，月湖申请老师成功，月湖的父亲月杀丸利用自己的权利，叫了几名最有希望在单挑，魔法和生物竞技项目中得冠的人加入到白龙班成为月湖的学生，于是，当年这三项竞技的冠军得主全是月湖的学生。月杀丸又用手上的政治权利对明朝学府内阁施加压力，让月湖顺利晋升为三级成员。</p>
<p>第三个年头，月湖很快的学到了变身白龙的本领，成为不死之身。</p>
<p>这天，飞逸和暴正在白羽号飞船里讨论飞船的问题。暴突然对飞逸提起月湖，她说：“你觉得月湖这三年的升级之路正常吗？”</p>
<p>飞逸笑道：“当然不正常了。哈哈！原来暴也会嫉妒啊。但是谁叫人家是议员的女儿呢！这点你不得不服啊。”</p>
<p>暴说道：“事情并不是这样简单啊！我觉得现在的月湖不是原来的月湖，其实是被雪叶合体了的月湖。那时，刚从斑国班回来的雪叶，应该就是雪叶本人，如果她当时不是雪叶，而是被斑国班合体了的人，她早就和白龙班本领最高的人合体了，何必一拖再拖，而且每天都为米生牵肠挂肚，好象见不着米生就没法活下去一般呢？如果她已经被合体了，但是她的思想仍然是雪叶的，至于她是怎么做到能够用被合体人的思想主导合体人的，这我却弄不清楚。那晚我看见从草丛中跑走的人的确是雪叶，而我们在草丛中并没有发现还有一个月湖。所以当时她一定是与月湖合体了，据说斑国班尤科斯老师的‘阴阳二气诀’魔法将两人合体时，施法人不能一下子就消失自己的体貎，将思想植入被合体人体内，完成这个过程需要一会儿时间。不然她那时一定不是雪叶的模样，而应该是月湖的模样了。”</p>
<p>飞逸问道：“你怎么那么肯定是与月湖合体的。”</p>
<p>暴说：“当时我追雪叶回来，在那草丛中发现了这个。”暴拿出一个梅花簪子。说：“这是月湖的梅花簪子，那几天我听说月湖在到处找雪叶。我想那天她们肯定碰上了，后来看到我们去抓雪叶，就跟踪我们想看个究竟。当雪叶发现自己身份败露，就索性和旁边的月湖合体。她这样做可以一举两得，既可掩人耳目继续留在白龙班，又可利用月湖的特殊身份尽快升级成为三级成员。在明朝学府，三级成员可以查看明朝学府所有成员和学员的档案，只要需要，那些加密过的文件也可借阅。在这些文件里，她一定可以看到她一直都想知道的有关米生的情况。”</p>
<p>飞逸一惊道：“你怎么知道这些事情的。”</p>
<p>暴骄傲地说：“通过分析推断出来的啊。你想想，当初你千般阻扰雪叶升级是为什么。即使她是斑国班派来的探子，就你性格而言，你怎么会不希望她升级呢？她升级了，你不就能够成为你日思夜想的三级成员了吗？你那么担心她升级到底是什么原因？我后来联系雪叶一心要找米生的所为，联想到明朝学府升级为三级成员后可以查看学员档案的规定，发现你是怕雪叶知道米生的情况。”</p>
<p>飞逸哈哈大笑，高兴地说道：“好个暴，我果然没看错，你确实是个厉害的学生，连我的这个心事你都能够猜出来。”</p>
<h2 id="败露"><a href="#败露" class="headerlink" title="败露"></a>败露</h2><p>“咚咚咚”，一串下楼梯的声音从外面传来。暴说：“一定是月湖听见我们谈话了。”飞逸疾步奔向楼梯，扭头叫道：“暴，我们赶紧去阻止她，不要叫她看见了那些密件。”</p>
<p>暴和飞逸赶到母舰中央控制室，看见月湖双手撑在控制台上，正低头痛哭，声音凄惨阴森，大屏幕上显示出一段视频，米生在牢里被划破胸脯，身体里的内脏被挖出来，白龙班里的老师在四周围观。视频下显示一条信息：“米生，二十八岁，犯投毒杀人罪，判处死刑，交白龙班执行。明朝学府内阁。”</p>
<p>飞逸手足无措，站在门口无所适从。月湖转过身来恶狠狠的看着飞逸，眼中泪水不断。</p>
<p>月湖哭着大叫道：“你们为什么要这样对待米生，让他死得这样惨！米生怎样对我与你们何干？我从斑国班回来，证明米生并没有犯下杀人罪，是你们犯了侮告罪，你为什么不去自首？是不是怕因为这影响你的升级？你们这群恶魔！”</p>
<p>飞逸说：“你是斑国班老师用‘阴阳二气诀’合成的合体人，你并不是真的雪叶。对吧？”</p>
<p>月湖斩钉截铁地说：“我就是雪叶！”</p>
<p>飞逸用一种疑问的语气探问道：“雪叶被使用‘阴阳二气诀’合体后，怎么还能够有她的思想？”</p>
<p>雪叶说：“哼！这你哪里明白，斑国班的尤科斯老师使用自己的一半心灵进入我的身体，这样既能保全她的本体，也能将我救活，这是她创造的最新‘阴阳二气诀’魔法，这样的方法只有她一个人能够做到。由于尤科斯的心灵没有完全进入我的身体，这样做的结果，就是思想还是我的，但我的身体却具有了尤科斯老师记忆和魔力的一半。”</p>
<p>暴在一旁一边听一边点头称奇，然后插话说：“尤科斯果然胜人一等，这样的招术都能够想到，她不仅将一个快死的人给救活了，还把自己的本领轻而易举地传给了你。”</p>
<p>雪叶苦笑道：“好是好，只是得到‘阴阳二气诀’不是那么好受，每天夜晚，身体冰冷无法入眠的滋味你们是体会不到的。飞逸啊，飞逸，你很希望我雪叶死去，对吧？这样你就不用背负误杀米生的罪名了是吧？可怜我现在变成了月湖的模样，这就再没法证明雪叶没死了，也没法让明朝学府内阁处置你们这群杀人恶魔了。哈哈哈……你赢了！最终还是你赢了！”</p>
<p>雪叶这几声笑，笑得甚是凄惨，她突然旋转身子，速度转得越来越快，随即变为金色的沙子弥漫整个控制室里，然后慢慢的消失得无影无踪。</p>
<p>飞逸说：“斑国班的‘飞砂走石’魔法！”</p>
<p>“是啊，身体一下子变成金光闪闪的沙子，这魔术只有斑国班才有。”暴赞叹道。</p>
<p>飞逸长长叹了一口气，说道：“雪叶这么年轻，就不仅成为了明朝学府四级成员，已经变身为白龙而长生不老，她还同时掌握了白龙班和斑国班的一些绝招。希望她不要被月杀丸利用了啊。”</p>
<p>次日，飞逸和暴用完晚餐，在去飞船二层飞逸房间“御匾所”的路旁草地上闲聊。暴对飞逸说，雪叶这次虽然离开了飞船，但她不会善罢甘休，她会利用月湖的身像挑拨冥军和白龙班的关系，对白龙班不利。而且雪叶本身就已经是四级成员，她还能够变身为白龙，这次白龙班惨了。说到这里，忽然听见楼下一片吵杂声音传来，接着一串慌张的脚步声，有人跑了上来。</p>
<p>飞逸对跑上来的学生吼道：“是什么大不了的事把你急成这样，慌什么？什么事，快说！”</p>
<p>急步跑上来的是紮惑浮和凌穆。紮惑浮气喘吁吁的说：“飞……飞逸老师，有……有位老师死了。”</p>
<p>飞逸大吃一惊，问道：“慢慢说！不要慌，那老师是怎么死的？病死的吗？”</p>
<p>凌穆说：“不是，不是的。刚才我和紮惑浮在飞船外面散步，听见大家正在外面议论纷纷，说一个老师被人杀死了。我们赶紧回到飞船内，查到白龙班对这件事情的报道，看到那位老师的胸脯被划开，内脏抛在一旁，血流满地。真的好惨啊！”</p>
<p>飞逸倒吸了一口气，方寸乱极了。停了一会，她对紮惑浮和凌穆说：“你们赶快联系明朝学府内阁和其它的班级。将此事赶快上报内阁和通告所有人。”</p>
<p>凌穆和紮惑浮应了一声急忙奔向下层执行命令去了。飞逸和暴也紧跟她们走到下层。</p>
<p>飞逸脸上冒着冷汗，走到下层，在‘白羽号’的中央控制室里聚集起她的成员和学生。</p>
<p>紮惑浮很快跑过来，她报告飞逸：“我们连接不上外部网络，不能和外部进行通讯。只有白龙班的内部网络还能用。”</p>
<p>忽然听到有人惊叫着跑进来：“哎呀，又一个老师死了！也是胸脯被划开。好可怕呀！”</p>
<p>飞逸和紮惑浮等人同时一惊。飞逸的声音带着颤抖命令道：“你……你们赶紧……把飞船的大门关好……”</p>
<p>众人纷纷跑向飞船大门。</p>
<p>这时中央控制室里还剩下飞逸，暴，紮惑浮，月湖的妹妹半月和贵公子德斯，其他成员关好飞船大门，带领着雇佣兵各就各位，整个飞船进入红色警戒状态。</p>
<p>德斯这时看到飞逸一脸紧张，自言自语地说：“连死了两个老师，飞逸老师也害怕了呀。”</p>
<p>“德斯，你是怎么回事，这个时候还胡乱说话。”紮惑浮制止德斯乱说，是要缓和紧张形势，稳定大家情绪。</p>
<p>飞逸拍了拍紮惑浮的肩膀，意思是赞扬她做得对。然后她对德斯说：“你说的很对，我确实是有些害怕。我和其他老师们犯了一个无法原谅的错误，在没有调查清楚事情的情况下，为了顾全我们白龙班的名誉误杀了米生。米生确实罪不该死。这次雪叶找我们报仇来了。”</p>
<p>听了飞逸老师的话，除了暴以外，其他人均感到震惊。</p>
<p>德斯说：“雪叶离开我们已经三年多了，她什么时候回来的？她凭什么本事能够杀死白龙班的老师？”</p>
<p>暴反问德斯说：“如果是月湖，她能办到吗？”</p>
<p>德斯更大惑不解了，她说：“这和月湖又有什么关系？如果是月湖那我就不敢说了。哼！我真弄不懂，月湖到底是凭什么进步这么快的？是凭她的真本事还是靠其他下三烂手段。”</p>
<p>暴带着瞧不起的语气问德斯说：“你听说过‘阴阳二气诀’这个魔法没有？”</p>
<p>德斯不屑地答道：“这谁不知道，‘阴阳二气诀’是斑国班老师尤科斯创造的魔法，能够和别人合为一体借用他人的能力……”</p>
<p>德斯说着说着好像明白了什么，他话题一转，说：“难道……”</p>
<p>“不错，雪叶就是用这魔法和月湖合体了，现在，她知道了米生的死因，所以她……”暴把雪叶如何与月湖合体，如何努力升级获取查阅学生档案的资格，如何查阅秘密档案看到米生被处死的情景的事从头至尾简略地解说了一遍。</p>
<p>半月听后不信，急忙说道：“不会的，你骗人！我姐姐怎么会被雪叶合体呢？如果你这样说是真的，那我姐姐不就死了吗？”</p>
<p>突然，飞船被什么重重撞了一下，剧烈晃动起来。由于没有准备，大家一下子站立不稳，跌倒地上。飞逸爬起来，迅速打开视频察看飞船外情况，查找飞船被撞的原因。她看见飞船外面狼藉一片，其他小型飞船很多已被破坏，地上到处都是死人，肉血将地面几乎全染红了，有很多学员和雇佣兵在奔跑逃命。</p>
<p>半月在视频中看到外面的景象，吓得哆哆嗦嗦地说：“我们得……得想。。。想点办法，这样下去……白龙班。。。岂。。。岂不是要毁了。”</p>
<p>飞逸说：“不要慌！大家都坐到各自控制台里去，注意监视飞船周围，发现有目标攻击飞船就对它开炮。”</p>
<p>等了四、五个小时时间，始终没发现目标。这时天色渐渐暗下来。凌穆，小侃，华房星，宋藏金，易慧等成员回到中央控制室。</p>
<p>凌穆对飞逸说：“全部雇佣兵都安置到岗了，机器人兵也全部集中在机器人船舱候命了。”</p>
<p>飞逸说：“白龙班的内部网络通讯坏了，我们在船内，也不知道外面的情况怎么样了。现在天黑了，暴和紮惑浮出去调查一下。我现在要去我房间里编写几套应对变身白龙和斑国班魔法的程序。凌穆！控制室这里交给你了，如果发现外面有攻击，就按照我教给你的方案实施防御和反击。待会我会将新方案传给你。”</p>
<p>暴和紮惑浮急忙来到机器人舱。一会儿，机器人船舱舱门打开，“嗖–嗖–嗖–”十来个机器人从船舱飞了出去。紮惑浮驾驶着量产机器人在前带路，暴驾驶着她的‘白艳公主’机器人紧跟其后，雇佣兵机器人排成一字阵型跟随着他们。夜幕已经降临，他们打开探照灯，看到满山遍野尽是尸体，河水已被血水染红。当他们来到碑亭那里的名人堂时，一进门就远远看见中间那个墓碑有刚被动过的迹象，旁边有一具骸骨。机器人在墓碑附近停下来，一行人从机器人里走出来。</p>
<p>紮惑浮命令一个佣兵：“你，去墓碑那瞧瞧。”</p>
<p>那佣兵向前走了两三步，想到沿路看到那些惨景，顿觉腿脚发软，不知脚下被什么绊了一下，便跌倒地上，然后爬起来就极速转身往回跑。</p>
<p>“没用的东西，你怕什么？亏你还是我们白龙班的兵！” 紮惑浮气愤地吼道。他一脚将这佣兵踢开，拿过一只探照灯，走近碑前，用灯一照，看见碑上写的文字，尖叫一声，抛下探照灯，吓得只往后退。其他佣兵听到这尖叫声个个吓得浑身发抖，纷纷丢掉手中灯，直往后退。暴不明白是怎么回事，一个人拿着灯木呆的站在一旁。</p>
<p>紮惑浮颤抖着声音对暴说：“这是向前辈的坟墓，碑上的名字，怎地……怎么……”</p>
<p>“别慌，我来看看！” 暴说。她一直都镇定自若，此时言语中也透出几分惊慌来。暴拿着灯走到墓前，弯腰察看。 “米。。。米生。”她说，“这雪叶竟然把这坟墓挖了，把米生的尸体埋到这里了。看来她是疯了，现在还想着要米生成为白龙班的名人。”</p>
<p>一个佣兵带着发颤的声音问道：“那旁边的骨骸是……是不是……向前辈的……”</p>
<p>他的话还没说完，忽然听见远处传来一阵阵女人的狂笑声，笑声过后，一阵沉寂。在这无声无息的时候，每个人的心都在颤抖。大家屏住呼吸，仔细辨视四周情况。</p>
<p>只听暴大叫一声：“不好！”她手中的灯“哐噹”一声掉在地上，那些佣兵见状，四处乱跑开去。暴和紮惑浮手拉着手，背靠着背，手中拿着武器，做好迎敌的准备。突然，传来一阵佣兵的惨叫声，其中还杂有野兽的怒吼声，声音像是很远，又像就在身边发生。一会，又静了下来。暴对背后的紮惑浮说：“紮惑浮前辈，我们在明处，敌人在暗处，我们被动，快点走吧。”半响，紮惑浮没有答话，暴心想：“紮惑浮是不是意在叫我不要出声，待敌人走远我们再走？”</p>
<h2 id="雪叶对决暴"><a href="#雪叶对决暴" class="headerlink" title="雪叶对决暴"></a>雪叶对决暴</h2><p>想到这里，暴心里平静下来，转过脸去，看到紮惑浮木然不动。暴感觉不对劲，往地下一看，月光下忽然发现有个很大的龙爪印。暴心里一惊，身子一转，紮惑浮的身体失去支撑倒在了地上，地上躺着的紮惑浮胸口已被划破。她抬头一看，月湖模样的雪叶正威武地站在暴的面前。</p>
<p>暴这时已经不知道害怕了，她镇定地说：“雪叶，你也想杀了我吗？你今天杀了这么多人，他们大多数对米生的是不知情的，你为什么这样残酷？滥杀无辜！”</p>
<p>雪叶说：“你怎么说都没有用，我的思想现在已经不完全属于我了。杀人的一瞬间，我的思想是尤科斯控制的。但是我不后悔，我恨白龙班，恨里面所有的人，其中也包括你！你不要以为飞逸喜欢你，你就有多么了不起。我现在就用白龙班的功夫和你较量一下，看看你到底有多强。”</p>
<p>暴说：“我从来没说我比你强！在学府的升级竞赛中已经证明了你最强。我当然不是你的对手。”</p>
<p>雪叶说：“那是因为你瞧不起我，以为不屑和我一比，放弃了参加升级竞赛。现在我非要你和我比一比不可！”</p>
<p>说完，雪叶双脚跳起，挥起白龙爪双刀奋力向暴砍去。暴侧身左滚翻，躲过这一刀。然后半跪地上，迅速拔出背后的龙爪长刀，一场长刀对双刀的决斗开始了。雪叶的双刀虽然没有暴的长刀那么长，却利于近身保护，而且出招频率比长刀高许多。雪叶这时使出白龙班上位的辅助魔法“莲步轻舞”，使得本就出招速度很快的双刀变得更快。暴所持的长刀舞动范围大，虽进攻频率不高，但和雪叶的双刀一样善于防御。暴便用白龙班下位招式“白龙花妖”， 奋力舞动长刀左右上下抵挡进攻，“噹–噹，噹–噹”，火星四溅。雪叶不断逼迫，暴渐渐显得招架不住，但她情急不慌，当雪叶不断将攻击频率调高，直到频率快到最高点收不住手时，暴将双手握刀改为只手握刀，身子来一个一百八十度大旋转，迅速将刀一下收回，再来旋转一个一百八十度，跨前一步，双手握刀，一个半月斩砍向雪叶背部，雪叶这时由于进攻速度太快，身体直向前冲，握刀的双手来不及收回，眼看暴的长刀就要将自己一劈两半，只得猛地向前一扑。暴的这一砍配上了“绝色七彩”里“世外桃源”魔法，使得黑暗的夜空亮出一片片桃花幻影，桃花瓣被暴的半月斩的余波划成两半片片落下，长刀一直砍向雪叶的背部，雪叶虽然猛向前冲，但仍没躲过这一刀，只是没被砍断身体。但由于雪叶今天没穿屠龙护身衣，结果背部被划开一条大口子，扑的涌出血来。雪叶一只手撑着地面，另一只手背向身后捂住背上的伤口转过身来，口中含着血，眼睛恶狠狠地看着暴。暴站在那里手握长刀岿然不动。</p>
<p>雪叶将口中的血往地上一吐，抬起手腕用袖子拭去口角的血迹，对暴说：“你竟然只用白龙班下位招式就能够击中我，佩服！”</p>
<p>暴心想：“雪叶本就不擅长白龙班的武功，双刀对付身体庞大行动缓慢的人比较合适，而她却使用双刀这种武器对付我这个机灵的女子，这说明她使用白龙班的武功还不够娴熟。但是如果她使用斑国班的魔法，我就没法对付了，她竞赛时都是用斑国班的魔法战胜的对手。如今我生死攸关，该怎样对付她呢？”</p>
<p>雪叶看暴站在对面正犹豫不决，她对暴说：“我刚才说了，这次我只用白龙班的功夫和你比试。我说话算数，我认输了。”</p>
<p>暴松了一口气，将握紧长刀的手松开了。</p>
<p>雪叶忽然狂笑着道：“我虽然输了，但是你的命我还是要的。哈哈！”</p>
<p>暴一吓，握刀的手马上又紧了起来。</p>
<h2 id="飞逸之死"><a href="#飞逸之死" class="headerlink" title="飞逸之死"></a>飞逸之死</h2><p>白羽号飞船里，飞逸正在她的房间里编写程序，突然屏幕上面弹出消息：暴请求飞船开舱。飞逸启开飞船外监视屏幕，看见只有暴驾驶的‘白艳公主’机器人在飞船外空徘徊，紮惑浮和其他佣兵的机器人都没看见。飞逸拨通中央控制室，与凌穆通话。</p>
<p>飞逸的形象出现在白羽号飞船中央控制室大屏幕上，她对凌穆说：“听我的命令，千万不要开舱，待我观察观察再作决定。”</p>
<p>小胖易慧奇怪的询问道：“为什么不开舱啊？你这不是要害死暴吗？”</p>
<p>飞逸说：“你们听我的就行了。不用问那么多！”</p>
<p>易慧非常生气，示意小侃去劝飞逸老师，小侃见没人敢反对飞逸，他也就像没看到小易的示意一样没有吭声。</p>
<p>飞逸慌忙将编写完成的部分程序传给凌穆，另外还附上了几十套应对不同情况的方案。凌穆仔细琢磨这些方案来。感到这些方案预想到了所有可能发生的情况，越发佩服起飞逸老师来了。</p>
<p>凌穆心想：“飞逸不愧是白羽号的设计师，她对白羽号每处设置每个部件都了如指掌，只有她才能够写出这么好的应对方案来。难怪敌人一直不敢对白羽号动手。以前除了飞逸以外，对白羽号这么了解的只有暴。现在飞逸怀疑暴被雪叶用‘阴阳二气诀’合体了，不让进入飞船来，我可以乘这个机会好好了解一下白羽号。飞逸确实是制造飞船的天才，她使用其他白龙班飞船没有的新技术，在白羽号飞船上装备了隔热胶体，因此飞船可以进入大气圈；它表面还装备了叠层装甲，因此在战斗中不易被击毁。在武器装备方面，白羽号主要的武器是双重阳电子破城炮，安装在飞船“两腿”的前端。白羽号飞船还装备有其他一系列武器，例如‘菲尔德’光束炮，‘瓦冷特’线性枪，‘艾格斯拉格’巴尔干炮，还有大量飞弹发射管。这些都是白龙班的著名前辈精心研究的学术成果，飞逸学习和继承他们的成果，并加以改进，然后都用到了白羽号上，使得这个战斗性飞船成为白龙班名副其实的最优秀的飞船。只可惜白羽号飞船造价实在太高，无法批量生产，不然，我们白龙班还害怕其他人来侵犯吗？”</p>
<p>暴看白羽号迟迟不开舱，开启视频通话呼叫。暴这时出现在白羽号中央控制室大屏幕上，她神情紧张地喊道：“飞逸老师，请你赶快给我打开舱门，雪叶马上就要追过来了。”</p>
<p>飞逸在飞船里看到屏幕上暴焦急的样子，心想：“装得真够像的，当年雪叶你扮月湖瞒了我那么久，今天还想装扮成暴再来骗我吗？如果真的还有另外一个雪叶追你，她早就该追来了，还能给你这么多时间。何况那么多人都死了，暴怎么可能一个人回来？雪叶啊雪叶，你以为我偏爱暴就会对暴放松警惕，你就想利用合体暴混进飞船，如此小伎俩还想骗我，你太小看我了！”</p>
<p>飞逸在大屏幕上对凌穆下命令说：“凌穆，实施方案一，立即向暴攻击。”</p>
<p>凌穆命令机器人佣兵部队出动，四台组成一队，派出八队，阵型为每两队占据东西南北一方，每方向有两队，这两队再围成一个小方圈。这样便在同一个平面上做到了天衣无缝，为防止被困敌人向上飞行以求脱逃，由白羽号飞船监视阵型上下方，它的双重阳电子破城炮分别装在飞船左右两侧巨大的“长腿”上，左侧负责上方，右侧负责下方。暴看见这八队机器人，排着整整齐齐的队形向自己冲过来，还没等他们展开阵势，暴立即驾驶‘白艳公主’机器人往后一转，加大马力迅速后撤，也不高飞，也不降低。那八队机器人将阵型展开，围住‘白艳公主’，不断向它开火。当火力集中到一点时，暴急速一侧身，同时来个大翻转，掏出高能量光束步枪，对准最左侧一架机器人连发五枪百分之二跟踪光速弹将其打得粉碎。如此反复数次，一行三十二架机器人只剩下了二十来架。</p>
<p>飞逸看到这里大发雷霆，她吼道：“废物，你们这群雇佣兵是怎么训练的，三十多架居然没法围住一台机器人。”</p>
<p>凌穆看着屏幕上的战斗画面，心想：“飞逸平日极少顾及白羽号上雇佣兵的训练，那是因为她自己只注意重点尖子，又几乎将所有时间都用到设计飞船和改进飞船上了，这点她自己应该十分清楚。她这样的发火，无非是因为暴的驾驶技术远远高于这群雇佣兵，他们未能把暴引入白羽号的射程，使得飞逸引以为豪的白羽号无法发挥威力罢了。”</p>
<p>过了一会，飞逸见雇佣兵机器人实在无能，便对凌穆说：“将‘左腿’破城炮射向水平方向。”</p>
<p>凌穆听到这话十分不解，说：“那些雇佣兵怎么办。”</p>
<p>   “这样耗下去，他们迟早都要被击毙，还不如让他们的牺牲起些作用。” 飞逸不耐烦的说。</p>
<p>“我觉得这样做很不好。”凌穆忙说，“这样做一来会引起还在白羽号里的其他雇佣兵不满，致使白羽号内部人心浮动。二来，破城炮射击范围大，可是射速却很慢。它对于向上爬高和向下俯冲的机器人，因为他们中途无法急速改变方向，射速慢的倒不是问题。但是对于处于水平飞行的机器人，警告提示一出现，它只要马上朝上或向下一飞，很轻松地就能躲过破城炮的射击。”</p>
<p>飞逸听完凌穆这番话，笑着说道：“凌穆，我没有看错你，你不愧是个好学生。但是你多虑了！现在是何等情况？你看现在，整个白龙班几乎就要灭亡，无数雇佣兵兄弟都已战死。现在他们心里想的就只有消灭敌人的念头。眼前这点牺牲算得了什么？你说的第二个问题确实存在。我们同时开启两侧的电子破城炮，雪叶（暴身）不会知道打她的炮是瞄向上方还是向下方的。我们现在用瞄向上方的左侧破城炮向水平方向发射。白羽号大范围的炮除了这两台破城炮外，白羽号中部还有一台‘艾格斯拉格’巴尔干炮射击范围最大。但白羽号此前尚未做好作战准备，现在飞船的能量还不足以开启这台巴尔干炮，不然这次雪叶定死无疑。少了这台大炮，为防止她向上逃，我们就启用扩霰弹头飞弹，来打她个天罗地网。”</p>
<p>凌穆说：“飞逸老师考虑得周到，我马上照做。”</p>
<p>这时，大屏幕上突然出现暴的头像，暴说：“我是暴啊，你们在干什么，飞逸老师……”接着讯号突然消失，另一侧屏幕上显示暴又一个突然转身将另一台机器人击毙。</p>
<p>飞逸对凌穆说：“不要犹豫，赶紧执行命令！”</p>
<p>凌穆立刻调好控制台上数据，破城炮轰地一声射向雇佣兵机器人和暴的‘白艳公主’，暴驾驶着‘白艳公主’迅速向上斜飞过去，‘白艳公主’正准备向上爬高飞行，发现身边有颗与自己并排飞行的扩霰弹头，便伸手抓住它，用力抛向下方，扩霰弹在被抛出的瞬间爆炸散开，却毫未伤及‘白艳公主’。原来这扩霰弹是飞逸特别研制的定时炸弹，扩霰弹的爆炸时间正是白雪公主向上爬高飞行的时间，在这即将爆炸的一瞬间暴正好抓住扩霰弹并向下抛去，因此抛出就爆炸了。向下抛的原因是，这扩霰弹为了扩大爆炸范围，爆炸的时候是扩散向下，下方百米范围全被覆盖。</p>
<p>飞逸看到屏幕上的情景，急忙赶到中央控制室去，她要亲自操作射击。</p>
<p>飞逸站在凌穆旁对她说：“我这二十六个方案里面，前十个是白羽号配合机器人部队对付一到十个数目敌人的战略，从十一到十九是白羽号配合一名王牌驾驶员对付一个强大敌人的战略，二十到二十六是白羽号配合两名王牌驾驶员对付一个强大敌人的战略。如今白羽号里能够称得上王牌的驾驶员就只有你和我了，我们现在开始实施第十一号方案，你赶紧去驾驶你的机器人出去按照预定方案与敌人周旋，与我随时保持通讯联络。”</p>
<p>飞逸马上在控制台亲自调整部署起白羽号来。</p>
<p>凌穆走到中央控制室门口，又犹疑地转过身来对飞逸说：“从刚才暴的举动看，她对你的方案十分了解，你还认为她是雪叶吗？”</p>
<p>飞逸双手撑在控制台上，缓缓扭过头来，但她脸朝下低着头，并没看凌穆一眼，只是低声说：“这些我心里有数，你照我的话做就是了，不必多问！”凌穆担心地说道：“如果她不是雪叶，我们这样做……那……”</p>
<p>飞逸咬了咬下嘴唇，瞪大眼睛看着凌穆说：“怎么说呢？我之所以一直怀疑暴是雪叶，是因为到现在雪叶的真身都未出现，我真担心她将我跟暴讲的那些东西都学了过去，其中也包括这二十六套白羽号作战方案。”</p>
<p>凌穆默默点了点头，就什么再也没有说，大步跨出了大门。</p>
<p>飞逸控制着白羽号和驾驶机器人的凌穆配合，将那九套方案乱序排列使了个遍，结果都被暴破解了。飞逸马上把易慧叫到控制台前。</p>
<p>飞逸说：“现在形势非常严峻，我现在将白羽号交给你来操作。”</p>
<p>接着飞逸开启二十以后的方案，指着屏幕对易慧说：“我现在驾驶机器人出去帮助凌穆，你按照提示进行设置选择，好好配合我们对敌作战。随时保持联络，按照我的命令进行操作，不要随便自己决定，有疑问一定要先问我，不然我们就都完了。”</p>
<p>易慧笑着接受了任务，并叫飞逸放心，飞逸还是有些担心，虽然犹豫不决，但她还是毅然驾驶起机器人飞出了白羽号舱门。</p>
<p>飞逸驾驶着机器人配合白羽号和凌穆使用了两三套方案后，暴终于被击中，暴的‘白艳公主’左臂被打烂。这时远处突然传来一阵阵野兽般的吼叫声，瞬时一道白光从黑暗中闪电般划过，一条大白龙，摇摆着蛇形身躯急速过来，随之传来一声巨大的踏击声，凌穆的机器人被踩扁，接着，轰隆一声，炸得粉碎。</p>
<p>飞逸这一瞬间才明白过来，暴没有被雪叶合体，雪叶利用她的防范疑心，躲在一旁坐山观虎斗，让她自己把她辛苦培养的暴杀了，这时她心中悔恨交加，感到后悔极了。</p>
<p>飞逸失声大叫凌穆和紮惑浮的名字，叫声悲愤凄惨。</p>
<p>白龙停在飞逸驾驶的机器人面前，将头向后一昂，喉咙里发出咕噜咕噜的声音。飞逸立刻镇静下来，当白龙张口沿斜下四十五度角喷出火柱时，她开启机器人背部向上喷气装置，机器人立刻向下俯冲躲过火柱，就在向下俯冲的瞬间，飞逸让机器人向暴的‘白艳公主’所在的地面开出一炮，暴所在地下一塌陷，暴的‘白雪公主’立刻埋了进去，使得暴正好躲过上方向下喷射过来的火柱，破坏了白龙妄图一举两得的一击。飞逸在白龙欲挺直身体再次发起攻击的间隙，拉起土堆里的白艳公主，迅速向上空飞去。白龙摆动龙头从右下方沿四十五度角原路再喷火柱时。飞逸急忙将机器人向后一退，转身朝白羽号飞去。</p>
<p>易慧此刻遇到这突如其来的情况，一下子没了办法。</p>
<p>飞逸打开通讯频道对易慧说：“易慧，易慧，你不要紧张……赶紧打开飞船舱门，待我和白龙进入后，听我命令开启第三百九十一频道，输入‘骨牢’后确定，这时旁边会出现‘启动’按钮，我叫你按时，你再按。记住了，不要按早了，也不要按晚了。”</p>
<p>易慧连忙应答。飞逸驾驶机器人手托着重量大于自己一倍多的‘白艳公主’，沉重地向飞船飞去，速度降了将近三分之一。眼看白龙紧跟在后面追赶的速度越来越快，飞逸心急如焚，立刻写个信息发给了暴。接近舱门时，白龙已近在咫尺。白龙将大爪一挥，飞逸旋转着向上一飞，利用旋转的力量使劲将‘白艳公主’甩进舱门，自己却被白龙一口咬住，由于惯性，白龙一头扎进飞船舱门。白龙由于身形巨大，进舱时撞得白羽号剧烈晃动起来。此时易慧刚刚输完“骨牢”按下‘确定’，这一晃动突然将她跌倒，她赶紧爬起来，伸手就去抓控制台，一不小心碰到了‘启动’按钮，出舱室立刻哐啷哐啷的响了起来。暴被这剧烈的震动声惊醒，立刻明白了自己的处境，急忙开动失去平衡的‘白艳公主’，斜着身子艰难地朝最近的舱室飞去。这时，出舱室上下左右四侧隔板缓缓打开，四大块由白龙骨构成的栅栏形成一个巨大的牢笼，将进舱来的白龙死死困住。然后，船舱底部舱门折叠打开，将这牢笼丢了下去，白羽号飞船摆脱累赘，快速向远处飞去。</p>
<p>白龙甩掉口中的机器人，发出一道光闪，雪叶立即变回原形。飞逸从损坏了的机器人驾驶舱缓缓爬出。雪叶站在一旁手持白龙爪双刀，气势汹汹地看着飞逸。</p>
<p>飞逸看了雪叶一眼，忍不住哈哈大笑：“起初我还担心暴会和你一起困在这骨牢里，现在她脱险了，看来白龙班不会就这么完了。哈哈！论单挑，我不是你的对手，要杀要刮请便吧。”</p>
<p>雪叶突然扑倒在地上，双手抱住头，来回翻滚起来，一副疼痛难忍的模样。</p>
<p>疼痛过后，雪叶自言自语起来：“可恶，还是让那么多人跑了……跑了……行了，就此打住吧，你已经杀了那么多人了，快……快打住吧。不行，米生不在了，我也不想活了！你……你杀了我吧！不……我还想见皓月……我不能死……我一定要见……”</p>
<p>飞逸见雪叶反复不断地在那儿嘀咕着什么，觉得雪叶一定是受到了什么刺激，疯了！于是不住的摇着头，叹着气。</p>
<p>转眼间，骨牢里弥漫出一股黑烟。原来是雪叶在不断转换魔法，妄图化解自己身体分子从骨牢的缝隙逃离，可是看似栅栏的骨牢，却如同铜墙铁壁一般四周什么也钻不出去。</p>
<p>飞逸见雪叶使出十八般武艺皆都拿这骨牢没有办法，笑道：“这骨牢可是由阿斯来班著名的魔法专家查穆尔老师设计制造的，虽然你掌握了以魔法著称的斑国班的魔法和尤科斯的一半魔力，但是光凭这些还是不够的，还需要一定时日的修炼才能将你的魔力提到能够破解查穆尔老师的魔法的高度，可是在你修炼到这个程度以前你就要饿死在这里。哈哈！你终于可以见到你的米……”</p>
<p>话还没有说完，雪叶左手一刀已划开飞逸的喉咙，同时右手那刀剖开了飞逸的胸脯。</p>
<p>雪叶将手中的双刀插在地下，低着头不住哭泣，她哭啊哭啊，眼眶都哭得流出血来，她还是白天黑夜不住哭。在她四周全是白龙骨栅栏，一点能吃的东西都没有。这时，她所见之物已呈模糊状，再这样哭泣几天，她双目就要失明了。</p>
<p>这天夜间，雪叶模糊间见到一个红发少年，他上身穿着红背心，披着一件黑色长风衣，背上背着一把金色大长刀，下身穿着一件黑色布裤子，牵着一匹背甲龙。哼着小曲，踏着轻轻的步子朝自己这边走过来。</p>
<p>雪叶从地上缓缓爬起，双手抓着骨牢的白龙骨，颤声喊道：“米……米生，米生，是你吗？”</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这是我十二年前写的一篇小说。当年每天早上8点半上班，为了写这篇，我四点起床，写到早饭前，坚持了好几周才完成。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;
    
    </summary>
    
      <category term="My novel" scheme="http://ming1016.github.io/categories/My-novel/"/>
    
    
      <category term="Novel" scheme="http://ming1016.github.io/tags/Novel/"/>
    
  </entry>
  
  <entry>
    <title>这次swift大会分享准备的幻灯片和 demo</title>
    <link href="http://ming1016.github.io/2018/09/17/produce-slides-of-third-at-swift-conference/"/>
    <id>http://ming1016.github.io/2018/09/17/produce-slides-of-third-at-swift-conference/</id>
    <published>2018-09-17T02:04:11.000Z</published>
    <updated>2021-04-11T14:42:09.926Z</updated>
    
    <content type="html"><![CDATA[<p>第三届在北京举办的@swift大会，我分享了用 swift 写解释器的思路，这个解释器 demo 我放在了 github 上，地址在 <a href="https://github.com/ming1016/HTN/tree/master/Sources/Core/OC">https://github.com/ming1016/HTN/tree/master/Sources/Core/OC</a> 。demo 支持简单的几个 OC 语法，按照这个架子和思路大家可以当作一个去支持一个语言，和设计自己特定语法的雏形来练手。当年前端人人都在用的 babel 转义器的作者也写过一个雏型例子，看完这个雏型就大致了解了 babel 这个工程整个解析的思路，工程代码看起来轻松不少，从里面也能很快的学到了很多自己需要的知识。大会上我还提到了一个 demo，地址<a href="https://github.com/ming1016/ArchitectureDemo">https://github.com/ming1016/ArchitectureDemo</a>。这个 demo 是对 casatwy 的 <a href="https://github.com/casatwy/CTMediator">CTMediator</a> 扩展了一些 aop 和状态管理功能的一个例子，加了些链式写法，在接口里留了一个 eval 的方法。有兴趣也可以结合前一个 demo 的思路去实现这个接口的方法，让这个接口可以支持程序运行中解释执行想支持的语法内容。</p>
<p>这次大会分享的幻灯片制作方法采用了漫画制作的手法，先前看过 NHK 的漫勉这个节目了解了一些日本漫画家画漫画流程。我在这次的制作过程中，使用了更多的视角，不过运用的还不够好，以后会在这方面多学习下。龙珠超第3集最后几页登出一访谈鸟山明和龙珠超的漫画家。最新的龙珠超里，，另一位漫画家负责来画，鸟山明负责写龙珠超的故事和修改一些草图设计。采访时采访者要鸟山明给那漫画家提建议，鸟山明说希望能够又更多的视角来表现人物和场景。我翻了下以前龙珠的书发现这个建议果然是龙珠分镜吸引人的一个很关键的原因。取材方面，我在国家图书馆里找了很多资料，还有部分是把上次去日本玩看到喜欢的加了进去，比如浅草寺的树，白狐狸和长鼻鬼的面具，在川崎市的藤子F不二雄哆啦A梦主题馆里的看过的原画稿，还有夏季烟火大会的合服浴衣。大会完整幻灯片和草图的原尺寸（较大），我放在了网盘里：<a href="https://pan.baidu.com/s/1WlqTRodrVVksdc_43QO1Zw">https://pan.baidu.com/s/1WlqTRodrVVksdc_43QO1Zw</a></p>
<h2 id="幻灯片"><a href="#幻灯片" class="headerlink" title="幻灯片"></a>幻灯片</h2><p><img src="/uploads/produce-slides-of-third-at-swift-conference/1.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/2.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/3.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/4.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/5.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/6.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/7.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/8.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/9.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/10.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/11.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/12.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/13.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/14.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/15.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/16.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/17.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/18.PNG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/19.PNG" alt="image"></p>
<h2 id="部分草图"><a href="#部分草图" class="headerlink" title="部分草图"></a>部分草图</h2><p><img src="/uploads/produce-slides-of-third-at-swift-conference/20.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/22.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/23.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/24.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/25.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/26.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/27.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/28.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/29.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/30.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/31.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/32.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/33.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/34.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/35.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/36.jpg" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/39.jpg" alt="image"></p>
<h2 id="大会现场"><a href="#大会现场" class="headerlink" title="大会现场"></a>大会现场</h2><p><img src="/uploads/produce-slides-of-third-at-swift-conference/42.JPG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/43.JPG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/44.JPG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/45.JPG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/46.JPG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/47.JPG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/48.JPG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/40.JPG" alt="image"><br><img src="/uploads/produce-slides-of-third-at-swift-conference/41.JPG" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第三届在北京举办的@swift大会，我分享了用 swift 写解释器的思路，这个解释器 demo 我放在了 github 上，地址在 &lt;a href=&quot;https://github.com/ming1016/HTN/tree/master/Sources/Core/OC&quot;&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://ming1016.github.io/categories/Programming/"/>
    
    
      <category term="iOS" scheme="http://ming1016.github.io/tags/iOS/"/>
    
      <category term="Slides" scheme="http://ming1016.github.io/tags/Slides/"/>
    
      <category term="swift" scheme="http://ming1016.github.io/tags/swift/"/>
    
      <category term="编译" scheme="http://ming1016.github.io/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>18年上半年procreate的练习图图</title>
    <link href="http://ming1016.github.io/2018/09/14/draw-with-procreate-in-ipad-during-pre-half-in-20182/"/>
    <id>http://ming1016.github.io/2018/09/14/draw-with-procreate-in-ipad-during-pre-half-in-20182/</id>
    <published>2018-09-14T15:08:12.000Z</published>
    <updated>2021-04-11T14:42:09.917Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/1.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/2.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/3.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/4.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/5.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/6.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/7.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/8.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/9.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/10.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/11.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/12.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/13.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/14.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/15.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/16.jpg" alt=""><br><img src="/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/17.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/draw-with-procreate-in-ipad-during-pre-half-in-2018/1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/draw-with-procreate-in-ipad-d
    
    </summary>
    
      <category term="My painting" scheme="http://ming1016.github.io/categories/My-painting/"/>
    
    
      <category term="Painting" scheme="http://ming1016.github.io/tags/Painting/"/>
    
      <category term="iPad" scheme="http://ming1016.github.io/tags/iPad/"/>
    
      <category term="Procreate" scheme="http://ming1016.github.io/tags/Procreate/"/>
    
  </entry>
  
</feed>
